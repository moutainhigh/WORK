/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-5")
public class OrgOrderSummary implements org.apache.thrift.TBase<OrgOrderSummary, OrgOrderSummary._Fields>, java.io.Serializable, Cloneable, Comparable<OrgOrderSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgOrderSummary");

  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("availableMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FROZEN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FEE_SETTLE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("feeSettleTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField HIS_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("hisTotal", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HIS_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("hisTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CUR_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("curTotal", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField APPLY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("applyTotal", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField APPLY_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("applyTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REINSURANCE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("reinsuranceTotal", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REINSURANCE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("reinsuranceTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgOrderSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgOrderSummaryTupleSchemeFactory());
  }

  public int orgId; // required
  public double availableMoney; // required
  public double frozenMoney; // required
  public double feeSettleTotalMoney; // required
  public int hisTotal; // required
  public double hisTotalMoney; // required
  public int curTotal; // required
  public int applyTotal; // required
  public double applyTotalMoney; // required
  public int reinsuranceTotal; // required
  public double reinsuranceTotalMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORG_ID((short)1, "orgId"),
    AVAILABLE_MONEY((short)2, "availableMoney"),
    FROZEN_MONEY((short)3, "frozenMoney"),
    FEE_SETTLE_TOTAL_MONEY((short)4, "feeSettleTotalMoney"),
    HIS_TOTAL((short)5, "hisTotal"),
    HIS_TOTAL_MONEY((short)6, "hisTotalMoney"),
    CUR_TOTAL((short)7, "curTotal"),
    APPLY_TOTAL((short)8, "applyTotal"),
    APPLY_TOTAL_MONEY((short)9, "applyTotalMoney"),
    REINSURANCE_TOTAL((short)10, "reinsuranceTotal"),
    REINSURANCE_TOTAL_MONEY((short)11, "reinsuranceTotalMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_ID
          return ORG_ID;
        case 2: // AVAILABLE_MONEY
          return AVAILABLE_MONEY;
        case 3: // FROZEN_MONEY
          return FROZEN_MONEY;
        case 4: // FEE_SETTLE_TOTAL_MONEY
          return FEE_SETTLE_TOTAL_MONEY;
        case 5: // HIS_TOTAL
          return HIS_TOTAL;
        case 6: // HIS_TOTAL_MONEY
          return HIS_TOTAL_MONEY;
        case 7: // CUR_TOTAL
          return CUR_TOTAL;
        case 8: // APPLY_TOTAL
          return APPLY_TOTAL;
        case 9: // APPLY_TOTAL_MONEY
          return APPLY_TOTAL_MONEY;
        case 10: // REINSURANCE_TOTAL
          return REINSURANCE_TOTAL;
        case 11: // REINSURANCE_TOTAL_MONEY
          return REINSURANCE_TOTAL_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORGID_ISSET_ID = 0;
  private static final int __AVAILABLEMONEY_ISSET_ID = 1;
  private static final int __FROZENMONEY_ISSET_ID = 2;
  private static final int __FEESETTLETOTALMONEY_ISSET_ID = 3;
  private static final int __HISTOTAL_ISSET_ID = 4;
  private static final int __HISTOTALMONEY_ISSET_ID = 5;
  private static final int __CURTOTAL_ISSET_ID = 6;
  private static final int __APPLYTOTAL_ISSET_ID = 7;
  private static final int __APPLYTOTALMONEY_ISSET_ID = 8;
  private static final int __REINSURANCETOTAL_ISSET_ID = 9;
  private static final int __REINSURANCETOTALMONEY_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVAILABLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("availableMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("frozenMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE_SETTLE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("feeSettleTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIS_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("hisTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIS_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("hisTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUR_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("curTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("applyTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("applyTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REINSURANCE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("reinsuranceTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REINSURANCE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("reinsuranceTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgOrderSummary.class, metaDataMap);
  }

  public OrgOrderSummary() {
  }

  public OrgOrderSummary(
    int orgId,
    double availableMoney,
    double frozenMoney,
    double feeSettleTotalMoney,
    int hisTotal,
    double hisTotalMoney,
    int curTotal,
    int applyTotal,
    double applyTotalMoney,
    int reinsuranceTotal,
    double reinsuranceTotalMoney)
  {
    this();
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    this.frozenMoney = frozenMoney;
    setFrozenMoneyIsSet(true);
    this.feeSettleTotalMoney = feeSettleTotalMoney;
    setFeeSettleTotalMoneyIsSet(true);
    this.hisTotal = hisTotal;
    setHisTotalIsSet(true);
    this.hisTotalMoney = hisTotalMoney;
    setHisTotalMoneyIsSet(true);
    this.curTotal = curTotal;
    setCurTotalIsSet(true);
    this.applyTotal = applyTotal;
    setApplyTotalIsSet(true);
    this.applyTotalMoney = applyTotalMoney;
    setApplyTotalMoneyIsSet(true);
    this.reinsuranceTotal = reinsuranceTotal;
    setReinsuranceTotalIsSet(true);
    this.reinsuranceTotalMoney = reinsuranceTotalMoney;
    setReinsuranceTotalMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgOrderSummary(OrgOrderSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orgId = other.orgId;
    this.availableMoney = other.availableMoney;
    this.frozenMoney = other.frozenMoney;
    this.feeSettleTotalMoney = other.feeSettleTotalMoney;
    this.hisTotal = other.hisTotal;
    this.hisTotalMoney = other.hisTotalMoney;
    this.curTotal = other.curTotal;
    this.applyTotal = other.applyTotal;
    this.applyTotalMoney = other.applyTotalMoney;
    this.reinsuranceTotal = other.reinsuranceTotal;
    this.reinsuranceTotalMoney = other.reinsuranceTotalMoney;
  }

  public OrgOrderSummary deepCopy() {
    return new OrgOrderSummary(this);
  }

  @Override
  public void clear() {
    setOrgIdIsSet(false);
    this.orgId = 0;
    setAvailableMoneyIsSet(false);
    this.availableMoney = 0.0;
    setFrozenMoneyIsSet(false);
    this.frozenMoney = 0.0;
    setFeeSettleTotalMoneyIsSet(false);
    this.feeSettleTotalMoney = 0.0;
    setHisTotalIsSet(false);
    this.hisTotal = 0;
    setHisTotalMoneyIsSet(false);
    this.hisTotalMoney = 0.0;
    setCurTotalIsSet(false);
    this.curTotal = 0;
    setApplyTotalIsSet(false);
    this.applyTotal = 0;
    setApplyTotalMoneyIsSet(false);
    this.applyTotalMoney = 0.0;
    setReinsuranceTotalIsSet(false);
    this.reinsuranceTotal = 0;
    setReinsuranceTotalMoneyIsSet(false);
    this.reinsuranceTotalMoney = 0.0;
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgOrderSummary setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public double getAvailableMoney() {
    return this.availableMoney;
  }

  public OrgOrderSummary setAvailableMoney(double availableMoney) {
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    return this;
  }

  public void unsetAvailableMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  /** Returns true if field availableMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  public void setAvailableMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID, value);
  }

  public double getFrozenMoney() {
    return this.frozenMoney;
  }

  public OrgOrderSummary setFrozenMoney(double frozenMoney) {
    this.frozenMoney = frozenMoney;
    setFrozenMoneyIsSet(true);
    return this;
  }

  public void unsetFrozenMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMONEY_ISSET_ID);
  }

  /** Returns true if field frozenMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMONEY_ISSET_ID);
  }

  public void setFrozenMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMONEY_ISSET_ID, value);
  }

  public double getFeeSettleTotalMoney() {
    return this.feeSettleTotalMoney;
  }

  public OrgOrderSummary setFeeSettleTotalMoney(double feeSettleTotalMoney) {
    this.feeSettleTotalMoney = feeSettleTotalMoney;
    setFeeSettleTotalMoneyIsSet(true);
    return this;
  }

  public void unsetFeeSettleTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field feeSettleTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeSettleTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID);
  }

  public void setFeeSettleTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID, value);
  }

  public int getHisTotal() {
    return this.hisTotal;
  }

  public OrgOrderSummary setHisTotal(int hisTotal) {
    this.hisTotal = hisTotal;
    setHisTotalIsSet(true);
    return this;
  }

  public void unsetHisTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISTOTAL_ISSET_ID);
  }

  /** Returns true if field hisTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetHisTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __HISTOTAL_ISSET_ID);
  }

  public void setHisTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISTOTAL_ISSET_ID, value);
  }

  public double getHisTotalMoney() {
    return this.hisTotalMoney;
  }

  public OrgOrderSummary setHisTotalMoney(double hisTotalMoney) {
    this.hisTotalMoney = hisTotalMoney;
    setHisTotalMoneyIsSet(true);
    return this;
  }

  public void unsetHisTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field hisTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetHisTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __HISTOTALMONEY_ISSET_ID);
  }

  public void setHisTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISTOTALMONEY_ISSET_ID, value);
  }

  public int getCurTotal() {
    return this.curTotal;
  }

  public OrgOrderSummary setCurTotal(int curTotal) {
    this.curTotal = curTotal;
    setCurTotalIsSet(true);
    return this;
  }

  public void unsetCurTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURTOTAL_ISSET_ID);
  }

  /** Returns true if field curTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetCurTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __CURTOTAL_ISSET_ID);
  }

  public void setCurTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURTOTAL_ISSET_ID, value);
  }

  public int getApplyTotal() {
    return this.applyTotal;
  }

  public OrgOrderSummary setApplyTotal(int applyTotal) {
    this.applyTotal = applyTotal;
    setApplyTotalIsSet(true);
    return this;
  }

  public void unsetApplyTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYTOTAL_ISSET_ID);
  }

  /** Returns true if field applyTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYTOTAL_ISSET_ID);
  }

  public void setApplyTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYTOTAL_ISSET_ID, value);
  }

  public double getApplyTotalMoney() {
    return this.applyTotalMoney;
  }

  public OrgOrderSummary setApplyTotalMoney(double applyTotalMoney) {
    this.applyTotalMoney = applyTotalMoney;
    setApplyTotalMoneyIsSet(true);
    return this;
  }

  public void unsetApplyTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field applyTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYTOTALMONEY_ISSET_ID);
  }

  public void setApplyTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYTOTALMONEY_ISSET_ID, value);
  }

  public int getReinsuranceTotal() {
    return this.reinsuranceTotal;
  }

  public OrgOrderSummary setReinsuranceTotal(int reinsuranceTotal) {
    this.reinsuranceTotal = reinsuranceTotal;
    setReinsuranceTotalIsSet(true);
    return this;
  }

  public void unsetReinsuranceTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REINSURANCETOTAL_ISSET_ID);
  }

  /** Returns true if field reinsuranceTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetReinsuranceTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __REINSURANCETOTAL_ISSET_ID);
  }

  public void setReinsuranceTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REINSURANCETOTAL_ISSET_ID, value);
  }

  public double getReinsuranceTotalMoney() {
    return this.reinsuranceTotalMoney;
  }

  public OrgOrderSummary setReinsuranceTotalMoney(double reinsuranceTotalMoney) {
    this.reinsuranceTotalMoney = reinsuranceTotalMoney;
    setReinsuranceTotalMoneyIsSet(true);
    return this;
  }

  public void unsetReinsuranceTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REINSURANCETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field reinsuranceTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetReinsuranceTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REINSURANCETOTALMONEY_ISSET_ID);
  }

  public void setReinsuranceTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REINSURANCETOTALMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case AVAILABLE_MONEY:
      if (value == null) {
        unsetAvailableMoney();
      } else {
        setAvailableMoney((Double)value);
      }
      break;

    case FROZEN_MONEY:
      if (value == null) {
        unsetFrozenMoney();
      } else {
        setFrozenMoney((Double)value);
      }
      break;

    case FEE_SETTLE_TOTAL_MONEY:
      if (value == null) {
        unsetFeeSettleTotalMoney();
      } else {
        setFeeSettleTotalMoney((Double)value);
      }
      break;

    case HIS_TOTAL:
      if (value == null) {
        unsetHisTotal();
      } else {
        setHisTotal((Integer)value);
      }
      break;

    case HIS_TOTAL_MONEY:
      if (value == null) {
        unsetHisTotalMoney();
      } else {
        setHisTotalMoney((Double)value);
      }
      break;

    case CUR_TOTAL:
      if (value == null) {
        unsetCurTotal();
      } else {
        setCurTotal((Integer)value);
      }
      break;

    case APPLY_TOTAL:
      if (value == null) {
        unsetApplyTotal();
      } else {
        setApplyTotal((Integer)value);
      }
      break;

    case APPLY_TOTAL_MONEY:
      if (value == null) {
        unsetApplyTotalMoney();
      } else {
        setApplyTotalMoney((Double)value);
      }
      break;

    case REINSURANCE_TOTAL:
      if (value == null) {
        unsetReinsuranceTotal();
      } else {
        setReinsuranceTotal((Integer)value);
      }
      break;

    case REINSURANCE_TOTAL_MONEY:
      if (value == null) {
        unsetReinsuranceTotalMoney();
      } else {
        setReinsuranceTotalMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case AVAILABLE_MONEY:
      return Double.valueOf(getAvailableMoney());

    case FROZEN_MONEY:
      return Double.valueOf(getFrozenMoney());

    case FEE_SETTLE_TOTAL_MONEY:
      return Double.valueOf(getFeeSettleTotalMoney());

    case HIS_TOTAL:
      return Integer.valueOf(getHisTotal());

    case HIS_TOTAL_MONEY:
      return Double.valueOf(getHisTotalMoney());

    case CUR_TOTAL:
      return Integer.valueOf(getCurTotal());

    case APPLY_TOTAL:
      return Integer.valueOf(getApplyTotal());

    case APPLY_TOTAL_MONEY:
      return Double.valueOf(getApplyTotalMoney());

    case REINSURANCE_TOTAL:
      return Integer.valueOf(getReinsuranceTotal());

    case REINSURANCE_TOTAL_MONEY:
      return Double.valueOf(getReinsuranceTotalMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORG_ID:
      return isSetOrgId();
    case AVAILABLE_MONEY:
      return isSetAvailableMoney();
    case FROZEN_MONEY:
      return isSetFrozenMoney();
    case FEE_SETTLE_TOTAL_MONEY:
      return isSetFeeSettleTotalMoney();
    case HIS_TOTAL:
      return isSetHisTotal();
    case HIS_TOTAL_MONEY:
      return isSetHisTotalMoney();
    case CUR_TOTAL:
      return isSetCurTotal();
    case APPLY_TOTAL:
      return isSetApplyTotal();
    case APPLY_TOTAL_MONEY:
      return isSetApplyTotalMoney();
    case REINSURANCE_TOTAL:
      return isSetReinsuranceTotal();
    case REINSURANCE_TOTAL_MONEY:
      return isSetReinsuranceTotalMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgOrderSummary)
      return this.equals((OrgOrderSummary)that);
    return false;
  }

  public boolean equals(OrgOrderSummary that) {
    if (that == null)
      return false;

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_availableMoney = true;
    boolean that_present_availableMoney = true;
    if (this_present_availableMoney || that_present_availableMoney) {
      if (!(this_present_availableMoney && that_present_availableMoney))
        return false;
      if (this.availableMoney != that.availableMoney)
        return false;
    }

    boolean this_present_frozenMoney = true;
    boolean that_present_frozenMoney = true;
    if (this_present_frozenMoney || that_present_frozenMoney) {
      if (!(this_present_frozenMoney && that_present_frozenMoney))
        return false;
      if (this.frozenMoney != that.frozenMoney)
        return false;
    }

    boolean this_present_feeSettleTotalMoney = true;
    boolean that_present_feeSettleTotalMoney = true;
    if (this_present_feeSettleTotalMoney || that_present_feeSettleTotalMoney) {
      if (!(this_present_feeSettleTotalMoney && that_present_feeSettleTotalMoney))
        return false;
      if (this.feeSettleTotalMoney != that.feeSettleTotalMoney)
        return false;
    }

    boolean this_present_hisTotal = true;
    boolean that_present_hisTotal = true;
    if (this_present_hisTotal || that_present_hisTotal) {
      if (!(this_present_hisTotal && that_present_hisTotal))
        return false;
      if (this.hisTotal != that.hisTotal)
        return false;
    }

    boolean this_present_hisTotalMoney = true;
    boolean that_present_hisTotalMoney = true;
    if (this_present_hisTotalMoney || that_present_hisTotalMoney) {
      if (!(this_present_hisTotalMoney && that_present_hisTotalMoney))
        return false;
      if (this.hisTotalMoney != that.hisTotalMoney)
        return false;
    }

    boolean this_present_curTotal = true;
    boolean that_present_curTotal = true;
    if (this_present_curTotal || that_present_curTotal) {
      if (!(this_present_curTotal && that_present_curTotal))
        return false;
      if (this.curTotal != that.curTotal)
        return false;
    }

    boolean this_present_applyTotal = true;
    boolean that_present_applyTotal = true;
    if (this_present_applyTotal || that_present_applyTotal) {
      if (!(this_present_applyTotal && that_present_applyTotal))
        return false;
      if (this.applyTotal != that.applyTotal)
        return false;
    }

    boolean this_present_applyTotalMoney = true;
    boolean that_present_applyTotalMoney = true;
    if (this_present_applyTotalMoney || that_present_applyTotalMoney) {
      if (!(this_present_applyTotalMoney && that_present_applyTotalMoney))
        return false;
      if (this.applyTotalMoney != that.applyTotalMoney)
        return false;
    }

    boolean this_present_reinsuranceTotal = true;
    boolean that_present_reinsuranceTotal = true;
    if (this_present_reinsuranceTotal || that_present_reinsuranceTotal) {
      if (!(this_present_reinsuranceTotal && that_present_reinsuranceTotal))
        return false;
      if (this.reinsuranceTotal != that.reinsuranceTotal)
        return false;
    }

    boolean this_present_reinsuranceTotalMoney = true;
    boolean that_present_reinsuranceTotalMoney = true;
    if (this_present_reinsuranceTotalMoney || that_present_reinsuranceTotalMoney) {
      if (!(this_present_reinsuranceTotalMoney && that_present_reinsuranceTotalMoney))
        return false;
      if (this.reinsuranceTotalMoney != that.reinsuranceTotalMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_availableMoney = true;
    list.add(present_availableMoney);
    if (present_availableMoney)
      list.add(availableMoney);

    boolean present_frozenMoney = true;
    list.add(present_frozenMoney);
    if (present_frozenMoney)
      list.add(frozenMoney);

    boolean present_feeSettleTotalMoney = true;
    list.add(present_feeSettleTotalMoney);
    if (present_feeSettleTotalMoney)
      list.add(feeSettleTotalMoney);

    boolean present_hisTotal = true;
    list.add(present_hisTotal);
    if (present_hisTotal)
      list.add(hisTotal);

    boolean present_hisTotalMoney = true;
    list.add(present_hisTotalMoney);
    if (present_hisTotalMoney)
      list.add(hisTotalMoney);

    boolean present_curTotal = true;
    list.add(present_curTotal);
    if (present_curTotal)
      list.add(curTotal);

    boolean present_applyTotal = true;
    list.add(present_applyTotal);
    if (present_applyTotal)
      list.add(applyTotal);

    boolean present_applyTotalMoney = true;
    list.add(present_applyTotalMoney);
    if (present_applyTotalMoney)
      list.add(applyTotalMoney);

    boolean present_reinsuranceTotal = true;
    list.add(present_reinsuranceTotal);
    if (present_reinsuranceTotal)
      list.add(reinsuranceTotal);

    boolean present_reinsuranceTotalMoney = true;
    list.add(present_reinsuranceTotalMoney);
    if (present_reinsuranceTotalMoney)
      list.add(reinsuranceTotalMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgOrderSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableMoney()).compareTo(other.isSetAvailableMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableMoney, other.availableMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMoney()).compareTo(other.isSetFrozenMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMoney, other.frozenMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeSettleTotalMoney()).compareTo(other.isSetFeeSettleTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeSettleTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeSettleTotalMoney, other.feeSettleTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisTotal()).compareTo(other.isSetHisTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisTotal, other.hisTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisTotalMoney()).compareTo(other.isSetHisTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisTotalMoney, other.hisTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurTotal()).compareTo(other.isSetCurTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curTotal, other.curTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyTotal()).compareTo(other.isSetApplyTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTotal, other.applyTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyTotalMoney()).compareTo(other.isSetApplyTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTotalMoney, other.applyTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReinsuranceTotal()).compareTo(other.isSetReinsuranceTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReinsuranceTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reinsuranceTotal, other.reinsuranceTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReinsuranceTotalMoney()).compareTo(other.isSetReinsuranceTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReinsuranceTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reinsuranceTotalMoney, other.reinsuranceTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgOrderSummary(");
    boolean first = true;

    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableMoney:");
    sb.append(this.availableMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenMoney:");
    sb.append(this.frozenMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeSettleTotalMoney:");
    sb.append(this.feeSettleTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisTotal:");
    sb.append(this.hisTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisTotalMoney:");
    sb.append(this.hisTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curTotal:");
    sb.append(this.curTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyTotal:");
    sb.append(this.applyTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyTotalMoney:");
    sb.append(this.applyTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reinsuranceTotal:");
    sb.append(this.reinsuranceTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reinsuranceTotalMoney:");
    sb.append(this.reinsuranceTotalMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgOrderSummaryStandardSchemeFactory implements SchemeFactory {
    public OrgOrderSummaryStandardScheme getScheme() {
      return new OrgOrderSummaryStandardScheme();
    }
  }

  private static class OrgOrderSummaryStandardScheme extends StandardScheme<OrgOrderSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgOrderSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVAILABLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableMoney = iprot.readDouble();
              struct.setAvailableMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROZEN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMoney = iprot.readDouble();
              struct.setFrozenMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEE_SETTLE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeSettleTotalMoney = iprot.readDouble();
              struct.setFeeSettleTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HIS_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hisTotal = iprot.readI32();
              struct.setHisTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HIS_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hisTotalMoney = iprot.readDouble();
              struct.setHisTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUR_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curTotal = iprot.readI32();
              struct.setCurTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APPLY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyTotal = iprot.readI32();
              struct.setApplyTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPLY_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyTotalMoney = iprot.readDouble();
              struct.setApplyTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REINSURANCE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reinsuranceTotal = iprot.readI32();
              struct.setReinsuranceTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REINSURANCE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reinsuranceTotalMoney = iprot.readDouble();
              struct.setReinsuranceTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgOrderSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.availableMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.frozenMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEE_SETTLE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.feeSettleTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIS_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.hisTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIS_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.hisTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.curTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.applyTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.applyTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REINSURANCE_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.reinsuranceTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REINSURANCE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.reinsuranceTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgOrderSummaryTupleSchemeFactory implements SchemeFactory {
    public OrgOrderSummaryTupleScheme getScheme() {
      return new OrgOrderSummaryTupleScheme();
    }
  }

  private static class OrgOrderSummaryTupleScheme extends TupleScheme<OrgOrderSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgOrderSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrgId()) {
        optionals.set(0);
      }
      if (struct.isSetAvailableMoney()) {
        optionals.set(1);
      }
      if (struct.isSetFrozenMoney()) {
        optionals.set(2);
      }
      if (struct.isSetFeeSettleTotalMoney()) {
        optionals.set(3);
      }
      if (struct.isSetHisTotal()) {
        optionals.set(4);
      }
      if (struct.isSetHisTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetCurTotal()) {
        optionals.set(6);
      }
      if (struct.isSetApplyTotal()) {
        optionals.set(7);
      }
      if (struct.isSetApplyTotalMoney()) {
        optionals.set(8);
      }
      if (struct.isSetReinsuranceTotal()) {
        optionals.set(9);
      }
      if (struct.isSetReinsuranceTotalMoney()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetAvailableMoney()) {
        oprot.writeDouble(struct.availableMoney);
      }
      if (struct.isSetFrozenMoney()) {
        oprot.writeDouble(struct.frozenMoney);
      }
      if (struct.isSetFeeSettleTotalMoney()) {
        oprot.writeDouble(struct.feeSettleTotalMoney);
      }
      if (struct.isSetHisTotal()) {
        oprot.writeI32(struct.hisTotal);
      }
      if (struct.isSetHisTotalMoney()) {
        oprot.writeDouble(struct.hisTotalMoney);
      }
      if (struct.isSetCurTotal()) {
        oprot.writeI32(struct.curTotal);
      }
      if (struct.isSetApplyTotal()) {
        oprot.writeI32(struct.applyTotal);
      }
      if (struct.isSetApplyTotalMoney()) {
        oprot.writeDouble(struct.applyTotalMoney);
      }
      if (struct.isSetReinsuranceTotal()) {
        oprot.writeI32(struct.reinsuranceTotal);
      }
      if (struct.isSetReinsuranceTotalMoney()) {
        oprot.writeDouble(struct.reinsuranceTotalMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgOrderSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.availableMoney = iprot.readDouble();
        struct.setAvailableMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.frozenMoney = iprot.readDouble();
        struct.setFrozenMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.feeSettleTotalMoney = iprot.readDouble();
        struct.setFeeSettleTotalMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hisTotal = iprot.readI32();
        struct.setHisTotalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hisTotalMoney = iprot.readDouble();
        struct.setHisTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.curTotal = iprot.readI32();
        struct.setCurTotalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.applyTotal = iprot.readI32();
        struct.setApplyTotalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.applyTotalMoney = iprot.readDouble();
        struct.setApplyTotalMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reinsuranceTotal = iprot.readI32();
        struct.setReinsuranceTotalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reinsuranceTotalMoney = iprot.readDouble();
        struct.setReinsuranceTotalMoneyIsSet(true);
      }
    }
  }

}


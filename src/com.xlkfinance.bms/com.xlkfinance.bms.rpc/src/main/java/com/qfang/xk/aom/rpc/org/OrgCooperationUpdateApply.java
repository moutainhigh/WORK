/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgCooperationUpdateApply implements org.apache.thrift.TBase<OrgCooperationUpdateApply, OrgCooperationUpdateApply._Fields>, java.io.Serializable, Cloneable, Comparable<OrgCooperationUpdateApply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgCooperationUpdateApply");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OLD_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVATE_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("activateCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_ACTIVATE_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldActivateCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PLAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField OLD_PLAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPlanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FUND_SIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fundSizeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField OLD_FUND_SIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldFundSizeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoneyProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OLD_ASSURE_MONEY_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("oldAssureMoneyProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField OLD_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ACTUAL_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField OLD_ACTUAL_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldActualFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField SINGLE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUpperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField OLD_SINGLE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldSingleUpperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoneyRemark", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField OLD_ASSURE_MONEY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldAssureMoneyRemark", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField CREATER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createrName", org.apache.thrift.protocol.TType.STRING, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgCooperationUpdateApplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgCooperationUpdateApplyTupleSchemeFactory());
  }

  public int pid; // required
  public int orgId; // required
  public double creditLimit; // required
  public double oldCreditLimit; // required
  public double activateCreditLimit; // required
  public double oldActivateCreditLimit; // required
  public double planRate; // required
  public double oldPlanRate; // required
  public double fundSizeMoney; // required
  public double oldFundSizeMoney; // required
  public double assureMoneyProportion; // required
  public double oldAssureMoneyProportion; // required
  public double assureMoney; // required
  public double oldAssureMoney; // required
  public double actualFeeRate; // required
  public double oldActualFeeRate; // required
  public double singleUpperLimit; // required
  public double oldSingleUpperLimit; // required
  public String assureMoneyRemark; // required
  public String oldAssureMoneyRemark; // required
  public int applyStatus; // required
  public String remark; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public String createrName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ORG_ID((short)2, "orgId"),
    CREDIT_LIMIT((short)3, "creditLimit"),
    OLD_CREDIT_LIMIT((short)4, "oldCreditLimit"),
    ACTIVATE_CREDIT_LIMIT((short)5, "activateCreditLimit"),
    OLD_ACTIVATE_CREDIT_LIMIT((short)6, "oldActivateCreditLimit"),
    PLAN_RATE((short)7, "planRate"),
    OLD_PLAN_RATE((short)8, "oldPlanRate"),
    FUND_SIZE_MONEY((short)9, "fundSizeMoney"),
    OLD_FUND_SIZE_MONEY((short)10, "oldFundSizeMoney"),
    ASSURE_MONEY_PROPORTION((short)11, "assureMoneyProportion"),
    OLD_ASSURE_MONEY_PROPORTION((short)12, "oldAssureMoneyProportion"),
    ASSURE_MONEY((short)13, "assureMoney"),
    OLD_ASSURE_MONEY((short)14, "oldAssureMoney"),
    ACTUAL_FEE_RATE((short)15, "actualFeeRate"),
    OLD_ACTUAL_FEE_RATE((short)16, "oldActualFeeRate"),
    SINGLE_UPPER_LIMIT((short)17, "singleUpperLimit"),
    OLD_SINGLE_UPPER_LIMIT((short)18, "oldSingleUpperLimit"),
    ASSURE_MONEY_REMARK((short)19, "assureMoneyRemark"),
    OLD_ASSURE_MONEY_REMARK((short)20, "oldAssureMoneyRemark"),
    APPLY_STATUS((short)21, "applyStatus"),
    REMARK((short)22, "remark"),
    CREATER_DATE((short)23, "createrDate"),
    CREATER_ID((short)24, "createrId"),
    UPDATE_ID((short)25, "updateId"),
    UPDATE_DATE((short)26, "updateDate"),
    PAGE((short)27, "page"),
    ROWS((short)28, "rows"),
    CREATER_NAME((short)29, "createrName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // CREDIT_LIMIT
          return CREDIT_LIMIT;
        case 4: // OLD_CREDIT_LIMIT
          return OLD_CREDIT_LIMIT;
        case 5: // ACTIVATE_CREDIT_LIMIT
          return ACTIVATE_CREDIT_LIMIT;
        case 6: // OLD_ACTIVATE_CREDIT_LIMIT
          return OLD_ACTIVATE_CREDIT_LIMIT;
        case 7: // PLAN_RATE
          return PLAN_RATE;
        case 8: // OLD_PLAN_RATE
          return OLD_PLAN_RATE;
        case 9: // FUND_SIZE_MONEY
          return FUND_SIZE_MONEY;
        case 10: // OLD_FUND_SIZE_MONEY
          return OLD_FUND_SIZE_MONEY;
        case 11: // ASSURE_MONEY_PROPORTION
          return ASSURE_MONEY_PROPORTION;
        case 12: // OLD_ASSURE_MONEY_PROPORTION
          return OLD_ASSURE_MONEY_PROPORTION;
        case 13: // ASSURE_MONEY
          return ASSURE_MONEY;
        case 14: // OLD_ASSURE_MONEY
          return OLD_ASSURE_MONEY;
        case 15: // ACTUAL_FEE_RATE
          return ACTUAL_FEE_RATE;
        case 16: // OLD_ACTUAL_FEE_RATE
          return OLD_ACTUAL_FEE_RATE;
        case 17: // SINGLE_UPPER_LIMIT
          return SINGLE_UPPER_LIMIT;
        case 18: // OLD_SINGLE_UPPER_LIMIT
          return OLD_SINGLE_UPPER_LIMIT;
        case 19: // ASSURE_MONEY_REMARK
          return ASSURE_MONEY_REMARK;
        case 20: // OLD_ASSURE_MONEY_REMARK
          return OLD_ASSURE_MONEY_REMARK;
        case 21: // APPLY_STATUS
          return APPLY_STATUS;
        case 22: // REMARK
          return REMARK;
        case 23: // CREATER_DATE
          return CREATER_DATE;
        case 24: // CREATER_ID
          return CREATER_ID;
        case 25: // UPDATE_ID
          return UPDATE_ID;
        case 26: // UPDATE_DATE
          return UPDATE_DATE;
        case 27: // PAGE
          return PAGE;
        case 28: // ROWS
          return ROWS;
        case 29: // CREATER_NAME
          return CREATER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __CREDITLIMIT_ISSET_ID = 2;
  private static final int __OLDCREDITLIMIT_ISSET_ID = 3;
  private static final int __ACTIVATECREDITLIMIT_ISSET_ID = 4;
  private static final int __OLDACTIVATECREDITLIMIT_ISSET_ID = 5;
  private static final int __PLANRATE_ISSET_ID = 6;
  private static final int __OLDPLANRATE_ISSET_ID = 7;
  private static final int __FUNDSIZEMONEY_ISSET_ID = 8;
  private static final int __OLDFUNDSIZEMONEY_ISSET_ID = 9;
  private static final int __ASSUREMONEYPROPORTION_ISSET_ID = 10;
  private static final int __OLDASSUREMONEYPROPORTION_ISSET_ID = 11;
  private static final int __ASSUREMONEY_ISSET_ID = 12;
  private static final int __OLDASSUREMONEY_ISSET_ID = 13;
  private static final int __ACTUALFEERATE_ISSET_ID = 14;
  private static final int __OLDACTUALFEERATE_ISSET_ID = 15;
  private static final int __SINGLEUPPERLIMIT_ISSET_ID = 16;
  private static final int __OLDSINGLEUPPERLIMIT_ISSET_ID = 17;
  private static final int __APPLYSTATUS_ISSET_ID = 18;
  private static final int __CREATERID_ISSET_ID = 19;
  private static final int __UPDATEID_ISSET_ID = 20;
  private static final int __PAGE_ISSET_ID = 21;
  private static final int __ROWS_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("oldCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTIVATE_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("activateCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_ACTIVATE_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("oldActivateCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("planRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_PLAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("oldPlanRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_SIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("fundSizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_FUND_SIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldFundSizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("assureMoneyProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_ASSURE_MONEY_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("oldAssureMoneyProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("actualFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_ACTUAL_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("oldActualFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SINGLE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singleUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_SINGLE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("oldSingleUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("assureMoneyRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_ASSURE_MONEY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("oldAssureMoneyRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgCooperationUpdateApply.class, metaDataMap);
  }

  public OrgCooperationUpdateApply() {
    this.page = 1;

    this.rows = 10;

  }

  public OrgCooperationUpdateApply(
    int pid,
    int orgId,
    double creditLimit,
    double oldCreditLimit,
    double activateCreditLimit,
    double oldActivateCreditLimit,
    double planRate,
    double oldPlanRate,
    double fundSizeMoney,
    double oldFundSizeMoney,
    double assureMoneyProportion,
    double oldAssureMoneyProportion,
    double assureMoney,
    double oldAssureMoney,
    double actualFeeRate,
    double oldActualFeeRate,
    double singleUpperLimit,
    double oldSingleUpperLimit,
    String assureMoneyRemark,
    String oldAssureMoneyRemark,
    int applyStatus,
    String remark,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    int page,
    int rows,
    String createrName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    this.oldCreditLimit = oldCreditLimit;
    setOldCreditLimitIsSet(true);
    this.activateCreditLimit = activateCreditLimit;
    setActivateCreditLimitIsSet(true);
    this.oldActivateCreditLimit = oldActivateCreditLimit;
    setOldActivateCreditLimitIsSet(true);
    this.planRate = planRate;
    setPlanRateIsSet(true);
    this.oldPlanRate = oldPlanRate;
    setOldPlanRateIsSet(true);
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    this.oldFundSizeMoney = oldFundSizeMoney;
    setOldFundSizeMoneyIsSet(true);
    this.assureMoneyProportion = assureMoneyProportion;
    setAssureMoneyProportionIsSet(true);
    this.oldAssureMoneyProportion = oldAssureMoneyProportion;
    setOldAssureMoneyProportionIsSet(true);
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    this.oldActualFeeRate = oldActualFeeRate;
    setOldActualFeeRateIsSet(true);
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    this.oldSingleUpperLimit = oldSingleUpperLimit;
    setOldSingleUpperLimitIsSet(true);
    this.assureMoneyRemark = assureMoneyRemark;
    this.oldAssureMoneyRemark = oldAssureMoneyRemark;
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.remark = remark;
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createrName = createrName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgCooperationUpdateApply(OrgCooperationUpdateApply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.orgId = other.orgId;
    this.creditLimit = other.creditLimit;
    this.oldCreditLimit = other.oldCreditLimit;
    this.activateCreditLimit = other.activateCreditLimit;
    this.oldActivateCreditLimit = other.oldActivateCreditLimit;
    this.planRate = other.planRate;
    this.oldPlanRate = other.oldPlanRate;
    this.fundSizeMoney = other.fundSizeMoney;
    this.oldFundSizeMoney = other.oldFundSizeMoney;
    this.assureMoneyProportion = other.assureMoneyProportion;
    this.oldAssureMoneyProportion = other.oldAssureMoneyProportion;
    this.assureMoney = other.assureMoney;
    this.oldAssureMoney = other.oldAssureMoney;
    this.actualFeeRate = other.actualFeeRate;
    this.oldActualFeeRate = other.oldActualFeeRate;
    this.singleUpperLimit = other.singleUpperLimit;
    this.oldSingleUpperLimit = other.oldSingleUpperLimit;
    if (other.isSetAssureMoneyRemark()) {
      this.assureMoneyRemark = other.assureMoneyRemark;
    }
    if (other.isSetOldAssureMoneyRemark()) {
      this.oldAssureMoneyRemark = other.oldAssureMoneyRemark;
    }
    this.applyStatus = other.applyStatus;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreaterName()) {
      this.createrName = other.createrName;
    }
  }

  public OrgCooperationUpdateApply deepCopy() {
    return new OrgCooperationUpdateApply(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setCreditLimitIsSet(false);
    this.creditLimit = 0.0;
    setOldCreditLimitIsSet(false);
    this.oldCreditLimit = 0.0;
    setActivateCreditLimitIsSet(false);
    this.activateCreditLimit = 0.0;
    setOldActivateCreditLimitIsSet(false);
    this.oldActivateCreditLimit = 0.0;
    setPlanRateIsSet(false);
    this.planRate = 0.0;
    setOldPlanRateIsSet(false);
    this.oldPlanRate = 0.0;
    setFundSizeMoneyIsSet(false);
    this.fundSizeMoney = 0.0;
    setOldFundSizeMoneyIsSet(false);
    this.oldFundSizeMoney = 0.0;
    setAssureMoneyProportionIsSet(false);
    this.assureMoneyProportion = 0.0;
    setOldAssureMoneyProportionIsSet(false);
    this.oldAssureMoneyProportion = 0.0;
    setAssureMoneyIsSet(false);
    this.assureMoney = 0.0;
    setOldAssureMoneyIsSet(false);
    this.oldAssureMoney = 0.0;
    setActualFeeRateIsSet(false);
    this.actualFeeRate = 0.0;
    setOldActualFeeRateIsSet(false);
    this.oldActualFeeRate = 0.0;
    setSingleUpperLimitIsSet(false);
    this.singleUpperLimit = 0.0;
    setOldSingleUpperLimitIsSet(false);
    this.oldSingleUpperLimit = 0.0;
    this.assureMoneyRemark = null;
    this.oldAssureMoneyRemark = null;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    this.remark = null;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.createrName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgCooperationUpdateApply setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgCooperationUpdateApply setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public double getCreditLimit() {
    return this.creditLimit;
  }

  public OrgCooperationUpdateApply setCreditLimit(double creditLimit) {
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    return this;
  }

  public void unsetCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  public void setCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
  }

  public double getOldCreditLimit() {
    return this.oldCreditLimit;
  }

  public OrgCooperationUpdateApply setOldCreditLimit(double oldCreditLimit) {
    this.oldCreditLimit = oldCreditLimit;
    setOldCreditLimitIsSet(true);
    return this;
  }

  public void unsetOldCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field oldCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetOldCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID);
  }

  public void setOldCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID, value);
  }

  public double getActivateCreditLimit() {
    return this.activateCreditLimit;
  }

  public OrgCooperationUpdateApply setActivateCreditLimit(double activateCreditLimit) {
    this.activateCreditLimit = activateCreditLimit;
    setActivateCreditLimitIsSet(true);
    return this;
  }

  public void unsetActivateCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field activateCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetActivateCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID);
  }

  public void setActivateCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID, value);
  }

  public double getOldActivateCreditLimit() {
    return this.oldActivateCreditLimit;
  }

  public OrgCooperationUpdateApply setOldActivateCreditLimit(double oldActivateCreditLimit) {
    this.oldActivateCreditLimit = oldActivateCreditLimit;
    setOldActivateCreditLimitIsSet(true);
    return this;
  }

  public void unsetOldActivateCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDACTIVATECREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field oldActivateCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetOldActivateCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDACTIVATECREDITLIMIT_ISSET_ID);
  }

  public void setOldActivateCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDACTIVATECREDITLIMIT_ISSET_ID, value);
  }

  public double getPlanRate() {
    return this.planRate;
  }

  public OrgCooperationUpdateApply setPlanRate(double planRate) {
    this.planRate = planRate;
    setPlanRateIsSet(true);
    return this;
  }

  public void unsetPlanRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANRATE_ISSET_ID);
  }

  /** Returns true if field planRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANRATE_ISSET_ID);
  }

  public void setPlanRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANRATE_ISSET_ID, value);
  }

  public double getOldPlanRate() {
    return this.oldPlanRate;
  }

  public OrgCooperationUpdateApply setOldPlanRate(double oldPlanRate) {
    this.oldPlanRate = oldPlanRate;
    setOldPlanRateIsSet(true);
    return this;
  }

  public void unsetOldPlanRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPLANRATE_ISSET_ID);
  }

  /** Returns true if field oldPlanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOldPlanRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDPLANRATE_ISSET_ID);
  }

  public void setOldPlanRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPLANRATE_ISSET_ID, value);
  }

  public double getFundSizeMoney() {
    return this.fundSizeMoney;
  }

  public OrgCooperationUpdateApply setFundSizeMoney(double fundSizeMoney) {
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    return this;
  }

  public void unsetFundSizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  /** Returns true if field fundSizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFundSizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  public void setFundSizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID, value);
  }

  public double getOldFundSizeMoney() {
    return this.oldFundSizeMoney;
  }

  public OrgCooperationUpdateApply setOldFundSizeMoney(double oldFundSizeMoney) {
    this.oldFundSizeMoney = oldFundSizeMoney;
    setOldFundSizeMoneyIsSet(true);
    return this;
  }

  public void unsetOldFundSizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDFUNDSIZEMONEY_ISSET_ID);
  }

  /** Returns true if field oldFundSizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldFundSizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDFUNDSIZEMONEY_ISSET_ID);
  }

  public void setOldFundSizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDFUNDSIZEMONEY_ISSET_ID, value);
  }

  public double getAssureMoneyProportion() {
    return this.assureMoneyProportion;
  }

  public OrgCooperationUpdateApply setAssureMoneyProportion(double assureMoneyProportion) {
    this.assureMoneyProportion = assureMoneyProportion;
    setAssureMoneyProportionIsSet(true);
    return this;
  }

  public void unsetAssureMoneyProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID);
  }

  /** Returns true if field assureMoneyProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoneyProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID);
  }

  public void setAssureMoneyProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID, value);
  }

  public double getOldAssureMoneyProportion() {
    return this.oldAssureMoneyProportion;
  }

  public OrgCooperationUpdateApply setOldAssureMoneyProportion(double oldAssureMoneyProportion) {
    this.oldAssureMoneyProportion = oldAssureMoneyProportion;
    setOldAssureMoneyProportionIsSet(true);
    return this;
  }

  public void unsetOldAssureMoneyProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDASSUREMONEYPROPORTION_ISSET_ID);
  }

  /** Returns true if field oldAssureMoneyProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetOldAssureMoneyProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDASSUREMONEYPROPORTION_ISSET_ID);
  }

  public void setOldAssureMoneyProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDASSUREMONEYPROPORTION_ISSET_ID, value);
  }

  public double getAssureMoney() {
    return this.assureMoney;
  }

  public OrgCooperationUpdateApply setAssureMoney(double assureMoney) {
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    return this;
  }

  public void unsetAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field assureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  public void setAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID, value);
  }

  public double getOldAssureMoney() {
    return this.oldAssureMoney;
  }

  public OrgCooperationUpdateApply setOldAssureMoney(double oldAssureMoney) {
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    return this;
  }

  public void unsetOldAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field oldAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  public void setOldAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID, value);
  }

  public double getActualFeeRate() {
    return this.actualFeeRate;
  }

  public OrgCooperationUpdateApply setActualFeeRate(double actualFeeRate) {
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    return this;
  }

  public void unsetActualFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  /** Returns true if field actualFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  public void setActualFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID, value);
  }

  public double getOldActualFeeRate() {
    return this.oldActualFeeRate;
  }

  public OrgCooperationUpdateApply setOldActualFeeRate(double oldActualFeeRate) {
    this.oldActualFeeRate = oldActualFeeRate;
    setOldActualFeeRateIsSet(true);
    return this;
  }

  public void unsetOldActualFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDACTUALFEERATE_ISSET_ID);
  }

  /** Returns true if field oldActualFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOldActualFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDACTUALFEERATE_ISSET_ID);
  }

  public void setOldActualFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDACTUALFEERATE_ISSET_ID, value);
  }

  public double getSingleUpperLimit() {
    return this.singleUpperLimit;
  }

  public OrgCooperationUpdateApply setSingleUpperLimit(double singleUpperLimit) {
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    return this;
  }

  public void unsetSingleUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field singleUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  public void setSingleUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID, value);
  }

  public double getOldSingleUpperLimit() {
    return this.oldSingleUpperLimit;
  }

  public OrgCooperationUpdateApply setOldSingleUpperLimit(double oldSingleUpperLimit) {
    this.oldSingleUpperLimit = oldSingleUpperLimit;
    setOldSingleUpperLimitIsSet(true);
    return this;
  }

  public void unsetOldSingleUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDSINGLEUPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field oldSingleUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetOldSingleUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDSINGLEUPPERLIMIT_ISSET_ID);
  }

  public void setOldSingleUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDSINGLEUPPERLIMIT_ISSET_ID, value);
  }

  public String getAssureMoneyRemark() {
    return this.assureMoneyRemark;
  }

  public OrgCooperationUpdateApply setAssureMoneyRemark(String assureMoneyRemark) {
    this.assureMoneyRemark = assureMoneyRemark;
    return this;
  }

  public void unsetAssureMoneyRemark() {
    this.assureMoneyRemark = null;
  }

  /** Returns true if field assureMoneyRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoneyRemark() {
    return this.assureMoneyRemark != null;
  }

  public void setAssureMoneyRemarkIsSet(boolean value) {
    if (!value) {
      this.assureMoneyRemark = null;
    }
  }

  public String getOldAssureMoneyRemark() {
    return this.oldAssureMoneyRemark;
  }

  public OrgCooperationUpdateApply setOldAssureMoneyRemark(String oldAssureMoneyRemark) {
    this.oldAssureMoneyRemark = oldAssureMoneyRemark;
    return this;
  }

  public void unsetOldAssureMoneyRemark() {
    this.oldAssureMoneyRemark = null;
  }

  /** Returns true if field oldAssureMoneyRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetOldAssureMoneyRemark() {
    return this.oldAssureMoneyRemark != null;
  }

  public void setOldAssureMoneyRemarkIsSet(boolean value) {
    if (!value) {
      this.oldAssureMoneyRemark = null;
    }
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public OrgCooperationUpdateApply setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public OrgCooperationUpdateApply setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public OrgCooperationUpdateApply setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public OrgCooperationUpdateApply setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public OrgCooperationUpdateApply setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgCooperationUpdateApply setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public OrgCooperationUpdateApply setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgCooperationUpdateApply setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreaterName() {
    return this.createrName;
  }

  public OrgCooperationUpdateApply setCreaterName(String createrName) {
    this.createrName = createrName;
    return this;
  }

  public void unsetCreaterName() {
    this.createrName = null;
  }

  /** Returns true if field createrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterName() {
    return this.createrName != null;
  }

  public void setCreaterNameIsSet(boolean value) {
    if (!value) {
      this.createrName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case CREDIT_LIMIT:
      if (value == null) {
        unsetCreditLimit();
      } else {
        setCreditLimit((Double)value);
      }
      break;

    case OLD_CREDIT_LIMIT:
      if (value == null) {
        unsetOldCreditLimit();
      } else {
        setOldCreditLimit((Double)value);
      }
      break;

    case ACTIVATE_CREDIT_LIMIT:
      if (value == null) {
        unsetActivateCreditLimit();
      } else {
        setActivateCreditLimit((Double)value);
      }
      break;

    case OLD_ACTIVATE_CREDIT_LIMIT:
      if (value == null) {
        unsetOldActivateCreditLimit();
      } else {
        setOldActivateCreditLimit((Double)value);
      }
      break;

    case PLAN_RATE:
      if (value == null) {
        unsetPlanRate();
      } else {
        setPlanRate((Double)value);
      }
      break;

    case OLD_PLAN_RATE:
      if (value == null) {
        unsetOldPlanRate();
      } else {
        setOldPlanRate((Double)value);
      }
      break;

    case FUND_SIZE_MONEY:
      if (value == null) {
        unsetFundSizeMoney();
      } else {
        setFundSizeMoney((Double)value);
      }
      break;

    case OLD_FUND_SIZE_MONEY:
      if (value == null) {
        unsetOldFundSizeMoney();
      } else {
        setOldFundSizeMoney((Double)value);
      }
      break;

    case ASSURE_MONEY_PROPORTION:
      if (value == null) {
        unsetAssureMoneyProportion();
      } else {
        setAssureMoneyProportion((Double)value);
      }
      break;

    case OLD_ASSURE_MONEY_PROPORTION:
      if (value == null) {
        unsetOldAssureMoneyProportion();
      } else {
        setOldAssureMoneyProportion((Double)value);
      }
      break;

    case ASSURE_MONEY:
      if (value == null) {
        unsetAssureMoney();
      } else {
        setAssureMoney((Double)value);
      }
      break;

    case OLD_ASSURE_MONEY:
      if (value == null) {
        unsetOldAssureMoney();
      } else {
        setOldAssureMoney((Double)value);
      }
      break;

    case ACTUAL_FEE_RATE:
      if (value == null) {
        unsetActualFeeRate();
      } else {
        setActualFeeRate((Double)value);
      }
      break;

    case OLD_ACTUAL_FEE_RATE:
      if (value == null) {
        unsetOldActualFeeRate();
      } else {
        setOldActualFeeRate((Double)value);
      }
      break;

    case SINGLE_UPPER_LIMIT:
      if (value == null) {
        unsetSingleUpperLimit();
      } else {
        setSingleUpperLimit((Double)value);
      }
      break;

    case OLD_SINGLE_UPPER_LIMIT:
      if (value == null) {
        unsetOldSingleUpperLimit();
      } else {
        setOldSingleUpperLimit((Double)value);
      }
      break;

    case ASSURE_MONEY_REMARK:
      if (value == null) {
        unsetAssureMoneyRemark();
      } else {
        setAssureMoneyRemark((String)value);
      }
      break;

    case OLD_ASSURE_MONEY_REMARK:
      if (value == null) {
        unsetOldAssureMoneyRemark();
      } else {
        setOldAssureMoneyRemark((String)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATER_NAME:
      if (value == null) {
        unsetCreaterName();
      } else {
        setCreaterName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case CREDIT_LIMIT:
      return Double.valueOf(getCreditLimit());

    case OLD_CREDIT_LIMIT:
      return Double.valueOf(getOldCreditLimit());

    case ACTIVATE_CREDIT_LIMIT:
      return Double.valueOf(getActivateCreditLimit());

    case OLD_ACTIVATE_CREDIT_LIMIT:
      return Double.valueOf(getOldActivateCreditLimit());

    case PLAN_RATE:
      return Double.valueOf(getPlanRate());

    case OLD_PLAN_RATE:
      return Double.valueOf(getOldPlanRate());

    case FUND_SIZE_MONEY:
      return Double.valueOf(getFundSizeMoney());

    case OLD_FUND_SIZE_MONEY:
      return Double.valueOf(getOldFundSizeMoney());

    case ASSURE_MONEY_PROPORTION:
      return Double.valueOf(getAssureMoneyProportion());

    case OLD_ASSURE_MONEY_PROPORTION:
      return Double.valueOf(getOldAssureMoneyProportion());

    case ASSURE_MONEY:
      return Double.valueOf(getAssureMoney());

    case OLD_ASSURE_MONEY:
      return Double.valueOf(getOldAssureMoney());

    case ACTUAL_FEE_RATE:
      return Double.valueOf(getActualFeeRate());

    case OLD_ACTUAL_FEE_RATE:
      return Double.valueOf(getOldActualFeeRate());

    case SINGLE_UPPER_LIMIT:
      return Double.valueOf(getSingleUpperLimit());

    case OLD_SINGLE_UPPER_LIMIT:
      return Double.valueOf(getOldSingleUpperLimit());

    case ASSURE_MONEY_REMARK:
      return getAssureMoneyRemark();

    case OLD_ASSURE_MONEY_REMARK:
      return getOldAssureMoneyRemark();

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case REMARK:
      return getRemark();

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATER_NAME:
      return getCreaterName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ORG_ID:
      return isSetOrgId();
    case CREDIT_LIMIT:
      return isSetCreditLimit();
    case OLD_CREDIT_LIMIT:
      return isSetOldCreditLimit();
    case ACTIVATE_CREDIT_LIMIT:
      return isSetActivateCreditLimit();
    case OLD_ACTIVATE_CREDIT_LIMIT:
      return isSetOldActivateCreditLimit();
    case PLAN_RATE:
      return isSetPlanRate();
    case OLD_PLAN_RATE:
      return isSetOldPlanRate();
    case FUND_SIZE_MONEY:
      return isSetFundSizeMoney();
    case OLD_FUND_SIZE_MONEY:
      return isSetOldFundSizeMoney();
    case ASSURE_MONEY_PROPORTION:
      return isSetAssureMoneyProportion();
    case OLD_ASSURE_MONEY_PROPORTION:
      return isSetOldAssureMoneyProportion();
    case ASSURE_MONEY:
      return isSetAssureMoney();
    case OLD_ASSURE_MONEY:
      return isSetOldAssureMoney();
    case ACTUAL_FEE_RATE:
      return isSetActualFeeRate();
    case OLD_ACTUAL_FEE_RATE:
      return isSetOldActualFeeRate();
    case SINGLE_UPPER_LIMIT:
      return isSetSingleUpperLimit();
    case OLD_SINGLE_UPPER_LIMIT:
      return isSetOldSingleUpperLimit();
    case ASSURE_MONEY_REMARK:
      return isSetAssureMoneyRemark();
    case OLD_ASSURE_MONEY_REMARK:
      return isSetOldAssureMoneyRemark();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case REMARK:
      return isSetRemark();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATER_NAME:
      return isSetCreaterName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgCooperationUpdateApply)
      return this.equals((OrgCooperationUpdateApply)that);
    return false;
  }

  public boolean equals(OrgCooperationUpdateApply that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_creditLimit = true;
    boolean that_present_creditLimit = true;
    if (this_present_creditLimit || that_present_creditLimit) {
      if (!(this_present_creditLimit && that_present_creditLimit))
        return false;
      if (this.creditLimit != that.creditLimit)
        return false;
    }

    boolean this_present_oldCreditLimit = true;
    boolean that_present_oldCreditLimit = true;
    if (this_present_oldCreditLimit || that_present_oldCreditLimit) {
      if (!(this_present_oldCreditLimit && that_present_oldCreditLimit))
        return false;
      if (this.oldCreditLimit != that.oldCreditLimit)
        return false;
    }

    boolean this_present_activateCreditLimit = true;
    boolean that_present_activateCreditLimit = true;
    if (this_present_activateCreditLimit || that_present_activateCreditLimit) {
      if (!(this_present_activateCreditLimit && that_present_activateCreditLimit))
        return false;
      if (this.activateCreditLimit != that.activateCreditLimit)
        return false;
    }

    boolean this_present_oldActivateCreditLimit = true;
    boolean that_present_oldActivateCreditLimit = true;
    if (this_present_oldActivateCreditLimit || that_present_oldActivateCreditLimit) {
      if (!(this_present_oldActivateCreditLimit && that_present_oldActivateCreditLimit))
        return false;
      if (this.oldActivateCreditLimit != that.oldActivateCreditLimit)
        return false;
    }

    boolean this_present_planRate = true;
    boolean that_present_planRate = true;
    if (this_present_planRate || that_present_planRate) {
      if (!(this_present_planRate && that_present_planRate))
        return false;
      if (this.planRate != that.planRate)
        return false;
    }

    boolean this_present_oldPlanRate = true;
    boolean that_present_oldPlanRate = true;
    if (this_present_oldPlanRate || that_present_oldPlanRate) {
      if (!(this_present_oldPlanRate && that_present_oldPlanRate))
        return false;
      if (this.oldPlanRate != that.oldPlanRate)
        return false;
    }

    boolean this_present_fundSizeMoney = true;
    boolean that_present_fundSizeMoney = true;
    if (this_present_fundSizeMoney || that_present_fundSizeMoney) {
      if (!(this_present_fundSizeMoney && that_present_fundSizeMoney))
        return false;
      if (this.fundSizeMoney != that.fundSizeMoney)
        return false;
    }

    boolean this_present_oldFundSizeMoney = true;
    boolean that_present_oldFundSizeMoney = true;
    if (this_present_oldFundSizeMoney || that_present_oldFundSizeMoney) {
      if (!(this_present_oldFundSizeMoney && that_present_oldFundSizeMoney))
        return false;
      if (this.oldFundSizeMoney != that.oldFundSizeMoney)
        return false;
    }

    boolean this_present_assureMoneyProportion = true;
    boolean that_present_assureMoneyProportion = true;
    if (this_present_assureMoneyProportion || that_present_assureMoneyProportion) {
      if (!(this_present_assureMoneyProportion && that_present_assureMoneyProportion))
        return false;
      if (this.assureMoneyProportion != that.assureMoneyProportion)
        return false;
    }

    boolean this_present_oldAssureMoneyProportion = true;
    boolean that_present_oldAssureMoneyProportion = true;
    if (this_present_oldAssureMoneyProportion || that_present_oldAssureMoneyProportion) {
      if (!(this_present_oldAssureMoneyProportion && that_present_oldAssureMoneyProportion))
        return false;
      if (this.oldAssureMoneyProportion != that.oldAssureMoneyProportion)
        return false;
    }

    boolean this_present_assureMoney = true;
    boolean that_present_assureMoney = true;
    if (this_present_assureMoney || that_present_assureMoney) {
      if (!(this_present_assureMoney && that_present_assureMoney))
        return false;
      if (this.assureMoney != that.assureMoney)
        return false;
    }

    boolean this_present_oldAssureMoney = true;
    boolean that_present_oldAssureMoney = true;
    if (this_present_oldAssureMoney || that_present_oldAssureMoney) {
      if (!(this_present_oldAssureMoney && that_present_oldAssureMoney))
        return false;
      if (this.oldAssureMoney != that.oldAssureMoney)
        return false;
    }

    boolean this_present_actualFeeRate = true;
    boolean that_present_actualFeeRate = true;
    if (this_present_actualFeeRate || that_present_actualFeeRate) {
      if (!(this_present_actualFeeRate && that_present_actualFeeRate))
        return false;
      if (this.actualFeeRate != that.actualFeeRate)
        return false;
    }

    boolean this_present_oldActualFeeRate = true;
    boolean that_present_oldActualFeeRate = true;
    if (this_present_oldActualFeeRate || that_present_oldActualFeeRate) {
      if (!(this_present_oldActualFeeRate && that_present_oldActualFeeRate))
        return false;
      if (this.oldActualFeeRate != that.oldActualFeeRate)
        return false;
    }

    boolean this_present_singleUpperLimit = true;
    boolean that_present_singleUpperLimit = true;
    if (this_present_singleUpperLimit || that_present_singleUpperLimit) {
      if (!(this_present_singleUpperLimit && that_present_singleUpperLimit))
        return false;
      if (this.singleUpperLimit != that.singleUpperLimit)
        return false;
    }

    boolean this_present_oldSingleUpperLimit = true;
    boolean that_present_oldSingleUpperLimit = true;
    if (this_present_oldSingleUpperLimit || that_present_oldSingleUpperLimit) {
      if (!(this_present_oldSingleUpperLimit && that_present_oldSingleUpperLimit))
        return false;
      if (this.oldSingleUpperLimit != that.oldSingleUpperLimit)
        return false;
    }

    boolean this_present_assureMoneyRemark = true && this.isSetAssureMoneyRemark();
    boolean that_present_assureMoneyRemark = true && that.isSetAssureMoneyRemark();
    if (this_present_assureMoneyRemark || that_present_assureMoneyRemark) {
      if (!(this_present_assureMoneyRemark && that_present_assureMoneyRemark))
        return false;
      if (!this.assureMoneyRemark.equals(that.assureMoneyRemark))
        return false;
    }

    boolean this_present_oldAssureMoneyRemark = true && this.isSetOldAssureMoneyRemark();
    boolean that_present_oldAssureMoneyRemark = true && that.isSetOldAssureMoneyRemark();
    if (this_present_oldAssureMoneyRemark || that_present_oldAssureMoneyRemark) {
      if (!(this_present_oldAssureMoneyRemark && that_present_oldAssureMoneyRemark))
        return false;
      if (!this.oldAssureMoneyRemark.equals(that.oldAssureMoneyRemark))
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createrName = true && this.isSetCreaterName();
    boolean that_present_createrName = true && that.isSetCreaterName();
    if (this_present_createrName || that_present_createrName) {
      if (!(this_present_createrName && that_present_createrName))
        return false;
      if (!this.createrName.equals(that.createrName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_creditLimit = true;
    list.add(present_creditLimit);
    if (present_creditLimit)
      list.add(creditLimit);

    boolean present_oldCreditLimit = true;
    list.add(present_oldCreditLimit);
    if (present_oldCreditLimit)
      list.add(oldCreditLimit);

    boolean present_activateCreditLimit = true;
    list.add(present_activateCreditLimit);
    if (present_activateCreditLimit)
      list.add(activateCreditLimit);

    boolean present_oldActivateCreditLimit = true;
    list.add(present_oldActivateCreditLimit);
    if (present_oldActivateCreditLimit)
      list.add(oldActivateCreditLimit);

    boolean present_planRate = true;
    list.add(present_planRate);
    if (present_planRate)
      list.add(planRate);

    boolean present_oldPlanRate = true;
    list.add(present_oldPlanRate);
    if (present_oldPlanRate)
      list.add(oldPlanRate);

    boolean present_fundSizeMoney = true;
    list.add(present_fundSizeMoney);
    if (present_fundSizeMoney)
      list.add(fundSizeMoney);

    boolean present_oldFundSizeMoney = true;
    list.add(present_oldFundSizeMoney);
    if (present_oldFundSizeMoney)
      list.add(oldFundSizeMoney);

    boolean present_assureMoneyProportion = true;
    list.add(present_assureMoneyProportion);
    if (present_assureMoneyProportion)
      list.add(assureMoneyProportion);

    boolean present_oldAssureMoneyProportion = true;
    list.add(present_oldAssureMoneyProportion);
    if (present_oldAssureMoneyProportion)
      list.add(oldAssureMoneyProportion);

    boolean present_assureMoney = true;
    list.add(present_assureMoney);
    if (present_assureMoney)
      list.add(assureMoney);

    boolean present_oldAssureMoney = true;
    list.add(present_oldAssureMoney);
    if (present_oldAssureMoney)
      list.add(oldAssureMoney);

    boolean present_actualFeeRate = true;
    list.add(present_actualFeeRate);
    if (present_actualFeeRate)
      list.add(actualFeeRate);

    boolean present_oldActualFeeRate = true;
    list.add(present_oldActualFeeRate);
    if (present_oldActualFeeRate)
      list.add(oldActualFeeRate);

    boolean present_singleUpperLimit = true;
    list.add(present_singleUpperLimit);
    if (present_singleUpperLimit)
      list.add(singleUpperLimit);

    boolean present_oldSingleUpperLimit = true;
    list.add(present_oldSingleUpperLimit);
    if (present_oldSingleUpperLimit)
      list.add(oldSingleUpperLimit);

    boolean present_assureMoneyRemark = true && (isSetAssureMoneyRemark());
    list.add(present_assureMoneyRemark);
    if (present_assureMoneyRemark)
      list.add(assureMoneyRemark);

    boolean present_oldAssureMoneyRemark = true && (isSetOldAssureMoneyRemark());
    list.add(present_oldAssureMoneyRemark);
    if (present_oldAssureMoneyRemark)
      list.add(oldAssureMoneyRemark);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createrName = true && (isSetCreaterName());
    list.add(present_createrName);
    if (present_createrName)
      list.add(createrName);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgCooperationUpdateApply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldCreditLimit()).compareTo(other.isSetOldCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldCreditLimit, other.oldCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivateCreditLimit()).compareTo(other.isSetActivateCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivateCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activateCreditLimit, other.activateCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldActivateCreditLimit()).compareTo(other.isSetOldActivateCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldActivateCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldActivateCreditLimit, other.oldActivateCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRate()).compareTo(other.isSetPlanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRate, other.planRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldPlanRate()).compareTo(other.isSetOldPlanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldPlanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPlanRate, other.oldPlanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundSizeMoney()).compareTo(other.isSetFundSizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundSizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundSizeMoney, other.fundSizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldFundSizeMoney()).compareTo(other.isSetOldFundSizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldFundSizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldFundSizeMoney, other.oldFundSizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoneyProportion()).compareTo(other.isSetAssureMoneyProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoneyProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoneyProportion, other.assureMoneyProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldAssureMoneyProportion()).compareTo(other.isSetOldAssureMoneyProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldAssureMoneyProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldAssureMoneyProportion, other.oldAssureMoneyProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoney()).compareTo(other.isSetAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoney, other.assureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldAssureMoney()).compareTo(other.isSetOldAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldAssureMoney, other.oldAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualFeeRate()).compareTo(other.isSetActualFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualFeeRate, other.actualFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldActualFeeRate()).compareTo(other.isSetOldActualFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldActualFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldActualFeeRate, other.oldActualFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUpperLimit()).compareTo(other.isSetSingleUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUpperLimit, other.singleUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldSingleUpperLimit()).compareTo(other.isSetOldSingleUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldSingleUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldSingleUpperLimit, other.oldSingleUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoneyRemark()).compareTo(other.isSetAssureMoneyRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoneyRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoneyRemark, other.assureMoneyRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldAssureMoneyRemark()).compareTo(other.isSetOldAssureMoneyRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldAssureMoneyRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldAssureMoneyRemark, other.oldAssureMoneyRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterName()).compareTo(other.isSetCreaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrName, other.createrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgCooperationUpdateApply(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditLimit:");
    sb.append(this.creditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldCreditLimit:");
    sb.append(this.oldCreditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activateCreditLimit:");
    sb.append(this.activateCreditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldActivateCreditLimit:");
    sb.append(this.oldActivateCreditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRate:");
    sb.append(this.planRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldPlanRate:");
    sb.append(this.oldPlanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundSizeMoney:");
    sb.append(this.fundSizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldFundSizeMoney:");
    sb.append(this.oldFundSizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoneyProportion:");
    sb.append(this.assureMoneyProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldAssureMoneyProportion:");
    sb.append(this.oldAssureMoneyProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoney:");
    sb.append(this.assureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldAssureMoney:");
    sb.append(this.oldAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualFeeRate:");
    sb.append(this.actualFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldActualFeeRate:");
    sb.append(this.oldActualFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleUpperLimit:");
    sb.append(this.singleUpperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldSingleUpperLimit:");
    sb.append(this.oldSingleUpperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoneyRemark:");
    if (this.assureMoneyRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.assureMoneyRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldAssureMoneyRemark:");
    if (this.oldAssureMoneyRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.oldAssureMoneyRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrName:");
    if (this.createrName == null) {
      sb.append("null");
    } else {
      sb.append(this.createrName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgCooperationUpdateApplyStandardSchemeFactory implements SchemeFactory {
    public OrgCooperationUpdateApplyStandardScheme getScheme() {
      return new OrgCooperationUpdateApplyStandardScheme();
    }
  }

  private static class OrgCooperationUpdateApplyStandardScheme extends StandardScheme<OrgCooperationUpdateApply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgCooperationUpdateApply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditLimit = iprot.readDouble();
              struct.setCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OLD_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldCreditLimit = iprot.readDouble();
              struct.setOldCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVATE_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.activateCreditLimit = iprot.readDouble();
              struct.setActivateCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_ACTIVATE_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldActivateCreditLimit = iprot.readDouble();
              struct.setOldActivateCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planRate = iprot.readDouble();
              struct.setPlanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OLD_PLAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldPlanRate = iprot.readDouble();
              struct.setOldPlanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FUND_SIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundSizeMoney = iprot.readDouble();
              struct.setFundSizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OLD_FUND_SIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldFundSizeMoney = iprot.readDouble();
              struct.setOldFundSizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ASSURE_MONEY_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoneyProportion = iprot.readDouble();
              struct.setAssureMoneyProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OLD_ASSURE_MONEY_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldAssureMoneyProportion = iprot.readDouble();
              struct.setOldAssureMoneyProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoney = iprot.readDouble();
              struct.setAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OLD_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldAssureMoney = iprot.readDouble();
              struct.setOldAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTUAL_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualFeeRate = iprot.readDouble();
              struct.setActualFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OLD_ACTUAL_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldActualFeeRate = iprot.readDouble();
              struct.setOldActualFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SINGLE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.singleUpperLimit = iprot.readDouble();
              struct.setSingleUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OLD_SINGLE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldSingleUpperLimit = iprot.readDouble();
              struct.setOldSingleUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ASSURE_MONEY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assureMoneyRemark = iprot.readString();
              struct.setAssureMoneyRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OLD_ASSURE_MONEY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldAssureMoneyRemark = iprot.readString();
              struct.setOldAssureMoneyRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CREATER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrName = iprot.readString();
              struct.setCreaterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgCooperationUpdateApply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.creditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.oldCreditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVATE_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.activateCreditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ACTIVATE_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.oldActivateCreditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.planRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PLAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.oldPlanRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUND_SIZE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.fundSizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_FUND_SIZE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldFundSizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.assureMoneyProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ASSURE_MONEY_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.oldAssureMoneyProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldAssureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.actualFeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ACTUAL_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.oldActualFeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINGLE_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.singleUpperLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_SINGLE_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.oldSingleUpperLimit);
      oprot.writeFieldEnd();
      if (struct.assureMoneyRemark != null) {
        oprot.writeFieldBegin(ASSURE_MONEY_REMARK_FIELD_DESC);
        oprot.writeString(struct.assureMoneyRemark);
        oprot.writeFieldEnd();
      }
      if (struct.oldAssureMoneyRemark != null) {
        oprot.writeFieldBegin(OLD_ASSURE_MONEY_REMARK_FIELD_DESC);
        oprot.writeString(struct.oldAssureMoneyRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createrName != null) {
        oprot.writeFieldBegin(CREATER_NAME_FIELD_DESC);
        oprot.writeString(struct.createrName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgCooperationUpdateApplyTupleSchemeFactory implements SchemeFactory {
    public OrgCooperationUpdateApplyTupleScheme getScheme() {
      return new OrgCooperationUpdateApplyTupleScheme();
    }
  }

  private static class OrgCooperationUpdateApplyTupleScheme extends TupleScheme<OrgCooperationUpdateApply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgCooperationUpdateApply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetCreditLimit()) {
        optionals.set(2);
      }
      if (struct.isSetOldCreditLimit()) {
        optionals.set(3);
      }
      if (struct.isSetActivateCreditLimit()) {
        optionals.set(4);
      }
      if (struct.isSetOldActivateCreditLimit()) {
        optionals.set(5);
      }
      if (struct.isSetPlanRate()) {
        optionals.set(6);
      }
      if (struct.isSetOldPlanRate()) {
        optionals.set(7);
      }
      if (struct.isSetFundSizeMoney()) {
        optionals.set(8);
      }
      if (struct.isSetOldFundSizeMoney()) {
        optionals.set(9);
      }
      if (struct.isSetAssureMoneyProportion()) {
        optionals.set(10);
      }
      if (struct.isSetOldAssureMoneyProportion()) {
        optionals.set(11);
      }
      if (struct.isSetAssureMoney()) {
        optionals.set(12);
      }
      if (struct.isSetOldAssureMoney()) {
        optionals.set(13);
      }
      if (struct.isSetActualFeeRate()) {
        optionals.set(14);
      }
      if (struct.isSetOldActualFeeRate()) {
        optionals.set(15);
      }
      if (struct.isSetSingleUpperLimit()) {
        optionals.set(16);
      }
      if (struct.isSetOldSingleUpperLimit()) {
        optionals.set(17);
      }
      if (struct.isSetAssureMoneyRemark()) {
        optionals.set(18);
      }
      if (struct.isSetOldAssureMoneyRemark()) {
        optionals.set(19);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(20);
      }
      if (struct.isSetRemark()) {
        optionals.set(21);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(22);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(23);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(24);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(25);
      }
      if (struct.isSetPage()) {
        optionals.set(26);
      }
      if (struct.isSetRows()) {
        optionals.set(27);
      }
      if (struct.isSetCreaterName()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetCreditLimit()) {
        oprot.writeDouble(struct.creditLimit);
      }
      if (struct.isSetOldCreditLimit()) {
        oprot.writeDouble(struct.oldCreditLimit);
      }
      if (struct.isSetActivateCreditLimit()) {
        oprot.writeDouble(struct.activateCreditLimit);
      }
      if (struct.isSetOldActivateCreditLimit()) {
        oprot.writeDouble(struct.oldActivateCreditLimit);
      }
      if (struct.isSetPlanRate()) {
        oprot.writeDouble(struct.planRate);
      }
      if (struct.isSetOldPlanRate()) {
        oprot.writeDouble(struct.oldPlanRate);
      }
      if (struct.isSetFundSizeMoney()) {
        oprot.writeDouble(struct.fundSizeMoney);
      }
      if (struct.isSetOldFundSizeMoney()) {
        oprot.writeDouble(struct.oldFundSizeMoney);
      }
      if (struct.isSetAssureMoneyProportion()) {
        oprot.writeDouble(struct.assureMoneyProportion);
      }
      if (struct.isSetOldAssureMoneyProportion()) {
        oprot.writeDouble(struct.oldAssureMoneyProportion);
      }
      if (struct.isSetAssureMoney()) {
        oprot.writeDouble(struct.assureMoney);
      }
      if (struct.isSetOldAssureMoney()) {
        oprot.writeDouble(struct.oldAssureMoney);
      }
      if (struct.isSetActualFeeRate()) {
        oprot.writeDouble(struct.actualFeeRate);
      }
      if (struct.isSetOldActualFeeRate()) {
        oprot.writeDouble(struct.oldActualFeeRate);
      }
      if (struct.isSetSingleUpperLimit()) {
        oprot.writeDouble(struct.singleUpperLimit);
      }
      if (struct.isSetOldSingleUpperLimit()) {
        oprot.writeDouble(struct.oldSingleUpperLimit);
      }
      if (struct.isSetAssureMoneyRemark()) {
        oprot.writeString(struct.assureMoneyRemark);
      }
      if (struct.isSetOldAssureMoneyRemark()) {
        oprot.writeString(struct.oldAssureMoneyRemark);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreaterName()) {
        oprot.writeString(struct.createrName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgCooperationUpdateApply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creditLimit = iprot.readDouble();
        struct.setCreditLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.oldCreditLimit = iprot.readDouble();
        struct.setOldCreditLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activateCreditLimit = iprot.readDouble();
        struct.setActivateCreditLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oldActivateCreditLimit = iprot.readDouble();
        struct.setOldActivateCreditLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planRate = iprot.readDouble();
        struct.setPlanRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.oldPlanRate = iprot.readDouble();
        struct.setOldPlanRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fundSizeMoney = iprot.readDouble();
        struct.setFundSizeMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.oldFundSizeMoney = iprot.readDouble();
        struct.setOldFundSizeMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.assureMoneyProportion = iprot.readDouble();
        struct.setAssureMoneyProportionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.oldAssureMoneyProportion = iprot.readDouble();
        struct.setOldAssureMoneyProportionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.assureMoney = iprot.readDouble();
        struct.setAssureMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.oldAssureMoney = iprot.readDouble();
        struct.setOldAssureMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.actualFeeRate = iprot.readDouble();
        struct.setActualFeeRateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.oldActualFeeRate = iprot.readDouble();
        struct.setOldActualFeeRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.singleUpperLimit = iprot.readDouble();
        struct.setSingleUpperLimitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.oldSingleUpperLimit = iprot.readDouble();
        struct.setOldSingleUpperLimitIsSet(true);
      }
      if (incoming.get(18)) {
        struct.assureMoneyRemark = iprot.readString();
        struct.setAssureMoneyRemarkIsSet(true);
      }
      if (incoming.get(19)) {
        struct.oldAssureMoneyRemark = iprot.readString();
        struct.setOldAssureMoneyRemarkIsSet(true);
      }
      if (incoming.get(20)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(21)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(22)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(25)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(27)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.createrName = iprot.readString();
        struct.setCreaterNameIsSet(true);
      }
    }
  }

}


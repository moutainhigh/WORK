/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class OrgFundFlowInfo implements org.apache.thrift.TBase<OrgFundFlowInfo, OrgFundFlowInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrgFundFlowInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgFundFlowInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRANS_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("transMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAccountId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRANS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField AVAILABLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("availableMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgFundFlowInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgFundFlowInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int transType; // required
  public double transMoney; // required
  public int userAccountId; // required
  public String transDate; // required
  public String transNo; // required
  public double totalMoney; // required
  public double availableMoney; // required
  public int paymentType; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    TRANS_TYPE((short)2, "transType"),
    TRANS_MONEY((short)3, "transMoney"),
    USER_ACCOUNT_ID((short)4, "userAccountId"),
    TRANS_DATE((short)5, "transDate"),
    TRANS_NO((short)6, "transNo"),
    TOTAL_MONEY((short)7, "totalMoney"),
    AVAILABLE_MONEY((short)8, "availableMoney"),
    PAYMENT_TYPE((short)9, "paymentType"),
    STATUS((short)10, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // TRANS_TYPE
          return TRANS_TYPE;
        case 3: // TRANS_MONEY
          return TRANS_MONEY;
        case 4: // USER_ACCOUNT_ID
          return USER_ACCOUNT_ID;
        case 5: // TRANS_DATE
          return TRANS_DATE;
        case 6: // TRANS_NO
          return TRANS_NO;
        case 7: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 8: // AVAILABLE_MONEY
          return AVAILABLE_MONEY;
        case 9: // PAYMENT_TYPE
          return PAYMENT_TYPE;
        case 10: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __TRANSTYPE_ISSET_ID = 1;
  private static final int __TRANSMONEY_ISSET_ID = 2;
  private static final int __USERACCOUNTID_ISSET_ID = 3;
  private static final int __TOTALMONEY_ISSET_ID = 4;
  private static final int __AVAILABLEMONEY_ISSET_ID = 5;
  private static final int __PAYMENTTYPE_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANS_MONEY, new org.apache.thrift.meta_data.FieldMetaData("transMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("userAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANS_DATE, new org.apache.thrift.meta_data.FieldMetaData("transDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("availableMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgFundFlowInfo.class, metaDataMap);
  }

  public OrgFundFlowInfo() {
  }

  public OrgFundFlowInfo(
    int pid,
    int transType,
    double transMoney,
    int userAccountId,
    String transDate,
    String transNo,
    double totalMoney,
    double availableMoney,
    int paymentType,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.transType = transType;
    setTransTypeIsSet(true);
    this.transMoney = transMoney;
    setTransMoneyIsSet(true);
    this.userAccountId = userAccountId;
    setUserAccountIdIsSet(true);
    this.transDate = transDate;
    this.transNo = transNo;
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgFundFlowInfo(OrgFundFlowInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.transType = other.transType;
    this.transMoney = other.transMoney;
    this.userAccountId = other.userAccountId;
    if (other.isSetTransDate()) {
      this.transDate = other.transDate;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    this.totalMoney = other.totalMoney;
    this.availableMoney = other.availableMoney;
    this.paymentType = other.paymentType;
    this.status = other.status;
  }

  public OrgFundFlowInfo deepCopy() {
    return new OrgFundFlowInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setTransTypeIsSet(false);
    this.transType = 0;
    setTransMoneyIsSet(false);
    this.transMoney = 0.0;
    setUserAccountIdIsSet(false);
    this.userAccountId = 0;
    this.transDate = null;
    this.transNo = null;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    setAvailableMoneyIsSet(false);
    this.availableMoney = 0.0;
    setPaymentTypeIsSet(false);
    this.paymentType = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgFundFlowInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getTransType() {
    return this.transType;
  }

  public OrgFundFlowInfo setTransType(int transType) {
    this.transType = transType;
    setTransTypeIsSet(true);
    return this;
  }

  public void unsetTransType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSTYPE_ISSET_ID);
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSTYPE_ISSET_ID);
  }

  public void setTransTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSTYPE_ISSET_ID, value);
  }

  public double getTransMoney() {
    return this.transMoney;
  }

  public OrgFundFlowInfo setTransMoney(double transMoney) {
    this.transMoney = transMoney;
    setTransMoneyIsSet(true);
    return this;
  }

  public void unsetTransMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSMONEY_ISSET_ID);
  }

  /** Returns true if field transMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTransMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSMONEY_ISSET_ID);
  }

  public void setTransMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSMONEY_ISSET_ID, value);
  }

  public int getUserAccountId() {
    return this.userAccountId;
  }

  public OrgFundFlowInfo setUserAccountId(int userAccountId) {
    this.userAccountId = userAccountId;
    setUserAccountIdIsSet(true);
    return this;
  }

  public void unsetUserAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERACCOUNTID_ISSET_ID);
  }

  /** Returns true if field userAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERACCOUNTID_ISSET_ID);
  }

  public void setUserAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERACCOUNTID_ISSET_ID, value);
  }

  public String getTransDate() {
    return this.transDate;
  }

  public OrgFundFlowInfo setTransDate(String transDate) {
    this.transDate = transDate;
    return this;
  }

  public void unsetTransDate() {
    this.transDate = null;
  }

  /** Returns true if field transDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransDate() {
    return this.transDate != null;
  }

  public void setTransDateIsSet(boolean value) {
    if (!value) {
      this.transDate = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public OrgFundFlowInfo setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public double getTotalMoney() {
    return this.totalMoney;
  }

  public OrgFundFlowInfo setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public double getAvailableMoney() {
    return this.availableMoney;
  }

  public OrgFundFlowInfo setAvailableMoney(double availableMoney) {
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    return this;
  }

  public void unsetAvailableMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  /** Returns true if field availableMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  public void setAvailableMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID, value);
  }

  public int getPaymentType() {
    return this.paymentType;
  }

  public OrgFundFlowInfo setPaymentType(int paymentType) {
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    return this;
  }

  public void unsetPaymentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field paymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  public void setPaymentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OrgFundFlowInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((Integer)value);
      }
      break;

    case TRANS_MONEY:
      if (value == null) {
        unsetTransMoney();
      } else {
        setTransMoney((Double)value);
      }
      break;

    case USER_ACCOUNT_ID:
      if (value == null) {
        unsetUserAccountId();
      } else {
        setUserAccountId((Integer)value);
      }
      break;

    case TRANS_DATE:
      if (value == null) {
        unsetTransDate();
      } else {
        setTransDate((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case AVAILABLE_MONEY:
      if (value == null) {
        unsetAvailableMoney();
      } else {
        setAvailableMoney((Double)value);
      }
      break;

    case PAYMENT_TYPE:
      if (value == null) {
        unsetPaymentType();
      } else {
        setPaymentType((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case TRANS_TYPE:
      return Integer.valueOf(getTransType());

    case TRANS_MONEY:
      return Double.valueOf(getTransMoney());

    case USER_ACCOUNT_ID:
      return Integer.valueOf(getUserAccountId());

    case TRANS_DATE:
      return getTransDate();

    case TRANS_NO:
      return getTransNo();

    case TOTAL_MONEY:
      return Double.valueOf(getTotalMoney());

    case AVAILABLE_MONEY:
      return Double.valueOf(getAvailableMoney());

    case PAYMENT_TYPE:
      return Integer.valueOf(getPaymentType());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case TRANS_TYPE:
      return isSetTransType();
    case TRANS_MONEY:
      return isSetTransMoney();
    case USER_ACCOUNT_ID:
      return isSetUserAccountId();
    case TRANS_DATE:
      return isSetTransDate();
    case TRANS_NO:
      return isSetTransNo();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case AVAILABLE_MONEY:
      return isSetAvailableMoney();
    case PAYMENT_TYPE:
      return isSetPaymentType();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgFundFlowInfo)
      return this.equals((OrgFundFlowInfo)that);
    return false;
  }

  public boolean equals(OrgFundFlowInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_transType = true;
    boolean that_present_transType = true;
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (this.transType != that.transType)
        return false;
    }

    boolean this_present_transMoney = true;
    boolean that_present_transMoney = true;
    if (this_present_transMoney || that_present_transMoney) {
      if (!(this_present_transMoney && that_present_transMoney))
        return false;
      if (this.transMoney != that.transMoney)
        return false;
    }

    boolean this_present_userAccountId = true;
    boolean that_present_userAccountId = true;
    if (this_present_userAccountId || that_present_userAccountId) {
      if (!(this_present_userAccountId && that_present_userAccountId))
        return false;
      if (this.userAccountId != that.userAccountId)
        return false;
    }

    boolean this_present_transDate = true && this.isSetTransDate();
    boolean that_present_transDate = true && that.isSetTransDate();
    if (this_present_transDate || that_present_transDate) {
      if (!(this_present_transDate && that_present_transDate))
        return false;
      if (!this.transDate.equals(that.transDate))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_availableMoney = true;
    boolean that_present_availableMoney = true;
    if (this_present_availableMoney || that_present_availableMoney) {
      if (!(this_present_availableMoney && that_present_availableMoney))
        return false;
      if (this.availableMoney != that.availableMoney)
        return false;
    }

    boolean this_present_paymentType = true;
    boolean that_present_paymentType = true;
    if (this_present_paymentType || that_present_paymentType) {
      if (!(this_present_paymentType && that_present_paymentType))
        return false;
      if (this.paymentType != that.paymentType)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_transType = true;
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_transMoney = true;
    list.add(present_transMoney);
    if (present_transMoney)
      list.add(transMoney);

    boolean present_userAccountId = true;
    list.add(present_userAccountId);
    if (present_userAccountId)
      list.add(userAccountId);

    boolean present_transDate = true && (isSetTransDate());
    list.add(present_transDate);
    if (present_transDate)
      list.add(transDate);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_totalMoney = true;
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_availableMoney = true;
    list.add(present_availableMoney);
    if (present_availableMoney)
      list.add(availableMoney);

    boolean present_paymentType = true;
    list.add(present_paymentType);
    if (present_paymentType)
      list.add(paymentType);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgFundFlowInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransMoney()).compareTo(other.isSetTransMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transMoney, other.transMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAccountId()).compareTo(other.isSetUserAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAccountId, other.userAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransDate()).compareTo(other.isSetTransDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transDate, other.transDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableMoney()).compareTo(other.isSetAvailableMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableMoney, other.availableMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(other.isSetPaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, other.paymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgFundFlowInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    sb.append(this.transType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transMoney:");
    sb.append(this.transMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userAccountId:");
    sb.append(this.userAccountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transDate:");
    if (this.transDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableMoney:");
    sb.append(this.availableMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentType:");
    sb.append(this.paymentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgFundFlowInfoStandardSchemeFactory implements SchemeFactory {
    public OrgFundFlowInfoStandardScheme getScheme() {
      return new OrgFundFlowInfoStandardScheme();
    }
  }

  private static class OrgFundFlowInfoStandardScheme extends StandardScheme<OrgFundFlowInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgFundFlowInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transType = iprot.readI32();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANS_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.transMoney = iprot.readDouble();
              struct.setTransMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userAccountId = iprot.readI32();
              struct.setUserAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transDate = iprot.readString();
              struct.setTransDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalMoney = iprot.readDouble();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVAILABLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableMoney = iprot.readDouble();
              struct.setAvailableMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentType = iprot.readI32();
              struct.setPaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgFundFlowInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.transType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANS_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.transMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ACCOUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.userAccountId);
      oprot.writeFieldEnd();
      if (struct.transDate != null) {
        oprot.writeFieldBegin(TRANS_DATE_FIELD_DESC);
        oprot.writeString(struct.transDate);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.availableMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.paymentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgFundFlowInfoTupleSchemeFactory implements SchemeFactory {
    public OrgFundFlowInfoTupleScheme getScheme() {
      return new OrgFundFlowInfoTupleScheme();
    }
  }

  private static class OrgFundFlowInfoTupleScheme extends TupleScheme<OrgFundFlowInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgFundFlowInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetTransType()) {
        optionals.set(1);
      }
      if (struct.isSetTransMoney()) {
        optionals.set(2);
      }
      if (struct.isSetUserAccountId()) {
        optionals.set(3);
      }
      if (struct.isSetTransDate()) {
        optionals.set(4);
      }
      if (struct.isSetTransNo()) {
        optionals.set(5);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(6);
      }
      if (struct.isSetAvailableMoney()) {
        optionals.set(7);
      }
      if (struct.isSetPaymentType()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTransType()) {
        oprot.writeI32(struct.transType);
      }
      if (struct.isSetTransMoney()) {
        oprot.writeDouble(struct.transMoney);
      }
      if (struct.isSetUserAccountId()) {
        oprot.writeI32(struct.userAccountId);
      }
      if (struct.isSetTransDate()) {
        oprot.writeString(struct.transDate);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeDouble(struct.totalMoney);
      }
      if (struct.isSetAvailableMoney()) {
        oprot.writeDouble(struct.availableMoney);
      }
      if (struct.isSetPaymentType()) {
        oprot.writeI32(struct.paymentType);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgFundFlowInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.transType = iprot.readI32();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transMoney = iprot.readDouble();
        struct.setTransMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userAccountId = iprot.readI32();
        struct.setUserAccountIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.transDate = iprot.readString();
        struct.setTransDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalMoney = iprot.readDouble();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.availableMoney = iprot.readDouble();
        struct.setAvailableMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.paymentType = iprot.readI32();
        struct.setPaymentTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


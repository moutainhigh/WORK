/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-5")
public class PartnerOrderSummary implements org.apache.thrift.TBase<PartnerOrderSummary, PartnerOrderSummary._Fields>, java.io.Serializable, Cloneable, Comparable<PartnerOrderSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerOrderSummary");

  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NOT_FEE_SETTLE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("notFeeSettleTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FEE_SETTLE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("feeSettleTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("orgTotal", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerOrderSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerOrderSummaryTupleSchemeFactory());
  }

  public int partner; // required
  public double notFeeSettleTotalMoney; // required
  public double feeSettleTotalMoney; // required
  public int orgTotal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER((short)1, "partner"),
    NOT_FEE_SETTLE_TOTAL_MONEY((short)2, "notFeeSettleTotalMoney"),
    FEE_SETTLE_TOTAL_MONEY((short)3, "feeSettleTotalMoney"),
    ORG_TOTAL((short)4, "orgTotal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER
          return PARTNER;
        case 2: // NOT_FEE_SETTLE_TOTAL_MONEY
          return NOT_FEE_SETTLE_TOTAL_MONEY;
        case 3: // FEE_SETTLE_TOTAL_MONEY
          return FEE_SETTLE_TOTAL_MONEY;
        case 4: // ORG_TOTAL
          return ORG_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTNER_ISSET_ID = 0;
  private static final int __NOTFEESETTLETOTALMONEY_ISSET_ID = 1;
  private static final int __FEESETTLETOTALMONEY_ISSET_ID = 2;
  private static final int __ORGTOTAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOT_FEE_SETTLE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("notFeeSettleTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE_SETTLE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("feeSettleTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORG_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("orgTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerOrderSummary.class, metaDataMap);
  }

  public PartnerOrderSummary() {
  }

  public PartnerOrderSummary(
    int partner,
    double notFeeSettleTotalMoney,
    double feeSettleTotalMoney,
    int orgTotal)
  {
    this();
    this.partner = partner;
    setPartnerIsSet(true);
    this.notFeeSettleTotalMoney = notFeeSettleTotalMoney;
    setNotFeeSettleTotalMoneyIsSet(true);
    this.feeSettleTotalMoney = feeSettleTotalMoney;
    setFeeSettleTotalMoneyIsSet(true);
    this.orgTotal = orgTotal;
    setOrgTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerOrderSummary(PartnerOrderSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partner = other.partner;
    this.notFeeSettleTotalMoney = other.notFeeSettleTotalMoney;
    this.feeSettleTotalMoney = other.feeSettleTotalMoney;
    this.orgTotal = other.orgTotal;
  }

  public PartnerOrderSummary deepCopy() {
    return new PartnerOrderSummary(this);
  }

  @Override
  public void clear() {
    setPartnerIsSet(false);
    this.partner = 0;
    setNotFeeSettleTotalMoneyIsSet(false);
    this.notFeeSettleTotalMoney = 0.0;
    setFeeSettleTotalMoneyIsSet(false);
    this.feeSettleTotalMoney = 0.0;
    setOrgTotalIsSet(false);
    this.orgTotal = 0;
  }

  public int getPartner() {
    return this.partner;
  }

  public PartnerOrderSummary setPartner(int partner) {
    this.partner = partner;
    setPartnerIsSet(true);
    return this;
  }

  public void unsetPartner() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNER_ISSET_ID);
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNER_ISSET_ID);
  }

  public void setPartnerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNER_ISSET_ID, value);
  }

  public double getNotFeeSettleTotalMoney() {
    return this.notFeeSettleTotalMoney;
  }

  public PartnerOrderSummary setNotFeeSettleTotalMoney(double notFeeSettleTotalMoney) {
    this.notFeeSettleTotalMoney = notFeeSettleTotalMoney;
    setNotFeeSettleTotalMoneyIsSet(true);
    return this;
  }

  public void unsetNotFeeSettleTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTFEESETTLETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field notFeeSettleTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNotFeeSettleTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTFEESETTLETOTALMONEY_ISSET_ID);
  }

  public void setNotFeeSettleTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTFEESETTLETOTALMONEY_ISSET_ID, value);
  }

  public double getFeeSettleTotalMoney() {
    return this.feeSettleTotalMoney;
  }

  public PartnerOrderSummary setFeeSettleTotalMoney(double feeSettleTotalMoney) {
    this.feeSettleTotalMoney = feeSettleTotalMoney;
    setFeeSettleTotalMoneyIsSet(true);
    return this;
  }

  public void unsetFeeSettleTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field feeSettleTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeSettleTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID);
  }

  public void setFeeSettleTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEESETTLETOTALMONEY_ISSET_ID, value);
  }

  public int getOrgTotal() {
    return this.orgTotal;
  }

  public PartnerOrderSummary setOrgTotal(int orgTotal) {
    this.orgTotal = orgTotal;
    setOrgTotalIsSet(true);
    return this;
  }

  public void unsetOrgTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGTOTAL_ISSET_ID);
  }

  /** Returns true if field orgTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGTOTAL_ISSET_ID);
  }

  public void setOrgTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGTOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((Integer)value);
      }
      break;

    case NOT_FEE_SETTLE_TOTAL_MONEY:
      if (value == null) {
        unsetNotFeeSettleTotalMoney();
      } else {
        setNotFeeSettleTotalMoney((Double)value);
      }
      break;

    case FEE_SETTLE_TOTAL_MONEY:
      if (value == null) {
        unsetFeeSettleTotalMoney();
      } else {
        setFeeSettleTotalMoney((Double)value);
      }
      break;

    case ORG_TOTAL:
      if (value == null) {
        unsetOrgTotal();
      } else {
        setOrgTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER:
      return Integer.valueOf(getPartner());

    case NOT_FEE_SETTLE_TOTAL_MONEY:
      return Double.valueOf(getNotFeeSettleTotalMoney());

    case FEE_SETTLE_TOTAL_MONEY:
      return Double.valueOf(getFeeSettleTotalMoney());

    case ORG_TOTAL:
      return Integer.valueOf(getOrgTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER:
      return isSetPartner();
    case NOT_FEE_SETTLE_TOTAL_MONEY:
      return isSetNotFeeSettleTotalMoney();
    case FEE_SETTLE_TOTAL_MONEY:
      return isSetFeeSettleTotalMoney();
    case ORG_TOTAL:
      return isSetOrgTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerOrderSummary)
      return this.equals((PartnerOrderSummary)that);
    return false;
  }

  public boolean equals(PartnerOrderSummary that) {
    if (that == null)
      return false;

    boolean this_present_partner = true;
    boolean that_present_partner = true;
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (this.partner != that.partner)
        return false;
    }

    boolean this_present_notFeeSettleTotalMoney = true;
    boolean that_present_notFeeSettleTotalMoney = true;
    if (this_present_notFeeSettleTotalMoney || that_present_notFeeSettleTotalMoney) {
      if (!(this_present_notFeeSettleTotalMoney && that_present_notFeeSettleTotalMoney))
        return false;
      if (this.notFeeSettleTotalMoney != that.notFeeSettleTotalMoney)
        return false;
    }

    boolean this_present_feeSettleTotalMoney = true;
    boolean that_present_feeSettleTotalMoney = true;
    if (this_present_feeSettleTotalMoney || that_present_feeSettleTotalMoney) {
      if (!(this_present_feeSettleTotalMoney && that_present_feeSettleTotalMoney))
        return false;
      if (this.feeSettleTotalMoney != that.feeSettleTotalMoney)
        return false;
    }

    boolean this_present_orgTotal = true;
    boolean that_present_orgTotal = true;
    if (this_present_orgTotal || that_present_orgTotal) {
      if (!(this_present_orgTotal && that_present_orgTotal))
        return false;
      if (this.orgTotal != that.orgTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partner = true;
    list.add(present_partner);
    if (present_partner)
      list.add(partner);

    boolean present_notFeeSettleTotalMoney = true;
    list.add(present_notFeeSettleTotalMoney);
    if (present_notFeeSettleTotalMoney)
      list.add(notFeeSettleTotalMoney);

    boolean present_feeSettleTotalMoney = true;
    list.add(present_feeSettleTotalMoney);
    if (present_feeSettleTotalMoney)
      list.add(feeSettleTotalMoney);

    boolean present_orgTotal = true;
    list.add(present_orgTotal);
    if (present_orgTotal)
      list.add(orgTotal);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartnerOrderSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotFeeSettleTotalMoney()).compareTo(other.isSetNotFeeSettleTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotFeeSettleTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFeeSettleTotalMoney, other.notFeeSettleTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeSettleTotalMoney()).compareTo(other.isSetFeeSettleTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeSettleTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeSettleTotalMoney, other.feeSettleTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgTotal()).compareTo(other.isSetOrgTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgTotal, other.orgTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerOrderSummary(");
    boolean first = true;

    sb.append("partner:");
    sb.append(this.partner);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notFeeSettleTotalMoney:");
    sb.append(this.notFeeSettleTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeSettleTotalMoney:");
    sb.append(this.feeSettleTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgTotal:");
    sb.append(this.orgTotal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerOrderSummaryStandardSchemeFactory implements SchemeFactory {
    public PartnerOrderSummaryStandardScheme getScheme() {
      return new PartnerOrderSummaryStandardScheme();
    }
  }

  private static class PartnerOrderSummaryStandardScheme extends StandardScheme<PartnerOrderSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerOrderSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partner = iprot.readI32();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOT_FEE_SETTLE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notFeeSettleTotalMoney = iprot.readDouble();
              struct.setNotFeeSettleTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEE_SETTLE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeSettleTotalMoney = iprot.readDouble();
              struct.setFeeSettleTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgTotal = iprot.readI32();
              struct.setOrgTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerOrderSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARTNER_FIELD_DESC);
      oprot.writeI32(struct.partner);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOT_FEE_SETTLE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.notFeeSettleTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEE_SETTLE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.feeSettleTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.orgTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerOrderSummaryTupleSchemeFactory implements SchemeFactory {
    public PartnerOrderSummaryTupleScheme getScheme() {
      return new PartnerOrderSummaryTupleScheme();
    }
  }

  private static class PartnerOrderSummaryTupleScheme extends TupleScheme<PartnerOrderSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerOrderSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartner()) {
        optionals.set(0);
      }
      if (struct.isSetNotFeeSettleTotalMoney()) {
        optionals.set(1);
      }
      if (struct.isSetFeeSettleTotalMoney()) {
        optionals.set(2);
      }
      if (struct.isSetOrgTotal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPartner()) {
        oprot.writeI32(struct.partner);
      }
      if (struct.isSetNotFeeSettleTotalMoney()) {
        oprot.writeDouble(struct.notFeeSettleTotalMoney);
      }
      if (struct.isSetFeeSettleTotalMoney()) {
        oprot.writeDouble(struct.feeSettleTotalMoney);
      }
      if (struct.isSetOrgTotal()) {
        oprot.writeI32(struct.orgTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerOrderSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.partner = iprot.readI32();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.notFeeSettleTotalMoney = iprot.readDouble();
        struct.setNotFeeSettleTotalMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.feeSettleTotalMoney = iprot.readDouble();
        struct.setFeeSettleTotalMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgTotal = iprot.readI32();
        struct.setOrgTotalIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class OrgUserFunAccount implements org.apache.thrift.TBase<OrgUserFunAccount, OrgUserFunAccount._Fields>, java.io.Serializable, Cloneable, Comparable<OrgUserFunAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgUserFunAccount");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField AVAILABLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("availableMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FREEZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TRADER_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("traderPassword", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgUserFunAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgUserFunAccountTupleSchemeFactory());
  }

  public int pid; // required
  public int userId; // required
  public double totalMoney; // required
  public double availableMoney; // required
  public double freezeMoney; // required
  public String traderPassword; // required
  public String updateDate; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    USER_ID((short)2, "userId"),
    TOTAL_MONEY((short)3, "totalMoney"),
    AVAILABLE_MONEY((short)4, "availableMoney"),
    FREEZE_MONEY((short)5, "freezeMoney"),
    TRADER_PASSWORD((short)6, "traderPassword"),
    UPDATE_DATE((short)7, "updateDate"),
    STATUS((short)8, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 4: // AVAILABLE_MONEY
          return AVAILABLE_MONEY;
        case 5: // FREEZE_MONEY
          return FREEZE_MONEY;
        case 6: // TRADER_PASSWORD
          return TRADER_PASSWORD;
        case 7: // UPDATE_DATE
          return UPDATE_DATE;
        case 8: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __TOTALMONEY_ISSET_ID = 2;
  private static final int __AVAILABLEMONEY_ISSET_ID = 3;
  private static final int __FREEZEMONEY_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("availableMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FREEZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("freezeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADER_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("traderPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgUserFunAccount.class, metaDataMap);
  }

  public OrgUserFunAccount() {
  }

  public OrgUserFunAccount(
    int pid,
    int userId,
    double totalMoney,
    double availableMoney,
    double freezeMoney,
    String traderPassword,
    String updateDate,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    this.freezeMoney = freezeMoney;
    setFreezeMoneyIsSet(true);
    this.traderPassword = traderPassword;
    this.updateDate = updateDate;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgUserFunAccount(OrgUserFunAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.userId = other.userId;
    this.totalMoney = other.totalMoney;
    this.availableMoney = other.availableMoney;
    this.freezeMoney = other.freezeMoney;
    if (other.isSetTraderPassword()) {
      this.traderPassword = other.traderPassword;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.status = other.status;
  }

  public OrgUserFunAccount deepCopy() {
    return new OrgUserFunAccount(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    setAvailableMoneyIsSet(false);
    this.availableMoney = 0.0;
    setFreezeMoneyIsSet(false);
    this.freezeMoney = 0.0;
    this.traderPassword = null;
    this.updateDate = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgUserFunAccount setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public OrgUserFunAccount setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public double getTotalMoney() {
    return this.totalMoney;
  }

  public OrgUserFunAccount setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public double getAvailableMoney() {
    return this.availableMoney;
  }

  public OrgUserFunAccount setAvailableMoney(double availableMoney) {
    this.availableMoney = availableMoney;
    setAvailableMoneyIsSet(true);
    return this;
  }

  public void unsetAvailableMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  /** Returns true if field availableMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID);
  }

  public void setAvailableMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEMONEY_ISSET_ID, value);
  }

  public double getFreezeMoney() {
    return this.freezeMoney;
  }

  public OrgUserFunAccount setFreezeMoney(double freezeMoney) {
    this.freezeMoney = freezeMoney;
    setFreezeMoneyIsSet(true);
    return this;
  }

  public void unsetFreezeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEZEMONEY_ISSET_ID);
  }

  /** Returns true if field freezeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEZEMONEY_ISSET_ID);
  }

  public void setFreezeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEZEMONEY_ISSET_ID, value);
  }

  public String getTraderPassword() {
    return this.traderPassword;
  }

  public OrgUserFunAccount setTraderPassword(String traderPassword) {
    this.traderPassword = traderPassword;
    return this;
  }

  public void unsetTraderPassword() {
    this.traderPassword = null;
  }

  /** Returns true if field traderPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderPassword() {
    return this.traderPassword != null;
  }

  public void setTraderPasswordIsSet(boolean value) {
    if (!value) {
      this.traderPassword = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgUserFunAccount setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public OrgUserFunAccount setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case AVAILABLE_MONEY:
      if (value == null) {
        unsetAvailableMoney();
      } else {
        setAvailableMoney((Double)value);
      }
      break;

    case FREEZE_MONEY:
      if (value == null) {
        unsetFreezeMoney();
      } else {
        setFreezeMoney((Double)value);
      }
      break;

    case TRADER_PASSWORD:
      if (value == null) {
        unsetTraderPassword();
      } else {
        setTraderPassword((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case TOTAL_MONEY:
      return Double.valueOf(getTotalMoney());

    case AVAILABLE_MONEY:
      return Double.valueOf(getAvailableMoney());

    case FREEZE_MONEY:
      return Double.valueOf(getFreezeMoney());

    case TRADER_PASSWORD:
      return getTraderPassword();

    case UPDATE_DATE:
      return getUpdateDate();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case USER_ID:
      return isSetUserId();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case AVAILABLE_MONEY:
      return isSetAvailableMoney();
    case FREEZE_MONEY:
      return isSetFreezeMoney();
    case TRADER_PASSWORD:
      return isSetTraderPassword();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgUserFunAccount)
      return this.equals((OrgUserFunAccount)that);
    return false;
  }

  public boolean equals(OrgUserFunAccount that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_availableMoney = true;
    boolean that_present_availableMoney = true;
    if (this_present_availableMoney || that_present_availableMoney) {
      if (!(this_present_availableMoney && that_present_availableMoney))
        return false;
      if (this.availableMoney != that.availableMoney)
        return false;
    }

    boolean this_present_freezeMoney = true;
    boolean that_present_freezeMoney = true;
    if (this_present_freezeMoney || that_present_freezeMoney) {
      if (!(this_present_freezeMoney && that_present_freezeMoney))
        return false;
      if (this.freezeMoney != that.freezeMoney)
        return false;
    }

    boolean this_present_traderPassword = true && this.isSetTraderPassword();
    boolean that_present_traderPassword = true && that.isSetTraderPassword();
    if (this_present_traderPassword || that_present_traderPassword) {
      if (!(this_present_traderPassword && that_present_traderPassword))
        return false;
      if (!this.traderPassword.equals(that.traderPassword))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_totalMoney = true;
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_availableMoney = true;
    list.add(present_availableMoney);
    if (present_availableMoney)
      list.add(availableMoney);

    boolean present_freezeMoney = true;
    list.add(present_freezeMoney);
    if (present_freezeMoney)
      list.add(freezeMoney);

    boolean present_traderPassword = true && (isSetTraderPassword());
    list.add(present_traderPassword);
    if (present_traderPassword)
      list.add(traderPassword);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgUserFunAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableMoney()).compareTo(other.isSetAvailableMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableMoney, other.availableMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeMoney()).compareTo(other.isSetFreezeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeMoney, other.freezeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderPassword()).compareTo(other.isSetTraderPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderPassword, other.traderPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgUserFunAccount(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableMoney:");
    sb.append(this.availableMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeMoney:");
    sb.append(this.freezeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderPassword:");
    if (this.traderPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.traderPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgUserFunAccountStandardSchemeFactory implements SchemeFactory {
    public OrgUserFunAccountStandardScheme getScheme() {
      return new OrgUserFunAccountStandardScheme();
    }
  }

  private static class OrgUserFunAccountStandardScheme extends StandardScheme<OrgUserFunAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgUserFunAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalMoney = iprot.readDouble();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVAILABLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableMoney = iprot.readDouble();
              struct.setAvailableMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREEZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.freezeMoney = iprot.readDouble();
              struct.setFreezeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADER_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderPassword = iprot.readString();
              struct.setTraderPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgUserFunAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.availableMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEZE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.freezeMoney);
      oprot.writeFieldEnd();
      if (struct.traderPassword != null) {
        oprot.writeFieldBegin(TRADER_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.traderPassword);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgUserFunAccountTupleSchemeFactory implements SchemeFactory {
    public OrgUserFunAccountTupleScheme getScheme() {
      return new OrgUserFunAccountTupleScheme();
    }
  }

  private static class OrgUserFunAccountTupleScheme extends TupleScheme<OrgUserFunAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgUserFunAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(2);
      }
      if (struct.isSetAvailableMoney()) {
        optionals.set(3);
      }
      if (struct.isSetFreezeMoney()) {
        optionals.set(4);
      }
      if (struct.isSetTraderPassword()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeDouble(struct.totalMoney);
      }
      if (struct.isSetAvailableMoney()) {
        oprot.writeDouble(struct.availableMoney);
      }
      if (struct.isSetFreezeMoney()) {
        oprot.writeDouble(struct.freezeMoney);
      }
      if (struct.isSetTraderPassword()) {
        oprot.writeString(struct.traderPassword);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgUserFunAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalMoney = iprot.readDouble();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.availableMoney = iprot.readDouble();
        struct.setAvailableMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.freezeMoney = iprot.readDouble();
        struct.setFreezeMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traderPassword = iprot.readString();
        struct.setTraderPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


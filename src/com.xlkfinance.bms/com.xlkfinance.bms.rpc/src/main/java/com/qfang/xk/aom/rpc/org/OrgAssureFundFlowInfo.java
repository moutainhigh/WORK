/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgAssureFundFlowInfo implements org.apache.thrift.TBase<OrgAssureFundFlowInfo, OrgAssureFundFlowInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrgAssureFundFlowInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgAssureFundFlowInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CUR_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("curAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDateTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField AUDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("audit", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AUDIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField OLD_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CUR_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("curCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgAssureFundFlowInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgAssureFundFlowInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int applyId; // required
  public double oldAssureMoney; // required
  public double curAssureMoney; // required
  public String updateDate; // required
  public int operator; // required
  public String createdDateTime; // required
  public String audit; // required
  public String auditDate; // required
  public int auditId; // required
  public int status; // required
  public double oldCreditLimit; // required
  public double curCreditLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    APPLY_ID((short)2, "applyId"),
    OLD_ASSURE_MONEY((short)3, "oldAssureMoney"),
    CUR_ASSURE_MONEY((short)4, "curAssureMoney"),
    UPDATE_DATE((short)5, "updateDate"),
    OPERATOR((short)6, "operator"),
    CREATED_DATE_TIME((short)7, "createdDateTime"),
    AUDIT((short)8, "audit"),
    AUDIT_DATE((short)9, "auditDate"),
    AUDIT_ID((short)10, "auditId"),
    STATUS((short)11, "status"),
    OLD_CREDIT_LIMIT((short)12, "oldCreditLimit"),
    CUR_CREDIT_LIMIT((short)13, "curCreditLimit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // APPLY_ID
          return APPLY_ID;
        case 3: // OLD_ASSURE_MONEY
          return OLD_ASSURE_MONEY;
        case 4: // CUR_ASSURE_MONEY
          return CUR_ASSURE_MONEY;
        case 5: // UPDATE_DATE
          return UPDATE_DATE;
        case 6: // OPERATOR
          return OPERATOR;
        case 7: // CREATED_DATE_TIME
          return CREATED_DATE_TIME;
        case 8: // AUDIT
          return AUDIT;
        case 9: // AUDIT_DATE
          return AUDIT_DATE;
        case 10: // AUDIT_ID
          return AUDIT_ID;
        case 11: // STATUS
          return STATUS;
        case 12: // OLD_CREDIT_LIMIT
          return OLD_CREDIT_LIMIT;
        case 13: // CUR_CREDIT_LIMIT
          return CUR_CREDIT_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __APPLYID_ISSET_ID = 1;
  private static final int __OLDASSUREMONEY_ISSET_ID = 2;
  private static final int __CURASSUREMONEY_ISSET_ID = 3;
  private static final int __OPERATOR_ISSET_ID = 4;
  private static final int __AUDITID_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __OLDCREDITLIMIT_ISSET_ID = 7;
  private static final int __CURCREDITLIMIT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUR_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("curAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT, new org.apache.thrift.meta_data.FieldMetaData("audit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("auditDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("oldCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUR_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("curCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgAssureFundFlowInfo.class, metaDataMap);
  }

  public OrgAssureFundFlowInfo() {
  }

  public OrgAssureFundFlowInfo(
    int pid,
    int applyId,
    double oldAssureMoney,
    double curAssureMoney,
    String updateDate,
    int operator,
    String createdDateTime,
    String audit,
    String auditDate,
    int auditId,
    int status,
    double oldCreditLimit,
    double curCreditLimit)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.applyId = applyId;
    setApplyIdIsSet(true);
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    this.curAssureMoney = curAssureMoney;
    setCurAssureMoneyIsSet(true);
    this.updateDate = updateDate;
    this.operator = operator;
    setOperatorIsSet(true);
    this.createdDateTime = createdDateTime;
    this.audit = audit;
    this.auditDate = auditDate;
    this.auditId = auditId;
    setAuditIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.oldCreditLimit = oldCreditLimit;
    setOldCreditLimitIsSet(true);
    this.curCreditLimit = curCreditLimit;
    setCurCreditLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgAssureFundFlowInfo(OrgAssureFundFlowInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.applyId = other.applyId;
    this.oldAssureMoney = other.oldAssureMoney;
    this.curAssureMoney = other.curAssureMoney;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.operator = other.operator;
    if (other.isSetCreatedDateTime()) {
      this.createdDateTime = other.createdDateTime;
    }
    if (other.isSetAudit()) {
      this.audit = other.audit;
    }
    if (other.isSetAuditDate()) {
      this.auditDate = other.auditDate;
    }
    this.auditId = other.auditId;
    this.status = other.status;
    this.oldCreditLimit = other.oldCreditLimit;
    this.curCreditLimit = other.curCreditLimit;
  }

  public OrgAssureFundFlowInfo deepCopy() {
    return new OrgAssureFundFlowInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setApplyIdIsSet(false);
    this.applyId = 0;
    setOldAssureMoneyIsSet(false);
    this.oldAssureMoney = 0.0;
    setCurAssureMoneyIsSet(false);
    this.curAssureMoney = 0.0;
    this.updateDate = null;
    setOperatorIsSet(false);
    this.operator = 0;
    this.createdDateTime = null;
    this.audit = null;
    this.auditDate = null;
    setAuditIdIsSet(false);
    this.auditId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setOldCreditLimitIsSet(false);
    this.oldCreditLimit = 0.0;
    setCurCreditLimitIsSet(false);
    this.curCreditLimit = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgAssureFundFlowInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getApplyId() {
    return this.applyId;
  }

  public OrgAssureFundFlowInfo setApplyId(int applyId) {
    this.applyId = applyId;
    setApplyIdIsSet(true);
    return this;
  }

  public void unsetApplyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  public void setApplyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYID_ISSET_ID, value);
  }

  public double getOldAssureMoney() {
    return this.oldAssureMoney;
  }

  public OrgAssureFundFlowInfo setOldAssureMoney(double oldAssureMoney) {
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    return this;
  }

  public void unsetOldAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field oldAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  public void setOldAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID, value);
  }

  public double getCurAssureMoney() {
    return this.curAssureMoney;
  }

  public OrgAssureFundFlowInfo setCurAssureMoney(double curAssureMoney) {
    this.curAssureMoney = curAssureMoney;
    setCurAssureMoneyIsSet(true);
    return this;
  }

  public void unsetCurAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field curAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID);
  }

  public void setCurAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgAssureFundFlowInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getOperator() {
    return this.operator;
  }

  public OrgAssureFundFlowInfo setOperator(int operator) {
    this.operator = operator;
    setOperatorIsSet(true);
    return this;
  }

  public void unsetOperator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  public void setOperatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATOR_ISSET_ID, value);
  }

  public String getCreatedDateTime() {
    return this.createdDateTime;
  }

  public OrgAssureFundFlowInfo setCreatedDateTime(String createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  public void unsetCreatedDateTime() {
    this.createdDateTime = null;
  }

  /** Returns true if field createdDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDateTime() {
    return this.createdDateTime != null;
  }

  public void setCreatedDateTimeIsSet(boolean value) {
    if (!value) {
      this.createdDateTime = null;
    }
  }

  public String getAudit() {
    return this.audit;
  }

  public OrgAssureFundFlowInfo setAudit(String audit) {
    this.audit = audit;
    return this;
  }

  public void unsetAudit() {
    this.audit = null;
  }

  /** Returns true if field audit is set (has been assigned a value) and false otherwise */
  public boolean isSetAudit() {
    return this.audit != null;
  }

  public void setAuditIsSet(boolean value) {
    if (!value) {
      this.audit = null;
    }
  }

  public String getAuditDate() {
    return this.auditDate;
  }

  public OrgAssureFundFlowInfo setAuditDate(String auditDate) {
    this.auditDate = auditDate;
    return this;
  }

  public void unsetAuditDate() {
    this.auditDate = null;
  }

  /** Returns true if field auditDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditDate() {
    return this.auditDate != null;
  }

  public void setAuditDateIsSet(boolean value) {
    if (!value) {
      this.auditDate = null;
    }
  }

  public int getAuditId() {
    return this.auditId;
  }

  public OrgAssureFundFlowInfo setAuditId(int auditId) {
    this.auditId = auditId;
    setAuditIdIsSet(true);
    return this;
  }

  public void unsetAuditId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITID_ISSET_ID);
  }

  /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditId() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITID_ISSET_ID);
  }

  public void setAuditIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OrgAssureFundFlowInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getOldCreditLimit() {
    return this.oldCreditLimit;
  }

  public OrgAssureFundFlowInfo setOldCreditLimit(double oldCreditLimit) {
    this.oldCreditLimit = oldCreditLimit;
    setOldCreditLimitIsSet(true);
    return this;
  }

  public void unsetOldCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field oldCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetOldCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID);
  }

  public void setOldCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDCREDITLIMIT_ISSET_ID, value);
  }

  public double getCurCreditLimit() {
    return this.curCreditLimit;
  }

  public OrgAssureFundFlowInfo setCurCreditLimit(double curCreditLimit) {
    this.curCreditLimit = curCreditLimit;
    setCurCreditLimitIsSet(true);
    return this;
  }

  public void unsetCurCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURCREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field curCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCurCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CURCREDITLIMIT_ISSET_ID);
  }

  public void setCurCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURCREDITLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((Integer)value);
      }
      break;

    case OLD_ASSURE_MONEY:
      if (value == null) {
        unsetOldAssureMoney();
      } else {
        setOldAssureMoney((Double)value);
      }
      break;

    case CUR_ASSURE_MONEY:
      if (value == null) {
        unsetCurAssureMoney();
      } else {
        setCurAssureMoney((Double)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((Integer)value);
      }
      break;

    case CREATED_DATE_TIME:
      if (value == null) {
        unsetCreatedDateTime();
      } else {
        setCreatedDateTime((String)value);
      }
      break;

    case AUDIT:
      if (value == null) {
        unsetAudit();
      } else {
        setAudit((String)value);
      }
      break;

    case AUDIT_DATE:
      if (value == null) {
        unsetAuditDate();
      } else {
        setAuditDate((String)value);
      }
      break;

    case AUDIT_ID:
      if (value == null) {
        unsetAuditId();
      } else {
        setAuditId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case OLD_CREDIT_LIMIT:
      if (value == null) {
        unsetOldCreditLimit();
      } else {
        setOldCreditLimit((Double)value);
      }
      break;

    case CUR_CREDIT_LIMIT:
      if (value == null) {
        unsetCurCreditLimit();
      } else {
        setCurCreditLimit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case APPLY_ID:
      return Integer.valueOf(getApplyId());

    case OLD_ASSURE_MONEY:
      return Double.valueOf(getOldAssureMoney());

    case CUR_ASSURE_MONEY:
      return Double.valueOf(getCurAssureMoney());

    case UPDATE_DATE:
      return getUpdateDate();

    case OPERATOR:
      return Integer.valueOf(getOperator());

    case CREATED_DATE_TIME:
      return getCreatedDateTime();

    case AUDIT:
      return getAudit();

    case AUDIT_DATE:
      return getAuditDate();

    case AUDIT_ID:
      return Integer.valueOf(getAuditId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case OLD_CREDIT_LIMIT:
      return Double.valueOf(getOldCreditLimit());

    case CUR_CREDIT_LIMIT:
      return Double.valueOf(getCurCreditLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case APPLY_ID:
      return isSetApplyId();
    case OLD_ASSURE_MONEY:
      return isSetOldAssureMoney();
    case CUR_ASSURE_MONEY:
      return isSetCurAssureMoney();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case OPERATOR:
      return isSetOperator();
    case CREATED_DATE_TIME:
      return isSetCreatedDateTime();
    case AUDIT:
      return isSetAudit();
    case AUDIT_DATE:
      return isSetAuditDate();
    case AUDIT_ID:
      return isSetAuditId();
    case STATUS:
      return isSetStatus();
    case OLD_CREDIT_LIMIT:
      return isSetOldCreditLimit();
    case CUR_CREDIT_LIMIT:
      return isSetCurCreditLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgAssureFundFlowInfo)
      return this.equals((OrgAssureFundFlowInfo)that);
    return false;
  }

  public boolean equals(OrgAssureFundFlowInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_applyId = true;
    boolean that_present_applyId = true;
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (this.applyId != that.applyId)
        return false;
    }

    boolean this_present_oldAssureMoney = true;
    boolean that_present_oldAssureMoney = true;
    if (this_present_oldAssureMoney || that_present_oldAssureMoney) {
      if (!(this_present_oldAssureMoney && that_present_oldAssureMoney))
        return false;
      if (this.oldAssureMoney != that.oldAssureMoney)
        return false;
    }

    boolean this_present_curAssureMoney = true;
    boolean that_present_curAssureMoney = true;
    if (this_present_curAssureMoney || that_present_curAssureMoney) {
      if (!(this_present_curAssureMoney && that_present_curAssureMoney))
        return false;
      if (this.curAssureMoney != that.curAssureMoney)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_operator = true;
    boolean that_present_operator = true;
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (this.operator != that.operator)
        return false;
    }

    boolean this_present_createdDateTime = true && this.isSetCreatedDateTime();
    boolean that_present_createdDateTime = true && that.isSetCreatedDateTime();
    if (this_present_createdDateTime || that_present_createdDateTime) {
      if (!(this_present_createdDateTime && that_present_createdDateTime))
        return false;
      if (!this.createdDateTime.equals(that.createdDateTime))
        return false;
    }

    boolean this_present_audit = true && this.isSetAudit();
    boolean that_present_audit = true && that.isSetAudit();
    if (this_present_audit || that_present_audit) {
      if (!(this_present_audit && that_present_audit))
        return false;
      if (!this.audit.equals(that.audit))
        return false;
    }

    boolean this_present_auditDate = true && this.isSetAuditDate();
    boolean that_present_auditDate = true && that.isSetAuditDate();
    if (this_present_auditDate || that_present_auditDate) {
      if (!(this_present_auditDate && that_present_auditDate))
        return false;
      if (!this.auditDate.equals(that.auditDate))
        return false;
    }

    boolean this_present_auditId = true;
    boolean that_present_auditId = true;
    if (this_present_auditId || that_present_auditId) {
      if (!(this_present_auditId && that_present_auditId))
        return false;
      if (this.auditId != that.auditId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_oldCreditLimit = true;
    boolean that_present_oldCreditLimit = true;
    if (this_present_oldCreditLimit || that_present_oldCreditLimit) {
      if (!(this_present_oldCreditLimit && that_present_oldCreditLimit))
        return false;
      if (this.oldCreditLimit != that.oldCreditLimit)
        return false;
    }

    boolean this_present_curCreditLimit = true;
    boolean that_present_curCreditLimit = true;
    if (this_present_curCreditLimit || that_present_curCreditLimit) {
      if (!(this_present_curCreditLimit && that_present_curCreditLimit))
        return false;
      if (this.curCreditLimit != that.curCreditLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_applyId = true;
    list.add(present_applyId);
    if (present_applyId)
      list.add(applyId);

    boolean present_oldAssureMoney = true;
    list.add(present_oldAssureMoney);
    if (present_oldAssureMoney)
      list.add(oldAssureMoney);

    boolean present_curAssureMoney = true;
    list.add(present_curAssureMoney);
    if (present_curAssureMoney)
      list.add(curAssureMoney);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_operator = true;
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_createdDateTime = true && (isSetCreatedDateTime());
    list.add(present_createdDateTime);
    if (present_createdDateTime)
      list.add(createdDateTime);

    boolean present_audit = true && (isSetAudit());
    list.add(present_audit);
    if (present_audit)
      list.add(audit);

    boolean present_auditDate = true && (isSetAuditDate());
    list.add(present_auditDate);
    if (present_auditDate)
      list.add(auditDate);

    boolean present_auditId = true;
    list.add(present_auditId);
    if (present_auditId)
      list.add(auditId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_oldCreditLimit = true;
    list.add(present_oldCreditLimit);
    if (present_oldCreditLimit)
      list.add(oldCreditLimit);

    boolean present_curCreditLimit = true;
    list.add(present_curCreditLimit);
    if (present_curCreditLimit)
      list.add(curCreditLimit);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgAssureFundFlowInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldAssureMoney()).compareTo(other.isSetOldAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldAssureMoney, other.oldAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurAssureMoney()).compareTo(other.isSetCurAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curAssureMoney, other.curAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDateTime()).compareTo(other.isSetCreatedDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDateTime, other.createdDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudit()).compareTo(other.isSetAudit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audit, other.audit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditDate()).compareTo(other.isSetAuditDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditDate, other.auditDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldCreditLimit()).compareTo(other.isSetOldCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldCreditLimit, other.oldCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurCreditLimit()).compareTo(other.isSetCurCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curCreditLimit, other.curCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgAssureFundFlowInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyId:");
    sb.append(this.applyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldAssureMoney:");
    sb.append(this.oldAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curAssureMoney:");
    sb.append(this.curAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    sb.append(this.operator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDateTime:");
    if (this.createdDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createdDateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audit:");
    if (this.audit == null) {
      sb.append("null");
    } else {
      sb.append(this.audit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditDate:");
    if (this.auditDate == null) {
      sb.append("null");
    } else {
      sb.append(this.auditDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditId:");
    sb.append(this.auditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldCreditLimit:");
    sb.append(this.oldCreditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curCreditLimit:");
    sb.append(this.curCreditLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgAssureFundFlowInfoStandardSchemeFactory implements SchemeFactory {
    public OrgAssureFundFlowInfoStandardScheme getScheme() {
      return new OrgAssureFundFlowInfoStandardScheme();
    }
  }

  private static class OrgAssureFundFlowInfoStandardScheme extends StandardScheme<OrgAssureFundFlowInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgAssureFundFlowInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyId = iprot.readI32();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldAssureMoney = iprot.readDouble();
              struct.setOldAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUR_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curAssureMoney = iprot.readDouble();
              struct.setCurAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operator = iprot.readI32();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATED_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdDateTime = iprot.readString();
              struct.setCreatedDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AUDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audit = iprot.readString();
              struct.setAuditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUDIT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditDate = iprot.readString();
              struct.setAuditDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditId = iprot.readI32();
              struct.setAuditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OLD_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldCreditLimit = iprot.readDouble();
              struct.setOldCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CUR_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curCreditLimit = iprot.readDouble();
              struct.setCurCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgAssureFundFlowInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
      oprot.writeI32(struct.applyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldAssureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.curAssureMoney);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
      oprot.writeI32(struct.operator);
      oprot.writeFieldEnd();
      if (struct.createdDateTime != null) {
        oprot.writeFieldBegin(CREATED_DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createdDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.audit != null) {
        oprot.writeFieldBegin(AUDIT_FIELD_DESC);
        oprot.writeString(struct.audit);
        oprot.writeFieldEnd();
      }
      if (struct.auditDate != null) {
        oprot.writeFieldBegin(AUDIT_DATE_FIELD_DESC);
        oprot.writeString(struct.auditDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.auditId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.oldCreditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.curCreditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgAssureFundFlowInfoTupleSchemeFactory implements SchemeFactory {
    public OrgAssureFundFlowInfoTupleScheme getScheme() {
      return new OrgAssureFundFlowInfoTupleScheme();
    }
  }

  private static class OrgAssureFundFlowInfoTupleScheme extends TupleScheme<OrgAssureFundFlowInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgAssureFundFlowInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetApplyId()) {
        optionals.set(1);
      }
      if (struct.isSetOldAssureMoney()) {
        optionals.set(2);
      }
      if (struct.isSetCurAssureMoney()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(4);
      }
      if (struct.isSetOperator()) {
        optionals.set(5);
      }
      if (struct.isSetCreatedDateTime()) {
        optionals.set(6);
      }
      if (struct.isSetAudit()) {
        optionals.set(7);
      }
      if (struct.isSetAuditDate()) {
        optionals.set(8);
      }
      if (struct.isSetAuditId()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetOldCreditLimit()) {
        optionals.set(11);
      }
      if (struct.isSetCurCreditLimit()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetApplyId()) {
        oprot.writeI32(struct.applyId);
      }
      if (struct.isSetOldAssureMoney()) {
        oprot.writeDouble(struct.oldAssureMoney);
      }
      if (struct.isSetCurAssureMoney()) {
        oprot.writeDouble(struct.curAssureMoney);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetOperator()) {
        oprot.writeI32(struct.operator);
      }
      if (struct.isSetCreatedDateTime()) {
        oprot.writeString(struct.createdDateTime);
      }
      if (struct.isSetAudit()) {
        oprot.writeString(struct.audit);
      }
      if (struct.isSetAuditDate()) {
        oprot.writeString(struct.auditDate);
      }
      if (struct.isSetAuditId()) {
        oprot.writeI32(struct.auditId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetOldCreditLimit()) {
        oprot.writeDouble(struct.oldCreditLimit);
      }
      if (struct.isSetCurCreditLimit()) {
        oprot.writeDouble(struct.curCreditLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgAssureFundFlowInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applyId = iprot.readI32();
        struct.setApplyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.oldAssureMoney = iprot.readDouble();
        struct.setOldAssureMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.curAssureMoney = iprot.readDouble();
        struct.setCurAssureMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operator = iprot.readI32();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createdDateTime = iprot.readString();
        struct.setCreatedDateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.audit = iprot.readString();
        struct.setAuditIsSet(true);
      }
      if (incoming.get(8)) {
        struct.auditDate = iprot.readString();
        struct.setAuditDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.auditId = iprot.readI32();
        struct.setAuditIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.oldCreditLimit = iprot.readDouble();
        struct.setOldCreditLimitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.curCreditLimit = iprot.readDouble();
        struct.setCurCreditLimitIsSet(true);
      }
    }
  }

}


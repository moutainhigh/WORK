/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgAssureFundFlowDTO implements org.apache.thrift.TBase<OrgAssureFundFlowDTO, OrgAssureFundFlowDTO._Fields>, java.io.Serializable, Cloneable, Comparable<OrgAssureFundFlowDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgAssureFundFlowDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CUR_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("curAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgAssureFundFlowDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgAssureFundFlowDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int applyId; // required
  public double oldAssureMoney; // required
  public double curAssureMoney; // required
  public String orgName; // required
  public String orgCode; // required
  public String contact; // required
  public String phone; // required
  public String createdDateTime; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    APPLY_ID((short)2, "applyId"),
    OLD_ASSURE_MONEY((short)3, "oldAssureMoney"),
    CUR_ASSURE_MONEY((short)4, "curAssureMoney"),
    ORG_NAME((short)5, "orgName"),
    ORG_CODE((short)6, "orgCode"),
    CONTACT((short)7, "contact"),
    PHONE((short)8, "phone"),
    CREATED_DATE_TIME((short)9, "createdDateTime"),
    STATUS((short)10, "status"),
    PAGE((short)15, "page"),
    ROWS((short)16, "rows"),
    USER_IDS((short)17, "userIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // APPLY_ID
          return APPLY_ID;
        case 3: // OLD_ASSURE_MONEY
          return OLD_ASSURE_MONEY;
        case 4: // CUR_ASSURE_MONEY
          return CUR_ASSURE_MONEY;
        case 5: // ORG_NAME
          return ORG_NAME;
        case 6: // ORG_CODE
          return ORG_CODE;
        case 7: // CONTACT
          return CONTACT;
        case 8: // PHONE
          return PHONE;
        case 9: // CREATED_DATE_TIME
          return CREATED_DATE_TIME;
        case 10: // STATUS
          return STATUS;
        case 15: // PAGE
          return PAGE;
        case 16: // ROWS
          return ROWS;
        case 17: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __APPLYID_ISSET_ID = 1;
  private static final int __OLDASSUREMONEY_ISSET_ID = 2;
  private static final int __CURASSUREMONEY_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUR_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("curAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgAssureFundFlowDTO.class, metaDataMap);
  }

  public OrgAssureFundFlowDTO() {
  }

  public OrgAssureFundFlowDTO(
    int pid,
    int applyId,
    double oldAssureMoney,
    double curAssureMoney,
    String orgName,
    String orgCode,
    String contact,
    String phone,
    String createdDateTime,
    int status,
    int page,
    int rows,
    List<Integer> userIds)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.applyId = applyId;
    setApplyIdIsSet(true);
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    this.curAssureMoney = curAssureMoney;
    setCurAssureMoneyIsSet(true);
    this.orgName = orgName;
    this.orgCode = orgCode;
    this.contact = contact;
    this.phone = phone;
    this.createdDateTime = createdDateTime;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgAssureFundFlowDTO(OrgAssureFundFlowDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.applyId = other.applyId;
    this.oldAssureMoney = other.oldAssureMoney;
    this.curAssureMoney = other.curAssureMoney;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetCreatedDateTime()) {
      this.createdDateTime = other.createdDateTime;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
  }

  public OrgAssureFundFlowDTO deepCopy() {
    return new OrgAssureFundFlowDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setApplyIdIsSet(false);
    this.applyId = 0;
    setOldAssureMoneyIsSet(false);
    this.oldAssureMoney = 0.0;
    setCurAssureMoneyIsSet(false);
    this.curAssureMoney = 0.0;
    this.orgName = null;
    this.orgCode = null;
    this.contact = null;
    this.phone = null;
    this.createdDateTime = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.userIds = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgAssureFundFlowDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getApplyId() {
    return this.applyId;
  }

  public OrgAssureFundFlowDTO setApplyId(int applyId) {
    this.applyId = applyId;
    setApplyIdIsSet(true);
    return this;
  }

  public void unsetApplyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  public void setApplyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYID_ISSET_ID, value);
  }

  public double getOldAssureMoney() {
    return this.oldAssureMoney;
  }

  public OrgAssureFundFlowDTO setOldAssureMoney(double oldAssureMoney) {
    this.oldAssureMoney = oldAssureMoney;
    setOldAssureMoneyIsSet(true);
    return this;
  }

  public void unsetOldAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field oldAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID);
  }

  public void setOldAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDASSUREMONEY_ISSET_ID, value);
  }

  public double getCurAssureMoney() {
    return this.curAssureMoney;
  }

  public OrgAssureFundFlowDTO setCurAssureMoney(double curAssureMoney) {
    this.curAssureMoney = curAssureMoney;
    setCurAssureMoneyIsSet(true);
    return this;
  }

  public void unsetCurAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field curAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID);
  }

  public void setCurAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURASSUREMONEY_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public OrgAssureFundFlowDTO setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public OrgAssureFundFlowDTO setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getContact() {
    return this.contact;
  }

  public OrgAssureFundFlowDTO setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public OrgAssureFundFlowDTO setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getCreatedDateTime() {
    return this.createdDateTime;
  }

  public OrgAssureFundFlowDTO setCreatedDateTime(String createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  public void unsetCreatedDateTime() {
    this.createdDateTime = null;
  }

  /** Returns true if field createdDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDateTime() {
    return this.createdDateTime != null;
  }

  public void setCreatedDateTimeIsSet(boolean value) {
    if (!value) {
      this.createdDateTime = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public OrgAssureFundFlowDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public OrgAssureFundFlowDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgAssureFundFlowDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public OrgAssureFundFlowDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((Integer)value);
      }
      break;

    case OLD_ASSURE_MONEY:
      if (value == null) {
        unsetOldAssureMoney();
      } else {
        setOldAssureMoney((Double)value);
      }
      break;

    case CUR_ASSURE_MONEY:
      if (value == null) {
        unsetCurAssureMoney();
      } else {
        setCurAssureMoney((Double)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case CREATED_DATE_TIME:
      if (value == null) {
        unsetCreatedDateTime();
      } else {
        setCreatedDateTime((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case APPLY_ID:
      return Integer.valueOf(getApplyId());

    case OLD_ASSURE_MONEY:
      return Double.valueOf(getOldAssureMoney());

    case CUR_ASSURE_MONEY:
      return Double.valueOf(getCurAssureMoney());

    case ORG_NAME:
      return getOrgName();

    case ORG_CODE:
      return getOrgCode();

    case CONTACT:
      return getContact();

    case PHONE:
      return getPhone();

    case CREATED_DATE_TIME:
      return getCreatedDateTime();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case APPLY_ID:
      return isSetApplyId();
    case OLD_ASSURE_MONEY:
      return isSetOldAssureMoney();
    case CUR_ASSURE_MONEY:
      return isSetCurAssureMoney();
    case ORG_NAME:
      return isSetOrgName();
    case ORG_CODE:
      return isSetOrgCode();
    case CONTACT:
      return isSetContact();
    case PHONE:
      return isSetPhone();
    case CREATED_DATE_TIME:
      return isSetCreatedDateTime();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgAssureFundFlowDTO)
      return this.equals((OrgAssureFundFlowDTO)that);
    return false;
  }

  public boolean equals(OrgAssureFundFlowDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_applyId = true;
    boolean that_present_applyId = true;
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (this.applyId != that.applyId)
        return false;
    }

    boolean this_present_oldAssureMoney = true;
    boolean that_present_oldAssureMoney = true;
    if (this_present_oldAssureMoney || that_present_oldAssureMoney) {
      if (!(this_present_oldAssureMoney && that_present_oldAssureMoney))
        return false;
      if (this.oldAssureMoney != that.oldAssureMoney)
        return false;
    }

    boolean this_present_curAssureMoney = true;
    boolean that_present_curAssureMoney = true;
    if (this_present_curAssureMoney || that_present_curAssureMoney) {
      if (!(this_present_curAssureMoney && that_present_curAssureMoney))
        return false;
      if (this.curAssureMoney != that.curAssureMoney)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_createdDateTime = true && this.isSetCreatedDateTime();
    boolean that_present_createdDateTime = true && that.isSetCreatedDateTime();
    if (this_present_createdDateTime || that_present_createdDateTime) {
      if (!(this_present_createdDateTime && that_present_createdDateTime))
        return false;
      if (!this.createdDateTime.equals(that.createdDateTime))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_applyId = true;
    list.add(present_applyId);
    if (present_applyId)
      list.add(applyId);

    boolean present_oldAssureMoney = true;
    list.add(present_oldAssureMoney);
    if (present_oldAssureMoney)
      list.add(oldAssureMoney);

    boolean present_curAssureMoney = true;
    list.add(present_curAssureMoney);
    if (present_curAssureMoney)
      list.add(curAssureMoney);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_contact = true && (isSetContact());
    list.add(present_contact);
    if (present_contact)
      list.add(contact);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_createdDateTime = true && (isSetCreatedDateTime());
    list.add(present_createdDateTime);
    if (present_createdDateTime)
      list.add(createdDateTime);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgAssureFundFlowDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldAssureMoney()).compareTo(other.isSetOldAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldAssureMoney, other.oldAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurAssureMoney()).compareTo(other.isSetCurAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curAssureMoney, other.curAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDateTime()).compareTo(other.isSetCreatedDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDateTime, other.createdDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgAssureFundFlowDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyId:");
    sb.append(this.applyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldAssureMoney:");
    sb.append(this.oldAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curAssureMoney:");
    sb.append(this.curAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDateTime:");
    if (this.createdDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createdDateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgAssureFundFlowDTOStandardSchemeFactory implements SchemeFactory {
    public OrgAssureFundFlowDTOStandardScheme getScheme() {
      return new OrgAssureFundFlowDTOStandardScheme();
    }
  }

  private static class OrgAssureFundFlowDTOStandardScheme extends StandardScheme<OrgAssureFundFlowDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgAssureFundFlowDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyId = iprot.readI32();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldAssureMoney = iprot.readDouble();
              struct.setOldAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUR_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curAssureMoney = iprot.readDouble();
              struct.setCurAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATED_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdDateTime = iprot.readString();
              struct.setCreatedDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list40.size);
                int _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readI32();
                  struct.userIds.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgAssureFundFlowDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
      oprot.writeI32(struct.applyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldAssureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.curAssureMoney);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.createdDateTime != null) {
        oprot.writeFieldBegin(CREATED_DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createdDateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter43 : struct.userIds)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgAssureFundFlowDTOTupleSchemeFactory implements SchemeFactory {
    public OrgAssureFundFlowDTOTupleScheme getScheme() {
      return new OrgAssureFundFlowDTOTupleScheme();
    }
  }

  private static class OrgAssureFundFlowDTOTupleScheme extends TupleScheme<OrgAssureFundFlowDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgAssureFundFlowDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetApplyId()) {
        optionals.set(1);
      }
      if (struct.isSetOldAssureMoney()) {
        optionals.set(2);
      }
      if (struct.isSetCurAssureMoney()) {
        optionals.set(3);
      }
      if (struct.isSetOrgName()) {
        optionals.set(4);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(5);
      }
      if (struct.isSetContact()) {
        optionals.set(6);
      }
      if (struct.isSetPhone()) {
        optionals.set(7);
      }
      if (struct.isSetCreatedDateTime()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetApplyId()) {
        oprot.writeI32(struct.applyId);
      }
      if (struct.isSetOldAssureMoney()) {
        oprot.writeDouble(struct.oldAssureMoney);
      }
      if (struct.isSetCurAssureMoney()) {
        oprot.writeDouble(struct.curAssureMoney);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetCreatedDateTime()) {
        oprot.writeString(struct.createdDateTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter44 : struct.userIds)
          {
            oprot.writeI32(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgAssureFundFlowDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applyId = iprot.readI32();
        struct.setApplyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.oldAssureMoney = iprot.readDouble();
        struct.setOldAssureMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.curAssureMoney = iprot.readDouble();
        struct.setCurAssureMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
      if (incoming.get(7)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createdDateTime = iprot.readString();
        struct.setCreatedDateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.userIds.add(_elem46);
          }
        }
        struct.setUserIdsIsSet(true);
      }
    }
  }

}


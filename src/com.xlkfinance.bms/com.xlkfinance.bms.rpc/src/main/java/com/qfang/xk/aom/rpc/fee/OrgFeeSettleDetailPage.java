/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.fee;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-12")
public class OrgFeeSettleDetailPage implements org.apache.thrift.TBase<OrgFeeSettleDetailPage, OrgFeeSettleDetailPage._Fields>, java.io.Serializable, Cloneable, Comparable<OrgFeeSettleDetailPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgFeeSettleDetailPage");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SETTLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SOLUTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("solutionDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("charge", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("refund", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField REBATE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField REBATE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateRate", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgFeeSettleDetailPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgFeeSettleDetailPageTupleSchemeFactory());
  }

  public int pid; // required
  public int settleId; // required
  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String requestDate; // required
  public double planLoanMoney; // required
  public double loanMoney; // required
  public String loanDate; // required
  public double paymentMoney; // required
  public String paymentDate; // required
  public String solutionDate; // required
  public double charge; // required
  public double refund; // required
  public double rebateMoney; // required
  public double rebateRate; // required
  public int page; // required
  public int rows; // required
  public int orgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    SETTLE_ID((short)2, "settleId"),
    PROJECT_ID((short)3, "projectId"),
    PROJECT_NAME((short)4, "projectName"),
    PROJECT_NUMBER((short)5, "projectNumber"),
    REQUEST_DATE((short)6, "requestDate"),
    PLAN_LOAN_MONEY((short)8, "planLoanMoney"),
    LOAN_MONEY((short)9, "loanMoney"),
    LOAN_DATE((short)10, "loanDate"),
    PAYMENT_MONEY((short)11, "paymentMoney"),
    PAYMENT_DATE((short)12, "paymentDate"),
    SOLUTION_DATE((short)13, "solutionDate"),
    CHARGE((short)14, "charge"),
    REFUND((short)15, "refund"),
    REBATE_MONEY((short)16, "rebateMoney"),
    REBATE_RATE((short)17, "rebateRate"),
    PAGE((short)18, "page"),
    ROWS((short)19, "rows"),
    ORG_ID((short)20, "orgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // SETTLE_ID
          return SETTLE_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 6: // REQUEST_DATE
          return REQUEST_DATE;
        case 8: // PLAN_LOAN_MONEY
          return PLAN_LOAN_MONEY;
        case 9: // LOAN_MONEY
          return LOAN_MONEY;
        case 10: // LOAN_DATE
          return LOAN_DATE;
        case 11: // PAYMENT_MONEY
          return PAYMENT_MONEY;
        case 12: // PAYMENT_DATE
          return PAYMENT_DATE;
        case 13: // SOLUTION_DATE
          return SOLUTION_DATE;
        case 14: // CHARGE
          return CHARGE;
        case 15: // REFUND
          return REFUND;
        case 16: // REBATE_MONEY
          return REBATE_MONEY;
        case 17: // REBATE_RATE
          return REBATE_RATE;
        case 18: // PAGE
          return PAGE;
        case 19: // ROWS
          return ROWS;
        case 20: // ORG_ID
          return ORG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SETTLEID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __PLANLOANMONEY_ISSET_ID = 3;
  private static final int __LOANMONEY_ISSET_ID = 4;
  private static final int __PAYMENTMONEY_ISSET_ID = 5;
  private static final int __CHARGE_ISSET_ID = 6;
  private static final int __REFUND_ISSET_ID = 7;
  private static final int __REBATEMONEY_ISSET_ID = 8;
  private static final int __REBATERATE_ISSET_ID = 9;
  private static final int __PAGE_ISSET_ID = 10;
  private static final int __ROWS_ISSET_ID = 11;
  private static final int __ORGID_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SETTLE_ID, new org.apache.thrift.meta_data.FieldMetaData("settleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("requestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("paymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("paymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOLUTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("solutionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE, new org.apache.thrift.meta_data.FieldMetaData("charge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND, new org.apache.thrift.meta_data.FieldMetaData("refund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REBATE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rebateMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REBATE_RATE, new org.apache.thrift.meta_data.FieldMetaData("rebateRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgFeeSettleDetailPage.class, metaDataMap);
  }

  public OrgFeeSettleDetailPage() {
  }

  public OrgFeeSettleDetailPage(
    int pid,
    int settleId,
    int projectId,
    String projectName,
    String projectNumber,
    String requestDate,
    double planLoanMoney,
    double loanMoney,
    String loanDate,
    double paymentMoney,
    String paymentDate,
    String solutionDate,
    double charge,
    double refund,
    double rebateMoney,
    double rebateRate,
    int page,
    int rows,
    int orgId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.settleId = settleId;
    setSettleIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.requestDate = requestDate;
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.loanDate = loanDate;
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    this.paymentDate = paymentDate;
    this.solutionDate = solutionDate;
    this.charge = charge;
    setChargeIsSet(true);
    this.refund = refund;
    setRefundIsSet(true);
    this.rebateMoney = rebateMoney;
    setRebateMoneyIsSet(true);
    this.rebateRate = rebateRate;
    setRebateRateIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgFeeSettleDetailPage(OrgFeeSettleDetailPage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.settleId = other.settleId;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    this.planLoanMoney = other.planLoanMoney;
    this.loanMoney = other.loanMoney;
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    this.paymentMoney = other.paymentMoney;
    if (other.isSetPaymentDate()) {
      this.paymentDate = other.paymentDate;
    }
    if (other.isSetSolutionDate()) {
      this.solutionDate = other.solutionDate;
    }
    this.charge = other.charge;
    this.refund = other.refund;
    this.rebateMoney = other.rebateMoney;
    this.rebateRate = other.rebateRate;
    this.page = other.page;
    this.rows = other.rows;
    this.orgId = other.orgId;
  }

  public OrgFeeSettleDetailPage deepCopy() {
    return new OrgFeeSettleDetailPage(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setSettleIdIsSet(false);
    this.settleId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.requestDate = null;
    setPlanLoanMoneyIsSet(false);
    this.planLoanMoney = 0.0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.loanDate = null;
    setPaymentMoneyIsSet(false);
    this.paymentMoney = 0.0;
    this.paymentDate = null;
    this.solutionDate = null;
    setChargeIsSet(false);
    this.charge = 0.0;
    setRefundIsSet(false);
    this.refund = 0.0;
    setRebateMoneyIsSet(false);
    this.rebateMoney = 0.0;
    setRebateRateIsSet(false);
    this.rebateRate = 0.0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgFeeSettleDetailPage setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getSettleId() {
    return this.settleId;
  }

  public OrgFeeSettleDetailPage setSettleId(int settleId) {
    this.settleId = settleId;
    setSettleIdIsSet(true);
    return this;
  }

  public void unsetSettleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  /** Returns true if field settleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  public void setSettleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public OrgFeeSettleDetailPage setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public OrgFeeSettleDetailPage setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public OrgFeeSettleDetailPage setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public OrgFeeSettleDetailPage setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public double getPlanLoanMoney() {
    return this.planLoanMoney;
  }

  public OrgFeeSettleDetailPage setPlanLoanMoney(double planLoanMoney) {
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    return this;
  }

  public void unsetPlanLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID);
  }

  /** Returns true if field planLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID);
  }

  public void setPlanLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public OrgFeeSettleDetailPage setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public OrgFeeSettleDetailPage setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public double getPaymentMoney() {
    return this.paymentMoney;
  }

  public OrgFeeSettleDetailPage setPaymentMoney(double paymentMoney) {
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    return this;
  }

  public void unsetPaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field paymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  public void setPaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID, value);
  }

  public String getPaymentDate() {
    return this.paymentDate;
  }

  public OrgFeeSettleDetailPage setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  public void unsetPaymentDate() {
    this.paymentDate = null;
  }

  /** Returns true if field paymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDate() {
    return this.paymentDate != null;
  }

  public void setPaymentDateIsSet(boolean value) {
    if (!value) {
      this.paymentDate = null;
    }
  }

  public String getSolutionDate() {
    return this.solutionDate;
  }

  public OrgFeeSettleDetailPage setSolutionDate(String solutionDate) {
    this.solutionDate = solutionDate;
    return this;
  }

  public void unsetSolutionDate() {
    this.solutionDate = null;
  }

  /** Returns true if field solutionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSolutionDate() {
    return this.solutionDate != null;
  }

  public void setSolutionDateIsSet(boolean value) {
    if (!value) {
      this.solutionDate = null;
    }
  }

  public double getCharge() {
    return this.charge;
  }

  public OrgFeeSettleDetailPage setCharge(double charge) {
    this.charge = charge;
    setChargeIsSet(true);
    return this;
  }

  public void unsetCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  /** Returns true if field charge is set (has been assigned a value) and false otherwise */
  public boolean isSetCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  public void setChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGE_ISSET_ID, value);
  }

  public double getRefund() {
    return this.refund;
  }

  public OrgFeeSettleDetailPage setRefund(double refund) {
    this.refund = refund;
    setRefundIsSet(true);
    return this;
  }

  public void unsetRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  /** Returns true if field refund is set (has been assigned a value) and false otherwise */
  public boolean isSetRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  public void setRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUND_ISSET_ID, value);
  }

  public double getRebateMoney() {
    return this.rebateMoney;
  }

  public OrgFeeSettleDetailPage setRebateMoney(double rebateMoney) {
    this.rebateMoney = rebateMoney;
    setRebateMoneyIsSet(true);
    return this;
  }

  public void unsetRebateMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATEMONEY_ISSET_ID);
  }

  /** Returns true if field rebateMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATEMONEY_ISSET_ID);
  }

  public void setRebateMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATEMONEY_ISSET_ID, value);
  }

  public double getRebateRate() {
    return this.rebateRate;
  }

  public OrgFeeSettleDetailPage setRebateRate(double rebateRate) {
    this.rebateRate = rebateRate;
    setRebateRateIsSet(true);
    return this;
  }

  public void unsetRebateRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATERATE_ISSET_ID);
  }

  /** Returns true if field rebateRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateRate() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATERATE_ISSET_ID);
  }

  public void setRebateRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATERATE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public OrgFeeSettleDetailPage setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgFeeSettleDetailPage setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgFeeSettleDetailPage setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case SETTLE_ID:
      if (value == null) {
        unsetSettleId();
      } else {
        setSettleId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;

    case PLAN_LOAN_MONEY:
      if (value == null) {
        unsetPlanLoanMoney();
      } else {
        setPlanLoanMoney((Double)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case PAYMENT_MONEY:
      if (value == null) {
        unsetPaymentMoney();
      } else {
        setPaymentMoney((Double)value);
      }
      break;

    case PAYMENT_DATE:
      if (value == null) {
        unsetPaymentDate();
      } else {
        setPaymentDate((String)value);
      }
      break;

    case SOLUTION_DATE:
      if (value == null) {
        unsetSolutionDate();
      } else {
        setSolutionDate((String)value);
      }
      break;

    case CHARGE:
      if (value == null) {
        unsetCharge();
      } else {
        setCharge((Double)value);
      }
      break;

    case REFUND:
      if (value == null) {
        unsetRefund();
      } else {
        setRefund((Double)value);
      }
      break;

    case REBATE_MONEY:
      if (value == null) {
        unsetRebateMoney();
      } else {
        setRebateMoney((Double)value);
      }
      break;

    case REBATE_RATE:
      if (value == null) {
        unsetRebateRate();
      } else {
        setRebateRate((Double)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case SETTLE_ID:
      return Integer.valueOf(getSettleId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case REQUEST_DATE:
      return getRequestDate();

    case PLAN_LOAN_MONEY:
      return Double.valueOf(getPlanLoanMoney());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case LOAN_DATE:
      return getLoanDate();

    case PAYMENT_MONEY:
      return Double.valueOf(getPaymentMoney());

    case PAYMENT_DATE:
      return getPaymentDate();

    case SOLUTION_DATE:
      return getSolutionDate();

    case CHARGE:
      return Double.valueOf(getCharge());

    case REFUND:
      return Double.valueOf(getRefund());

    case REBATE_MONEY:
      return Double.valueOf(getRebateMoney());

    case REBATE_RATE:
      return Double.valueOf(getRebateRate());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case SETTLE_ID:
      return isSetSettleId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case REQUEST_DATE:
      return isSetRequestDate();
    case PLAN_LOAN_MONEY:
      return isSetPlanLoanMoney();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case LOAN_DATE:
      return isSetLoanDate();
    case PAYMENT_MONEY:
      return isSetPaymentMoney();
    case PAYMENT_DATE:
      return isSetPaymentDate();
    case SOLUTION_DATE:
      return isSetSolutionDate();
    case CHARGE:
      return isSetCharge();
    case REFUND:
      return isSetRefund();
    case REBATE_MONEY:
      return isSetRebateMoney();
    case REBATE_RATE:
      return isSetRebateRate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case ORG_ID:
      return isSetOrgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgFeeSettleDetailPage)
      return this.equals((OrgFeeSettleDetailPage)that);
    return false;
  }

  public boolean equals(OrgFeeSettleDetailPage that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_settleId = true;
    boolean that_present_settleId = true;
    if (this_present_settleId || that_present_settleId) {
      if (!(this_present_settleId && that_present_settleId))
        return false;
      if (this.settleId != that.settleId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }

    boolean this_present_planLoanMoney = true;
    boolean that_present_planLoanMoney = true;
    if (this_present_planLoanMoney || that_present_planLoanMoney) {
      if (!(this_present_planLoanMoney && that_present_planLoanMoney))
        return false;
      if (this.planLoanMoney != that.planLoanMoney)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_paymentMoney = true;
    boolean that_present_paymentMoney = true;
    if (this_present_paymentMoney || that_present_paymentMoney) {
      if (!(this_present_paymentMoney && that_present_paymentMoney))
        return false;
      if (this.paymentMoney != that.paymentMoney)
        return false;
    }

    boolean this_present_paymentDate = true && this.isSetPaymentDate();
    boolean that_present_paymentDate = true && that.isSetPaymentDate();
    if (this_present_paymentDate || that_present_paymentDate) {
      if (!(this_present_paymentDate && that_present_paymentDate))
        return false;
      if (!this.paymentDate.equals(that.paymentDate))
        return false;
    }

    boolean this_present_solutionDate = true && this.isSetSolutionDate();
    boolean that_present_solutionDate = true && that.isSetSolutionDate();
    if (this_present_solutionDate || that_present_solutionDate) {
      if (!(this_present_solutionDate && that_present_solutionDate))
        return false;
      if (!this.solutionDate.equals(that.solutionDate))
        return false;
    }

    boolean this_present_charge = true;
    boolean that_present_charge = true;
    if (this_present_charge || that_present_charge) {
      if (!(this_present_charge && that_present_charge))
        return false;
      if (this.charge != that.charge)
        return false;
    }

    boolean this_present_refund = true;
    boolean that_present_refund = true;
    if (this_present_refund || that_present_refund) {
      if (!(this_present_refund && that_present_refund))
        return false;
      if (this.refund != that.refund)
        return false;
    }

    boolean this_present_rebateMoney = true;
    boolean that_present_rebateMoney = true;
    if (this_present_rebateMoney || that_present_rebateMoney) {
      if (!(this_present_rebateMoney && that_present_rebateMoney))
        return false;
      if (this.rebateMoney != that.rebateMoney)
        return false;
    }

    boolean this_present_rebateRate = true;
    boolean that_present_rebateRate = true;
    if (this_present_rebateRate || that_present_rebateRate) {
      if (!(this_present_rebateRate && that_present_rebateRate))
        return false;
      if (this.rebateRate != that.rebateRate)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_settleId = true;
    list.add(present_settleId);
    if (present_settleId)
      list.add(settleId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_requestDate = true && (isSetRequestDate());
    list.add(present_requestDate);
    if (present_requestDate)
      list.add(requestDate);

    boolean present_planLoanMoney = true;
    list.add(present_planLoanMoney);
    if (present_planLoanMoney)
      list.add(planLoanMoney);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_paymentMoney = true;
    list.add(present_paymentMoney);
    if (present_paymentMoney)
      list.add(paymentMoney);

    boolean present_paymentDate = true && (isSetPaymentDate());
    list.add(present_paymentDate);
    if (present_paymentDate)
      list.add(paymentDate);

    boolean present_solutionDate = true && (isSetSolutionDate());
    list.add(present_solutionDate);
    if (present_solutionDate)
      list.add(solutionDate);

    boolean present_charge = true;
    list.add(present_charge);
    if (present_charge)
      list.add(charge);

    boolean present_refund = true;
    list.add(present_refund);
    if (present_refund)
      list.add(refund);

    boolean present_rebateMoney = true;
    list.add(present_rebateMoney);
    if (present_rebateMoney)
      list.add(rebateMoney);

    boolean present_rebateRate = true;
    list.add(present_rebateRate);
    if (present_rebateRate)
      list.add(rebateRate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgFeeSettleDetailPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleId()).compareTo(other.isSetSettleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleId, other.settleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(other.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDate, other.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanMoney()).compareTo(other.isSetPlanLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanMoney, other.planLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMoney()).compareTo(other.isSetPaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMoney, other.paymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDate()).compareTo(other.isSetPaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDate, other.paymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSolutionDate()).compareTo(other.isSetSolutionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSolutionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.solutionDate, other.solutionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharge()).compareTo(other.isSetCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charge, other.charge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefund()).compareTo(other.isSetRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refund, other.refund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateMoney()).compareTo(other.isSetRebateMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateMoney, other.rebateMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateRate()).compareTo(other.isSetRebateRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateRate, other.rebateRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgFeeSettleDetailPage(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleId:");
    sb.append(this.settleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanMoney:");
    sb.append(this.planLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMoney:");
    sb.append(this.paymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDate:");
    if (this.paymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("solutionDate:");
    if (this.solutionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.solutionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charge:");
    sb.append(this.charge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refund:");
    sb.append(this.refund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateMoney:");
    sb.append(this.rebateMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateRate:");
    sb.append(this.rebateRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgFeeSettleDetailPageStandardSchemeFactory implements SchemeFactory {
    public OrgFeeSettleDetailPageStandardScheme getScheme() {
      return new OrgFeeSettleDetailPageStandardScheme();
    }
  }

  private static class OrgFeeSettleDetailPageStandardScheme extends StandardScheme<OrgFeeSettleDetailPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgFeeSettleDetailPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SETTLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settleId = iprot.readI32();
              struct.setSettleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDate = iprot.readString();
              struct.setRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLAN_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planLoanMoney = iprot.readDouble();
              struct.setPlanLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paymentMoney = iprot.readDouble();
              struct.setPaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDate = iprot.readString();
              struct.setPaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOLUTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.solutionDate = iprot.readString();
              struct.setSolutionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.charge = iprot.readDouble();
              struct.setChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refund = iprot.readDouble();
              struct.setRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REBATE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateMoney = iprot.readDouble();
              struct.setRebateMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REBATE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateRate = iprot.readDouble();
              struct.setRebateRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgFeeSettleDetailPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLE_ID_FIELD_DESC);
      oprot.writeI32(struct.settleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.requestDate != null) {
        oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.requestDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.paymentMoney);
      oprot.writeFieldEnd();
      if (struct.paymentDate != null) {
        oprot.writeFieldBegin(PAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.paymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.solutionDate != null) {
        oprot.writeFieldBegin(SOLUTION_DATE_FIELD_DESC);
        oprot.writeString(struct.solutionDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.charge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FIELD_DESC);
      oprot.writeDouble(struct.refund);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.rebateMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.rebateRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgFeeSettleDetailPageTupleSchemeFactory implements SchemeFactory {
    public OrgFeeSettleDetailPageTupleScheme getScheme() {
      return new OrgFeeSettleDetailPageTupleScheme();
    }
  }

  private static class OrgFeeSettleDetailPageTupleScheme extends TupleScheme<OrgFeeSettleDetailPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgFeeSettleDetailPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetSettleId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(4);
      }
      if (struct.isSetRequestDate()) {
        optionals.set(5);
      }
      if (struct.isSetPlanLoanMoney()) {
        optionals.set(6);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(7);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentMoney()) {
        optionals.set(9);
      }
      if (struct.isSetPaymentDate()) {
        optionals.set(10);
      }
      if (struct.isSetSolutionDate()) {
        optionals.set(11);
      }
      if (struct.isSetCharge()) {
        optionals.set(12);
      }
      if (struct.isSetRefund()) {
        optionals.set(13);
      }
      if (struct.isSetRebateMoney()) {
        optionals.set(14);
      }
      if (struct.isSetRebateRate()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetRows()) {
        optionals.set(17);
      }
      if (struct.isSetOrgId()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetSettleId()) {
        oprot.writeI32(struct.settleId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetRequestDate()) {
        oprot.writeString(struct.requestDate);
      }
      if (struct.isSetPlanLoanMoney()) {
        oprot.writeDouble(struct.planLoanMoney);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetPaymentMoney()) {
        oprot.writeDouble(struct.paymentMoney);
      }
      if (struct.isSetPaymentDate()) {
        oprot.writeString(struct.paymentDate);
      }
      if (struct.isSetSolutionDate()) {
        oprot.writeString(struct.solutionDate);
      }
      if (struct.isSetCharge()) {
        oprot.writeDouble(struct.charge);
      }
      if (struct.isSetRefund()) {
        oprot.writeDouble(struct.refund);
      }
      if (struct.isSetRebateMoney()) {
        oprot.writeDouble(struct.rebateMoney);
      }
      if (struct.isSetRebateRate()) {
        oprot.writeDouble(struct.rebateRate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgFeeSettleDetailPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.settleId = iprot.readI32();
        struct.setSettleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestDate = iprot.readString();
        struct.setRequestDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planLoanMoney = iprot.readDouble();
        struct.setPlanLoanMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentMoney = iprot.readDouble();
        struct.setPaymentMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.paymentDate = iprot.readString();
        struct.setPaymentDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.solutionDate = iprot.readString();
        struct.setSolutionDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.charge = iprot.readDouble();
        struct.setChargeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.refund = iprot.readDouble();
        struct.setRefundIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rebateMoney = iprot.readDouble();
        struct.setRebateMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rebateRate = iprot.readDouble();
        struct.setRebateRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
    }
  }

}


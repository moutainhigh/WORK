/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgCooperateCityInfo implements org.apache.thrift.TBase<OrgCooperateCityInfo, OrgCooperateCityInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrgCooperateCityInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgCooperateCityInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AREA_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCodes", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROVINCE_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceCodes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceName", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgCooperateCityInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgCooperateCityInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String areaCode; // required
  public String cityName; // required
  public int orgId; // required
  public List<String> areaCodes; // required
  public List<String> provinceCodes; // required
  public String provinceCode; // required
  public String contact; // required
  public String phone; // required
  public String remark; // required
  public int status; // required
  public String provinceName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    AREA_CODE((short)2, "areaCode"),
    CITY_NAME((short)3, "cityName"),
    ORG_ID((short)4, "orgId"),
    AREA_CODES((short)5, "areaCodes"),
    PROVINCE_CODES((short)6, "provinceCodes"),
    PROVINCE_CODE((short)7, "provinceCode"),
    CONTACT((short)8, "contact"),
    PHONE((short)9, "phone"),
    REMARK((short)10, "remark"),
    STATUS((short)11, "status"),
    PROVINCE_NAME((short)12, "provinceName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // AREA_CODE
          return AREA_CODE;
        case 3: // CITY_NAME
          return CITY_NAME;
        case 4: // ORG_ID
          return ORG_ID;
        case 5: // AREA_CODES
          return AREA_CODES;
        case 6: // PROVINCE_CODES
          return PROVINCE_CODES;
        case 7: // PROVINCE_CODE
          return PROVINCE_CODE;
        case 8: // CONTACT
          return CONTACT;
        case 9: // PHONE
          return PHONE;
        case 10: // REMARK
          return REMARK;
        case 11: // STATUS
          return STATUS;
        case 12: // PROVINCE_NAME
          return PROVINCE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREA_CODES, new org.apache.thrift.meta_data.FieldMetaData("areaCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROVINCE_CODES, new org.apache.thrift.meta_data.FieldMetaData("provinceCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("provinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("provinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgCooperateCityInfo.class, metaDataMap);
  }

  public OrgCooperateCityInfo() {
  }

  public OrgCooperateCityInfo(
    int pid,
    String areaCode,
    String cityName,
    int orgId,
    List<String> areaCodes,
    List<String> provinceCodes,
    String provinceCode,
    String contact,
    String phone,
    String remark,
    int status,
    String provinceName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.areaCode = areaCode;
    this.cityName = cityName;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.areaCodes = areaCodes;
    this.provinceCodes = provinceCodes;
    this.provinceCode = provinceCode;
    this.contact = contact;
    this.phone = phone;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.provinceName = provinceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgCooperateCityInfo(OrgCooperateCityInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetAreaCode()) {
      this.areaCode = other.areaCode;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.orgId = other.orgId;
    if (other.isSetAreaCodes()) {
      List<String> __this__areaCodes = new ArrayList<String>(other.areaCodes);
      this.areaCodes = __this__areaCodes;
    }
    if (other.isSetProvinceCodes()) {
      List<String> __this__provinceCodes = new ArrayList<String>(other.provinceCodes);
      this.provinceCodes = __this__provinceCodes;
    }
    if (other.isSetProvinceCode()) {
      this.provinceCode = other.provinceCode;
    }
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
  }

  public OrgCooperateCityInfo deepCopy() {
    return new OrgCooperateCityInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.areaCode = null;
    this.cityName = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.areaCodes = null;
    this.provinceCodes = null;
    this.provinceCode = null;
    this.contact = null;
    this.phone = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.provinceName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgCooperateCityInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getAreaCode() {
    return this.areaCode;
  }

  public OrgCooperateCityInfo setAreaCode(String areaCode) {
    this.areaCode = areaCode;
    return this;
  }

  public void unsetAreaCode() {
    this.areaCode = null;
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return this.areaCode != null;
  }

  public void setAreaCodeIsSet(boolean value) {
    if (!value) {
      this.areaCode = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public OrgCooperateCityInfo setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgCooperateCityInfo setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getAreaCodesSize() {
    return (this.areaCodes == null) ? 0 : this.areaCodes.size();
  }

  public java.util.Iterator<String> getAreaCodesIterator() {
    return (this.areaCodes == null) ? null : this.areaCodes.iterator();
  }

  public void addToAreaCodes(String elem) {
    if (this.areaCodes == null) {
      this.areaCodes = new ArrayList<String>();
    }
    this.areaCodes.add(elem);
  }

  public List<String> getAreaCodes() {
    return this.areaCodes;
  }

  public OrgCooperateCityInfo setAreaCodes(List<String> areaCodes) {
    this.areaCodes = areaCodes;
    return this;
  }

  public void unsetAreaCodes() {
    this.areaCodes = null;
  }

  /** Returns true if field areaCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCodes() {
    return this.areaCodes != null;
  }

  public void setAreaCodesIsSet(boolean value) {
    if (!value) {
      this.areaCodes = null;
    }
  }

  public int getProvinceCodesSize() {
    return (this.provinceCodes == null) ? 0 : this.provinceCodes.size();
  }

  public java.util.Iterator<String> getProvinceCodesIterator() {
    return (this.provinceCodes == null) ? null : this.provinceCodes.iterator();
  }

  public void addToProvinceCodes(String elem) {
    if (this.provinceCodes == null) {
      this.provinceCodes = new ArrayList<String>();
    }
    this.provinceCodes.add(elem);
  }

  public List<String> getProvinceCodes() {
    return this.provinceCodes;
  }

  public OrgCooperateCityInfo setProvinceCodes(List<String> provinceCodes) {
    this.provinceCodes = provinceCodes;
    return this;
  }

  public void unsetProvinceCodes() {
    this.provinceCodes = null;
  }

  /** Returns true if field provinceCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceCodes() {
    return this.provinceCodes != null;
  }

  public void setProvinceCodesIsSet(boolean value) {
    if (!value) {
      this.provinceCodes = null;
    }
  }

  public String getProvinceCode() {
    return this.provinceCode;
  }

  public OrgCooperateCityInfo setProvinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
    return this;
  }

  public void unsetProvinceCode() {
    this.provinceCode = null;
  }

  /** Returns true if field provinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceCode() {
    return this.provinceCode != null;
  }

  public void setProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.provinceCode = null;
    }
  }

  public String getContact() {
    return this.contact;
  }

  public OrgCooperateCityInfo setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public OrgCooperateCityInfo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OrgCooperateCityInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public OrgCooperateCityInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public OrgCooperateCityInfo setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case AREA_CODES:
      if (value == null) {
        unsetAreaCodes();
      } else {
        setAreaCodes((List<String>)value);
      }
      break;

    case PROVINCE_CODES:
      if (value == null) {
        unsetProvinceCodes();
      } else {
        setProvinceCodes((List<String>)value);
      }
      break;

    case PROVINCE_CODE:
      if (value == null) {
        unsetProvinceCode();
      } else {
        setProvinceCode((String)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case AREA_CODE:
      return getAreaCode();

    case CITY_NAME:
      return getCityName();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case AREA_CODES:
      return getAreaCodes();

    case PROVINCE_CODES:
      return getProvinceCodes();

    case PROVINCE_CODE:
      return getProvinceCode();

    case CONTACT:
      return getContact();

    case PHONE:
      return getPhone();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PROVINCE_NAME:
      return getProvinceName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case AREA_CODE:
      return isSetAreaCode();
    case CITY_NAME:
      return isSetCityName();
    case ORG_ID:
      return isSetOrgId();
    case AREA_CODES:
      return isSetAreaCodes();
    case PROVINCE_CODES:
      return isSetProvinceCodes();
    case PROVINCE_CODE:
      return isSetProvinceCode();
    case CONTACT:
      return isSetContact();
    case PHONE:
      return isSetPhone();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case PROVINCE_NAME:
      return isSetProvinceName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgCooperateCityInfo)
      return this.equals((OrgCooperateCityInfo)that);
    return false;
  }

  public boolean equals(OrgCooperateCityInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_areaCode = true && this.isSetAreaCode();
    boolean that_present_areaCode = true && that.isSetAreaCode();
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (!this.areaCode.equals(that.areaCode))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_areaCodes = true && this.isSetAreaCodes();
    boolean that_present_areaCodes = true && that.isSetAreaCodes();
    if (this_present_areaCodes || that_present_areaCodes) {
      if (!(this_present_areaCodes && that_present_areaCodes))
        return false;
      if (!this.areaCodes.equals(that.areaCodes))
        return false;
    }

    boolean this_present_provinceCodes = true && this.isSetProvinceCodes();
    boolean that_present_provinceCodes = true && that.isSetProvinceCodes();
    if (this_present_provinceCodes || that_present_provinceCodes) {
      if (!(this_present_provinceCodes && that_present_provinceCodes))
        return false;
      if (!this.provinceCodes.equals(that.provinceCodes))
        return false;
    }

    boolean this_present_provinceCode = true && this.isSetProvinceCode();
    boolean that_present_provinceCode = true && that.isSetProvinceCode();
    if (this_present_provinceCode || that_present_provinceCode) {
      if (!(this_present_provinceCode && that_present_provinceCode))
        return false;
      if (!this.provinceCode.equals(that.provinceCode))
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_areaCode = true && (isSetAreaCode());
    list.add(present_areaCode);
    if (present_areaCode)
      list.add(areaCode);

    boolean present_cityName = true && (isSetCityName());
    list.add(present_cityName);
    if (present_cityName)
      list.add(cityName);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_areaCodes = true && (isSetAreaCodes());
    list.add(present_areaCodes);
    if (present_areaCodes)
      list.add(areaCodes);

    boolean present_provinceCodes = true && (isSetProvinceCodes());
    list.add(present_provinceCodes);
    if (present_provinceCodes)
      list.add(provinceCodes);

    boolean present_provinceCode = true && (isSetProvinceCode());
    list.add(present_provinceCode);
    if (present_provinceCode)
      list.add(provinceCode);

    boolean present_contact = true && (isSetContact());
    list.add(present_contact);
    if (present_contact)
      list.add(contact);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_provinceName = true && (isSetProvinceName());
    list.add(present_provinceName);
    if (present_provinceName)
      list.add(provinceName);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgCooperateCityInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCodes()).compareTo(other.isSetAreaCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCodes, other.areaCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceCodes()).compareTo(other.isSetProvinceCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceCodes, other.provinceCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceCode()).compareTo(other.isSetProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceCode, other.provinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(other.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceName, other.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgCooperateCityInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    if (this.areaCode == null) {
      sb.append("null");
    } else {
      sb.append(this.areaCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCodes:");
    if (this.areaCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.areaCodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceCodes:");
    if (this.provinceCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceCodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceCode:");
    if (this.provinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgCooperateCityInfoStandardSchemeFactory implements SchemeFactory {
    public OrgCooperateCityInfoStandardScheme getScheme() {
      return new OrgCooperateCityInfoStandardScheme();
    }
  }

  private static class OrgCooperateCityInfoStandardScheme extends StandardScheme<OrgCooperateCityInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgCooperateCityInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaCode = iprot.readString();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.areaCodes = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.areaCodes.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setAreaCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROVINCE_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.provinceCodes = new ArrayList<String>(_list11.size);
                String _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readString();
                  struct.provinceCodes.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setProvinceCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceCode = iprot.readString();
              struct.setProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceName = iprot.readString();
              struct.setProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgCooperateCityInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.areaCode != null) {
        oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
        oprot.writeString(struct.areaCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.areaCodes != null) {
        oprot.writeFieldBegin(AREA_CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.areaCodes.size()));
          for (String _iter14 : struct.areaCodes)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.provinceCodes != null) {
        oprot.writeFieldBegin(PROVINCE_CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.provinceCodes.size()));
          for (String _iter15 : struct.provinceCodes)
          {
            oprot.writeString(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.provinceCode != null) {
        oprot.writeFieldBegin(PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.provinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.provinceName != null) {
        oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.provinceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgCooperateCityInfoTupleSchemeFactory implements SchemeFactory {
    public OrgCooperateCityInfoTupleScheme getScheme() {
      return new OrgCooperateCityInfoTupleScheme();
    }
  }

  private static class OrgCooperateCityInfoTupleScheme extends TupleScheme<OrgCooperateCityInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgCooperateCityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(1);
      }
      if (struct.isSetCityName()) {
        optionals.set(2);
      }
      if (struct.isSetOrgId()) {
        optionals.set(3);
      }
      if (struct.isSetAreaCodes()) {
        optionals.set(4);
      }
      if (struct.isSetProvinceCodes()) {
        optionals.set(5);
      }
      if (struct.isSetProvinceCode()) {
        optionals.set(6);
      }
      if (struct.isSetContact()) {
        optionals.set(7);
      }
      if (struct.isSetPhone()) {
        optionals.set(8);
      }
      if (struct.isSetRemark()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetProvinceName()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeString(struct.areaCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetAreaCodes()) {
        {
          oprot.writeI32(struct.areaCodes.size());
          for (String _iter16 : struct.areaCodes)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetProvinceCodes()) {
        {
          oprot.writeI32(struct.provinceCodes.size());
          for (String _iter17 : struct.provinceCodes)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetProvinceCode()) {
        oprot.writeString(struct.provinceCode);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetProvinceName()) {
        oprot.writeString(struct.provinceName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgCooperateCityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.areaCode = iprot.readString();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.areaCodes = new ArrayList<String>(_list18.size);
          String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.areaCodes.add(_elem19);
          }
        }
        struct.setAreaCodesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.provinceCodes = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.provinceCodes.add(_elem22);
          }
        }
        struct.setProvinceCodesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.provinceCode = iprot.readString();
        struct.setProvinceCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.provinceName = iprot.readString();
        struct.setProvinceNameIsSet(true);
      }
    }
  }

}


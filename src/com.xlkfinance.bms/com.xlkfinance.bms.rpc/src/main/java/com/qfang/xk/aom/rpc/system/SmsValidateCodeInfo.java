/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SmsValidateCodeInfo implements org.apache.thrift.TBase<SmsValidateCodeInfo, SmsValidateCodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SmsValidateCodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmsValidateCodeInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TELPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telphone", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SmsValidateCodeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SmsValidateCodeInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String telphone; // required
  public String code; // required
  public String sendDate; // required
  public String createDate; // required
  public int creatorId; // required
  public int category; // required
  public int status; // required
  public String ipAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    TELPHONE((short)2, "telphone"),
    CODE((short)3, "code"),
    SEND_DATE((short)4, "sendDate"),
    CREATE_DATE((short)5, "createDate"),
    CREATOR_ID((short)6, "creatorId"),
    CATEGORY((short)7, "category"),
    STATUS((short)8, "status"),
    IP_ADDRESS((short)9, "ipAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // TELPHONE
          return TELPHONE;
        case 3: // CODE
          return CODE;
        case 4: // SEND_DATE
          return SEND_DATE;
        case 5: // CREATE_DATE
          return CREATE_DATE;
        case 6: // CREATOR_ID
          return CREATOR_ID;
        case 7: // CATEGORY
          return CATEGORY;
        case 8: // STATUS
          return STATUS;
        case 9: // IP_ADDRESS
          return IP_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREATORID_ISSET_ID = 1;
  private static final int __CATEGORY_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TELPHONE, new org.apache.thrift.meta_data.FieldMetaData("telphone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_DATE, new org.apache.thrift.meta_data.FieldMetaData("sendDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmsValidateCodeInfo.class, metaDataMap);
  }

  public SmsValidateCodeInfo() {
  }

  public SmsValidateCodeInfo(
    int pid,
    String telphone,
    String code,
    String sendDate,
    String createDate,
    int creatorId,
    int category,
    int status,
    String ipAddress)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.telphone = telphone;
    this.code = code;
    this.sendDate = sendDate;
    this.createDate = createDate;
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    this.category = category;
    setCategoryIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.ipAddress = ipAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmsValidateCodeInfo(SmsValidateCodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetTelphone()) {
      this.telphone = other.telphone;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetSendDate()) {
      this.sendDate = other.sendDate;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.creatorId = other.creatorId;
    this.category = other.category;
    this.status = other.status;
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
  }

  public SmsValidateCodeInfo deepCopy() {
    return new SmsValidateCodeInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.telphone = null;
    this.code = null;
    this.sendDate = null;
    this.createDate = null;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    setCategoryIsSet(false);
    this.category = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.ipAddress = null;
  }

  public int getPid() {
    return this.pid;
  }

  public SmsValidateCodeInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getTelphone() {
    return this.telphone;
  }

  public SmsValidateCodeInfo setTelphone(String telphone) {
    this.telphone = telphone;
    return this;
  }

  public void unsetTelphone() {
    this.telphone = null;
  }

  /** Returns true if field telphone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelphone() {
    return this.telphone != null;
  }

  public void setTelphoneIsSet(boolean value) {
    if (!value) {
      this.telphone = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public SmsValidateCodeInfo setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getSendDate() {
    return this.sendDate;
  }

  public SmsValidateCodeInfo setSendDate(String sendDate) {
    this.sendDate = sendDate;
    return this;
  }

  public void unsetSendDate() {
    this.sendDate = null;
  }

  /** Returns true if field sendDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSendDate() {
    return this.sendDate != null;
  }

  public void setSendDateIsSet(boolean value) {
    if (!value) {
      this.sendDate = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public SmsValidateCodeInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreatorId() {
    return this.creatorId;
  }

  public SmsValidateCodeInfo setCreatorId(int creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public int getCategory() {
    return this.category;
  }

  public SmsValidateCodeInfo setCategory(int category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public SmsValidateCodeInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public SmsValidateCodeInfo setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TELPHONE:
      if (value == null) {
        unsetTelphone();
      } else {
        setTelphone((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case SEND_DATE:
      if (value == null) {
        unsetSendDate();
      } else {
        setSendDate((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Integer)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case TELPHONE:
      return getTelphone();

    case CODE:
      return getCode();

    case SEND_DATE:
      return getSendDate();

    case CREATE_DATE:
      return getCreateDate();

    case CREATOR_ID:
      return Integer.valueOf(getCreatorId());

    case CATEGORY:
      return Integer.valueOf(getCategory());

    case STATUS:
      return Integer.valueOf(getStatus());

    case IP_ADDRESS:
      return getIpAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case TELPHONE:
      return isSetTelphone();
    case CODE:
      return isSetCode();
    case SEND_DATE:
      return isSetSendDate();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATOR_ID:
      return isSetCreatorId();
    case CATEGORY:
      return isSetCategory();
    case STATUS:
      return isSetStatus();
    case IP_ADDRESS:
      return isSetIpAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SmsValidateCodeInfo)
      return this.equals((SmsValidateCodeInfo)that);
    return false;
  }

  public boolean equals(SmsValidateCodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_telphone = true && this.isSetTelphone();
    boolean that_present_telphone = true && that.isSetTelphone();
    if (this_present_telphone || that_present_telphone) {
      if (!(this_present_telphone && that_present_telphone))
        return false;
      if (!this.telphone.equals(that.telphone))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_sendDate = true && this.isSetSendDate();
    boolean that_present_sendDate = true && that.isSetSendDate();
    if (this_present_sendDate || that_present_sendDate) {
      if (!(this_present_sendDate && that_present_sendDate))
        return false;
      if (!this.sendDate.equals(that.sendDate))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_creatorId = true;
    boolean that_present_creatorId = true;
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_telphone = true && (isSetTelphone());
    list.add(present_telphone);
    if (present_telphone)
      list.add(telphone);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_sendDate = true && (isSetSendDate());
    list.add(present_sendDate);
    if (present_sendDate)
      list.add(sendDate);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_creatorId = true;
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_category = true;
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_ipAddress = true && (isSetIpAddress());
    list.add(present_ipAddress);
    if (present_ipAddress)
      list.add(ipAddress);

    return list.hashCode();
  }

  @Override
  public int compareTo(SmsValidateCodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelphone()).compareTo(other.isSetTelphone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelphone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telphone, other.telphone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendDate()).compareTo(other.isSetSendDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendDate, other.sendDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SmsValidateCodeInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("telphone:");
    if (this.telphone == null) {
      sb.append("null");
    } else {
      sb.append(this.telphone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendDate:");
    if (this.sendDate == null) {
      sb.append("null");
    } else {
      sb.append(this.sendDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    sb.append(this.creatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmsValidateCodeInfoStandardSchemeFactory implements SchemeFactory {
    public SmsValidateCodeInfoStandardScheme getScheme() {
      return new SmsValidateCodeInfoStandardScheme();
    }
  }

  private static class SmsValidateCodeInfoStandardScheme extends StandardScheme<SmsValidateCodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SmsValidateCodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TELPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telphone = iprot.readString();
              struct.setTelphoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendDate = iprot.readString();
              struct.setSendDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creatorId = iprot.readI32();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = iprot.readI32();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SmsValidateCodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.telphone != null) {
        oprot.writeFieldBegin(TELPHONE_FIELD_DESC);
        oprot.writeString(struct.telphone);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.sendDate != null) {
        oprot.writeFieldBegin(SEND_DATE_FIELD_DESC);
        oprot.writeString(struct.sendDate);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.creatorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.category);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmsValidateCodeInfoTupleSchemeFactory implements SchemeFactory {
    public SmsValidateCodeInfoTupleScheme getScheme() {
      return new SmsValidateCodeInfoTupleScheme();
    }
  }

  private static class SmsValidateCodeInfoTupleScheme extends TupleScheme<SmsValidateCodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmsValidateCodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetTelphone()) {
        optionals.set(1);
      }
      if (struct.isSetCode()) {
        optionals.set(2);
      }
      if (struct.isSetSendDate()) {
        optionals.set(3);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(4);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(5);
      }
      if (struct.isSetCategory()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetIpAddress()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTelphone()) {
        oprot.writeString(struct.telphone);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetSendDate()) {
        oprot.writeString(struct.sendDate);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI32(struct.creatorId);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetIpAddress()) {
        oprot.writeString(struct.ipAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmsValidateCodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.telphone = iprot.readString();
        struct.setTelphoneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sendDate = iprot.readString();
        struct.setSendDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creatorId = iprot.readI32();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.category = iprot.readI32();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ipAddress = iprot.readString();
        struct.setIpAddressIsSet(true);
      }
    }
  }

}


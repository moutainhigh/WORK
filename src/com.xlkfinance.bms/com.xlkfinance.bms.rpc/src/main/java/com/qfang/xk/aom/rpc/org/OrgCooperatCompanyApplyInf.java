/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgCooperatCompanyApplyInf implements org.apache.thrift.TBase<OrgCooperatCompanyApplyInf, OrgCooperatCompanyApplyInf._Fields>, java.io.Serializable, Cloneable, Comparable<OrgCooperatCompanyApplyInf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgCooperatCompanyApplyInf");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AVAILABLE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ORG_ASSETS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgAssetsInfo", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField COOPERATION_CITYS_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperationCitys", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField COOPERATE_CITY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperateCityList", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField DATA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataVersion", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SINGLE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUpperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField REAL_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField ACTUAL_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField FUND_SIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fundSizeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoneyProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField ACTIVATE_CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("activateCreditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoneyRemark", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField USED_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("usedLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgCooperatCompanyApplyInfStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgCooperatCompanyApplyInfTupleSchemeFactory());
  }

  public int pid; // required
  public int orgId; // required
  public int userId; // required
  public String startTime; // required
  public String endTime; // required
  public double creditLimit; // required
  public double availableLimit; // required
  public double assureMoney; // required
  public int status; // required
  public String item; // required
  public int creatorId; // required
  public String createdDate; // required
  public int updateId; // required
  public String updateDate; // required
  public String remark; // required
  public OrgAssetsCooperationInfo orgAssetsInfo; // required
  public int applyStatus; // required
  public String cooperationCitys; // required
  public List<OrgCooperateCityInfo> cooperateCityList; // required
  public int dataVersion; // required
  public int isNeedHandle; // required
  public double rate; // required
  public double singleUpperLimit; // required
  public double realAssureMoney; // required
  public double actualFeeRate; // required
  public double fundSizeMoney; // required
  public double assureMoneyProportion; // required
  public double activateCreditLimit; // required
  public String assureMoneyRemark; // required
  public double usedLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ORG_ID((short)2, "orgId"),
    USER_ID((short)3, "userId"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime"),
    CREDIT_LIMIT((short)6, "creditLimit"),
    AVAILABLE_LIMIT((short)7, "availableLimit"),
    ASSURE_MONEY((short)8, "assureMoney"),
    STATUS((short)9, "status"),
    ITEM((short)10, "item"),
    CREATOR_ID((short)11, "creatorId"),
    CREATED_DATE((short)12, "createdDate"),
    UPDATE_ID((short)13, "updateId"),
    UPDATE_DATE((short)14, "updateDate"),
    REMARK((short)15, "remark"),
    ORG_ASSETS_INFO((short)16, "orgAssetsInfo"),
    APPLY_STATUS((short)17, "applyStatus"),
    COOPERATION_CITYS((short)18, "cooperationCitys"),
    COOPERATE_CITY_LIST((short)19, "cooperateCityList"),
    DATA_VERSION((short)20, "dataVersion"),
    IS_NEED_HANDLE((short)21, "isNeedHandle"),
    RATE((short)22, "rate"),
    SINGLE_UPPER_LIMIT((short)23, "singleUpperLimit"),
    REAL_ASSURE_MONEY((short)24, "realAssureMoney"),
    ACTUAL_FEE_RATE((short)25, "actualFeeRate"),
    FUND_SIZE_MONEY((short)26, "fundSizeMoney"),
    ASSURE_MONEY_PROPORTION((short)27, "assureMoneyProportion"),
    ACTIVATE_CREDIT_LIMIT((short)28, "activateCreditLimit"),
    ASSURE_MONEY_REMARK((short)29, "assureMoneyRemark"),
    USED_LIMIT((short)30, "usedLimit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // CREDIT_LIMIT
          return CREDIT_LIMIT;
        case 7: // AVAILABLE_LIMIT
          return AVAILABLE_LIMIT;
        case 8: // ASSURE_MONEY
          return ASSURE_MONEY;
        case 9: // STATUS
          return STATUS;
        case 10: // ITEM
          return ITEM;
        case 11: // CREATOR_ID
          return CREATOR_ID;
        case 12: // CREATED_DATE
          return CREATED_DATE;
        case 13: // UPDATE_ID
          return UPDATE_ID;
        case 14: // UPDATE_DATE
          return UPDATE_DATE;
        case 15: // REMARK
          return REMARK;
        case 16: // ORG_ASSETS_INFO
          return ORG_ASSETS_INFO;
        case 17: // APPLY_STATUS
          return APPLY_STATUS;
        case 18: // COOPERATION_CITYS
          return COOPERATION_CITYS;
        case 19: // COOPERATE_CITY_LIST
          return COOPERATE_CITY_LIST;
        case 20: // DATA_VERSION
          return DATA_VERSION;
        case 21: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 22: // RATE
          return RATE;
        case 23: // SINGLE_UPPER_LIMIT
          return SINGLE_UPPER_LIMIT;
        case 24: // REAL_ASSURE_MONEY
          return REAL_ASSURE_MONEY;
        case 25: // ACTUAL_FEE_RATE
          return ACTUAL_FEE_RATE;
        case 26: // FUND_SIZE_MONEY
          return FUND_SIZE_MONEY;
        case 27: // ASSURE_MONEY_PROPORTION
          return ASSURE_MONEY_PROPORTION;
        case 28: // ACTIVATE_CREDIT_LIMIT
          return ACTIVATE_CREDIT_LIMIT;
        case 29: // ASSURE_MONEY_REMARK
          return ASSURE_MONEY_REMARK;
        case 30: // USED_LIMIT
          return USED_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __CREDITLIMIT_ISSET_ID = 3;
  private static final int __AVAILABLELIMIT_ISSET_ID = 4;
  private static final int __ASSUREMONEY_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __CREATORID_ISSET_ID = 7;
  private static final int __UPDATEID_ISSET_ID = 8;
  private static final int __APPLYSTATUS_ISSET_ID = 9;
  private static final int __DATAVERSION_ISSET_ID = 10;
  private static final int __ISNEEDHANDLE_ISSET_ID = 11;
  private static final int __RATE_ISSET_ID = 12;
  private static final int __SINGLEUPPERLIMIT_ISSET_ID = 13;
  private static final int __REALASSUREMONEY_ISSET_ID = 14;
  private static final int __ACTUALFEERATE_ISSET_ID = 15;
  private static final int __FUNDSIZEMONEY_ISSET_ID = 16;
  private static final int __ASSUREMONEYPROPORTION_ISSET_ID = 17;
  private static final int __ACTIVATECREDITLIMIT_ISSET_ID = 18;
  private static final int __USEDLIMIT_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("availableLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("createdDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ASSETS_INFO, new org.apache.thrift.meta_data.FieldMetaData("orgAssetsInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgAssetsCooperationInfo.class)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COOPERATION_CITYS, new org.apache.thrift.meta_data.FieldMetaData("cooperationCitys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOPERATE_CITY_LIST, new org.apache.thrift.meta_data.FieldMetaData("cooperateCityList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgCooperateCityInfo.class))));
    tmpMap.put(_Fields.DATA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("dataVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SINGLE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singleUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("actualFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_SIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("fundSizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("assureMoneyProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTIVATE_CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("activateCreditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("assureMoneyRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("usedLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgCooperatCompanyApplyInf.class, metaDataMap);
  }

  public OrgCooperatCompanyApplyInf() {
  }

  public OrgCooperatCompanyApplyInf(
    int pid,
    int orgId,
    int userId,
    String startTime,
    String endTime,
    double creditLimit,
    double availableLimit,
    double assureMoney,
    int status,
    String item,
    int creatorId,
    String createdDate,
    int updateId,
    String updateDate,
    String remark,
    OrgAssetsCooperationInfo orgAssetsInfo,
    int applyStatus,
    String cooperationCitys,
    List<OrgCooperateCityInfo> cooperateCityList,
    int dataVersion,
    int isNeedHandle,
    double rate,
    double singleUpperLimit,
    double realAssureMoney,
    double actualFeeRate,
    double fundSizeMoney,
    double assureMoneyProportion,
    double activateCreditLimit,
    String assureMoneyRemark,
    double usedLimit)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.startTime = startTime;
    this.endTime = endTime;
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.item = item;
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    this.createdDate = createdDate;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.remark = remark;
    this.orgAssetsInfo = orgAssetsInfo;
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.cooperationCitys = cooperationCitys;
    this.cooperateCityList = cooperateCityList;
    this.dataVersion = dataVersion;
    setDataVersionIsSet(true);
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.rate = rate;
    setRateIsSet(true);
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    this.realAssureMoney = realAssureMoney;
    setRealAssureMoneyIsSet(true);
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    this.assureMoneyProportion = assureMoneyProportion;
    setAssureMoneyProportionIsSet(true);
    this.activateCreditLimit = activateCreditLimit;
    setActivateCreditLimitIsSet(true);
    this.assureMoneyRemark = assureMoneyRemark;
    this.usedLimit = usedLimit;
    setUsedLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgCooperatCompanyApplyInf(OrgCooperatCompanyApplyInf other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.orgId = other.orgId;
    this.userId = other.userId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.creditLimit = other.creditLimit;
    this.availableLimit = other.availableLimit;
    this.assureMoney = other.assureMoney;
    this.status = other.status;
    if (other.isSetItem()) {
      this.item = other.item;
    }
    this.creatorId = other.creatorId;
    if (other.isSetCreatedDate()) {
      this.createdDate = other.createdDate;
    }
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetOrgAssetsInfo()) {
      this.orgAssetsInfo = new OrgAssetsCooperationInfo(other.orgAssetsInfo);
    }
    this.applyStatus = other.applyStatus;
    if (other.isSetCooperationCitys()) {
      this.cooperationCitys = other.cooperationCitys;
    }
    if (other.isSetCooperateCityList()) {
      List<OrgCooperateCityInfo> __this__cooperateCityList = new ArrayList<OrgCooperateCityInfo>(other.cooperateCityList.size());
      for (OrgCooperateCityInfo other_element : other.cooperateCityList) {
        __this__cooperateCityList.add(new OrgCooperateCityInfo(other_element));
      }
      this.cooperateCityList = __this__cooperateCityList;
    }
    this.dataVersion = other.dataVersion;
    this.isNeedHandle = other.isNeedHandle;
    this.rate = other.rate;
    this.singleUpperLimit = other.singleUpperLimit;
    this.realAssureMoney = other.realAssureMoney;
    this.actualFeeRate = other.actualFeeRate;
    this.fundSizeMoney = other.fundSizeMoney;
    this.assureMoneyProportion = other.assureMoneyProportion;
    this.activateCreditLimit = other.activateCreditLimit;
    if (other.isSetAssureMoneyRemark()) {
      this.assureMoneyRemark = other.assureMoneyRemark;
    }
    this.usedLimit = other.usedLimit;
  }

  public OrgCooperatCompanyApplyInf deepCopy() {
    return new OrgCooperatCompanyApplyInf(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.startTime = null;
    this.endTime = null;
    setCreditLimitIsSet(false);
    this.creditLimit = 0.0;
    setAvailableLimitIsSet(false);
    this.availableLimit = 0.0;
    setAssureMoneyIsSet(false);
    this.assureMoney = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    this.item = null;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    this.createdDate = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.remark = null;
    this.orgAssetsInfo = null;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    this.cooperationCitys = null;
    this.cooperateCityList = null;
    setDataVersionIsSet(false);
    this.dataVersion = 0;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    setRateIsSet(false);
    this.rate = 0.0;
    setSingleUpperLimitIsSet(false);
    this.singleUpperLimit = 0.0;
    setRealAssureMoneyIsSet(false);
    this.realAssureMoney = 0.0;
    setActualFeeRateIsSet(false);
    this.actualFeeRate = 0.0;
    setFundSizeMoneyIsSet(false);
    this.fundSizeMoney = 0.0;
    setAssureMoneyProportionIsSet(false);
    this.assureMoneyProportion = 0.0;
    setActivateCreditLimitIsSet(false);
    this.activateCreditLimit = 0.0;
    this.assureMoneyRemark = null;
    setUsedLimitIsSet(false);
    this.usedLimit = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgCooperatCompanyApplyInf setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgCooperatCompanyApplyInf setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public OrgCooperatCompanyApplyInf setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public OrgCooperatCompanyApplyInf setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public OrgCooperatCompanyApplyInf setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public double getCreditLimit() {
    return this.creditLimit;
  }

  public OrgCooperatCompanyApplyInf setCreditLimit(double creditLimit) {
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    return this;
  }

  public void unsetCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  public void setCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
  }

  public double getAvailableLimit() {
    return this.availableLimit;
  }

  public OrgCooperatCompanyApplyInf setAvailableLimit(double availableLimit) {
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    return this;
  }

  public void unsetAvailableLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  /** Returns true if field availableLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  public void setAvailableLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID, value);
  }

  public double getAssureMoney() {
    return this.assureMoney;
  }

  public OrgCooperatCompanyApplyInf setAssureMoney(double assureMoney) {
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    return this;
  }

  public void unsetAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field assureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  public void setAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OrgCooperatCompanyApplyInf setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getItem() {
    return this.item;
  }

  public OrgCooperatCompanyApplyInf setItem(String item) {
    this.item = item;
    return this;
  }

  public void unsetItem() {
    this.item = null;
  }

  /** Returns true if field item is set (has been assigned a value) and false otherwise */
  public boolean isSetItem() {
    return this.item != null;
  }

  public void setItemIsSet(boolean value) {
    if (!value) {
      this.item = null;
    }
  }

  public int getCreatorId() {
    return this.creatorId;
  }

  public OrgCooperatCompanyApplyInf setCreatorId(int creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public String getCreatedDate() {
    return this.createdDate;
  }

  public OrgCooperatCompanyApplyInf setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  public void unsetCreatedDate() {
    this.createdDate = null;
  }

  /** Returns true if field createdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return this.createdDate != null;
  }

  public void setCreatedDateIsSet(boolean value) {
    if (!value) {
      this.createdDate = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public OrgCooperatCompanyApplyInf setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgCooperatCompanyApplyInf setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OrgCooperatCompanyApplyInf setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public OrgAssetsCooperationInfo getOrgAssetsInfo() {
    return this.orgAssetsInfo;
  }

  public OrgCooperatCompanyApplyInf setOrgAssetsInfo(OrgAssetsCooperationInfo orgAssetsInfo) {
    this.orgAssetsInfo = orgAssetsInfo;
    return this;
  }

  public void unsetOrgAssetsInfo() {
    this.orgAssetsInfo = null;
  }

  /** Returns true if field orgAssetsInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgAssetsInfo() {
    return this.orgAssetsInfo != null;
  }

  public void setOrgAssetsInfoIsSet(boolean value) {
    if (!value) {
      this.orgAssetsInfo = null;
    }
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public OrgCooperatCompanyApplyInf setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public String getCooperationCitys() {
    return this.cooperationCitys;
  }

  public OrgCooperatCompanyApplyInf setCooperationCitys(String cooperationCitys) {
    this.cooperationCitys = cooperationCitys;
    return this;
  }

  public void unsetCooperationCitys() {
    this.cooperationCitys = null;
  }

  /** Returns true if field cooperationCitys is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperationCitys() {
    return this.cooperationCitys != null;
  }

  public void setCooperationCitysIsSet(boolean value) {
    if (!value) {
      this.cooperationCitys = null;
    }
  }

  public int getCooperateCityListSize() {
    return (this.cooperateCityList == null) ? 0 : this.cooperateCityList.size();
  }

  public java.util.Iterator<OrgCooperateCityInfo> getCooperateCityListIterator() {
    return (this.cooperateCityList == null) ? null : this.cooperateCityList.iterator();
  }

  public void addToCooperateCityList(OrgCooperateCityInfo elem) {
    if (this.cooperateCityList == null) {
      this.cooperateCityList = new ArrayList<OrgCooperateCityInfo>();
    }
    this.cooperateCityList.add(elem);
  }

  public List<OrgCooperateCityInfo> getCooperateCityList() {
    return this.cooperateCityList;
  }

  public OrgCooperatCompanyApplyInf setCooperateCityList(List<OrgCooperateCityInfo> cooperateCityList) {
    this.cooperateCityList = cooperateCityList;
    return this;
  }

  public void unsetCooperateCityList() {
    this.cooperateCityList = null;
  }

  /** Returns true if field cooperateCityList is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperateCityList() {
    return this.cooperateCityList != null;
  }

  public void setCooperateCityListIsSet(boolean value) {
    if (!value) {
      this.cooperateCityList = null;
    }
  }

  public int getDataVersion() {
    return this.dataVersion;
  }

  public OrgCooperatCompanyApplyInf setDataVersion(int dataVersion) {
    this.dataVersion = dataVersion;
    setDataVersionIsSet(true);
    return this;
  }

  public void unsetDataVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  /** Returns true if field dataVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDataVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  public void setDataVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAVERSION_ISSET_ID, value);
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public OrgCooperatCompanyApplyInf setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public double getRate() {
    return this.rate;
  }

  public OrgCooperatCompanyApplyInf setRate(double rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public double getSingleUpperLimit() {
    return this.singleUpperLimit;
  }

  public OrgCooperatCompanyApplyInf setSingleUpperLimit(double singleUpperLimit) {
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    return this;
  }

  public void unsetSingleUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field singleUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  public void setSingleUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID, value);
  }

  public double getRealAssureMoney() {
    return this.realAssureMoney;
  }

  public OrgCooperatCompanyApplyInf setRealAssureMoney(double realAssureMoney) {
    this.realAssureMoney = realAssureMoney;
    setRealAssureMoneyIsSet(true);
    return this;
  }

  public void unsetRealAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field realAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID);
  }

  public void setRealAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID, value);
  }

  public double getActualFeeRate() {
    return this.actualFeeRate;
  }

  public OrgCooperatCompanyApplyInf setActualFeeRate(double actualFeeRate) {
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    return this;
  }

  public void unsetActualFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  /** Returns true if field actualFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  public void setActualFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID, value);
  }

  public double getFundSizeMoney() {
    return this.fundSizeMoney;
  }

  public OrgCooperatCompanyApplyInf setFundSizeMoney(double fundSizeMoney) {
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    return this;
  }

  public void unsetFundSizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  /** Returns true if field fundSizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFundSizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  public void setFundSizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID, value);
  }

  public double getAssureMoneyProportion() {
    return this.assureMoneyProportion;
  }

  public OrgCooperatCompanyApplyInf setAssureMoneyProportion(double assureMoneyProportion) {
    this.assureMoneyProportion = assureMoneyProportion;
    setAssureMoneyProportionIsSet(true);
    return this;
  }

  public void unsetAssureMoneyProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID);
  }

  /** Returns true if field assureMoneyProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoneyProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID);
  }

  public void setAssureMoneyProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEYPROPORTION_ISSET_ID, value);
  }

  public double getActivateCreditLimit() {
    return this.activateCreditLimit;
  }

  public OrgCooperatCompanyApplyInf setActivateCreditLimit(double activateCreditLimit) {
    this.activateCreditLimit = activateCreditLimit;
    setActivateCreditLimitIsSet(true);
    return this;
  }

  public void unsetActivateCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field activateCreditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetActivateCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID);
  }

  public void setActivateCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVATECREDITLIMIT_ISSET_ID, value);
  }

  public String getAssureMoneyRemark() {
    return this.assureMoneyRemark;
  }

  public OrgCooperatCompanyApplyInf setAssureMoneyRemark(String assureMoneyRemark) {
    this.assureMoneyRemark = assureMoneyRemark;
    return this;
  }

  public void unsetAssureMoneyRemark() {
    this.assureMoneyRemark = null;
  }

  /** Returns true if field assureMoneyRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoneyRemark() {
    return this.assureMoneyRemark != null;
  }

  public void setAssureMoneyRemarkIsSet(boolean value) {
    if (!value) {
      this.assureMoneyRemark = null;
    }
  }

  public double getUsedLimit() {
    return this.usedLimit;
  }

  public OrgCooperatCompanyApplyInf setUsedLimit(double usedLimit) {
    this.usedLimit = usedLimit;
    setUsedLimitIsSet(true);
    return this;
  }

  public void unsetUsedLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDLIMIT_ISSET_ID);
  }

  /** Returns true if field usedLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDLIMIT_ISSET_ID);
  }

  public void setUsedLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case CREDIT_LIMIT:
      if (value == null) {
        unsetCreditLimit();
      } else {
        setCreditLimit((Double)value);
      }
      break;

    case AVAILABLE_LIMIT:
      if (value == null) {
        unsetAvailableLimit();
      } else {
        setAvailableLimit((Double)value);
      }
      break;

    case ASSURE_MONEY:
      if (value == null) {
        unsetAssureMoney();
      } else {
        setAssureMoney((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((String)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Integer)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ORG_ASSETS_INFO:
      if (value == null) {
        unsetOrgAssetsInfo();
      } else {
        setOrgAssetsInfo((OrgAssetsCooperationInfo)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case COOPERATION_CITYS:
      if (value == null) {
        unsetCooperationCitys();
      } else {
        setCooperationCitys((String)value);
      }
      break;

    case COOPERATE_CITY_LIST:
      if (value == null) {
        unsetCooperateCityList();
      } else {
        setCooperateCityList((List<OrgCooperateCityInfo>)value);
      }
      break;

    case DATA_VERSION:
      if (value == null) {
        unsetDataVersion();
      } else {
        setDataVersion((Integer)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Double)value);
      }
      break;

    case SINGLE_UPPER_LIMIT:
      if (value == null) {
        unsetSingleUpperLimit();
      } else {
        setSingleUpperLimit((Double)value);
      }
      break;

    case REAL_ASSURE_MONEY:
      if (value == null) {
        unsetRealAssureMoney();
      } else {
        setRealAssureMoney((Double)value);
      }
      break;

    case ACTUAL_FEE_RATE:
      if (value == null) {
        unsetActualFeeRate();
      } else {
        setActualFeeRate((Double)value);
      }
      break;

    case FUND_SIZE_MONEY:
      if (value == null) {
        unsetFundSizeMoney();
      } else {
        setFundSizeMoney((Double)value);
      }
      break;

    case ASSURE_MONEY_PROPORTION:
      if (value == null) {
        unsetAssureMoneyProportion();
      } else {
        setAssureMoneyProportion((Double)value);
      }
      break;

    case ACTIVATE_CREDIT_LIMIT:
      if (value == null) {
        unsetActivateCreditLimit();
      } else {
        setActivateCreditLimit((Double)value);
      }
      break;

    case ASSURE_MONEY_REMARK:
      if (value == null) {
        unsetAssureMoneyRemark();
      } else {
        setAssureMoneyRemark((String)value);
      }
      break;

    case USED_LIMIT:
      if (value == null) {
        unsetUsedLimit();
      } else {
        setUsedLimit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case CREDIT_LIMIT:
      return Double.valueOf(getCreditLimit());

    case AVAILABLE_LIMIT:
      return Double.valueOf(getAvailableLimit());

    case ASSURE_MONEY:
      return Double.valueOf(getAssureMoney());

    case STATUS:
      return Integer.valueOf(getStatus());

    case ITEM:
      return getItem();

    case CREATOR_ID:
      return Integer.valueOf(getCreatorId());

    case CREATED_DATE:
      return getCreatedDate();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case REMARK:
      return getRemark();

    case ORG_ASSETS_INFO:
      return getOrgAssetsInfo();

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case COOPERATION_CITYS:
      return getCooperationCitys();

    case COOPERATE_CITY_LIST:
      return getCooperateCityList();

    case DATA_VERSION:
      return Integer.valueOf(getDataVersion());

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case RATE:
      return Double.valueOf(getRate());

    case SINGLE_UPPER_LIMIT:
      return Double.valueOf(getSingleUpperLimit());

    case REAL_ASSURE_MONEY:
      return Double.valueOf(getRealAssureMoney());

    case ACTUAL_FEE_RATE:
      return Double.valueOf(getActualFeeRate());

    case FUND_SIZE_MONEY:
      return Double.valueOf(getFundSizeMoney());

    case ASSURE_MONEY_PROPORTION:
      return Double.valueOf(getAssureMoneyProportion());

    case ACTIVATE_CREDIT_LIMIT:
      return Double.valueOf(getActivateCreditLimit());

    case ASSURE_MONEY_REMARK:
      return getAssureMoneyRemark();

    case USED_LIMIT:
      return Double.valueOf(getUsedLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ORG_ID:
      return isSetOrgId();
    case USER_ID:
      return isSetUserId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case CREDIT_LIMIT:
      return isSetCreditLimit();
    case AVAILABLE_LIMIT:
      return isSetAvailableLimit();
    case ASSURE_MONEY:
      return isSetAssureMoney();
    case STATUS:
      return isSetStatus();
    case ITEM:
      return isSetItem();
    case CREATOR_ID:
      return isSetCreatorId();
    case CREATED_DATE:
      return isSetCreatedDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case REMARK:
      return isSetRemark();
    case ORG_ASSETS_INFO:
      return isSetOrgAssetsInfo();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case COOPERATION_CITYS:
      return isSetCooperationCitys();
    case COOPERATE_CITY_LIST:
      return isSetCooperateCityList();
    case DATA_VERSION:
      return isSetDataVersion();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case RATE:
      return isSetRate();
    case SINGLE_UPPER_LIMIT:
      return isSetSingleUpperLimit();
    case REAL_ASSURE_MONEY:
      return isSetRealAssureMoney();
    case ACTUAL_FEE_RATE:
      return isSetActualFeeRate();
    case FUND_SIZE_MONEY:
      return isSetFundSizeMoney();
    case ASSURE_MONEY_PROPORTION:
      return isSetAssureMoneyProportion();
    case ACTIVATE_CREDIT_LIMIT:
      return isSetActivateCreditLimit();
    case ASSURE_MONEY_REMARK:
      return isSetAssureMoneyRemark();
    case USED_LIMIT:
      return isSetUsedLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgCooperatCompanyApplyInf)
      return this.equals((OrgCooperatCompanyApplyInf)that);
    return false;
  }

  public boolean equals(OrgCooperatCompanyApplyInf that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_creditLimit = true;
    boolean that_present_creditLimit = true;
    if (this_present_creditLimit || that_present_creditLimit) {
      if (!(this_present_creditLimit && that_present_creditLimit))
        return false;
      if (this.creditLimit != that.creditLimit)
        return false;
    }

    boolean this_present_availableLimit = true;
    boolean that_present_availableLimit = true;
    if (this_present_availableLimit || that_present_availableLimit) {
      if (!(this_present_availableLimit && that_present_availableLimit))
        return false;
      if (this.availableLimit != that.availableLimit)
        return false;
    }

    boolean this_present_assureMoney = true;
    boolean that_present_assureMoney = true;
    if (this_present_assureMoney || that_present_assureMoney) {
      if (!(this_present_assureMoney && that_present_assureMoney))
        return false;
      if (this.assureMoney != that.assureMoney)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_item = true && this.isSetItem();
    boolean that_present_item = true && that.isSetItem();
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (!this.item.equals(that.item))
        return false;
    }

    boolean this_present_creatorId = true;
    boolean that_present_creatorId = true;
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_createdDate = true && this.isSetCreatedDate();
    boolean that_present_createdDate = true && that.isSetCreatedDate();
    if (this_present_createdDate || that_present_createdDate) {
      if (!(this_present_createdDate && that_present_createdDate))
        return false;
      if (!this.createdDate.equals(that.createdDate))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_orgAssetsInfo = true && this.isSetOrgAssetsInfo();
    boolean that_present_orgAssetsInfo = true && that.isSetOrgAssetsInfo();
    if (this_present_orgAssetsInfo || that_present_orgAssetsInfo) {
      if (!(this_present_orgAssetsInfo && that_present_orgAssetsInfo))
        return false;
      if (!this.orgAssetsInfo.equals(that.orgAssetsInfo))
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_cooperationCitys = true && this.isSetCooperationCitys();
    boolean that_present_cooperationCitys = true && that.isSetCooperationCitys();
    if (this_present_cooperationCitys || that_present_cooperationCitys) {
      if (!(this_present_cooperationCitys && that_present_cooperationCitys))
        return false;
      if (!this.cooperationCitys.equals(that.cooperationCitys))
        return false;
    }

    boolean this_present_cooperateCityList = true && this.isSetCooperateCityList();
    boolean that_present_cooperateCityList = true && that.isSetCooperateCityList();
    if (this_present_cooperateCityList || that_present_cooperateCityList) {
      if (!(this_present_cooperateCityList && that_present_cooperateCityList))
        return false;
      if (!this.cooperateCityList.equals(that.cooperateCityList))
        return false;
    }

    boolean this_present_dataVersion = true;
    boolean that_present_dataVersion = true;
    if (this_present_dataVersion || that_present_dataVersion) {
      if (!(this_present_dataVersion && that_present_dataVersion))
        return false;
      if (this.dataVersion != that.dataVersion)
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_singleUpperLimit = true;
    boolean that_present_singleUpperLimit = true;
    if (this_present_singleUpperLimit || that_present_singleUpperLimit) {
      if (!(this_present_singleUpperLimit && that_present_singleUpperLimit))
        return false;
      if (this.singleUpperLimit != that.singleUpperLimit)
        return false;
    }

    boolean this_present_realAssureMoney = true;
    boolean that_present_realAssureMoney = true;
    if (this_present_realAssureMoney || that_present_realAssureMoney) {
      if (!(this_present_realAssureMoney && that_present_realAssureMoney))
        return false;
      if (this.realAssureMoney != that.realAssureMoney)
        return false;
    }

    boolean this_present_actualFeeRate = true;
    boolean that_present_actualFeeRate = true;
    if (this_present_actualFeeRate || that_present_actualFeeRate) {
      if (!(this_present_actualFeeRate && that_present_actualFeeRate))
        return false;
      if (this.actualFeeRate != that.actualFeeRate)
        return false;
    }

    boolean this_present_fundSizeMoney = true;
    boolean that_present_fundSizeMoney = true;
    if (this_present_fundSizeMoney || that_present_fundSizeMoney) {
      if (!(this_present_fundSizeMoney && that_present_fundSizeMoney))
        return false;
      if (this.fundSizeMoney != that.fundSizeMoney)
        return false;
    }

    boolean this_present_assureMoneyProportion = true;
    boolean that_present_assureMoneyProportion = true;
    if (this_present_assureMoneyProportion || that_present_assureMoneyProportion) {
      if (!(this_present_assureMoneyProportion && that_present_assureMoneyProportion))
        return false;
      if (this.assureMoneyProportion != that.assureMoneyProportion)
        return false;
    }

    boolean this_present_activateCreditLimit = true;
    boolean that_present_activateCreditLimit = true;
    if (this_present_activateCreditLimit || that_present_activateCreditLimit) {
      if (!(this_present_activateCreditLimit && that_present_activateCreditLimit))
        return false;
      if (this.activateCreditLimit != that.activateCreditLimit)
        return false;
    }

    boolean this_present_assureMoneyRemark = true && this.isSetAssureMoneyRemark();
    boolean that_present_assureMoneyRemark = true && that.isSetAssureMoneyRemark();
    if (this_present_assureMoneyRemark || that_present_assureMoneyRemark) {
      if (!(this_present_assureMoneyRemark && that_present_assureMoneyRemark))
        return false;
      if (!this.assureMoneyRemark.equals(that.assureMoneyRemark))
        return false;
    }

    boolean this_present_usedLimit = true;
    boolean that_present_usedLimit = true;
    if (this_present_usedLimit || that_present_usedLimit) {
      if (!(this_present_usedLimit && that_present_usedLimit))
        return false;
      if (this.usedLimit != that.usedLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_creditLimit = true;
    list.add(present_creditLimit);
    if (present_creditLimit)
      list.add(creditLimit);

    boolean present_availableLimit = true;
    list.add(present_availableLimit);
    if (present_availableLimit)
      list.add(availableLimit);

    boolean present_assureMoney = true;
    list.add(present_assureMoney);
    if (present_assureMoney)
      list.add(assureMoney);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_item = true && (isSetItem());
    list.add(present_item);
    if (present_item)
      list.add(item);

    boolean present_creatorId = true;
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_createdDate = true && (isSetCreatedDate());
    list.add(present_createdDate);
    if (present_createdDate)
      list.add(createdDate);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_orgAssetsInfo = true && (isSetOrgAssetsInfo());
    list.add(present_orgAssetsInfo);
    if (present_orgAssetsInfo)
      list.add(orgAssetsInfo);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_cooperationCitys = true && (isSetCooperationCitys());
    list.add(present_cooperationCitys);
    if (present_cooperationCitys)
      list.add(cooperationCitys);

    boolean present_cooperateCityList = true && (isSetCooperateCityList());
    list.add(present_cooperateCityList);
    if (present_cooperateCityList)
      list.add(cooperateCityList);

    boolean present_dataVersion = true;
    list.add(present_dataVersion);
    if (present_dataVersion)
      list.add(dataVersion);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_rate = true;
    list.add(present_rate);
    if (present_rate)
      list.add(rate);

    boolean present_singleUpperLimit = true;
    list.add(present_singleUpperLimit);
    if (present_singleUpperLimit)
      list.add(singleUpperLimit);

    boolean present_realAssureMoney = true;
    list.add(present_realAssureMoney);
    if (present_realAssureMoney)
      list.add(realAssureMoney);

    boolean present_actualFeeRate = true;
    list.add(present_actualFeeRate);
    if (present_actualFeeRate)
      list.add(actualFeeRate);

    boolean present_fundSizeMoney = true;
    list.add(present_fundSizeMoney);
    if (present_fundSizeMoney)
      list.add(fundSizeMoney);

    boolean present_assureMoneyProportion = true;
    list.add(present_assureMoneyProportion);
    if (present_assureMoneyProportion)
      list.add(assureMoneyProportion);

    boolean present_activateCreditLimit = true;
    list.add(present_activateCreditLimit);
    if (present_activateCreditLimit)
      list.add(activateCreditLimit);

    boolean present_assureMoneyRemark = true && (isSetAssureMoneyRemark());
    list.add(present_assureMoneyRemark);
    if (present_assureMoneyRemark)
      list.add(assureMoneyRemark);

    boolean present_usedLimit = true;
    list.add(present_usedLimit);
    if (present_usedLimit)
      list.add(usedLimit);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgCooperatCompanyApplyInf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableLimit()).compareTo(other.isSetAvailableLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableLimit, other.availableLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoney()).compareTo(other.isSetAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoney, other.assureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDate, other.createdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgAssetsInfo()).compareTo(other.isSetOrgAssetsInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgAssetsInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgAssetsInfo, other.orgAssetsInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperationCitys()).compareTo(other.isSetCooperationCitys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperationCitys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperationCitys, other.cooperationCitys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperateCityList()).compareTo(other.isSetCooperateCityList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperateCityList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperateCityList, other.cooperateCityList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataVersion()).compareTo(other.isSetDataVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataVersion, other.dataVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUpperLimit()).compareTo(other.isSetSingleUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUpperLimit, other.singleUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealAssureMoney()).compareTo(other.isSetRealAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realAssureMoney, other.realAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualFeeRate()).compareTo(other.isSetActualFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualFeeRate, other.actualFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundSizeMoney()).compareTo(other.isSetFundSizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundSizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundSizeMoney, other.fundSizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoneyProportion()).compareTo(other.isSetAssureMoneyProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoneyProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoneyProportion, other.assureMoneyProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivateCreditLimit()).compareTo(other.isSetActivateCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivateCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activateCreditLimit, other.activateCreditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoneyRemark()).compareTo(other.isSetAssureMoneyRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoneyRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoneyRemark, other.assureMoneyRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedLimit()).compareTo(other.isSetUsedLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedLimit, other.usedLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgCooperatCompanyApplyInf(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditLimit:");
    sb.append(this.creditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableLimit:");
    sb.append(this.availableLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoney:");
    sb.append(this.assureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("item:");
    if (this.item == null) {
      sb.append("null");
    } else {
      sb.append(this.item);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    sb.append(this.creatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDate:");
    if (this.createdDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createdDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgAssetsInfo:");
    if (this.orgAssetsInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.orgAssetsInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperationCitys:");
    if (this.cooperationCitys == null) {
      sb.append("null");
    } else {
      sb.append(this.cooperationCitys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperateCityList:");
    if (this.cooperateCityList == null) {
      sb.append("null");
    } else {
      sb.append(this.cooperateCityList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataVersion:");
    sb.append(this.dataVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleUpperLimit:");
    sb.append(this.singleUpperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realAssureMoney:");
    sb.append(this.realAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualFeeRate:");
    sb.append(this.actualFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundSizeMoney:");
    sb.append(this.fundSizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoneyProportion:");
    sb.append(this.assureMoneyProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activateCreditLimit:");
    sb.append(this.activateCreditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoneyRemark:");
    if (this.assureMoneyRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.assureMoneyRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedLimit:");
    sb.append(this.usedLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (orgAssetsInfo != null) {
      orgAssetsInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgCooperatCompanyApplyInfStandardSchemeFactory implements SchemeFactory {
    public OrgCooperatCompanyApplyInfStandardScheme getScheme() {
      return new OrgCooperatCompanyApplyInfStandardScheme();
    }
  }

  private static class OrgCooperatCompanyApplyInfStandardScheme extends StandardScheme<OrgCooperatCompanyApplyInf> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgCooperatCompanyApplyInf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditLimit = iprot.readDouble();
              struct.setCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVAILABLE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableLimit = iprot.readDouble();
              struct.setAvailableLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoney = iprot.readDouble();
              struct.setAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.item = iprot.readString();
              struct.setItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creatorId = iprot.readI32();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdDate = iprot.readString();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORG_ASSETS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orgAssetsInfo = new OrgAssetsCooperationInfo();
              struct.orgAssetsInfo.read(iprot);
              struct.setOrgAssetsInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COOPERATION_CITYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cooperationCitys = iprot.readString();
              struct.setCooperationCitysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COOPERATE_CITY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.cooperateCityList = new ArrayList<OrgCooperateCityInfo>(_list24.size);
                OrgCooperateCityInfo _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new OrgCooperateCityInfo();
                  _elem25.read(iprot);
                  struct.cooperateCityList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setCooperateCityListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DATA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataVersion = iprot.readI32();
              struct.setDataVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rate = iprot.readDouble();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SINGLE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.singleUpperLimit = iprot.readDouble();
              struct.setSingleUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REAL_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realAssureMoney = iprot.readDouble();
              struct.setRealAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ACTUAL_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualFeeRate = iprot.readDouble();
              struct.setActualFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FUND_SIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundSizeMoney = iprot.readDouble();
              struct.setFundSizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ASSURE_MONEY_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoneyProportion = iprot.readDouble();
              struct.setAssureMoneyProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ACTIVATE_CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.activateCreditLimit = iprot.readDouble();
              struct.setActivateCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ASSURE_MONEY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assureMoneyRemark = iprot.readString();
              struct.setAssureMoneyRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // USED_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.usedLimit = iprot.readDouble();
              struct.setUsedLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgCooperatCompanyApplyInf struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.creditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.availableLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.item != null) {
        oprot.writeFieldBegin(ITEM_FIELD_DESC);
        oprot.writeString(struct.item);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.creatorId);
      oprot.writeFieldEnd();
      if (struct.createdDate != null) {
        oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
        oprot.writeString(struct.createdDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.orgAssetsInfo != null) {
        oprot.writeFieldBegin(ORG_ASSETS_INFO_FIELD_DESC);
        struct.orgAssetsInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      if (struct.cooperationCitys != null) {
        oprot.writeFieldBegin(COOPERATION_CITYS_FIELD_DESC);
        oprot.writeString(struct.cooperationCitys);
        oprot.writeFieldEnd();
      }
      if (struct.cooperateCityList != null) {
        oprot.writeFieldBegin(COOPERATE_CITY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cooperateCityList.size()));
          for (OrgCooperateCityInfo _iter27 : struct.cooperateCityList)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_VERSION_FIELD_DESC);
      oprot.writeI32(struct.dataVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeDouble(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINGLE_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.singleUpperLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realAssureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.actualFeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUND_SIZE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.fundSizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.assureMoneyProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVATE_CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.activateCreditLimit);
      oprot.writeFieldEnd();
      if (struct.assureMoneyRemark != null) {
        oprot.writeFieldBegin(ASSURE_MONEY_REMARK_FIELD_DESC);
        oprot.writeString(struct.assureMoneyRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USED_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.usedLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgCooperatCompanyApplyInfTupleSchemeFactory implements SchemeFactory {
    public OrgCooperatCompanyApplyInfTupleScheme getScheme() {
      return new OrgCooperatCompanyApplyInfTupleScheme();
    }
  }

  private static class OrgCooperatCompanyApplyInfTupleScheme extends TupleScheme<OrgCooperatCompanyApplyInf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgCooperatCompanyApplyInf struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetCreditLimit()) {
        optionals.set(5);
      }
      if (struct.isSetAvailableLimit()) {
        optionals.set(6);
      }
      if (struct.isSetAssureMoney()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetItem()) {
        optionals.set(9);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(10);
      }
      if (struct.isSetCreatedDate()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(13);
      }
      if (struct.isSetRemark()) {
        optionals.set(14);
      }
      if (struct.isSetOrgAssetsInfo()) {
        optionals.set(15);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(16);
      }
      if (struct.isSetCooperationCitys()) {
        optionals.set(17);
      }
      if (struct.isSetCooperateCityList()) {
        optionals.set(18);
      }
      if (struct.isSetDataVersion()) {
        optionals.set(19);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(20);
      }
      if (struct.isSetRate()) {
        optionals.set(21);
      }
      if (struct.isSetSingleUpperLimit()) {
        optionals.set(22);
      }
      if (struct.isSetRealAssureMoney()) {
        optionals.set(23);
      }
      if (struct.isSetActualFeeRate()) {
        optionals.set(24);
      }
      if (struct.isSetFundSizeMoney()) {
        optionals.set(25);
      }
      if (struct.isSetAssureMoneyProportion()) {
        optionals.set(26);
      }
      if (struct.isSetActivateCreditLimit()) {
        optionals.set(27);
      }
      if (struct.isSetAssureMoneyRemark()) {
        optionals.set(28);
      }
      if (struct.isSetUsedLimit()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetCreditLimit()) {
        oprot.writeDouble(struct.creditLimit);
      }
      if (struct.isSetAvailableLimit()) {
        oprot.writeDouble(struct.availableLimit);
      }
      if (struct.isSetAssureMoney()) {
        oprot.writeDouble(struct.assureMoney);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetItem()) {
        oprot.writeString(struct.item);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI32(struct.creatorId);
      }
      if (struct.isSetCreatedDate()) {
        oprot.writeString(struct.createdDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetOrgAssetsInfo()) {
        struct.orgAssetsInfo.write(oprot);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetCooperationCitys()) {
        oprot.writeString(struct.cooperationCitys);
      }
      if (struct.isSetCooperateCityList()) {
        {
          oprot.writeI32(struct.cooperateCityList.size());
          for (OrgCooperateCityInfo _iter28 : struct.cooperateCityList)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetDataVersion()) {
        oprot.writeI32(struct.dataVersion);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetRate()) {
        oprot.writeDouble(struct.rate);
      }
      if (struct.isSetSingleUpperLimit()) {
        oprot.writeDouble(struct.singleUpperLimit);
      }
      if (struct.isSetRealAssureMoney()) {
        oprot.writeDouble(struct.realAssureMoney);
      }
      if (struct.isSetActualFeeRate()) {
        oprot.writeDouble(struct.actualFeeRate);
      }
      if (struct.isSetFundSizeMoney()) {
        oprot.writeDouble(struct.fundSizeMoney);
      }
      if (struct.isSetAssureMoneyProportion()) {
        oprot.writeDouble(struct.assureMoneyProportion);
      }
      if (struct.isSetActivateCreditLimit()) {
        oprot.writeDouble(struct.activateCreditLimit);
      }
      if (struct.isSetAssureMoneyRemark()) {
        oprot.writeString(struct.assureMoneyRemark);
      }
      if (struct.isSetUsedLimit()) {
        oprot.writeDouble(struct.usedLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgCooperatCompanyApplyInf struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creditLimit = iprot.readDouble();
        struct.setCreditLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.availableLimit = iprot.readDouble();
        struct.setAvailableLimitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assureMoney = iprot.readDouble();
        struct.setAssureMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.item = iprot.readString();
        struct.setItemIsSet(true);
      }
      if (incoming.get(10)) {
        struct.creatorId = iprot.readI32();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createdDate = iprot.readString();
        struct.setCreatedDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orgAssetsInfo = new OrgAssetsCooperationInfo();
        struct.orgAssetsInfo.read(iprot);
        struct.setOrgAssetsInfoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cooperationCitys = iprot.readString();
        struct.setCooperationCitysIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cooperateCityList = new ArrayList<OrgCooperateCityInfo>(_list29.size);
          OrgCooperateCityInfo _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new OrgCooperateCityInfo();
            _elem30.read(iprot);
            struct.cooperateCityList.add(_elem30);
          }
        }
        struct.setCooperateCityListIsSet(true);
      }
      if (incoming.get(19)) {
        struct.dataVersion = iprot.readI32();
        struct.setDataVersionIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(21)) {
        struct.rate = iprot.readDouble();
        struct.setRateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.singleUpperLimit = iprot.readDouble();
        struct.setSingleUpperLimitIsSet(true);
      }
      if (incoming.get(23)) {
        struct.realAssureMoney = iprot.readDouble();
        struct.setRealAssureMoneyIsSet(true);
      }
      if (incoming.get(24)) {
        struct.actualFeeRate = iprot.readDouble();
        struct.setActualFeeRateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.fundSizeMoney = iprot.readDouble();
        struct.setFundSizeMoneyIsSet(true);
      }
      if (incoming.get(26)) {
        struct.assureMoneyProportion = iprot.readDouble();
        struct.setAssureMoneyProportionIsSet(true);
      }
      if (incoming.get(27)) {
        struct.activateCreditLimit = iprot.readDouble();
        struct.setActivateCreditLimitIsSet(true);
      }
      if (incoming.get(28)) {
        struct.assureMoneyRemark = iprot.readString();
        struct.setAssureMoneyRemarkIsSet(true);
      }
      if (incoming.get(29)) {
        struct.usedLimit = iprot.readDouble();
        struct.setUsedLimitIsSet(true);
      }
    }
  }

}


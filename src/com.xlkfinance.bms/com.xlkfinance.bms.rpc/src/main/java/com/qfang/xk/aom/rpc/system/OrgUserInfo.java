/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class OrgUserInfo implements org.apache.thrift.TBase<OrgUserInfo, OrgUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrgUserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgUserInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("jobNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DATE_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateScope", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PAGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfo", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MENU_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("menuType", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgUserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgUserInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String userName; // required
  public String password; // required
  public String realName; // required
  public String nickName; // required
  public String jobNo; // required
  public String phone; // required
  public String email; // required
  public int orgId; // required
  public int role; // required
  public int status; // required
  public int userType; // required
  public int dateScope; // required
  public int createId; // required
  public String createDate; // required
  public int updateId; // required
  public String updateDate; // required
  public String remark; // required
  public com.qfang.xk.aom.rpc.system.PageInfo pageInfo; // required
  public int page; // required
  public int rows; // required
  public String deptName; // required
  public int menuType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    USER_NAME((short)2, "userName"),
    PASSWORD((short)3, "password"),
    REAL_NAME((short)4, "realName"),
    NICK_NAME((short)5, "nickName"),
    JOB_NO((short)6, "jobNo"),
    PHONE((short)7, "phone"),
    EMAIL((short)8, "email"),
    ORG_ID((short)9, "orgId"),
    ROLE((short)10, "role"),
    STATUS((short)11, "status"),
    USER_TYPE((short)12, "userType"),
    DATE_SCOPE((short)13, "dateScope"),
    CREATE_ID((short)14, "createId"),
    CREATE_DATE((short)15, "createDate"),
    UPDATE_ID((short)16, "updateId"),
    UPDATE_DATE((short)17, "updateDate"),
    REMARK((short)18, "remark"),
    PAGE_INFO((short)19, "pageInfo"),
    PAGE((short)20, "page"),
    ROWS((short)21, "rows"),
    DEPT_NAME((short)22, "deptName"),
    MENU_TYPE((short)23, "menuType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // REAL_NAME
          return REAL_NAME;
        case 5: // NICK_NAME
          return NICK_NAME;
        case 6: // JOB_NO
          return JOB_NO;
        case 7: // PHONE
          return PHONE;
        case 8: // EMAIL
          return EMAIL;
        case 9: // ORG_ID
          return ORG_ID;
        case 10: // ROLE
          return ROLE;
        case 11: // STATUS
          return STATUS;
        case 12: // USER_TYPE
          return USER_TYPE;
        case 13: // DATE_SCOPE
          return DATE_SCOPE;
        case 14: // CREATE_ID
          return CREATE_ID;
        case 15: // CREATE_DATE
          return CREATE_DATE;
        case 16: // UPDATE_ID
          return UPDATE_ID;
        case 17: // UPDATE_DATE
          return UPDATE_DATE;
        case 18: // REMARK
          return REMARK;
        case 19: // PAGE_INFO
          return PAGE_INFO;
        case 20: // PAGE
          return PAGE;
        case 21: // ROWS
          return ROWS;
        case 22: // DEPT_NAME
          return DEPT_NAME;
        case 23: // MENU_TYPE
          return MENU_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __ROLE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __USERTYPE_ISSET_ID = 4;
  private static final int __DATESCOPE_ISSET_ID = 5;
  private static final int __CREATEID_ISSET_ID = 6;
  private static final int __UPDATEID_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __MENUTYPE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_NO, new org.apache.thrift.meta_data.FieldMetaData("jobNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("dateScope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("pageInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qfang.xk.aom.rpc.system.PageInfo.class)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_TYPE, new org.apache.thrift.meta_data.FieldMetaData("menuType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgUserInfo.class, metaDataMap);
  }

  public OrgUserInfo() {
  }

  public OrgUserInfo(
    int pid,
    String userName,
    String password,
    String realName,
    String nickName,
    String jobNo,
    String phone,
    String email,
    int orgId,
    int role,
    int status,
    int userType,
    int dateScope,
    int createId,
    String createDate,
    int updateId,
    String updateDate,
    String remark,
    com.qfang.xk.aom.rpc.system.PageInfo pageInfo,
    int page,
    int rows,
    String deptName,
    int menuType)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.userName = userName;
    this.password = password;
    this.realName = realName;
    this.nickName = nickName;
    this.jobNo = jobNo;
    this.phone = phone;
    this.email = email;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.role = role;
    setRoleIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.userType = userType;
    setUserTypeIsSet(true);
    this.dateScope = dateScope;
    setDateScopeIsSet(true);
    this.createId = createId;
    setCreateIdIsSet(true);
    this.createDate = createDate;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.remark = remark;
    this.pageInfo = pageInfo;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.deptName = deptName;
    this.menuType = menuType;
    setMenuTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgUserInfo(OrgUserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetJobNo()) {
      this.jobNo = other.jobNo;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.orgId = other.orgId;
    this.role = other.role;
    this.status = other.status;
    this.userType = other.userType;
    this.dateScope = other.dateScope;
    this.createId = other.createId;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPageInfo()) {
      this.pageInfo = new com.qfang.xk.aom.rpc.system.PageInfo(other.pageInfo);
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    this.menuType = other.menuType;
  }

  public OrgUserInfo deepCopy() {
    return new OrgUserInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.userName = null;
    this.password = null;
    this.realName = null;
    this.nickName = null;
    this.jobNo = null;
    this.phone = null;
    this.email = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setRoleIsSet(false);
    this.role = 0;
    setStatusIsSet(false);
    this.status = 0;
    setUserTypeIsSet(false);
    this.userType = 0;
    setDateScopeIsSet(false);
    this.dateScope = 0;
    setCreateIdIsSet(false);
    this.createId = 0;
    this.createDate = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.remark = null;
    this.pageInfo = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.deptName = null;
    setMenuTypeIsSet(false);
    this.menuType = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgUserInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public OrgUserInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public OrgUserInfo setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public OrgUserInfo setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public OrgUserInfo setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getJobNo() {
    return this.jobNo;
  }

  public OrgUserInfo setJobNo(String jobNo) {
    this.jobNo = jobNo;
    return this;
  }

  public void unsetJobNo() {
    this.jobNo = null;
  }

  /** Returns true if field jobNo is set (has been assigned a value) and false otherwise */
  public boolean isSetJobNo() {
    return this.jobNo != null;
  }

  public void setJobNoIsSet(boolean value) {
    if (!value) {
      this.jobNo = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public OrgUserInfo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public OrgUserInfo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgUserInfo setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getRole() {
    return this.role;
  }

  public OrgUserInfo setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OrgUserInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getUserType() {
    return this.userType;
  }

  public OrgUserInfo setUserType(int userType) {
    this.userType = userType;
    setUserTypeIsSet(true);
    return this;
  }

  public void unsetUserType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUserTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public int getDateScope() {
    return this.dateScope;
  }

  public OrgUserInfo setDateScope(int dateScope) {
    this.dateScope = dateScope;
    setDateScopeIsSet(true);
    return this;
  }

  public void unsetDateScope() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATESCOPE_ISSET_ID);
  }

  /** Returns true if field dateScope is set (has been assigned a value) and false otherwise */
  public boolean isSetDateScope() {
    return EncodingUtils.testBit(__isset_bitfield, __DATESCOPE_ISSET_ID);
  }

  public void setDateScopeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATESCOPE_ISSET_ID, value);
  }

  public int getCreateId() {
    return this.createId;
  }

  public OrgUserInfo setCreateId(int createId) {
    this.createId = createId;
    setCreateIdIsSet(true);
    return this;
  }

  public void unsetCreateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  public void setCreateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEID_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public OrgUserInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public OrgUserInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgUserInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OrgUserInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public com.qfang.xk.aom.rpc.system.PageInfo getPageInfo() {
    return this.pageInfo;
  }

  public OrgUserInfo setPageInfo(com.qfang.xk.aom.rpc.system.PageInfo pageInfo) {
    this.pageInfo = pageInfo;
    return this;
  }

  public void unsetPageInfo() {
    this.pageInfo = null;
  }

  /** Returns true if field pageInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageInfo() {
    return this.pageInfo != null;
  }

  public void setPageInfoIsSet(boolean value) {
    if (!value) {
      this.pageInfo = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public OrgUserInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgUserInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getDeptName() {
    return this.deptName;
  }

  public OrgUserInfo setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public int getMenuType() {
    return this.menuType;
  }

  public OrgUserInfo setMenuType(int menuType) {
    this.menuType = menuType;
    setMenuTypeIsSet(true);
    return this;
  }

  public void unsetMenuType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENUTYPE_ISSET_ID);
  }

  /** Returns true if field menuType is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuType() {
    return EncodingUtils.testBit(__isset_bitfield, __MENUTYPE_ISSET_ID);
  }

  public void setMenuTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENUTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case JOB_NO:
      if (value == null) {
        unsetJobNo();
      } else {
        setJobNo((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Integer)value);
      }
      break;

    case DATE_SCOPE:
      if (value == null) {
        unsetDateScope();
      } else {
        setDateScope((Integer)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PAGE_INFO:
      if (value == null) {
        unsetPageInfo();
      } else {
        setPageInfo((com.qfang.xk.aom.rpc.system.PageInfo)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case MENU_TYPE:
      if (value == null) {
        unsetMenuType();
      } else {
        setMenuType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case USER_NAME:
      return getUserName();

    case PASSWORD:
      return getPassword();

    case REAL_NAME:
      return getRealName();

    case NICK_NAME:
      return getNickName();

    case JOB_NO:
      return getJobNo();

    case PHONE:
      return getPhone();

    case EMAIL:
      return getEmail();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case ROLE:
      return Integer.valueOf(getRole());

    case STATUS:
      return Integer.valueOf(getStatus());

    case USER_TYPE:
      return Integer.valueOf(getUserType());

    case DATE_SCOPE:
      return Integer.valueOf(getDateScope());

    case CREATE_ID:
      return Integer.valueOf(getCreateId());

    case CREATE_DATE:
      return getCreateDate();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case REMARK:
      return getRemark();

    case PAGE_INFO:
      return getPageInfo();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case DEPT_NAME:
      return getDeptName();

    case MENU_TYPE:
      return Integer.valueOf(getMenuType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case USER_NAME:
      return isSetUserName();
    case PASSWORD:
      return isSetPassword();
    case REAL_NAME:
      return isSetRealName();
    case NICK_NAME:
      return isSetNickName();
    case JOB_NO:
      return isSetJobNo();
    case PHONE:
      return isSetPhone();
    case EMAIL:
      return isSetEmail();
    case ORG_ID:
      return isSetOrgId();
    case ROLE:
      return isSetRole();
    case STATUS:
      return isSetStatus();
    case USER_TYPE:
      return isSetUserType();
    case DATE_SCOPE:
      return isSetDateScope();
    case CREATE_ID:
      return isSetCreateId();
    case CREATE_DATE:
      return isSetCreateDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case REMARK:
      return isSetRemark();
    case PAGE_INFO:
      return isSetPageInfo();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case DEPT_NAME:
      return isSetDeptName();
    case MENU_TYPE:
      return isSetMenuType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgUserInfo)
      return this.equals((OrgUserInfo)that);
    return false;
  }

  public boolean equals(OrgUserInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_jobNo = true && this.isSetJobNo();
    boolean that_present_jobNo = true && that.isSetJobNo();
    if (this_present_jobNo || that_present_jobNo) {
      if (!(this_present_jobNo && that_present_jobNo))
        return false;
      if (!this.jobNo.equals(that.jobNo))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_userType = true;
    boolean that_present_userType = true;
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (this.userType != that.userType)
        return false;
    }

    boolean this_present_dateScope = true;
    boolean that_present_dateScope = true;
    if (this_present_dateScope || that_present_dateScope) {
      if (!(this_present_dateScope && that_present_dateScope))
        return false;
      if (this.dateScope != that.dateScope)
        return false;
    }

    boolean this_present_createId = true;
    boolean that_present_createId = true;
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (this.createId != that.createId)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_pageInfo = true && this.isSetPageInfo();
    boolean that_present_pageInfo = true && that.isSetPageInfo();
    if (this_present_pageInfo || that_present_pageInfo) {
      if (!(this_present_pageInfo && that_present_pageInfo))
        return false;
      if (!this.pageInfo.equals(that.pageInfo))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_menuType = true;
    boolean that_present_menuType = true;
    if (this_present_menuType || that_present_menuType) {
      if (!(this_present_menuType && that_present_menuType))
        return false;
      if (this.menuType != that.menuType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_nickName = true && (isSetNickName());
    list.add(present_nickName);
    if (present_nickName)
      list.add(nickName);

    boolean present_jobNo = true && (isSetJobNo());
    list.add(present_jobNo);
    if (present_jobNo)
      list.add(jobNo);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_role = true;
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_userType = true;
    list.add(present_userType);
    if (present_userType)
      list.add(userType);

    boolean present_dateScope = true;
    list.add(present_dateScope);
    if (present_dateScope)
      list.add(dateScope);

    boolean present_createId = true;
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_pageInfo = true && (isSetPageInfo());
    list.add(present_pageInfo);
    if (present_pageInfo)
      list.add(pageInfo);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_menuType = true;
    list.add(present_menuType);
    if (present_menuType)
      list.add(menuType);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobNo()).compareTo(other.isSetJobNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobNo, other.jobNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateScope()).compareTo(other.isSetDateScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateScope, other.dateScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageInfo()).compareTo(other.isSetPageInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfo, other.pageInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuType()).compareTo(other.isSetMenuType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuType, other.menuType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgUserInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobNo:");
    if (this.jobNo == null) {
      sb.append("null");
    } else {
      sb.append(this.jobNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    sb.append(this.userType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateScope:");
    sb.append(this.dateScope);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    sb.append(this.createId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageInfo:");
    if (this.pageInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.pageInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuType:");
    sb.append(this.menuType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageInfo != null) {
      pageInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgUserInfoStandardSchemeFactory implements SchemeFactory {
    public OrgUserInfoStandardScheme getScheme() {
      return new OrgUserInfoStandardScheme();
    }
  }

  private static class OrgUserInfoStandardScheme extends StandardScheme<OrgUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobNo = iprot.readString();
              struct.setJobNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userType = iprot.readI32();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATE_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateScope = iprot.readI32();
              struct.setDateScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createId = iprot.readI32();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PAGE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageInfo = new com.qfang.xk.aom.rpc.system.PageInfo();
              struct.pageInfo.read(iprot);
              struct.setPageInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MENU_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuType = iprot.readI32();
              struct.setMenuTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.jobNo != null) {
        oprot.writeFieldBegin(JOB_NO_FIELD_DESC);
        oprot.writeString(struct.jobNo);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.userType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_SCOPE_FIELD_DESC);
      oprot.writeI32(struct.dateScope);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
      oprot.writeI32(struct.createId);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.pageInfo != null) {
        oprot.writeFieldBegin(PAGE_INFO_FIELD_DESC);
        struct.pageInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MENU_TYPE_FIELD_DESC);
      oprot.writeI32(struct.menuType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgUserInfoTupleSchemeFactory implements SchemeFactory {
    public OrgUserInfoTupleScheme getScheme() {
      return new OrgUserInfoTupleScheme();
    }
  }

  private static class OrgUserInfoTupleScheme extends TupleScheme<OrgUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetRealName()) {
        optionals.set(3);
      }
      if (struct.isSetNickName()) {
        optionals.set(4);
      }
      if (struct.isSetJobNo()) {
        optionals.set(5);
      }
      if (struct.isSetPhone()) {
        optionals.set(6);
      }
      if (struct.isSetEmail()) {
        optionals.set(7);
      }
      if (struct.isSetOrgId()) {
        optionals.set(8);
      }
      if (struct.isSetRole()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetUserType()) {
        optionals.set(11);
      }
      if (struct.isSetDateScope()) {
        optionals.set(12);
      }
      if (struct.isSetCreateId()) {
        optionals.set(13);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(15);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(16);
      }
      if (struct.isSetRemark()) {
        optionals.set(17);
      }
      if (struct.isSetPageInfo()) {
        optionals.set(18);
      }
      if (struct.isSetPage()) {
        optionals.set(19);
      }
      if (struct.isSetRows()) {
        optionals.set(20);
      }
      if (struct.isSetDeptName()) {
        optionals.set(21);
      }
      if (struct.isSetMenuType()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetJobNo()) {
        oprot.writeString(struct.jobNo);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.userType);
      }
      if (struct.isSetDateScope()) {
        oprot.writeI32(struct.dateScope);
      }
      if (struct.isSetCreateId()) {
        oprot.writeI32(struct.createId);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPageInfo()) {
        struct.pageInfo.write(oprot);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetMenuType()) {
        oprot.writeI32(struct.menuType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jobNo = iprot.readString();
        struct.setJobNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userType = iprot.readI32();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dateScope = iprot.readI32();
        struct.setDateScopeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createId = iprot.readI32();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(18)) {
        struct.pageInfo = new com.qfang.xk.aom.rpc.system.PageInfo();
        struct.pageInfo.read(iprot);
        struct.setPageInfoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(20)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.menuType = iprot.readI32();
        struct.setMenuTypeIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.fee;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-12")
public class OrgFeeSettleDetail implements org.apache.thrift.TBase<OrgFeeSettleDetail, OrgFeeSettleDetail._Fields>, java.io.Serializable, Cloneable, Comparable<OrgFeeSettleDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgFeeSettleDetail");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SETTLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("charge", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("refund", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REBATE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RETURN_COMM_FIELD_DESC = new org.apache.thrift.protocol.TField("returnComm", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RETURN_COMM_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnCommRate", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField REBATE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateRate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SOLUTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("solutionDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CUSTOMER_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("customerCard", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField APPLY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("applyMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanDays", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField EXTIMATE_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extimateFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField BUSINESS_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessProcess", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField BUSINESS_PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessProcessName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField ACTUAL_LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("actualLoanDays", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ACTUAL_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField REAL_CHARGE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realChargeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField OVER_DUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overDueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)34);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgFeeSettleDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgFeeSettleDetailTupleSchemeFactory());
  }

  public int pid; // required
  public int settleId; // required
  public int projectId; // required
  public double loanMoney; // required
  public double paymentMoney; // required
  public double charge; // required
  public double refund; // required
  public double rebateMoney; // required
  public double returnComm; // required
  public String paymentDate; // required
  public String loanDate; // required
  public double returnCommRate; // required
  public double rebateRate; // required
  public String solutionDate; // required
  public int page; // required
  public int rows; // required
  public String requestDate; // required
  public String projectName; // required
  public String projectNumber; // required
  public String customerName; // required
  public String customerCard; // required
  public double applyMoney; // required
  public String pmUserName; // required
  public int planLoanDays; // required
  public double extimateFeeRate; // required
  public String productName; // required
  public String houseName; // required
  public int businessProcess; // required
  public String businessProcessName; // required
  public int actualLoanDays; // required
  public double actualFeeRate; // required
  public String orgName; // required
  public double realChargeMoney; // required
  public double overDueFee; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    SETTLE_ID((short)2, "settleId"),
    PROJECT_ID((short)3, "projectId"),
    LOAN_MONEY((short)4, "loanMoney"),
    PAYMENT_MONEY((short)5, "paymentMoney"),
    CHARGE((short)6, "charge"),
    REFUND((short)7, "refund"),
    REBATE_MONEY((short)8, "rebateMoney"),
    RETURN_COMM((short)9, "returnComm"),
    PAYMENT_DATE((short)10, "paymentDate"),
    LOAN_DATE((short)11, "loanDate"),
    RETURN_COMM_RATE((short)12, "returnCommRate"),
    REBATE_RATE((short)13, "rebateRate"),
    SOLUTION_DATE((short)14, "solutionDate"),
    PAGE((short)15, "page"),
    ROWS((short)16, "rows"),
    REQUEST_DATE((short)17, "requestDate"),
    PROJECT_NAME((short)18, "projectName"),
    PROJECT_NUMBER((short)19, "projectNumber"),
    CUSTOMER_NAME((short)20, "customerName"),
    CUSTOMER_CARD((short)21, "customerCard"),
    APPLY_MONEY((short)22, "applyMoney"),
    PM_USER_NAME((short)23, "pmUserName"),
    PLAN_LOAN_DAYS((short)24, "planLoanDays"),
    EXTIMATE_FEE_RATE((short)25, "extimateFeeRate"),
    PRODUCT_NAME((short)26, "productName"),
    HOUSE_NAME((short)27, "houseName"),
    BUSINESS_PROCESS((short)28, "businessProcess"),
    BUSINESS_PROCESS_NAME((short)29, "businessProcessName"),
    ACTUAL_LOAN_DAYS((short)30, "actualLoanDays"),
    ACTUAL_FEE_RATE((short)31, "actualFeeRate"),
    ORG_NAME((short)32, "orgName"),
    REAL_CHARGE_MONEY((short)33, "realChargeMoney"),
    OVER_DUE_FEE((short)34, "overDueFee");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // SETTLE_ID
          return SETTLE_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // LOAN_MONEY
          return LOAN_MONEY;
        case 5: // PAYMENT_MONEY
          return PAYMENT_MONEY;
        case 6: // CHARGE
          return CHARGE;
        case 7: // REFUND
          return REFUND;
        case 8: // REBATE_MONEY
          return REBATE_MONEY;
        case 9: // RETURN_COMM
          return RETURN_COMM;
        case 10: // PAYMENT_DATE
          return PAYMENT_DATE;
        case 11: // LOAN_DATE
          return LOAN_DATE;
        case 12: // RETURN_COMM_RATE
          return RETURN_COMM_RATE;
        case 13: // REBATE_RATE
          return REBATE_RATE;
        case 14: // SOLUTION_DATE
          return SOLUTION_DATE;
        case 15: // PAGE
          return PAGE;
        case 16: // ROWS
          return ROWS;
        case 17: // REQUEST_DATE
          return REQUEST_DATE;
        case 18: // PROJECT_NAME
          return PROJECT_NAME;
        case 19: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 20: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 21: // CUSTOMER_CARD
          return CUSTOMER_CARD;
        case 22: // APPLY_MONEY
          return APPLY_MONEY;
        case 23: // PM_USER_NAME
          return PM_USER_NAME;
        case 24: // PLAN_LOAN_DAYS
          return PLAN_LOAN_DAYS;
        case 25: // EXTIMATE_FEE_RATE
          return EXTIMATE_FEE_RATE;
        case 26: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 27: // HOUSE_NAME
          return HOUSE_NAME;
        case 28: // BUSINESS_PROCESS
          return BUSINESS_PROCESS;
        case 29: // BUSINESS_PROCESS_NAME
          return BUSINESS_PROCESS_NAME;
        case 30: // ACTUAL_LOAN_DAYS
          return ACTUAL_LOAN_DAYS;
        case 31: // ACTUAL_FEE_RATE
          return ACTUAL_FEE_RATE;
        case 32: // ORG_NAME
          return ORG_NAME;
        case 33: // REAL_CHARGE_MONEY
          return REAL_CHARGE_MONEY;
        case 34: // OVER_DUE_FEE
          return OVER_DUE_FEE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SETTLEID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __LOANMONEY_ISSET_ID = 3;
  private static final int __PAYMENTMONEY_ISSET_ID = 4;
  private static final int __CHARGE_ISSET_ID = 5;
  private static final int __REFUND_ISSET_ID = 6;
  private static final int __REBATEMONEY_ISSET_ID = 7;
  private static final int __RETURNCOMM_ISSET_ID = 8;
  private static final int __RETURNCOMMRATE_ISSET_ID = 9;
  private static final int __REBATERATE_ISSET_ID = 10;
  private static final int __PAGE_ISSET_ID = 11;
  private static final int __ROWS_ISSET_ID = 12;
  private static final int __APPLYMONEY_ISSET_ID = 13;
  private static final int __PLANLOANDAYS_ISSET_ID = 14;
  private static final int __EXTIMATEFEERATE_ISSET_ID = 15;
  private static final int __BUSINESSPROCESS_ISSET_ID = 16;
  private static final int __ACTUALLOANDAYS_ISSET_ID = 17;
  private static final int __ACTUALFEERATE_ISSET_ID = 18;
  private static final int __REALCHARGEMONEY_ISSET_ID = 19;
  private static final int __OVERDUEFEE_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SETTLE_ID, new org.apache.thrift.meta_data.FieldMetaData("settleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("paymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGE, new org.apache.thrift.meta_data.FieldMetaData("charge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND, new org.apache.thrift.meta_data.FieldMetaData("refund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REBATE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rebateMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RETURN_COMM, new org.apache.thrift.meta_data.FieldMetaData("returnComm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("paymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_COMM_RATE, new org.apache.thrift.meta_data.FieldMetaData("returnCommRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REBATE_RATE, new org.apache.thrift.meta_data.FieldMetaData("rebateRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOLUTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("solutionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("requestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_CARD, new org.apache.thrift.meta_data.FieldMetaData("customerCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("applyMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("planLoanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTIMATE_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("extimateFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("businessProcess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessProcessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("actualLoanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("actualFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_CHARGE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realChargeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVER_DUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overDueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgFeeSettleDetail.class, metaDataMap);
  }

  public OrgFeeSettleDetail() {
  }

  public OrgFeeSettleDetail(
    int pid,
    int settleId,
    int projectId,
    double loanMoney,
    double paymentMoney,
    double charge,
    double refund,
    double rebateMoney,
    double returnComm,
    String paymentDate,
    String loanDate,
    double returnCommRate,
    double rebateRate,
    String solutionDate,
    int page,
    int rows,
    String requestDate,
    String projectName,
    String projectNumber,
    String customerName,
    String customerCard,
    double applyMoney,
    String pmUserName,
    int planLoanDays,
    double extimateFeeRate,
    String productName,
    String houseName,
    int businessProcess,
    String businessProcessName,
    int actualLoanDays,
    double actualFeeRate,
    String orgName,
    double realChargeMoney,
    double overDueFee)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.settleId = settleId;
    setSettleIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    this.charge = charge;
    setChargeIsSet(true);
    this.refund = refund;
    setRefundIsSet(true);
    this.rebateMoney = rebateMoney;
    setRebateMoneyIsSet(true);
    this.returnComm = returnComm;
    setReturnCommIsSet(true);
    this.paymentDate = paymentDate;
    this.loanDate = loanDate;
    this.returnCommRate = returnCommRate;
    setReturnCommRateIsSet(true);
    this.rebateRate = rebateRate;
    setRebateRateIsSet(true);
    this.solutionDate = solutionDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.requestDate = requestDate;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.customerName = customerName;
    this.customerCard = customerCard;
    this.applyMoney = applyMoney;
    setApplyMoneyIsSet(true);
    this.pmUserName = pmUserName;
    this.planLoanDays = planLoanDays;
    setPlanLoanDaysIsSet(true);
    this.extimateFeeRate = extimateFeeRate;
    setExtimateFeeRateIsSet(true);
    this.productName = productName;
    this.houseName = houseName;
    this.businessProcess = businessProcess;
    setBusinessProcessIsSet(true);
    this.businessProcessName = businessProcessName;
    this.actualLoanDays = actualLoanDays;
    setActualLoanDaysIsSet(true);
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    this.orgName = orgName;
    this.realChargeMoney = realChargeMoney;
    setRealChargeMoneyIsSet(true);
    this.overDueFee = overDueFee;
    setOverDueFeeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgFeeSettleDetail(OrgFeeSettleDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.settleId = other.settleId;
    this.projectId = other.projectId;
    this.loanMoney = other.loanMoney;
    this.paymentMoney = other.paymentMoney;
    this.charge = other.charge;
    this.refund = other.refund;
    this.rebateMoney = other.rebateMoney;
    this.returnComm = other.returnComm;
    if (other.isSetPaymentDate()) {
      this.paymentDate = other.paymentDate;
    }
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    this.returnCommRate = other.returnCommRate;
    this.rebateRate = other.rebateRate;
    if (other.isSetSolutionDate()) {
      this.solutionDate = other.solutionDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetCustomerCard()) {
      this.customerCard = other.customerCard;
    }
    this.applyMoney = other.applyMoney;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.planLoanDays = other.planLoanDays;
    this.extimateFeeRate = other.extimateFeeRate;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.businessProcess = other.businessProcess;
    if (other.isSetBusinessProcessName()) {
      this.businessProcessName = other.businessProcessName;
    }
    this.actualLoanDays = other.actualLoanDays;
    this.actualFeeRate = other.actualFeeRate;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.realChargeMoney = other.realChargeMoney;
    this.overDueFee = other.overDueFee;
  }

  public OrgFeeSettleDetail deepCopy() {
    return new OrgFeeSettleDetail(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setSettleIdIsSet(false);
    this.settleId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setPaymentMoneyIsSet(false);
    this.paymentMoney = 0.0;
    setChargeIsSet(false);
    this.charge = 0.0;
    setRefundIsSet(false);
    this.refund = 0.0;
    setRebateMoneyIsSet(false);
    this.rebateMoney = 0.0;
    setReturnCommIsSet(false);
    this.returnComm = 0.0;
    this.paymentDate = null;
    this.loanDate = null;
    setReturnCommRateIsSet(false);
    this.returnCommRate = 0.0;
    setRebateRateIsSet(false);
    this.rebateRate = 0.0;
    this.solutionDate = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.requestDate = null;
    this.projectName = null;
    this.projectNumber = null;
    this.customerName = null;
    this.customerCard = null;
    setApplyMoneyIsSet(false);
    this.applyMoney = 0.0;
    this.pmUserName = null;
    setPlanLoanDaysIsSet(false);
    this.planLoanDays = 0;
    setExtimateFeeRateIsSet(false);
    this.extimateFeeRate = 0.0;
    this.productName = null;
    this.houseName = null;
    setBusinessProcessIsSet(false);
    this.businessProcess = 0;
    this.businessProcessName = null;
    setActualLoanDaysIsSet(false);
    this.actualLoanDays = 0;
    setActualFeeRateIsSet(false);
    this.actualFeeRate = 0.0;
    this.orgName = null;
    setRealChargeMoneyIsSet(false);
    this.realChargeMoney = 0.0;
    setOverDueFeeIsSet(false);
    this.overDueFee = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgFeeSettleDetail setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getSettleId() {
    return this.settleId;
  }

  public OrgFeeSettleDetail setSettleId(int settleId) {
    this.settleId = settleId;
    setSettleIdIsSet(true);
    return this;
  }

  public void unsetSettleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  /** Returns true if field settleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  public void setSettleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public OrgFeeSettleDetail setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public OrgFeeSettleDetail setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public double getPaymentMoney() {
    return this.paymentMoney;
  }

  public OrgFeeSettleDetail setPaymentMoney(double paymentMoney) {
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    return this;
  }

  public void unsetPaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field paymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  public void setPaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID, value);
  }

  public double getCharge() {
    return this.charge;
  }

  public OrgFeeSettleDetail setCharge(double charge) {
    this.charge = charge;
    setChargeIsSet(true);
    return this;
  }

  public void unsetCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  /** Returns true if field charge is set (has been assigned a value) and false otherwise */
  public boolean isSetCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGE_ISSET_ID);
  }

  public void setChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGE_ISSET_ID, value);
  }

  public double getRefund() {
    return this.refund;
  }

  public OrgFeeSettleDetail setRefund(double refund) {
    this.refund = refund;
    setRefundIsSet(true);
    return this;
  }

  public void unsetRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  /** Returns true if field refund is set (has been assigned a value) and false otherwise */
  public boolean isSetRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  public void setRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUND_ISSET_ID, value);
  }

  public double getRebateMoney() {
    return this.rebateMoney;
  }

  public OrgFeeSettleDetail setRebateMoney(double rebateMoney) {
    this.rebateMoney = rebateMoney;
    setRebateMoneyIsSet(true);
    return this;
  }

  public void unsetRebateMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATEMONEY_ISSET_ID);
  }

  /** Returns true if field rebateMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATEMONEY_ISSET_ID);
  }

  public void setRebateMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATEMONEY_ISSET_ID, value);
  }

  public double getReturnComm() {
    return this.returnComm;
  }

  public OrgFeeSettleDetail setReturnComm(double returnComm) {
    this.returnComm = returnComm;
    setReturnCommIsSet(true);
    return this;
  }

  public void unsetReturnComm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNCOMM_ISSET_ID);
  }

  /** Returns true if field returnComm is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnComm() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNCOMM_ISSET_ID);
  }

  public void setReturnCommIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNCOMM_ISSET_ID, value);
  }

  public String getPaymentDate() {
    return this.paymentDate;
  }

  public OrgFeeSettleDetail setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  public void unsetPaymentDate() {
    this.paymentDate = null;
  }

  /** Returns true if field paymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDate() {
    return this.paymentDate != null;
  }

  public void setPaymentDateIsSet(boolean value) {
    if (!value) {
      this.paymentDate = null;
    }
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public OrgFeeSettleDetail setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public double getReturnCommRate() {
    return this.returnCommRate;
  }

  public OrgFeeSettleDetail setReturnCommRate(double returnCommRate) {
    this.returnCommRate = returnCommRate;
    setReturnCommRateIsSet(true);
    return this;
  }

  public void unsetReturnCommRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNCOMMRATE_ISSET_ID);
  }

  /** Returns true if field returnCommRate is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCommRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNCOMMRATE_ISSET_ID);
  }

  public void setReturnCommRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNCOMMRATE_ISSET_ID, value);
  }

  public double getRebateRate() {
    return this.rebateRate;
  }

  public OrgFeeSettleDetail setRebateRate(double rebateRate) {
    this.rebateRate = rebateRate;
    setRebateRateIsSet(true);
    return this;
  }

  public void unsetRebateRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATERATE_ISSET_ID);
  }

  /** Returns true if field rebateRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateRate() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATERATE_ISSET_ID);
  }

  public void setRebateRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATERATE_ISSET_ID, value);
  }

  public String getSolutionDate() {
    return this.solutionDate;
  }

  public OrgFeeSettleDetail setSolutionDate(String solutionDate) {
    this.solutionDate = solutionDate;
    return this;
  }

  public void unsetSolutionDate() {
    this.solutionDate = null;
  }

  /** Returns true if field solutionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSolutionDate() {
    return this.solutionDate != null;
  }

  public void setSolutionDateIsSet(boolean value) {
    if (!value) {
      this.solutionDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public OrgFeeSettleDetail setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgFeeSettleDetail setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public OrgFeeSettleDetail setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public OrgFeeSettleDetail setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public OrgFeeSettleDetail setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public OrgFeeSettleDetail setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getCustomerCard() {
    return this.customerCard;
  }

  public OrgFeeSettleDetail setCustomerCard(String customerCard) {
    this.customerCard = customerCard;
    return this;
  }

  public void unsetCustomerCard() {
    this.customerCard = null;
  }

  /** Returns true if field customerCard is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerCard() {
    return this.customerCard != null;
  }

  public void setCustomerCardIsSet(boolean value) {
    if (!value) {
      this.customerCard = null;
    }
  }

  public double getApplyMoney() {
    return this.applyMoney;
  }

  public OrgFeeSettleDetail setApplyMoney(double applyMoney) {
    this.applyMoney = applyMoney;
    setApplyMoneyIsSet(true);
    return this;
  }

  public void unsetApplyMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYMONEY_ISSET_ID);
  }

  /** Returns true if field applyMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYMONEY_ISSET_ID);
  }

  public void setApplyMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYMONEY_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public OrgFeeSettleDetail setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPlanLoanDays() {
    return this.planLoanDays;
  }

  public OrgFeeSettleDetail setPlanLoanDays(int planLoanDays) {
    this.planLoanDays = planLoanDays;
    setPlanLoanDaysIsSet(true);
    return this;
  }

  public void unsetPlanLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANLOANDAYS_ISSET_ID);
  }

  /** Returns true if field planLoanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANLOANDAYS_ISSET_ID);
  }

  public void setPlanLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANLOANDAYS_ISSET_ID, value);
  }

  public double getExtimateFeeRate() {
    return this.extimateFeeRate;
  }

  public OrgFeeSettleDetail setExtimateFeeRate(double extimateFeeRate) {
    this.extimateFeeRate = extimateFeeRate;
    setExtimateFeeRateIsSet(true);
    return this;
  }

  public void unsetExtimateFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTIMATEFEERATE_ISSET_ID);
  }

  /** Returns true if field extimateFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtimateFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTIMATEFEERATE_ISSET_ID);
  }

  public void setExtimateFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTIMATEFEERATE_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public OrgFeeSettleDetail setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public OrgFeeSettleDetail setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public int getBusinessProcess() {
    return this.businessProcess;
  }

  public OrgFeeSettleDetail setBusinessProcess(int businessProcess) {
    this.businessProcess = businessProcess;
    setBusinessProcessIsSet(true);
    return this;
  }

  public void unsetBusinessProcess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSPROCESS_ISSET_ID);
  }

  /** Returns true if field businessProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessProcess() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSPROCESS_ISSET_ID);
  }

  public void setBusinessProcessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSPROCESS_ISSET_ID, value);
  }

  public String getBusinessProcessName() {
    return this.businessProcessName;
  }

  public OrgFeeSettleDetail setBusinessProcessName(String businessProcessName) {
    this.businessProcessName = businessProcessName;
    return this;
  }

  public void unsetBusinessProcessName() {
    this.businessProcessName = null;
  }

  /** Returns true if field businessProcessName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessProcessName() {
    return this.businessProcessName != null;
  }

  public void setBusinessProcessNameIsSet(boolean value) {
    if (!value) {
      this.businessProcessName = null;
    }
  }

  public int getActualLoanDays() {
    return this.actualLoanDays;
  }

  public OrgFeeSettleDetail setActualLoanDays(int actualLoanDays) {
    this.actualLoanDays = actualLoanDays;
    setActualLoanDaysIsSet(true);
    return this;
  }

  public void unsetActualLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLOANDAYS_ISSET_ID);
  }

  /** Returns true if field actualLoanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetActualLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLOANDAYS_ISSET_ID);
  }

  public void setActualLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLOANDAYS_ISSET_ID, value);
  }

  public double getActualFeeRate() {
    return this.actualFeeRate;
  }

  public OrgFeeSettleDetail setActualFeeRate(double actualFeeRate) {
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    return this;
  }

  public void unsetActualFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  /** Returns true if field actualFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  public void setActualFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public OrgFeeSettleDetail setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public double getRealChargeMoney() {
    return this.realChargeMoney;
  }

  public OrgFeeSettleDetail setRealChargeMoney(double realChargeMoney) {
    this.realChargeMoney = realChargeMoney;
    setRealChargeMoneyIsSet(true);
    return this;
  }

  public void unsetRealChargeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALCHARGEMONEY_ISSET_ID);
  }

  /** Returns true if field realChargeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealChargeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALCHARGEMONEY_ISSET_ID);
  }

  public void setRealChargeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALCHARGEMONEY_ISSET_ID, value);
  }

  public double getOverDueFee() {
    return this.overDueFee;
  }

  public OrgFeeSettleDetail setOverDueFee(double overDueFee) {
    this.overDueFee = overDueFee;
    setOverDueFeeIsSet(true);
    return this;
  }

  public void unsetOverDueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overDueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverDueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverDueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case SETTLE_ID:
      if (value == null) {
        unsetSettleId();
      } else {
        setSettleId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case PAYMENT_MONEY:
      if (value == null) {
        unsetPaymentMoney();
      } else {
        setPaymentMoney((Double)value);
      }
      break;

    case CHARGE:
      if (value == null) {
        unsetCharge();
      } else {
        setCharge((Double)value);
      }
      break;

    case REFUND:
      if (value == null) {
        unsetRefund();
      } else {
        setRefund((Double)value);
      }
      break;

    case REBATE_MONEY:
      if (value == null) {
        unsetRebateMoney();
      } else {
        setRebateMoney((Double)value);
      }
      break;

    case RETURN_COMM:
      if (value == null) {
        unsetReturnComm();
      } else {
        setReturnComm((Double)value);
      }
      break;

    case PAYMENT_DATE:
      if (value == null) {
        unsetPaymentDate();
      } else {
        setPaymentDate((String)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case RETURN_COMM_RATE:
      if (value == null) {
        unsetReturnCommRate();
      } else {
        setReturnCommRate((Double)value);
      }
      break;

    case REBATE_RATE:
      if (value == null) {
        unsetRebateRate();
      } else {
        setRebateRate((Double)value);
      }
      break;

    case SOLUTION_DATE:
      if (value == null) {
        unsetSolutionDate();
      } else {
        setSolutionDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case CUSTOMER_CARD:
      if (value == null) {
        unsetCustomerCard();
      } else {
        setCustomerCard((String)value);
      }
      break;

    case APPLY_MONEY:
      if (value == null) {
        unsetApplyMoney();
      } else {
        setApplyMoney((Double)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PLAN_LOAN_DAYS:
      if (value == null) {
        unsetPlanLoanDays();
      } else {
        setPlanLoanDays((Integer)value);
      }
      break;

    case EXTIMATE_FEE_RATE:
      if (value == null) {
        unsetExtimateFeeRate();
      } else {
        setExtimateFeeRate((Double)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUSINESS_PROCESS:
      if (value == null) {
        unsetBusinessProcess();
      } else {
        setBusinessProcess((Integer)value);
      }
      break;

    case BUSINESS_PROCESS_NAME:
      if (value == null) {
        unsetBusinessProcessName();
      } else {
        setBusinessProcessName((String)value);
      }
      break;

    case ACTUAL_LOAN_DAYS:
      if (value == null) {
        unsetActualLoanDays();
      } else {
        setActualLoanDays((Integer)value);
      }
      break;

    case ACTUAL_FEE_RATE:
      if (value == null) {
        unsetActualFeeRate();
      } else {
        setActualFeeRate((Double)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case REAL_CHARGE_MONEY:
      if (value == null) {
        unsetRealChargeMoney();
      } else {
        setRealChargeMoney((Double)value);
      }
      break;

    case OVER_DUE_FEE:
      if (value == null) {
        unsetOverDueFee();
      } else {
        setOverDueFee((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case SETTLE_ID:
      return Integer.valueOf(getSettleId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case PAYMENT_MONEY:
      return Double.valueOf(getPaymentMoney());

    case CHARGE:
      return Double.valueOf(getCharge());

    case REFUND:
      return Double.valueOf(getRefund());

    case REBATE_MONEY:
      return Double.valueOf(getRebateMoney());

    case RETURN_COMM:
      return Double.valueOf(getReturnComm());

    case PAYMENT_DATE:
      return getPaymentDate();

    case LOAN_DATE:
      return getLoanDate();

    case RETURN_COMM_RATE:
      return Double.valueOf(getReturnCommRate());

    case REBATE_RATE:
      return Double.valueOf(getRebateRate());

    case SOLUTION_DATE:
      return getSolutionDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REQUEST_DATE:
      return getRequestDate();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUSTOMER_NAME:
      return getCustomerName();

    case CUSTOMER_CARD:
      return getCustomerCard();

    case APPLY_MONEY:
      return Double.valueOf(getApplyMoney());

    case PM_USER_NAME:
      return getPmUserName();

    case PLAN_LOAN_DAYS:
      return Integer.valueOf(getPlanLoanDays());

    case EXTIMATE_FEE_RATE:
      return Double.valueOf(getExtimateFeeRate());

    case PRODUCT_NAME:
      return getProductName();

    case HOUSE_NAME:
      return getHouseName();

    case BUSINESS_PROCESS:
      return Integer.valueOf(getBusinessProcess());

    case BUSINESS_PROCESS_NAME:
      return getBusinessProcessName();

    case ACTUAL_LOAN_DAYS:
      return Integer.valueOf(getActualLoanDays());

    case ACTUAL_FEE_RATE:
      return Double.valueOf(getActualFeeRate());

    case ORG_NAME:
      return getOrgName();

    case REAL_CHARGE_MONEY:
      return Double.valueOf(getRealChargeMoney());

    case OVER_DUE_FEE:
      return Double.valueOf(getOverDueFee());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case SETTLE_ID:
      return isSetSettleId();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case PAYMENT_MONEY:
      return isSetPaymentMoney();
    case CHARGE:
      return isSetCharge();
    case REFUND:
      return isSetRefund();
    case REBATE_MONEY:
      return isSetRebateMoney();
    case RETURN_COMM:
      return isSetReturnComm();
    case PAYMENT_DATE:
      return isSetPaymentDate();
    case LOAN_DATE:
      return isSetLoanDate();
    case RETURN_COMM_RATE:
      return isSetReturnCommRate();
    case REBATE_RATE:
      return isSetRebateRate();
    case SOLUTION_DATE:
      return isSetSolutionDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REQUEST_DATE:
      return isSetRequestDate();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case CUSTOMER_CARD:
      return isSetCustomerCard();
    case APPLY_MONEY:
      return isSetApplyMoney();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PLAN_LOAN_DAYS:
      return isSetPlanLoanDays();
    case EXTIMATE_FEE_RATE:
      return isSetExtimateFeeRate();
    case PRODUCT_NAME:
      return isSetProductName();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUSINESS_PROCESS:
      return isSetBusinessProcess();
    case BUSINESS_PROCESS_NAME:
      return isSetBusinessProcessName();
    case ACTUAL_LOAN_DAYS:
      return isSetActualLoanDays();
    case ACTUAL_FEE_RATE:
      return isSetActualFeeRate();
    case ORG_NAME:
      return isSetOrgName();
    case REAL_CHARGE_MONEY:
      return isSetRealChargeMoney();
    case OVER_DUE_FEE:
      return isSetOverDueFee();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgFeeSettleDetail)
      return this.equals((OrgFeeSettleDetail)that);
    return false;
  }

  public boolean equals(OrgFeeSettleDetail that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_settleId = true;
    boolean that_present_settleId = true;
    if (this_present_settleId || that_present_settleId) {
      if (!(this_present_settleId && that_present_settleId))
        return false;
      if (this.settleId != that.settleId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_paymentMoney = true;
    boolean that_present_paymentMoney = true;
    if (this_present_paymentMoney || that_present_paymentMoney) {
      if (!(this_present_paymentMoney && that_present_paymentMoney))
        return false;
      if (this.paymentMoney != that.paymentMoney)
        return false;
    }

    boolean this_present_charge = true;
    boolean that_present_charge = true;
    if (this_present_charge || that_present_charge) {
      if (!(this_present_charge && that_present_charge))
        return false;
      if (this.charge != that.charge)
        return false;
    }

    boolean this_present_refund = true;
    boolean that_present_refund = true;
    if (this_present_refund || that_present_refund) {
      if (!(this_present_refund && that_present_refund))
        return false;
      if (this.refund != that.refund)
        return false;
    }

    boolean this_present_rebateMoney = true;
    boolean that_present_rebateMoney = true;
    if (this_present_rebateMoney || that_present_rebateMoney) {
      if (!(this_present_rebateMoney && that_present_rebateMoney))
        return false;
      if (this.rebateMoney != that.rebateMoney)
        return false;
    }

    boolean this_present_returnComm = true;
    boolean that_present_returnComm = true;
    if (this_present_returnComm || that_present_returnComm) {
      if (!(this_present_returnComm && that_present_returnComm))
        return false;
      if (this.returnComm != that.returnComm)
        return false;
    }

    boolean this_present_paymentDate = true && this.isSetPaymentDate();
    boolean that_present_paymentDate = true && that.isSetPaymentDate();
    if (this_present_paymentDate || that_present_paymentDate) {
      if (!(this_present_paymentDate && that_present_paymentDate))
        return false;
      if (!this.paymentDate.equals(that.paymentDate))
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_returnCommRate = true;
    boolean that_present_returnCommRate = true;
    if (this_present_returnCommRate || that_present_returnCommRate) {
      if (!(this_present_returnCommRate && that_present_returnCommRate))
        return false;
      if (this.returnCommRate != that.returnCommRate)
        return false;
    }

    boolean this_present_rebateRate = true;
    boolean that_present_rebateRate = true;
    if (this_present_rebateRate || that_present_rebateRate) {
      if (!(this_present_rebateRate && that_present_rebateRate))
        return false;
      if (this.rebateRate != that.rebateRate)
        return false;
    }

    boolean this_present_solutionDate = true && this.isSetSolutionDate();
    boolean that_present_solutionDate = true && that.isSetSolutionDate();
    if (this_present_solutionDate || that_present_solutionDate) {
      if (!(this_present_solutionDate && that_present_solutionDate))
        return false;
      if (!this.solutionDate.equals(that.solutionDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_customerCard = true && this.isSetCustomerCard();
    boolean that_present_customerCard = true && that.isSetCustomerCard();
    if (this_present_customerCard || that_present_customerCard) {
      if (!(this_present_customerCard && that_present_customerCard))
        return false;
      if (!this.customerCard.equals(that.customerCard))
        return false;
    }

    boolean this_present_applyMoney = true;
    boolean that_present_applyMoney = true;
    if (this_present_applyMoney || that_present_applyMoney) {
      if (!(this_present_applyMoney && that_present_applyMoney))
        return false;
      if (this.applyMoney != that.applyMoney)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_planLoanDays = true;
    boolean that_present_planLoanDays = true;
    if (this_present_planLoanDays || that_present_planLoanDays) {
      if (!(this_present_planLoanDays && that_present_planLoanDays))
        return false;
      if (this.planLoanDays != that.planLoanDays)
        return false;
    }

    boolean this_present_extimateFeeRate = true;
    boolean that_present_extimateFeeRate = true;
    if (this_present_extimateFeeRate || that_present_extimateFeeRate) {
      if (!(this_present_extimateFeeRate && that_present_extimateFeeRate))
        return false;
      if (this.extimateFeeRate != that.extimateFeeRate)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_businessProcess = true;
    boolean that_present_businessProcess = true;
    if (this_present_businessProcess || that_present_businessProcess) {
      if (!(this_present_businessProcess && that_present_businessProcess))
        return false;
      if (this.businessProcess != that.businessProcess)
        return false;
    }

    boolean this_present_businessProcessName = true && this.isSetBusinessProcessName();
    boolean that_present_businessProcessName = true && that.isSetBusinessProcessName();
    if (this_present_businessProcessName || that_present_businessProcessName) {
      if (!(this_present_businessProcessName && that_present_businessProcessName))
        return false;
      if (!this.businessProcessName.equals(that.businessProcessName))
        return false;
    }

    boolean this_present_actualLoanDays = true;
    boolean that_present_actualLoanDays = true;
    if (this_present_actualLoanDays || that_present_actualLoanDays) {
      if (!(this_present_actualLoanDays && that_present_actualLoanDays))
        return false;
      if (this.actualLoanDays != that.actualLoanDays)
        return false;
    }

    boolean this_present_actualFeeRate = true;
    boolean that_present_actualFeeRate = true;
    if (this_present_actualFeeRate || that_present_actualFeeRate) {
      if (!(this_present_actualFeeRate && that_present_actualFeeRate))
        return false;
      if (this.actualFeeRate != that.actualFeeRate)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_realChargeMoney = true;
    boolean that_present_realChargeMoney = true;
    if (this_present_realChargeMoney || that_present_realChargeMoney) {
      if (!(this_present_realChargeMoney && that_present_realChargeMoney))
        return false;
      if (this.realChargeMoney != that.realChargeMoney)
        return false;
    }

    boolean this_present_overDueFee = true;
    boolean that_present_overDueFee = true;
    if (this_present_overDueFee || that_present_overDueFee) {
      if (!(this_present_overDueFee && that_present_overDueFee))
        return false;
      if (this.overDueFee != that.overDueFee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_settleId = true;
    list.add(present_settleId);
    if (present_settleId)
      list.add(settleId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_paymentMoney = true;
    list.add(present_paymentMoney);
    if (present_paymentMoney)
      list.add(paymentMoney);

    boolean present_charge = true;
    list.add(present_charge);
    if (present_charge)
      list.add(charge);

    boolean present_refund = true;
    list.add(present_refund);
    if (present_refund)
      list.add(refund);

    boolean present_rebateMoney = true;
    list.add(present_rebateMoney);
    if (present_rebateMoney)
      list.add(rebateMoney);

    boolean present_returnComm = true;
    list.add(present_returnComm);
    if (present_returnComm)
      list.add(returnComm);

    boolean present_paymentDate = true && (isSetPaymentDate());
    list.add(present_paymentDate);
    if (present_paymentDate)
      list.add(paymentDate);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_returnCommRate = true;
    list.add(present_returnCommRate);
    if (present_returnCommRate)
      list.add(returnCommRate);

    boolean present_rebateRate = true;
    list.add(present_rebateRate);
    if (present_rebateRate)
      list.add(rebateRate);

    boolean present_solutionDate = true && (isSetSolutionDate());
    list.add(present_solutionDate);
    if (present_solutionDate)
      list.add(solutionDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_requestDate = true && (isSetRequestDate());
    list.add(present_requestDate);
    if (present_requestDate)
      list.add(requestDate);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_customerCard = true && (isSetCustomerCard());
    list.add(present_customerCard);
    if (present_customerCard)
      list.add(customerCard);

    boolean present_applyMoney = true;
    list.add(present_applyMoney);
    if (present_applyMoney)
      list.add(applyMoney);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_planLoanDays = true;
    list.add(present_planLoanDays);
    if (present_planLoanDays)
      list.add(planLoanDays);

    boolean present_extimateFeeRate = true;
    list.add(present_extimateFeeRate);
    if (present_extimateFeeRate)
      list.add(extimateFeeRate);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_businessProcess = true;
    list.add(present_businessProcess);
    if (present_businessProcess)
      list.add(businessProcess);

    boolean present_businessProcessName = true && (isSetBusinessProcessName());
    list.add(present_businessProcessName);
    if (present_businessProcessName)
      list.add(businessProcessName);

    boolean present_actualLoanDays = true;
    list.add(present_actualLoanDays);
    if (present_actualLoanDays)
      list.add(actualLoanDays);

    boolean present_actualFeeRate = true;
    list.add(present_actualFeeRate);
    if (present_actualFeeRate)
      list.add(actualFeeRate);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_realChargeMoney = true;
    list.add(present_realChargeMoney);
    if (present_realChargeMoney)
      list.add(realChargeMoney);

    boolean present_overDueFee = true;
    list.add(present_overDueFee);
    if (present_overDueFee)
      list.add(overDueFee);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgFeeSettleDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleId()).compareTo(other.isSetSettleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleId, other.settleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMoney()).compareTo(other.isSetPaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMoney, other.paymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharge()).compareTo(other.isSetCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charge, other.charge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefund()).compareTo(other.isSetRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refund, other.refund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateMoney()).compareTo(other.isSetRebateMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateMoney, other.rebateMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnComm()).compareTo(other.isSetReturnComm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnComm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnComm, other.returnComm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDate()).compareTo(other.isSetPaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDate, other.paymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnCommRate()).compareTo(other.isSetReturnCommRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCommRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnCommRate, other.returnCommRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateRate()).compareTo(other.isSetRebateRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateRate, other.rebateRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSolutionDate()).compareTo(other.isSetSolutionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSolutionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.solutionDate, other.solutionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(other.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDate, other.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerCard()).compareTo(other.isSetCustomerCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerCard, other.customerCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyMoney()).compareTo(other.isSetApplyMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyMoney, other.applyMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanDays()).compareTo(other.isSetPlanLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanDays, other.planLoanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtimateFeeRate()).compareTo(other.isSetExtimateFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtimateFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extimateFeeRate, other.extimateFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessProcess()).compareTo(other.isSetBusinessProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessProcess, other.businessProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessProcessName()).compareTo(other.isSetBusinessProcessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessProcessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessProcessName, other.businessProcessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualLoanDays()).compareTo(other.isSetActualLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualLoanDays, other.actualLoanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualFeeRate()).compareTo(other.isSetActualFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualFeeRate, other.actualFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealChargeMoney()).compareTo(other.isSetRealChargeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealChargeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realChargeMoney, other.realChargeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverDueFee()).compareTo(other.isSetOverDueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverDueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overDueFee, other.overDueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgFeeSettleDetail(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleId:");
    sb.append(this.settleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMoney:");
    sb.append(this.paymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charge:");
    sb.append(this.charge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refund:");
    sb.append(this.refund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateMoney:");
    sb.append(this.rebateMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnComm:");
    sb.append(this.returnComm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDate:");
    if (this.paymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnCommRate:");
    sb.append(this.returnCommRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateRate:");
    sb.append(this.rebateRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("solutionDate:");
    if (this.solutionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.solutionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerCard:");
    if (this.customerCard == null) {
      sb.append("null");
    } else {
      sb.append(this.customerCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyMoney:");
    sb.append(this.applyMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanDays:");
    sb.append(this.planLoanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extimateFeeRate:");
    sb.append(this.extimateFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessProcess:");
    sb.append(this.businessProcess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessProcessName:");
    if (this.businessProcessName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessProcessName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualLoanDays:");
    sb.append(this.actualLoanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualFeeRate:");
    sb.append(this.actualFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realChargeMoney:");
    sb.append(this.realChargeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overDueFee:");
    sb.append(this.overDueFee);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgFeeSettleDetailStandardSchemeFactory implements SchemeFactory {
    public OrgFeeSettleDetailStandardScheme getScheme() {
      return new OrgFeeSettleDetailStandardScheme();
    }
  }

  private static class OrgFeeSettleDetailStandardScheme extends StandardScheme<OrgFeeSettleDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgFeeSettleDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SETTLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settleId = iprot.readI32();
              struct.setSettleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paymentMoney = iprot.readDouble();
              struct.setPaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.charge = iprot.readDouble();
              struct.setChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refund = iprot.readDouble();
              struct.setRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REBATE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateMoney = iprot.readDouble();
              struct.setRebateMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RETURN_COMM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnComm = iprot.readDouble();
              struct.setReturnCommIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDate = iprot.readString();
              struct.setPaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RETURN_COMM_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnCommRate = iprot.readDouble();
              struct.setReturnCommRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REBATE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateRate = iprot.readDouble();
              struct.setRebateRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SOLUTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.solutionDate = iprot.readString();
              struct.setSolutionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDate = iprot.readString();
              struct.setRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CUSTOMER_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerCard = iprot.readString();
              struct.setCustomerCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // APPLY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyMoney = iprot.readDouble();
              struct.setApplyMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PLAN_LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planLoanDays = iprot.readI32();
              struct.setPlanLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXTIMATE_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extimateFeeRate = iprot.readDouble();
              struct.setExtimateFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BUSINESS_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessProcess = iprot.readI32();
              struct.setBusinessProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BUSINESS_PROCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessProcessName = iprot.readString();
              struct.setBusinessProcessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ACTUAL_LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actualLoanDays = iprot.readI32();
              struct.setActualLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ACTUAL_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualFeeRate = iprot.readDouble();
              struct.setActualFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // REAL_CHARGE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realChargeMoney = iprot.readDouble();
              struct.setRealChargeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // OVER_DUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overDueFee = iprot.readDouble();
              struct.setOverDueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgFeeSettleDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLE_ID_FIELD_DESC);
      oprot.writeI32(struct.settleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.paymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.charge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FIELD_DESC);
      oprot.writeDouble(struct.refund);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.rebateMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_COMM_FIELD_DESC);
      oprot.writeDouble(struct.returnComm);
      oprot.writeFieldEnd();
      if (struct.paymentDate != null) {
        oprot.writeFieldBegin(PAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.paymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_COMM_RATE_FIELD_DESC);
      oprot.writeDouble(struct.returnCommRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.rebateRate);
      oprot.writeFieldEnd();
      if (struct.solutionDate != null) {
        oprot.writeFieldBegin(SOLUTION_DATE_FIELD_DESC);
        oprot.writeString(struct.solutionDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.requestDate != null) {
        oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.requestDate);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.customerCard != null) {
        oprot.writeFieldBegin(CUSTOMER_CARD_FIELD_DESC);
        oprot.writeString(struct.customerCard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.applyMoney);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.planLoanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTIMATE_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.extimateFeeRate);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_PROCESS_FIELD_DESC);
      oprot.writeI32(struct.businessProcess);
      oprot.writeFieldEnd();
      if (struct.businessProcessName != null) {
        oprot.writeFieldBegin(BUSINESS_PROCESS_NAME_FIELD_DESC);
        oprot.writeString(struct.businessProcessName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUAL_LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.actualLoanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.actualFeeRate);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_CHARGE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realChargeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_DUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overDueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgFeeSettleDetailTupleSchemeFactory implements SchemeFactory {
    public OrgFeeSettleDetailTupleScheme getScheme() {
      return new OrgFeeSettleDetailTupleScheme();
    }
  }

  private static class OrgFeeSettleDetailTupleScheme extends TupleScheme<OrgFeeSettleDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgFeeSettleDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetSettleId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(3);
      }
      if (struct.isSetPaymentMoney()) {
        optionals.set(4);
      }
      if (struct.isSetCharge()) {
        optionals.set(5);
      }
      if (struct.isSetRefund()) {
        optionals.set(6);
      }
      if (struct.isSetRebateMoney()) {
        optionals.set(7);
      }
      if (struct.isSetReturnComm()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentDate()) {
        optionals.set(9);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(10);
      }
      if (struct.isSetReturnCommRate()) {
        optionals.set(11);
      }
      if (struct.isSetRebateRate()) {
        optionals.set(12);
      }
      if (struct.isSetSolutionDate()) {
        optionals.set(13);
      }
      if (struct.isSetPage()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetRequestDate()) {
        optionals.set(16);
      }
      if (struct.isSetProjectName()) {
        optionals.set(17);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(18);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(19);
      }
      if (struct.isSetCustomerCard()) {
        optionals.set(20);
      }
      if (struct.isSetApplyMoney()) {
        optionals.set(21);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(22);
      }
      if (struct.isSetPlanLoanDays()) {
        optionals.set(23);
      }
      if (struct.isSetExtimateFeeRate()) {
        optionals.set(24);
      }
      if (struct.isSetProductName()) {
        optionals.set(25);
      }
      if (struct.isSetHouseName()) {
        optionals.set(26);
      }
      if (struct.isSetBusinessProcess()) {
        optionals.set(27);
      }
      if (struct.isSetBusinessProcessName()) {
        optionals.set(28);
      }
      if (struct.isSetActualLoanDays()) {
        optionals.set(29);
      }
      if (struct.isSetActualFeeRate()) {
        optionals.set(30);
      }
      if (struct.isSetOrgName()) {
        optionals.set(31);
      }
      if (struct.isSetRealChargeMoney()) {
        optionals.set(32);
      }
      if (struct.isSetOverDueFee()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetSettleId()) {
        oprot.writeI32(struct.settleId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetPaymentMoney()) {
        oprot.writeDouble(struct.paymentMoney);
      }
      if (struct.isSetCharge()) {
        oprot.writeDouble(struct.charge);
      }
      if (struct.isSetRefund()) {
        oprot.writeDouble(struct.refund);
      }
      if (struct.isSetRebateMoney()) {
        oprot.writeDouble(struct.rebateMoney);
      }
      if (struct.isSetReturnComm()) {
        oprot.writeDouble(struct.returnComm);
      }
      if (struct.isSetPaymentDate()) {
        oprot.writeString(struct.paymentDate);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetReturnCommRate()) {
        oprot.writeDouble(struct.returnCommRate);
      }
      if (struct.isSetRebateRate()) {
        oprot.writeDouble(struct.rebateRate);
      }
      if (struct.isSetSolutionDate()) {
        oprot.writeString(struct.solutionDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRequestDate()) {
        oprot.writeString(struct.requestDate);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetCustomerCard()) {
        oprot.writeString(struct.customerCard);
      }
      if (struct.isSetApplyMoney()) {
        oprot.writeDouble(struct.applyMoney);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPlanLoanDays()) {
        oprot.writeI32(struct.planLoanDays);
      }
      if (struct.isSetExtimateFeeRate()) {
        oprot.writeDouble(struct.extimateFeeRate);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBusinessProcess()) {
        oprot.writeI32(struct.businessProcess);
      }
      if (struct.isSetBusinessProcessName()) {
        oprot.writeString(struct.businessProcessName);
      }
      if (struct.isSetActualLoanDays()) {
        oprot.writeI32(struct.actualLoanDays);
      }
      if (struct.isSetActualFeeRate()) {
        oprot.writeDouble(struct.actualFeeRate);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetRealChargeMoney()) {
        oprot.writeDouble(struct.realChargeMoney);
      }
      if (struct.isSetOverDueFee()) {
        oprot.writeDouble(struct.overDueFee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgFeeSettleDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.settleId = iprot.readI32();
        struct.setSettleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paymentMoney = iprot.readDouble();
        struct.setPaymentMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.charge = iprot.readDouble();
        struct.setChargeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refund = iprot.readDouble();
        struct.setRefundIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rebateMoney = iprot.readDouble();
        struct.setRebateMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.returnComm = iprot.readDouble();
        struct.setReturnCommIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentDate = iprot.readString();
        struct.setPaymentDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.returnCommRate = iprot.readDouble();
        struct.setReturnCommRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rebateRate = iprot.readDouble();
        struct.setRebateRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.solutionDate = iprot.readString();
        struct.setSolutionDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestDate = iprot.readString();
        struct.setRequestDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(19)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.customerCard = iprot.readString();
        struct.setCustomerCardIsSet(true);
      }
      if (incoming.get(21)) {
        struct.applyMoney = iprot.readDouble();
        struct.setApplyMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.planLoanDays = iprot.readI32();
        struct.setPlanLoanDaysIsSet(true);
      }
      if (incoming.get(24)) {
        struct.extimateFeeRate = iprot.readDouble();
        struct.setExtimateFeeRateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.businessProcess = iprot.readI32();
        struct.setBusinessProcessIsSet(true);
      }
      if (incoming.get(28)) {
        struct.businessProcessName = iprot.readString();
        struct.setBusinessProcessNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.actualLoanDays = iprot.readI32();
        struct.setActualLoanDaysIsSet(true);
      }
      if (incoming.get(30)) {
        struct.actualFeeRate = iprot.readDouble();
        struct.setActualFeeRateIsSet(true);
      }
      if (incoming.get(31)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(32)) {
        struct.realChargeMoney = iprot.readDouble();
        struct.setRealChargeMoneyIsSet(true);
      }
      if (incoming.get(33)) {
        struct.overDueFee = iprot.readDouble();
        struct.setOverDueFeeIsSet(true);
      }
    }
  }

}


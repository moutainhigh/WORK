/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgCooperationContract implements org.apache.thrift.TBase<OrgCooperationContract, OrgCooperationContract._Fields>, java.io.Serializable, Cloneable, Comparable<OrgCooperationContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgCooperationContract");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COOPERATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDatetime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgCooperationContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgCooperationContractTupleSchemeFactory());
  }

  public int pid; // required
  public int cooperationId; // required
  public String contractNo; // required
  public int fileId; // required
  public String contractName; // required
  public int contractType; // required
  public int creatorId; // required
  public String createdDatetime; // required
  public int updateId; // required
  public String updateDate; // required
  public String remark; // required
  public com.xlkfinance.bms.rpc.system.BizFile file; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    COOPERATION_ID((short)2, "cooperationId"),
    CONTRACT_NO((short)3, "contractNo"),
    FILE_ID((short)4, "fileId"),
    CONTRACT_NAME((short)5, "contractName"),
    CONTRACT_TYPE((short)6, "contractType"),
    CREATOR_ID((short)7, "creatorId"),
    CREATED_DATETIME((short)8, "createdDatetime"),
    UPDATE_ID((short)9, "updateId"),
    UPDATE_DATE((short)10, "updateDate"),
    REMARK((short)11, "remark"),
    FILE((short)12, "file");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // COOPERATION_ID
          return COOPERATION_ID;
        case 3: // CONTRACT_NO
          return CONTRACT_NO;
        case 4: // FILE_ID
          return FILE_ID;
        case 5: // CONTRACT_NAME
          return CONTRACT_NAME;
        case 6: // CONTRACT_TYPE
          return CONTRACT_TYPE;
        case 7: // CREATOR_ID
          return CREATOR_ID;
        case 8: // CREATED_DATETIME
          return CREATED_DATETIME;
        case 9: // UPDATE_ID
          return UPDATE_ID;
        case 10: // UPDATE_DATE
          return UPDATE_DATE;
        case 11: // REMARK
          return REMARK;
        case 12: // FILE
          return FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __COOPERATIONID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __CONTRACTTYPE_ISSET_ID = 3;
  private static final int __CREATORID_ISSET_ID = 4;
  private static final int __UPDATEID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COOPERATION_ID, new org.apache.thrift.meta_data.FieldMetaData("cooperationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("createdDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.system.BizFile.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgCooperationContract.class, metaDataMap);
  }

  public OrgCooperationContract() {
  }

  public OrgCooperationContract(
    int pid,
    int cooperationId,
    String contractNo,
    int fileId,
    String contractName,
    int contractType,
    int creatorId,
    String createdDatetime,
    int updateId,
    String updateDate,
    String remark,
    com.xlkfinance.bms.rpc.system.BizFile file)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cooperationId = cooperationId;
    setCooperationIdIsSet(true);
    this.contractNo = contractNo;
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.contractName = contractName;
    this.contractType = contractType;
    setContractTypeIsSet(true);
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    this.createdDatetime = createdDatetime;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.remark = remark;
    this.file = file;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgCooperationContract(OrgCooperationContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.cooperationId = other.cooperationId;
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    this.fileId = other.fileId;
    if (other.isSetContractName()) {
      this.contractName = other.contractName;
    }
    this.contractType = other.contractType;
    this.creatorId = other.creatorId;
    if (other.isSetCreatedDatetime()) {
      this.createdDatetime = other.createdDatetime;
    }
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetFile()) {
      this.file = new com.xlkfinance.bms.rpc.system.BizFile(other.file);
    }
  }

  public OrgCooperationContract deepCopy() {
    return new OrgCooperationContract(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCooperationIdIsSet(false);
    this.cooperationId = 0;
    this.contractNo = null;
    setFileIdIsSet(false);
    this.fileId = 0;
    this.contractName = null;
    setContractTypeIsSet(false);
    this.contractType = 0;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    this.createdDatetime = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.remark = null;
    this.file = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgCooperationContract setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCooperationId() {
    return this.cooperationId;
  }

  public OrgCooperationContract setCooperationId(int cooperationId) {
    this.cooperationId = cooperationId;
    setCooperationIdIsSet(true);
    return this;
  }

  public void unsetCooperationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOPERATIONID_ISSET_ID);
  }

  /** Returns true if field cooperationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperationId() {
    return EncodingUtils.testBit(__isset_bitfield, __COOPERATIONID_ISSET_ID);
  }

  public void setCooperationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOPERATIONID_ISSET_ID, value);
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public OrgCooperationContract setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public int getFileId() {
    return this.fileId;
  }

  public OrgCooperationContract setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public String getContractName() {
    return this.contractName;
  }

  public OrgCooperationContract setContractName(String contractName) {
    this.contractName = contractName;
    return this;
  }

  public void unsetContractName() {
    this.contractName = null;
  }

  /** Returns true if field contractName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractName() {
    return this.contractName != null;
  }

  public void setContractNameIsSet(boolean value) {
    if (!value) {
      this.contractName = null;
    }
  }

  public int getContractType() {
    return this.contractType;
  }

  public OrgCooperationContract setContractType(int contractType) {
    this.contractType = contractType;
    setContractTypeIsSet(true);
    return this;
  }

  public void unsetContractType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID);
  }

  /** Returns true if field contractType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID);
  }

  public void setContractTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID, value);
  }

  public int getCreatorId() {
    return this.creatorId;
  }

  public OrgCooperationContract setCreatorId(int creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public String getCreatedDatetime() {
    return this.createdDatetime;
  }

  public OrgCooperationContract setCreatedDatetime(String createdDatetime) {
    this.createdDatetime = createdDatetime;
    return this;
  }

  public void unsetCreatedDatetime() {
    this.createdDatetime = null;
  }

  /** Returns true if field createdDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDatetime() {
    return this.createdDatetime != null;
  }

  public void setCreatedDatetimeIsSet(boolean value) {
    if (!value) {
      this.createdDatetime = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public OrgCooperationContract setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OrgCooperationContract setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OrgCooperationContract setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public com.xlkfinance.bms.rpc.system.BizFile getFile() {
    return this.file;
  }

  public OrgCooperationContract setFile(com.xlkfinance.bms.rpc.system.BizFile file) {
    this.file = file;
    return this;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case COOPERATION_ID:
      if (value == null) {
        unsetCooperationId();
      } else {
        setCooperationId((Integer)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case CONTRACT_NAME:
      if (value == null) {
        unsetContractName();
      } else {
        setContractName((String)value);
      }
      break;

    case CONTRACT_TYPE:
      if (value == null) {
        unsetContractType();
      } else {
        setContractType((Integer)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Integer)value);
      }
      break;

    case CREATED_DATETIME:
      if (value == null) {
        unsetCreatedDatetime();
      } else {
        setCreatedDatetime((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case FILE:
      if (value == null) {
        unsetFile();
      } else {
        setFile((com.xlkfinance.bms.rpc.system.BizFile)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case COOPERATION_ID:
      return Integer.valueOf(getCooperationId());

    case CONTRACT_NO:
      return getContractNo();

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case CONTRACT_NAME:
      return getContractName();

    case CONTRACT_TYPE:
      return Integer.valueOf(getContractType());

    case CREATOR_ID:
      return Integer.valueOf(getCreatorId());

    case CREATED_DATETIME:
      return getCreatedDatetime();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case REMARK:
      return getRemark();

    case FILE:
      return getFile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case COOPERATION_ID:
      return isSetCooperationId();
    case CONTRACT_NO:
      return isSetContractNo();
    case FILE_ID:
      return isSetFileId();
    case CONTRACT_NAME:
      return isSetContractName();
    case CONTRACT_TYPE:
      return isSetContractType();
    case CREATOR_ID:
      return isSetCreatorId();
    case CREATED_DATETIME:
      return isSetCreatedDatetime();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case REMARK:
      return isSetRemark();
    case FILE:
      return isSetFile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgCooperationContract)
      return this.equals((OrgCooperationContract)that);
    return false;
  }

  public boolean equals(OrgCooperationContract that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cooperationId = true;
    boolean that_present_cooperationId = true;
    if (this_present_cooperationId || that_present_cooperationId) {
      if (!(this_present_cooperationId && that_present_cooperationId))
        return false;
      if (this.cooperationId != that.cooperationId)
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_contractName = true && this.isSetContractName();
    boolean that_present_contractName = true && that.isSetContractName();
    if (this_present_contractName || that_present_contractName) {
      if (!(this_present_contractName && that_present_contractName))
        return false;
      if (!this.contractName.equals(that.contractName))
        return false;
    }

    boolean this_present_contractType = true;
    boolean that_present_contractType = true;
    if (this_present_contractType || that_present_contractType) {
      if (!(this_present_contractType && that_present_contractType))
        return false;
      if (this.contractType != that.contractType)
        return false;
    }

    boolean this_present_creatorId = true;
    boolean that_present_creatorId = true;
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_createdDatetime = true && this.isSetCreatedDatetime();
    boolean that_present_createdDatetime = true && that.isSetCreatedDatetime();
    if (this_present_createdDatetime || that_present_createdDatetime) {
      if (!(this_present_createdDatetime && that_present_createdDatetime))
        return false;
      if (!this.createdDatetime.equals(that.createdDatetime))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cooperationId = true;
    list.add(present_cooperationId);
    if (present_cooperationId)
      list.add(cooperationId);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_contractName = true && (isSetContractName());
    list.add(present_contractName);
    if (present_contractName)
      list.add(contractName);

    boolean present_contractType = true;
    list.add(present_contractType);
    if (present_contractType)
      list.add(contractType);

    boolean present_creatorId = true;
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_createdDatetime = true && (isSetCreatedDatetime());
    list.add(present_createdDatetime);
    if (present_createdDatetime)
      list.add(createdDatetime);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_file = true && (isSetFile());
    list.add(present_file);
    if (present_file)
      list.add(file);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgCooperationContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperationId()).compareTo(other.isSetCooperationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperationId, other.cooperationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractName()).compareTo(other.isSetContractName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractName, other.contractName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractType()).compareTo(other.isSetContractType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractType, other.contractType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDatetime()).compareTo(other.isSetCreatedDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDatetime, other.createdDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgCooperationContract(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperationId:");
    sb.append(this.cooperationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractName:");
    if (this.contractName == null) {
      sb.append("null");
    } else {
      sb.append(this.contractName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractType:");
    sb.append(this.contractType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    sb.append(this.creatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDatetime:");
    if (this.createdDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.createdDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file:");
    if (this.file == null) {
      sb.append("null");
    } else {
      sb.append(this.file);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (file != null) {
      file.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgCooperationContractStandardSchemeFactory implements SchemeFactory {
    public OrgCooperationContractStandardScheme getScheme() {
      return new OrgCooperationContractStandardScheme();
    }
  }

  private static class OrgCooperationContractStandardScheme extends StandardScheme<OrgCooperationContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgCooperationContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COOPERATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cooperationId = iprot.readI32();
              struct.setCooperationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractName = iprot.readString();
              struct.setContractNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractType = iprot.readI32();
              struct.setContractTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creatorId = iprot.readI32();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATED_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdDatetime = iprot.readString();
              struct.setCreatedDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file = new com.xlkfinance.bms.rpc.system.BizFile();
              struct.file.read(iprot);
              struct.setFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgCooperationContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COOPERATION_ID_FIELD_DESC);
      oprot.writeI32(struct.cooperationId);
      oprot.writeFieldEnd();
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      if (struct.contractName != null) {
        oprot.writeFieldBegin(CONTRACT_NAME_FIELD_DESC);
        oprot.writeString(struct.contractName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTRACT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.contractType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.creatorId);
      oprot.writeFieldEnd();
      if (struct.createdDatetime != null) {
        oprot.writeFieldBegin(CREATED_DATETIME_FIELD_DESC);
        oprot.writeString(struct.createdDatetime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.file != null) {
        oprot.writeFieldBegin(FILE_FIELD_DESC);
        struct.file.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgCooperationContractTupleSchemeFactory implements SchemeFactory {
    public OrgCooperationContractTupleScheme getScheme() {
      return new OrgCooperationContractTupleScheme();
    }
  }

  private static class OrgCooperationContractTupleScheme extends TupleScheme<OrgCooperationContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgCooperationContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCooperationId()) {
        optionals.set(1);
      }
      if (struct.isSetContractNo()) {
        optionals.set(2);
      }
      if (struct.isSetFileId()) {
        optionals.set(3);
      }
      if (struct.isSetContractName()) {
        optionals.set(4);
      }
      if (struct.isSetContractType()) {
        optionals.set(5);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(6);
      }
      if (struct.isSetCreatedDatetime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetFile()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCooperationId()) {
        oprot.writeI32(struct.cooperationId);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetContractName()) {
        oprot.writeString(struct.contractName);
      }
      if (struct.isSetContractType()) {
        oprot.writeI32(struct.contractType);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI32(struct.creatorId);
      }
      if (struct.isSetCreatedDatetime()) {
        oprot.writeString(struct.createdDatetime);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetFile()) {
        struct.file.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgCooperationContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cooperationId = iprot.readI32();
        struct.setCooperationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractName = iprot.readString();
        struct.setContractNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractType = iprot.readI32();
        struct.setContractTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creatorId = iprot.readI32();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createdDatetime = iprot.readString();
        struct.setCreatedDatetimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.file = new com.xlkfinance.bms.rpc.system.BizFile();
        struct.file.read(iprot);
        struct.setFileIsSet(true);
      }
    }
  }

}


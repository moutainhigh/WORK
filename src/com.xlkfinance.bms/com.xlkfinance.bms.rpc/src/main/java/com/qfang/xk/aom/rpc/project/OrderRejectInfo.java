/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-24")
public class OrderRejectInfo implements org.apache.thrift.TBase<OrderRejectInfo, OrderRejectInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderRejectInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderRejectInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXAMINE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("examineUser", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXAMINE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("examineDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXAMINE_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("examineOpinion", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderRejectInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderRejectInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int orderId; // required
  public int examineUser; // required
  public String examineDate; // required
  public String examineOpinion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ORDER_ID((short)2, "orderId"),
    EXAMINE_USER((short)3, "examineUser"),
    EXAMINE_DATE((short)4, "examineDate"),
    EXAMINE_OPINION((short)5, "examineOpinion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // EXAMINE_USER
          return EXAMINE_USER;
        case 4: // EXAMINE_DATE
          return EXAMINE_DATE;
        case 5: // EXAMINE_OPINION
          return EXAMINE_OPINION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORDERID_ISSET_ID = 1;
  private static final int __EXAMINEUSER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAMINE_USER, new org.apache.thrift.meta_data.FieldMetaData("examineUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAMINE_DATE, new org.apache.thrift.meta_data.FieldMetaData("examineDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAMINE_OPINION, new org.apache.thrift.meta_data.FieldMetaData("examineOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderRejectInfo.class, metaDataMap);
  }

  public OrderRejectInfo() {
  }

  public OrderRejectInfo(
    int pid,
    int orderId,
    int examineUser,
    String examineDate,
    String examineOpinion)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.examineUser = examineUser;
    setExamineUserIsSet(true);
    this.examineDate = examineDate;
    this.examineOpinion = examineOpinion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderRejectInfo(OrderRejectInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.orderId = other.orderId;
    this.examineUser = other.examineUser;
    if (other.isSetExamineDate()) {
      this.examineDate = other.examineDate;
    }
    if (other.isSetExamineOpinion()) {
      this.examineOpinion = other.examineOpinion;
    }
  }

  public OrderRejectInfo deepCopy() {
    return new OrderRejectInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setOrderIdIsSet(false);
    this.orderId = 0;
    setExamineUserIsSet(false);
    this.examineUser = 0;
    this.examineDate = null;
    this.examineOpinion = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrderRejectInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getOrderId() {
    return this.orderId;
  }

  public OrderRejectInfo setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public int getExamineUser() {
    return this.examineUser;
  }

  public OrderRejectInfo setExamineUser(int examineUser) {
    this.examineUser = examineUser;
    setExamineUserIsSet(true);
    return this;
  }

  public void unsetExamineUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID);
  }

  /** Returns true if field examineUser is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineUser() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID);
  }

  public void setExamineUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID, value);
  }

  public String getExamineDate() {
    return this.examineDate;
  }

  public OrderRejectInfo setExamineDate(String examineDate) {
    this.examineDate = examineDate;
    return this;
  }

  public void unsetExamineDate() {
    this.examineDate = null;
  }

  /** Returns true if field examineDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineDate() {
    return this.examineDate != null;
  }

  public void setExamineDateIsSet(boolean value) {
    if (!value) {
      this.examineDate = null;
    }
  }

  public String getExamineOpinion() {
    return this.examineOpinion;
  }

  public OrderRejectInfo setExamineOpinion(String examineOpinion) {
    this.examineOpinion = examineOpinion;
    return this;
  }

  public void unsetExamineOpinion() {
    this.examineOpinion = null;
  }

  /** Returns true if field examineOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineOpinion() {
    return this.examineOpinion != null;
  }

  public void setExamineOpinionIsSet(boolean value) {
    if (!value) {
      this.examineOpinion = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case EXAMINE_USER:
      if (value == null) {
        unsetExamineUser();
      } else {
        setExamineUser((Integer)value);
      }
      break;

    case EXAMINE_DATE:
      if (value == null) {
        unsetExamineDate();
      } else {
        setExamineDate((String)value);
      }
      break;

    case EXAMINE_OPINION:
      if (value == null) {
        unsetExamineOpinion();
      } else {
        setExamineOpinion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case EXAMINE_USER:
      return Integer.valueOf(getExamineUser());

    case EXAMINE_DATE:
      return getExamineDate();

    case EXAMINE_OPINION:
      return getExamineOpinion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ORDER_ID:
      return isSetOrderId();
    case EXAMINE_USER:
      return isSetExamineUser();
    case EXAMINE_DATE:
      return isSetExamineDate();
    case EXAMINE_OPINION:
      return isSetExamineOpinion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderRejectInfo)
      return this.equals((OrderRejectInfo)that);
    return false;
  }

  public boolean equals(OrderRejectInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_examineUser = true;
    boolean that_present_examineUser = true;
    if (this_present_examineUser || that_present_examineUser) {
      if (!(this_present_examineUser && that_present_examineUser))
        return false;
      if (this.examineUser != that.examineUser)
        return false;
    }

    boolean this_present_examineDate = true && this.isSetExamineDate();
    boolean that_present_examineDate = true && that.isSetExamineDate();
    if (this_present_examineDate || that_present_examineDate) {
      if (!(this_present_examineDate && that_present_examineDate))
        return false;
      if (!this.examineDate.equals(that.examineDate))
        return false;
    }

    boolean this_present_examineOpinion = true && this.isSetExamineOpinion();
    boolean that_present_examineOpinion = true && that.isSetExamineOpinion();
    if (this_present_examineOpinion || that_present_examineOpinion) {
      if (!(this_present_examineOpinion && that_present_examineOpinion))
        return false;
      if (!this.examineOpinion.equals(that.examineOpinion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_orderId = true;
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_examineUser = true;
    list.add(present_examineUser);
    if (present_examineUser)
      list.add(examineUser);

    boolean present_examineDate = true && (isSetExamineDate());
    list.add(present_examineDate);
    if (present_examineDate)
      list.add(examineDate);

    boolean present_examineOpinion = true && (isSetExamineOpinion());
    list.add(present_examineOpinion);
    if (present_examineOpinion)
      list.add(examineOpinion);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderRejectInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineUser()).compareTo(other.isSetExamineUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineUser, other.examineUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineDate()).compareTo(other.isSetExamineDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineDate, other.examineDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineOpinion()).compareTo(other.isSetExamineOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineOpinion, other.examineOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderRejectInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineUser:");
    sb.append(this.examineUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineDate:");
    if (this.examineDate == null) {
      sb.append("null");
    } else {
      sb.append(this.examineDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineOpinion:");
    if (this.examineOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.examineOpinion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderRejectInfoStandardSchemeFactory implements SchemeFactory {
    public OrderRejectInfoStandardScheme getScheme() {
      return new OrderRejectInfoStandardScheme();
    }
  }

  private static class OrderRejectInfoStandardScheme extends StandardScheme<OrderRejectInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderRejectInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXAMINE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.examineUser = iprot.readI32();
              struct.setExamineUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXAMINE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examineDate = iprot.readString();
              struct.setExamineDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXAMINE_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examineOpinion = iprot.readString();
              struct.setExamineOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderRejectInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeI32(struct.orderId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXAMINE_USER_FIELD_DESC);
      oprot.writeI32(struct.examineUser);
      oprot.writeFieldEnd();
      if (struct.examineDate != null) {
        oprot.writeFieldBegin(EXAMINE_DATE_FIELD_DESC);
        oprot.writeString(struct.examineDate);
        oprot.writeFieldEnd();
      }
      if (struct.examineOpinion != null) {
        oprot.writeFieldBegin(EXAMINE_OPINION_FIELD_DESC);
        oprot.writeString(struct.examineOpinion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderRejectInfoTupleSchemeFactory implements SchemeFactory {
    public OrderRejectInfoTupleScheme getScheme() {
      return new OrderRejectInfoTupleScheme();
    }
  }

  private static class OrderRejectInfoTupleScheme extends TupleScheme<OrderRejectInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderRejectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetExamineUser()) {
        optionals.set(2);
      }
      if (struct.isSetExamineDate()) {
        optionals.set(3);
      }
      if (struct.isSetExamineOpinion()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetExamineUser()) {
        oprot.writeI32(struct.examineUser);
      }
      if (struct.isSetExamineDate()) {
        oprot.writeString(struct.examineDate);
      }
      if (struct.isSetExamineOpinion()) {
        oprot.writeString(struct.examineOpinion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderRejectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.examineUser = iprot.readI32();
        struct.setExamineUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.examineDate = iprot.readString();
        struct.setExamineDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.examineOpinion = iprot.readString();
        struct.setExamineOpinionIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-24")
public class BizProject implements org.apache.thrift.TBase<BizProject, BizProject._Fields>, java.io.Serializable, Cloneable, Comparable<BizProject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProject");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelog", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FLOW_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("flowCatelog", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("myType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MY_MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("myMain", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecord", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecord", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_PREPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllowPrepay", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IS_RETURN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("isReturnInterest", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFee", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CIRCULATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("circulateType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField SURVEY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyResult", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField IS_REJECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRejected", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField BUSINESS_CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessContacts", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField CONTACTS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("contactsPhone", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategory", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField IS_NOTARIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotarization", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField MANAGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("managers", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField MANAGERS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("managersPhone", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceNo", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileStatus", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField AUDITOR_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("auditorOpinion", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField IS_SELLER_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeller", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField DECLARATION_FIELD_DESC = new org.apache.thrift.protocol.TField("declaration", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField REFUND_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFileStatus", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField CHECHAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanDate", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField CHECHAN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanUserId", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField CHECHAN_CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanCause", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerName", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerPhone", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerCard", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanDate", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField LOAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)54);
  private static final org.apache.thrift.protocol.TField MAX_LOAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLoanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)55);
  private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isClosed", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField PROJECT_GUARANTEE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectGuarantee", org.apache.thrift.protocol.TType.STRUCT, (short)57);
  private static final org.apache.thrift.protocol.TField PROJECT_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("projectProperty", org.apache.thrift.protocol.TType.STRUCT, (short)58);
  private static final org.apache.thrift.protocol.TField PROJECT_FORECLOSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectForeclosure", org.apache.thrift.protocol.TType.STRUCT, (short)59);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)60);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField APPLY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserId", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField IS_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isReject", org.apache.thrift.protocol.TType.I32, (short)64);
  private static final org.apache.thrift.protocol.TField EXAMINE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("examineUser", org.apache.thrift.protocol.TType.I32, (short)65);
  private static final org.apache.thrift.protocol.TField EXAMINE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("examineDate", org.apache.thrift.protocol.TType.STRING, (short)66);
  private static final org.apache.thrift.protocol.TField EXAMINE_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("examineOpinion", org.apache.thrift.protocol.TType.STRING, (short)67);
  private static final org.apache.thrift.protocol.TField IS_ASSIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAssigned", org.apache.thrift.protocol.TType.I32, (short)68);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)69);
  private static final org.apache.thrift.protocol.TField PROJECT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectIds", org.apache.thrift.protocol.TType.LIST, (short)70);
  private static final org.apache.thrift.protocol.TField ESTATE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("estateList", org.apache.thrift.protocol.TType.LIST, (short)71);
  private static final org.apache.thrift.protocol.TField HOUSE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("houseIds", org.apache.thrift.protocol.TType.STRING, (short)72);
  private static final org.apache.thrift.protocol.TField FORE_AFTER_MONITOR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAfterMonitorStatus", org.apache.thrift.protocol.TType.I32, (short)73);
  private static final org.apache.thrift.protocol.TField REJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rejectType", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField ORIGINAL_LOAN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("originalLoanIds", org.apache.thrift.protocol.TType.STRING, (short)75);
  private static final org.apache.thrift.protocol.TField ORIGINAL_LOAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("originalLoanList", org.apache.thrift.protocol.TType.LIST, (short)76);
  private static final org.apache.thrift.protocol.TField USER_PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPids", org.apache.thrift.protocol.TType.STRING, (short)77);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public int projectType; // required
  public String projectName; // required
  public String projectNumber; // required
  public int pmUserId; // required
  public String businessCatelog; // required
  public String businessType; // required
  public String flowCatelog; // required
  public String myType; // required
  public String myMain; // required
  public int loanInterestRecord; // required
  public int loanMgrRecord; // required
  public int isAllowPrepay; // required
  public int isReturnInterest; // required
  public int loanOtherFee; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public int status; // required
  public int circulateType; // required
  public String surveyResult; // required
  public String comments; // required
  public int isRejected; // required
  public int productId; // required
  public int businessSource; // required
  public String address; // required
  public String businessContacts; // required
  public String contactsPhone; // required
  public int innerOrOut; // required
  public int businessCategory; // required
  public int isNotarization; // required
  public int isDelete; // required
  public int isChechan; // required
  public String managers; // required
  public String managersPhone; // required
  public int foreclosureStatus; // required
  public int businessSourceNo; // required
  public int collectFileStatus; // required
  public int projectSource; // required
  public String auditorOpinion; // required
  public int isSeller; // required
  public String declaration; // required
  public int refundFileStatus; // required
  public String chechanDate; // required
  public int chechanUserId; // required
  public String chechanCause; // required
  public int orgId; // required
  public String orgCustomerName; // required
  public String orgCustomerPhone; // required
  public String orgCustomerCard; // required
  public String planLoanDate; // required
  public double planLoanMoney; // required
  public double loanRate; // required
  public double maxLoanRate; // required
  public int isClosed; // required
  public com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee projectGuarantee; // required
  public com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty; // required
  public com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure; // required
  public String orgName; // required
  public String areaCode; // required
  public int applyUserId; // required
  public int isNeedHandle; // required
  public int isReject; // required
  public int examineUser; // required
  public String examineDate; // required
  public String examineOpinion; // required
  public int isAssigned; // required
  public String pids; // required
  public List<String> projectIds; // required
  public List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList; // required
  public String houseIds; // required
  public int foreAfterMonitorStatus; // required
  public int rejectType; // required
  public String originalLoanIds; // required
  public List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> originalLoanList; // required
  public String userPids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    PROJECT_TYPE((short)3, "projectType"),
    PROJECT_NAME((short)4, "projectName"),
    PROJECT_NUMBER((short)5, "projectNumber"),
    PM_USER_ID((short)6, "pmUserId"),
    BUSINESS_CATELOG((short)7, "businessCatelog"),
    BUSINESS_TYPE((short)8, "businessType"),
    FLOW_CATELOG((short)9, "flowCatelog"),
    MY_TYPE((short)10, "myType"),
    MY_MAIN((short)11, "myMain"),
    LOAN_INTEREST_RECORD((short)12, "loanInterestRecord"),
    LOAN_MGR_RECORD((short)13, "loanMgrRecord"),
    IS_ALLOW_PREPAY((short)14, "isAllowPrepay"),
    IS_RETURN_INTEREST((short)15, "isReturnInterest"),
    LOAN_OTHER_FEE((short)16, "loanOtherFee"),
    REQUEST_STATUS((short)17, "requestStatus"),
    REQUEST_DTTM((short)18, "requestDttm"),
    COMPLETE_DTTM((short)19, "completeDttm"),
    STATUS((short)20, "status"),
    CIRCULATE_TYPE((short)21, "circulateType"),
    SURVEY_RESULT((short)22, "surveyResult"),
    COMMENTS((short)23, "comments"),
    IS_REJECTED((short)24, "isRejected"),
    PRODUCT_ID((short)25, "productId"),
    BUSINESS_SOURCE((short)26, "businessSource"),
    ADDRESS((short)27, "address"),
    BUSINESS_CONTACTS((short)28, "businessContacts"),
    CONTACTS_PHONE((short)29, "contactsPhone"),
    INNER_OR_OUT((short)30, "innerOrOut"),
    BUSINESS_CATEGORY((short)31, "businessCategory"),
    IS_NOTARIZATION((short)32, "isNotarization"),
    IS_DELETE((short)33, "isDelete"),
    IS_CHECHAN((short)34, "isChechan"),
    MANAGERS((short)35, "managers"),
    MANAGERS_PHONE((short)36, "managersPhone"),
    FORECLOSURE_STATUS((short)37, "foreclosureStatus"),
    BUSINESS_SOURCE_NO((short)38, "businessSourceNo"),
    COLLECT_FILE_STATUS((short)39, "collectFileStatus"),
    PROJECT_SOURCE((short)40, "projectSource"),
    AUDITOR_OPINION((short)41, "auditorOpinion"),
    IS_SELLER((short)42, "isSeller"),
    DECLARATION((short)43, "declaration"),
    REFUND_FILE_STATUS((short)44, "refundFileStatus"),
    CHECHAN_DATE((short)45, "chechanDate"),
    CHECHAN_USER_ID((short)46, "chechanUserId"),
    CHECHAN_CAUSE((short)47, "chechanCause"),
    ORG_ID((short)48, "orgId"),
    ORG_CUSTOMER_NAME((short)49, "orgCustomerName"),
    ORG_CUSTOMER_PHONE((short)50, "orgCustomerPhone"),
    ORG_CUSTOMER_CARD((short)51, "orgCustomerCard"),
    PLAN_LOAN_DATE((short)52, "planLoanDate"),
    PLAN_LOAN_MONEY((short)53, "planLoanMoney"),
    LOAN_RATE((short)54, "loanRate"),
    MAX_LOAN_RATE((short)55, "maxLoanRate"),
    IS_CLOSED((short)56, "isClosed"),
    PROJECT_GUARANTEE((short)57, "projectGuarantee"),
    PROJECT_PROPERTY((short)58, "projectProperty"),
    PROJECT_FORECLOSURE((short)59, "projectForeclosure"),
    ORG_NAME((short)60, "orgName"),
    AREA_CODE((short)61, "areaCode"),
    APPLY_USER_ID((short)62, "applyUserId"),
    IS_NEED_HANDLE((short)63, "isNeedHandle"),
    IS_REJECT((short)64, "isReject"),
    EXAMINE_USER((short)65, "examineUser"),
    EXAMINE_DATE((short)66, "examineDate"),
    EXAMINE_OPINION((short)67, "examineOpinion"),
    IS_ASSIGNED((short)68, "isAssigned"),
    PIDS((short)69, "pids"),
    PROJECT_IDS((short)70, "projectIds"),
    ESTATE_LIST((short)71, "estateList"),
    HOUSE_IDS((short)72, "houseIds"),
    FORE_AFTER_MONITOR_STATUS((short)73, "foreAfterMonitorStatus"),
    REJECT_TYPE((short)74, "rejectType"),
    ORIGINAL_LOAN_IDS((short)75, "originalLoanIds"),
    ORIGINAL_LOAN_LIST((short)76, "originalLoanList"),
    USER_PIDS((short)77, "userPids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 6: // PM_USER_ID
          return PM_USER_ID;
        case 7: // BUSINESS_CATELOG
          return BUSINESS_CATELOG;
        case 8: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 9: // FLOW_CATELOG
          return FLOW_CATELOG;
        case 10: // MY_TYPE
          return MY_TYPE;
        case 11: // MY_MAIN
          return MY_MAIN;
        case 12: // LOAN_INTEREST_RECORD
          return LOAN_INTEREST_RECORD;
        case 13: // LOAN_MGR_RECORD
          return LOAN_MGR_RECORD;
        case 14: // IS_ALLOW_PREPAY
          return IS_ALLOW_PREPAY;
        case 15: // IS_RETURN_INTEREST
          return IS_RETURN_INTEREST;
        case 16: // LOAN_OTHER_FEE
          return LOAN_OTHER_FEE;
        case 17: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 18: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 19: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 20: // STATUS
          return STATUS;
        case 21: // CIRCULATE_TYPE
          return CIRCULATE_TYPE;
        case 22: // SURVEY_RESULT
          return SURVEY_RESULT;
        case 23: // COMMENTS
          return COMMENTS;
        case 24: // IS_REJECTED
          return IS_REJECTED;
        case 25: // PRODUCT_ID
          return PRODUCT_ID;
        case 26: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 27: // ADDRESS
          return ADDRESS;
        case 28: // BUSINESS_CONTACTS
          return BUSINESS_CONTACTS;
        case 29: // CONTACTS_PHONE
          return CONTACTS_PHONE;
        case 30: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 31: // BUSINESS_CATEGORY
          return BUSINESS_CATEGORY;
        case 32: // IS_NOTARIZATION
          return IS_NOTARIZATION;
        case 33: // IS_DELETE
          return IS_DELETE;
        case 34: // IS_CHECHAN
          return IS_CHECHAN;
        case 35: // MANAGERS
          return MANAGERS;
        case 36: // MANAGERS_PHONE
          return MANAGERS_PHONE;
        case 37: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 38: // BUSINESS_SOURCE_NO
          return BUSINESS_SOURCE_NO;
        case 39: // COLLECT_FILE_STATUS
          return COLLECT_FILE_STATUS;
        case 40: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 41: // AUDITOR_OPINION
          return AUDITOR_OPINION;
        case 42: // IS_SELLER
          return IS_SELLER;
        case 43: // DECLARATION
          return DECLARATION;
        case 44: // REFUND_FILE_STATUS
          return REFUND_FILE_STATUS;
        case 45: // CHECHAN_DATE
          return CHECHAN_DATE;
        case 46: // CHECHAN_USER_ID
          return CHECHAN_USER_ID;
        case 47: // CHECHAN_CAUSE
          return CHECHAN_CAUSE;
        case 48: // ORG_ID
          return ORG_ID;
        case 49: // ORG_CUSTOMER_NAME
          return ORG_CUSTOMER_NAME;
        case 50: // ORG_CUSTOMER_PHONE
          return ORG_CUSTOMER_PHONE;
        case 51: // ORG_CUSTOMER_CARD
          return ORG_CUSTOMER_CARD;
        case 52: // PLAN_LOAN_DATE
          return PLAN_LOAN_DATE;
        case 53: // PLAN_LOAN_MONEY
          return PLAN_LOAN_MONEY;
        case 54: // LOAN_RATE
          return LOAN_RATE;
        case 55: // MAX_LOAN_RATE
          return MAX_LOAN_RATE;
        case 56: // IS_CLOSED
          return IS_CLOSED;
        case 57: // PROJECT_GUARANTEE
          return PROJECT_GUARANTEE;
        case 58: // PROJECT_PROPERTY
          return PROJECT_PROPERTY;
        case 59: // PROJECT_FORECLOSURE
          return PROJECT_FORECLOSURE;
        case 60: // ORG_NAME
          return ORG_NAME;
        case 61: // AREA_CODE
          return AREA_CODE;
        case 62: // APPLY_USER_ID
          return APPLY_USER_ID;
        case 63: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 64: // IS_REJECT
          return IS_REJECT;
        case 65: // EXAMINE_USER
          return EXAMINE_USER;
        case 66: // EXAMINE_DATE
          return EXAMINE_DATE;
        case 67: // EXAMINE_OPINION
          return EXAMINE_OPINION;
        case 68: // IS_ASSIGNED
          return IS_ASSIGNED;
        case 69: // PIDS
          return PIDS;
        case 70: // PROJECT_IDS
          return PROJECT_IDS;
        case 71: // ESTATE_LIST
          return ESTATE_LIST;
        case 72: // HOUSE_IDS
          return HOUSE_IDS;
        case 73: // FORE_AFTER_MONITOR_STATUS
          return FORE_AFTER_MONITOR_STATUS;
        case 74: // REJECT_TYPE
          return REJECT_TYPE;
        case 75: // ORIGINAL_LOAN_IDS
          return ORIGINAL_LOAN_IDS;
        case 76: // ORIGINAL_LOAN_LIST
          return ORIGINAL_LOAN_LIST;
        case 77: // USER_PIDS
          return USER_PIDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __PROJECTTYPE_ISSET_ID = 2;
  private static final int __PMUSERID_ISSET_ID = 3;
  private static final int __LOANINTERESTRECORD_ISSET_ID = 4;
  private static final int __LOANMGRRECORD_ISSET_ID = 5;
  private static final int __ISALLOWPREPAY_ISSET_ID = 6;
  private static final int __ISRETURNINTEREST_ISSET_ID = 7;
  private static final int __LOANOTHERFEE_ISSET_ID = 8;
  private static final int __REQUESTSTATUS_ISSET_ID = 9;
  private static final int __STATUS_ISSET_ID = 10;
  private static final int __CIRCULATETYPE_ISSET_ID = 11;
  private static final int __ISREJECTED_ISSET_ID = 12;
  private static final int __PRODUCTID_ISSET_ID = 13;
  private static final int __BUSINESSSOURCE_ISSET_ID = 14;
  private static final int __INNEROROUT_ISSET_ID = 15;
  private static final int __BUSINESSCATEGORY_ISSET_ID = 16;
  private static final int __ISNOTARIZATION_ISSET_ID = 17;
  private static final int __ISDELETE_ISSET_ID = 18;
  private static final int __ISCHECHAN_ISSET_ID = 19;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 20;
  private static final int __BUSINESSSOURCENO_ISSET_ID = 21;
  private static final int __COLLECTFILESTATUS_ISSET_ID = 22;
  private static final int __PROJECTSOURCE_ISSET_ID = 23;
  private static final int __ISSELLER_ISSET_ID = 24;
  private static final int __REFUNDFILESTATUS_ISSET_ID = 25;
  private static final int __CHECHANUSERID_ISSET_ID = 26;
  private static final int __ORGID_ISSET_ID = 27;
  private static final int __PLANLOANMONEY_ISSET_ID = 28;
  private static final int __LOANRATE_ISSET_ID = 29;
  private static final int __MAXLOANRATE_ISSET_ID = 30;
  private static final int __ISCLOSED_ISSET_ID = 31;
  private static final int __APPLYUSERID_ISSET_ID = 32;
  private static final int __ISNEEDHANDLE_ISSET_ID = 33;
  private static final int __ISREJECT_ISSET_ID = 34;
  private static final int __EXAMINEUSER_ISSET_ID = 35;
  private static final int __ISASSIGNED_ISSET_ID = 36;
  private static final int __FOREAFTERMONITORSTATUS_ISSET_ID = 37;
  private static final int __REJECTTYPE_ISSET_ID = 38;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("businessCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("flowCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("myType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_MAIN, new org.apache.thrift.meta_data.FieldMetaData("myMain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ALLOW_PREPAY, new org.apache.thrift.meta_data.FieldMetaData("isAllowPrepay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_RETURN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("isReturnInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CIRCULATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("circulateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURVEY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("surveyResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REJECTED, new org.apache.thrift.meta_data.FieldMetaData("isRejected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("businessContacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTS_PHONE, new org.apache.thrift.meta_data.FieldMetaData("contactsPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("businessCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NOTARIZATION, new org.apache.thrift.meta_data.FieldMetaData("isNotarization", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGERS, new org.apache.thrift.meta_data.FieldMetaData("managers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGERS_PHONE, new org.apache.thrift.meta_data.FieldMetaData("managersPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSourceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECT_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("collectFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDITOR_OPINION, new org.apache.thrift.meta_data.FieldMetaData("auditorOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SELLER, new org.apache.thrift.meta_data.FieldMetaData("isSeller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DECLARATION, new org.apache.thrift.meta_data.FieldMetaData("declaration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECHAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("chechanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("chechanUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECHAN_CAUSE, new org.apache.thrift.meta_data.FieldMetaData("chechanCause", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CUSTOMER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CUSTOMER_CARD, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("planLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("loanRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_LOAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("maxLoanRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("isClosed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_GUARANTEE, new org.apache.thrift.meta_data.FieldMetaData("projectGuarantee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee.class)));
    tmpMap.put(_Fields.PROJECT_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("projectProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.ProjectProperty.class)));
    tmpMap.put(_Fields.PROJECT_FORECLOSURE, new org.apache.thrift.meta_data.FieldMetaData("projectForeclosure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure.class)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("applyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REJECT, new org.apache.thrift.meta_data.FieldMetaData("isReject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAMINE_USER, new org.apache.thrift.meta_data.FieldMetaData("examineUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAMINE_DATE, new org.apache.thrift.meta_data.FieldMetaData("examineDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAMINE_OPINION, new org.apache.thrift.meta_data.FieldMetaData("examineOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ASSIGNED, new org.apache.thrift.meta_data.FieldMetaData("isAssigned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_IDS, new org.apache.thrift.meta_data.FieldMetaData("projectIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ESTATE_LIST, new org.apache.thrift.meta_data.FieldMetaData("estateList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate.class))));
    tmpMap.put(_Fields.HOUSE_IDS, new org.apache.thrift.meta_data.FieldMetaData("houseIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_AFTER_MONITOR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreAfterMonitorStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rejectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIGINAL_LOAN_IDS, new org.apache.thrift.meta_data.FieldMetaData("originalLoanIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_LOAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("originalLoanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan.class))));
    tmpMap.put(_Fields.USER_PIDS, new org.apache.thrift.meta_data.FieldMetaData("userPids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProject.class, metaDataMap);
  }

  public BizProject() {
  }

  public BizProject(
    int pid,
    int acctId,
    int projectType,
    String projectName,
    String projectNumber,
    int pmUserId,
    String businessCatelog,
    String businessType,
    String flowCatelog,
    String myType,
    String myMain,
    int loanInterestRecord,
    int loanMgrRecord,
    int isAllowPrepay,
    int isReturnInterest,
    int loanOtherFee,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    int status,
    int circulateType,
    String surveyResult,
    String comments,
    int isRejected,
    int productId,
    int businessSource,
    String address,
    String businessContacts,
    String contactsPhone,
    int innerOrOut,
    int businessCategory,
    int isNotarization,
    int isDelete,
    int isChechan,
    String managers,
    String managersPhone,
    int foreclosureStatus,
    int businessSourceNo,
    int collectFileStatus,
    int projectSource,
    String auditorOpinion,
    int isSeller,
    String declaration,
    int refundFileStatus,
    String chechanDate,
    int chechanUserId,
    String chechanCause,
    int orgId,
    String orgCustomerName,
    String orgCustomerPhone,
    String orgCustomerCard,
    String planLoanDate,
    double planLoanMoney,
    double loanRate,
    double maxLoanRate,
    int isClosed,
    com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee projectGuarantee,
    com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty,
    com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure,
    String orgName,
    String areaCode,
    int applyUserId,
    int isNeedHandle,
    int isReject,
    int examineUser,
    String examineDate,
    String examineOpinion,
    int isAssigned,
    String pids,
    List<String> projectIds,
    List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList,
    String houseIds,
    int foreAfterMonitorStatus,
    int rejectType,
    String originalLoanIds,
    List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> originalLoanList,
    String userPids)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.businessCatelog = businessCatelog;
    this.businessType = businessType;
    this.flowCatelog = flowCatelog;
    this.myType = myType;
    this.myMain = myMain;
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    this.isAllowPrepay = isAllowPrepay;
    setIsAllowPrepayIsSet(true);
    this.isReturnInterest = isReturnInterest;
    setIsReturnInterestIsSet(true);
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.status = status;
    setStatusIsSet(true);
    this.circulateType = circulateType;
    setCirculateTypeIsSet(true);
    this.surveyResult = surveyResult;
    this.comments = comments;
    this.isRejected = isRejected;
    setIsRejectedIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.address = address;
    this.businessContacts = businessContacts;
    this.contactsPhone = contactsPhone;
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    this.isNotarization = isNotarization;
    setIsNotarizationIsSet(true);
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.managers = managers;
    this.managersPhone = managersPhone;
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.auditorOpinion = auditorOpinion;
    this.isSeller = isSeller;
    setIsSellerIsSet(true);
    this.declaration = declaration;
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    this.chechanDate = chechanDate;
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    this.chechanCause = chechanCause;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.orgCustomerName = orgCustomerName;
    this.orgCustomerPhone = orgCustomerPhone;
    this.orgCustomerCard = orgCustomerCard;
    this.planLoanDate = planLoanDate;
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    this.loanRate = loanRate;
    setLoanRateIsSet(true);
    this.maxLoanRate = maxLoanRate;
    setMaxLoanRateIsSet(true);
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    this.projectGuarantee = projectGuarantee;
    this.projectProperty = projectProperty;
    this.projectForeclosure = projectForeclosure;
    this.orgName = orgName;
    this.areaCode = areaCode;
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.isReject = isReject;
    setIsRejectIsSet(true);
    this.examineUser = examineUser;
    setExamineUserIsSet(true);
    this.examineDate = examineDate;
    this.examineOpinion = examineOpinion;
    this.isAssigned = isAssigned;
    setIsAssignedIsSet(true);
    this.pids = pids;
    this.projectIds = projectIds;
    this.estateList = estateList;
    this.houseIds = houseIds;
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    this.rejectType = rejectType;
    setRejectTypeIsSet(true);
    this.originalLoanIds = originalLoanIds;
    this.originalLoanList = originalLoanList;
    this.userPids = userPids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProject(BizProject other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.acctId = other.acctId;
    this.projectType = other.projectType;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetBusinessCatelog()) {
      this.businessCatelog = other.businessCatelog;
    }
    if (other.isSetBusinessType()) {
      this.businessType = other.businessType;
    }
    if (other.isSetFlowCatelog()) {
      this.flowCatelog = other.flowCatelog;
    }
    if (other.isSetMyType()) {
      this.myType = other.myType;
    }
    if (other.isSetMyMain()) {
      this.myMain = other.myMain;
    }
    this.loanInterestRecord = other.loanInterestRecord;
    this.loanMgrRecord = other.loanMgrRecord;
    this.isAllowPrepay = other.isAllowPrepay;
    this.isReturnInterest = other.isReturnInterest;
    this.loanOtherFee = other.loanOtherFee;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.status = other.status;
    this.circulateType = other.circulateType;
    if (other.isSetSurveyResult()) {
      this.surveyResult = other.surveyResult;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
    this.isRejected = other.isRejected;
    this.productId = other.productId;
    this.businessSource = other.businessSource;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetBusinessContacts()) {
      this.businessContacts = other.businessContacts;
    }
    if (other.isSetContactsPhone()) {
      this.contactsPhone = other.contactsPhone;
    }
    this.innerOrOut = other.innerOrOut;
    this.businessCategory = other.businessCategory;
    this.isNotarization = other.isNotarization;
    this.isDelete = other.isDelete;
    this.isChechan = other.isChechan;
    if (other.isSetManagers()) {
      this.managers = other.managers;
    }
    if (other.isSetManagersPhone()) {
      this.managersPhone = other.managersPhone;
    }
    this.foreclosureStatus = other.foreclosureStatus;
    this.businessSourceNo = other.businessSourceNo;
    this.collectFileStatus = other.collectFileStatus;
    this.projectSource = other.projectSource;
    if (other.isSetAuditorOpinion()) {
      this.auditorOpinion = other.auditorOpinion;
    }
    this.isSeller = other.isSeller;
    if (other.isSetDeclaration()) {
      this.declaration = other.declaration;
    }
    this.refundFileStatus = other.refundFileStatus;
    if (other.isSetChechanDate()) {
      this.chechanDate = other.chechanDate;
    }
    this.chechanUserId = other.chechanUserId;
    if (other.isSetChechanCause()) {
      this.chechanCause = other.chechanCause;
    }
    this.orgId = other.orgId;
    if (other.isSetOrgCustomerName()) {
      this.orgCustomerName = other.orgCustomerName;
    }
    if (other.isSetOrgCustomerPhone()) {
      this.orgCustomerPhone = other.orgCustomerPhone;
    }
    if (other.isSetOrgCustomerCard()) {
      this.orgCustomerCard = other.orgCustomerCard;
    }
    if (other.isSetPlanLoanDate()) {
      this.planLoanDate = other.planLoanDate;
    }
    this.planLoanMoney = other.planLoanMoney;
    this.loanRate = other.loanRate;
    this.maxLoanRate = other.maxLoanRate;
    this.isClosed = other.isClosed;
    if (other.isSetProjectGuarantee()) {
      this.projectGuarantee = new com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee(other.projectGuarantee);
    }
    if (other.isSetProjectProperty()) {
      this.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty(other.projectProperty);
    }
    if (other.isSetProjectForeclosure()) {
      this.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure(other.projectForeclosure);
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetAreaCode()) {
      this.areaCode = other.areaCode;
    }
    this.applyUserId = other.applyUserId;
    this.isNeedHandle = other.isNeedHandle;
    this.isReject = other.isReject;
    this.examineUser = other.examineUser;
    if (other.isSetExamineDate()) {
      this.examineDate = other.examineDate;
    }
    if (other.isSetExamineOpinion()) {
      this.examineOpinion = other.examineOpinion;
    }
    this.isAssigned = other.isAssigned;
    if (other.isSetPids()) {
      this.pids = other.pids;
    }
    if (other.isSetProjectIds()) {
      List<String> __this__projectIds = new ArrayList<String>(other.projectIds);
      this.projectIds = __this__projectIds;
    }
    if (other.isSetEstateList()) {
      List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> __this__estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(other.estateList.size());
      for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate other_element : other.estateList) {
        __this__estateList.add(new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate(other_element));
      }
      this.estateList = __this__estateList;
    }
    if (other.isSetHouseIds()) {
      this.houseIds = other.houseIds;
    }
    this.foreAfterMonitorStatus = other.foreAfterMonitorStatus;
    this.rejectType = other.rejectType;
    if (other.isSetOriginalLoanIds()) {
      this.originalLoanIds = other.originalLoanIds;
    }
    if (other.isSetOriginalLoanList()) {
      List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> __this__originalLoanList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan>(other.originalLoanList.size());
      for (com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan other_element : other.originalLoanList) {
        __this__originalLoanList.add(new com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan(other_element));
      }
      this.originalLoanList = __this__originalLoanList;
    }
    if (other.isSetUserPids()) {
      this.userPids = other.userPids;
    }
  }

  public BizProject deepCopy() {
    return new BizProject(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    this.projectName = null;
    this.projectNumber = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.businessCatelog = null;
    this.businessType = null;
    this.flowCatelog = null;
    this.myType = null;
    this.myMain = null;
    setLoanInterestRecordIsSet(false);
    this.loanInterestRecord = 0;
    setLoanMgrRecordIsSet(false);
    this.loanMgrRecord = 0;
    setIsAllowPrepayIsSet(false);
    this.isAllowPrepay = 0;
    setIsReturnInterestIsSet(false);
    this.isReturnInterest = 0;
    setLoanOtherFeeIsSet(false);
    this.loanOtherFee = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setCirculateTypeIsSet(false);
    this.circulateType = 0;
    this.surveyResult = null;
    this.comments = null;
    setIsRejectedIsSet(false);
    this.isRejected = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.address = null;
    this.businessContacts = null;
    this.contactsPhone = null;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    setBusinessCategoryIsSet(false);
    this.businessCategory = 0;
    setIsNotarizationIsSet(false);
    this.isNotarization = 0;
    setIsDeleteIsSet(false);
    this.isDelete = 0;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    this.managers = null;
    this.managersPhone = null;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setBusinessSourceNoIsSet(false);
    this.businessSourceNo = 0;
    setCollectFileStatusIsSet(false);
    this.collectFileStatus = 0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.auditorOpinion = null;
    setIsSellerIsSet(false);
    this.isSeller = 0;
    this.declaration = null;
    setRefundFileStatusIsSet(false);
    this.refundFileStatus = 0;
    this.chechanDate = null;
    setChechanUserIdIsSet(false);
    this.chechanUserId = 0;
    this.chechanCause = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.orgCustomerName = null;
    this.orgCustomerPhone = null;
    this.orgCustomerCard = null;
    this.planLoanDate = null;
    setPlanLoanMoneyIsSet(false);
    this.planLoanMoney = 0.0;
    setLoanRateIsSet(false);
    this.loanRate = 0.0;
    setMaxLoanRateIsSet(false);
    this.maxLoanRate = 0.0;
    setIsClosedIsSet(false);
    this.isClosed = 0;
    this.projectGuarantee = null;
    this.projectProperty = null;
    this.projectForeclosure = null;
    this.orgName = null;
    this.areaCode = null;
    setApplyUserIdIsSet(false);
    this.applyUserId = 0;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    setIsRejectIsSet(false);
    this.isReject = 0;
    setExamineUserIsSet(false);
    this.examineUser = 0;
    this.examineDate = null;
    this.examineOpinion = null;
    setIsAssignedIsSet(false);
    this.isAssigned = 0;
    this.pids = null;
    this.projectIds = null;
    this.estateList = null;
    this.houseIds = null;
    setForeAfterMonitorStatusIsSet(false);
    this.foreAfterMonitorStatus = 0;
    setRejectTypeIsSet(false);
    this.rejectType = 0;
    this.originalLoanIds = null;
    this.originalLoanList = null;
    this.userPids = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProject setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public BizProject setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public BizProject setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public BizProject setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public BizProject setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public BizProject setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getBusinessCatelog() {
    return this.businessCatelog;
  }

  public BizProject setBusinessCatelog(String businessCatelog) {
    this.businessCatelog = businessCatelog;
    return this;
  }

  public void unsetBusinessCatelog() {
    this.businessCatelog = null;
  }

  /** Returns true if field businessCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelog() {
    return this.businessCatelog != null;
  }

  public void setBusinessCatelogIsSet(boolean value) {
    if (!value) {
      this.businessCatelog = null;
    }
  }

  public String getBusinessType() {
    return this.businessType;
  }

  public BizProject setBusinessType(String businessType) {
    this.businessType = businessType;
    return this;
  }

  public void unsetBusinessType() {
    this.businessType = null;
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return this.businessType != null;
  }

  public void setBusinessTypeIsSet(boolean value) {
    if (!value) {
      this.businessType = null;
    }
  }

  public String getFlowCatelog() {
    return this.flowCatelog;
  }

  public BizProject setFlowCatelog(String flowCatelog) {
    this.flowCatelog = flowCatelog;
    return this;
  }

  public void unsetFlowCatelog() {
    this.flowCatelog = null;
  }

  /** Returns true if field flowCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowCatelog() {
    return this.flowCatelog != null;
  }

  public void setFlowCatelogIsSet(boolean value) {
    if (!value) {
      this.flowCatelog = null;
    }
  }

  public String getMyType() {
    return this.myType;
  }

  public BizProject setMyType(String myType) {
    this.myType = myType;
    return this;
  }

  public void unsetMyType() {
    this.myType = null;
  }

  /** Returns true if field myType is set (has been assigned a value) and false otherwise */
  public boolean isSetMyType() {
    return this.myType != null;
  }

  public void setMyTypeIsSet(boolean value) {
    if (!value) {
      this.myType = null;
    }
  }

  public String getMyMain() {
    return this.myMain;
  }

  public BizProject setMyMain(String myMain) {
    this.myMain = myMain;
    return this;
  }

  public void unsetMyMain() {
    this.myMain = null;
  }

  /** Returns true if field myMain is set (has been assigned a value) and false otherwise */
  public boolean isSetMyMain() {
    return this.myMain != null;
  }

  public void setMyMainIsSet(boolean value) {
    if (!value) {
      this.myMain = null;
    }
  }

  public int getLoanInterestRecord() {
    return this.loanInterestRecord;
  }

  public BizProject setLoanInterestRecord(int loanInterestRecord) {
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    return this;
  }

  public void unsetLoanInterestRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  /** Returns true if field loanInterestRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  public void setLoanInterestRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID, value);
  }

  public int getLoanMgrRecord() {
    return this.loanMgrRecord;
  }

  public BizProject setLoanMgrRecord(int loanMgrRecord) {
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    return this;
  }

  public void unsetLoanMgrRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  /** Returns true if field loanMgrRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  public void setLoanMgrRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID, value);
  }

  public int getIsAllowPrepay() {
    return this.isAllowPrepay;
  }

  public BizProject setIsAllowPrepay(int isAllowPrepay) {
    this.isAllowPrepay = isAllowPrepay;
    setIsAllowPrepayIsSet(true);
    return this;
  }

  public void unsetIsAllowPrepay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALLOWPREPAY_ISSET_ID);
  }

  /** Returns true if field isAllowPrepay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllowPrepay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALLOWPREPAY_ISSET_ID);
  }

  public void setIsAllowPrepayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALLOWPREPAY_ISSET_ID, value);
  }

  public int getIsReturnInterest() {
    return this.isReturnInterest;
  }

  public BizProject setIsReturnInterest(int isReturnInterest) {
    this.isReturnInterest = isReturnInterest;
    setIsReturnInterestIsSet(true);
    return this;
  }

  public void unsetIsReturnInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRETURNINTEREST_ISSET_ID);
  }

  /** Returns true if field isReturnInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReturnInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRETURNINTEREST_ISSET_ID);
  }

  public void setIsReturnInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRETURNINTEREST_ISSET_ID, value);
  }

  public int getLoanOtherFee() {
    return this.loanOtherFee;
  }

  public BizProject setLoanOtherFee(int loanOtherFee) {
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field loanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  public void setLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public BizProject setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public BizProject setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public BizProject setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProject setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCirculateType() {
    return this.circulateType;
  }

  public BizProject setCirculateType(int circulateType) {
    this.circulateType = circulateType;
    setCirculateTypeIsSet(true);
    return this;
  }

  public void unsetCirculateType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CIRCULATETYPE_ISSET_ID);
  }

  /** Returns true if field circulateType is set (has been assigned a value) and false otherwise */
  public boolean isSetCirculateType() {
    return EncodingUtils.testBit(__isset_bitfield, __CIRCULATETYPE_ISSET_ID);
  }

  public void setCirculateTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CIRCULATETYPE_ISSET_ID, value);
  }

  public String getSurveyResult() {
    return this.surveyResult;
  }

  public BizProject setSurveyResult(String surveyResult) {
    this.surveyResult = surveyResult;
    return this;
  }

  public void unsetSurveyResult() {
    this.surveyResult = null;
  }

  /** Returns true if field surveyResult is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyResult() {
    return this.surveyResult != null;
  }

  public void setSurveyResultIsSet(boolean value) {
    if (!value) {
      this.surveyResult = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public BizProject setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public int getIsRejected() {
    return this.isRejected;
  }

  public BizProject setIsRejected(int isRejected) {
    this.isRejected = isRejected;
    setIsRejectedIsSet(true);
    return this;
  }

  public void unsetIsRejected() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREJECTED_ISSET_ID);
  }

  /** Returns true if field isRejected is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRejected() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREJECTED_ISSET_ID);
  }

  public void setIsRejectedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREJECTED_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public BizProject setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public BizProject setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public BizProject setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getBusinessContacts() {
    return this.businessContacts;
  }

  public BizProject setBusinessContacts(String businessContacts) {
    this.businessContacts = businessContacts;
    return this;
  }

  public void unsetBusinessContacts() {
    this.businessContacts = null;
  }

  /** Returns true if field businessContacts is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessContacts() {
    return this.businessContacts != null;
  }

  public void setBusinessContactsIsSet(boolean value) {
    if (!value) {
      this.businessContacts = null;
    }
  }

  public String getContactsPhone() {
    return this.contactsPhone;
  }

  public BizProject setContactsPhone(String contactsPhone) {
    this.contactsPhone = contactsPhone;
    return this;
  }

  public void unsetContactsPhone() {
    this.contactsPhone = null;
  }

  /** Returns true if field contactsPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetContactsPhone() {
    return this.contactsPhone != null;
  }

  public void setContactsPhoneIsSet(boolean value) {
    if (!value) {
      this.contactsPhone = null;
    }
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public BizProject setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return EncodingUtils.testBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INNEROROUT_ISSET_ID, value);
  }

  public int getBusinessCategory() {
    return this.businessCategory;
  }

  public BizProject setBusinessCategory(int businessCategory) {
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    return this;
  }

  public void unsetBusinessCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  /** Returns true if field businessCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  public void setBusinessCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID, value);
  }

  public int getIsNotarization() {
    return this.isNotarization;
  }

  public BizProject setIsNotarization(int isNotarization) {
    this.isNotarization = isNotarization;
    setIsNotarizationIsSet(true);
    return this;
  }

  public void unsetIsNotarization() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTARIZATION_ISSET_ID);
  }

  /** Returns true if field isNotarization is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotarization() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTARIZATION_ISSET_ID);
  }

  public void setIsNotarizationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTARIZATION_ISSET_ID, value);
  }

  public int getIsDelete() {
    return this.isDelete;
  }

  public BizProject setIsDelete(int isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public BizProject setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public String getManagers() {
    return this.managers;
  }

  public BizProject setManagers(String managers) {
    this.managers = managers;
    return this;
  }

  public void unsetManagers() {
    this.managers = null;
  }

  /** Returns true if field managers is set (has been assigned a value) and false otherwise */
  public boolean isSetManagers() {
    return this.managers != null;
  }

  public void setManagersIsSet(boolean value) {
    if (!value) {
      this.managers = null;
    }
  }

  public String getManagersPhone() {
    return this.managersPhone;
  }

  public BizProject setManagersPhone(String managersPhone) {
    this.managersPhone = managersPhone;
    return this;
  }

  public void unsetManagersPhone() {
    this.managersPhone = null;
  }

  /** Returns true if field managersPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetManagersPhone() {
    return this.managersPhone != null;
  }

  public void setManagersPhoneIsSet(boolean value) {
    if (!value) {
      this.managersPhone = null;
    }
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public BizProject setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getBusinessSourceNo() {
    return this.businessSourceNo;
  }

  public BizProject setBusinessSourceNo(int businessSourceNo) {
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    return this;
  }

  public void unsetBusinessSourceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  /** Returns true if field businessSourceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  public void setBusinessSourceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID, value);
  }

  public int getCollectFileStatus() {
    return this.collectFileStatus;
  }

  public BizProject setCollectFileStatus(int collectFileStatus) {
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    return this;
  }

  public void unsetCollectFileStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID);
  }

  /** Returns true if field collectFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID);
  }

  public void setCollectFileStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public BizProject setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public String getAuditorOpinion() {
    return this.auditorOpinion;
  }

  public BizProject setAuditorOpinion(String auditorOpinion) {
    this.auditorOpinion = auditorOpinion;
    return this;
  }

  public void unsetAuditorOpinion() {
    this.auditorOpinion = null;
  }

  /** Returns true if field auditorOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditorOpinion() {
    return this.auditorOpinion != null;
  }

  public void setAuditorOpinionIsSet(boolean value) {
    if (!value) {
      this.auditorOpinion = null;
    }
  }

  public int getIsSeller() {
    return this.isSeller;
  }

  public BizProject setIsSeller(int isSeller) {
    this.isSeller = isSeller;
    setIsSellerIsSet(true);
    return this;
  }

  public void unsetIsSeller() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELLER_ISSET_ID);
  }

  /** Returns true if field isSeller is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeller() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSELLER_ISSET_ID);
  }

  public void setIsSellerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELLER_ISSET_ID, value);
  }

  public String getDeclaration() {
    return this.declaration;
  }

  public BizProject setDeclaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

  public void unsetDeclaration() {
    this.declaration = null;
  }

  /** Returns true if field declaration is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaration() {
    return this.declaration != null;
  }

  public void setDeclarationIsSet(boolean value) {
    if (!value) {
      this.declaration = null;
    }
  }

  public int getRefundFileStatus() {
    return this.refundFileStatus;
  }

  public BizProject setRefundFileStatus(int refundFileStatus) {
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    return this;
  }

  public void unsetRefundFileStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID);
  }

  /** Returns true if field refundFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFileStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID);
  }

  public void setRefundFileStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID, value);
  }

  public String getChechanDate() {
    return this.chechanDate;
  }

  public BizProject setChechanDate(String chechanDate) {
    this.chechanDate = chechanDate;
    return this;
  }

  public void unsetChechanDate() {
    this.chechanDate = null;
  }

  /** Returns true if field chechanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanDate() {
    return this.chechanDate != null;
  }

  public void setChechanDateIsSet(boolean value) {
    if (!value) {
      this.chechanDate = null;
    }
  }

  public int getChechanUserId() {
    return this.chechanUserId;
  }

  public BizProject setChechanUserId(int chechanUserId) {
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    return this;
  }

  public void unsetChechanUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID);
  }

  /** Returns true if field chechanUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID);
  }

  public void setChechanUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID, value);
  }

  public String getChechanCause() {
    return this.chechanCause;
  }

  public BizProject setChechanCause(String chechanCause) {
    this.chechanCause = chechanCause;
    return this;
  }

  public void unsetChechanCause() {
    this.chechanCause = null;
  }

  /** Returns true if field chechanCause is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanCause() {
    return this.chechanCause != null;
  }

  public void setChechanCauseIsSet(boolean value) {
    if (!value) {
      this.chechanCause = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public BizProject setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public String getOrgCustomerName() {
    return this.orgCustomerName;
  }

  public BizProject setOrgCustomerName(String orgCustomerName) {
    this.orgCustomerName = orgCustomerName;
    return this;
  }

  public void unsetOrgCustomerName() {
    this.orgCustomerName = null;
  }

  /** Returns true if field orgCustomerName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerName() {
    return this.orgCustomerName != null;
  }

  public void setOrgCustomerNameIsSet(boolean value) {
    if (!value) {
      this.orgCustomerName = null;
    }
  }

  public String getOrgCustomerPhone() {
    return this.orgCustomerPhone;
  }

  public BizProject setOrgCustomerPhone(String orgCustomerPhone) {
    this.orgCustomerPhone = orgCustomerPhone;
    return this;
  }

  public void unsetOrgCustomerPhone() {
    this.orgCustomerPhone = null;
  }

  /** Returns true if field orgCustomerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerPhone() {
    return this.orgCustomerPhone != null;
  }

  public void setOrgCustomerPhoneIsSet(boolean value) {
    if (!value) {
      this.orgCustomerPhone = null;
    }
  }

  public String getOrgCustomerCard() {
    return this.orgCustomerCard;
  }

  public BizProject setOrgCustomerCard(String orgCustomerCard) {
    this.orgCustomerCard = orgCustomerCard;
    return this;
  }

  public void unsetOrgCustomerCard() {
    this.orgCustomerCard = null;
  }

  /** Returns true if field orgCustomerCard is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerCard() {
    return this.orgCustomerCard != null;
  }

  public void setOrgCustomerCardIsSet(boolean value) {
    if (!value) {
      this.orgCustomerCard = null;
    }
  }

  public String getPlanLoanDate() {
    return this.planLoanDate;
  }

  public BizProject setPlanLoanDate(String planLoanDate) {
    this.planLoanDate = planLoanDate;
    return this;
  }

  public void unsetPlanLoanDate() {
    this.planLoanDate = null;
  }

  /** Returns true if field planLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanDate() {
    return this.planLoanDate != null;
  }

  public void setPlanLoanDateIsSet(boolean value) {
    if (!value) {
      this.planLoanDate = null;
    }
  }

  public double getPlanLoanMoney() {
    return this.planLoanMoney;
  }

  public BizProject setPlanLoanMoney(double planLoanMoney) {
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    return this;
  }

  public void unsetPlanLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID);
  }

  /** Returns true if field planLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID);
  }

  public void setPlanLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANLOANMONEY_ISSET_ID, value);
  }

  public double getLoanRate() {
    return this.loanRate;
  }

  public BizProject setLoanRate(double loanRate) {
    this.loanRate = loanRate;
    setLoanRateIsSet(true);
    return this;
  }

  public void unsetLoanRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANRATE_ISSET_ID);
  }

  /** Returns true if field loanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRate() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANRATE_ISSET_ID);
  }

  public void setLoanRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANRATE_ISSET_ID, value);
  }

  public double getMaxLoanRate() {
    return this.maxLoanRate;
  }

  public BizProject setMaxLoanRate(double maxLoanRate) {
    this.maxLoanRate = maxLoanRate;
    setMaxLoanRateIsSet(true);
    return this;
  }

  public void unsetMaxLoanRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLOANRATE_ISSET_ID);
  }

  /** Returns true if field maxLoanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLoanRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLOANRATE_ISSET_ID);
  }

  public void setMaxLoanRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLOANRATE_ISSET_ID, value);
  }

  public int getIsClosed() {
    return this.isClosed;
  }

  public BizProject setIsClosed(int isClosed) {
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    return this;
  }

  public void unsetIsClosed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCLOSED_ISSET_ID);
  }

  /** Returns true if field isClosed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsClosed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCLOSED_ISSET_ID);
  }

  public void setIsClosedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCLOSED_ISSET_ID, value);
  }

  public com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee getProjectGuarantee() {
    return this.projectGuarantee;
  }

  public BizProject setProjectGuarantee(com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee projectGuarantee) {
    this.projectGuarantee = projectGuarantee;
    return this;
  }

  public void unsetProjectGuarantee() {
    this.projectGuarantee = null;
  }

  /** Returns true if field projectGuarantee is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectGuarantee() {
    return this.projectGuarantee != null;
  }

  public void setProjectGuaranteeIsSet(boolean value) {
    if (!value) {
      this.projectGuarantee = null;
    }
  }

  public com.xlkfinance.bms.rpc.beforeloan.ProjectProperty getProjectProperty() {
    return this.projectProperty;
  }

  public BizProject setProjectProperty(com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty) {
    this.projectProperty = projectProperty;
    return this;
  }

  public void unsetProjectProperty() {
    this.projectProperty = null;
  }

  /** Returns true if field projectProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectProperty() {
    return this.projectProperty != null;
  }

  public void setProjectPropertyIsSet(boolean value) {
    if (!value) {
      this.projectProperty = null;
    }
  }

  public com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure getProjectForeclosure() {
    return this.projectForeclosure;
  }

  public BizProject setProjectForeclosure(com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure) {
    this.projectForeclosure = projectForeclosure;
    return this;
  }

  public void unsetProjectForeclosure() {
    this.projectForeclosure = null;
  }

  /** Returns true if field projectForeclosure is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectForeclosure() {
    return this.projectForeclosure != null;
  }

  public void setProjectForeclosureIsSet(boolean value) {
    if (!value) {
      this.projectForeclosure = null;
    }
  }

  public String getOrgName() {
    return this.orgName;
  }

  public BizProject setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getAreaCode() {
    return this.areaCode;
  }

  public BizProject setAreaCode(String areaCode) {
    this.areaCode = areaCode;
    return this;
  }

  public void unsetAreaCode() {
    this.areaCode = null;
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return this.areaCode != null;
  }

  public void setAreaCodeIsSet(boolean value) {
    if (!value) {
      this.areaCode = null;
    }
  }

  public int getApplyUserId() {
    return this.applyUserId;
  }

  public BizProject setApplyUserId(int applyUserId) {
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    return this;
  }

  public void unsetApplyUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  /** Returns true if field applyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  public void setApplyUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYUSERID_ISSET_ID, value);
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public BizProject setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public int getIsReject() {
    return this.isReject;
  }

  public BizProject setIsReject(int isReject) {
    this.isReject = isReject;
    setIsRejectIsSet(true);
    return this;
  }

  public void unsetIsReject() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREJECT_ISSET_ID);
  }

  /** Returns true if field isReject is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReject() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREJECT_ISSET_ID);
  }

  public void setIsRejectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREJECT_ISSET_ID, value);
  }

  public int getExamineUser() {
    return this.examineUser;
  }

  public BizProject setExamineUser(int examineUser) {
    this.examineUser = examineUser;
    setExamineUserIsSet(true);
    return this;
  }

  public void unsetExamineUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID);
  }

  /** Returns true if field examineUser is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineUser() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID);
  }

  public void setExamineUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMINEUSER_ISSET_ID, value);
  }

  public String getExamineDate() {
    return this.examineDate;
  }

  public BizProject setExamineDate(String examineDate) {
    this.examineDate = examineDate;
    return this;
  }

  public void unsetExamineDate() {
    this.examineDate = null;
  }

  /** Returns true if field examineDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineDate() {
    return this.examineDate != null;
  }

  public void setExamineDateIsSet(boolean value) {
    if (!value) {
      this.examineDate = null;
    }
  }

  public String getExamineOpinion() {
    return this.examineOpinion;
  }

  public BizProject setExamineOpinion(String examineOpinion) {
    this.examineOpinion = examineOpinion;
    return this;
  }

  public void unsetExamineOpinion() {
    this.examineOpinion = null;
  }

  /** Returns true if field examineOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetExamineOpinion() {
    return this.examineOpinion != null;
  }

  public void setExamineOpinionIsSet(boolean value) {
    if (!value) {
      this.examineOpinion = null;
    }
  }

  public int getIsAssigned() {
    return this.isAssigned;
  }

  public BizProject setIsAssigned(int isAssigned) {
    this.isAssigned = isAssigned;
    setIsAssignedIsSet(true);
    return this;
  }

  public void unsetIsAssigned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISASSIGNED_ISSET_ID);
  }

  /** Returns true if field isAssigned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAssigned() {
    return EncodingUtils.testBit(__isset_bitfield, __ISASSIGNED_ISSET_ID);
  }

  public void setIsAssignedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISASSIGNED_ISSET_ID, value);
  }

  public String getPids() {
    return this.pids;
  }

  public BizProject setPids(String pids) {
    this.pids = pids;
    return this;
  }

  public void unsetPids() {
    this.pids = null;
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return this.pids != null;
  }

  public void setPidsIsSet(boolean value) {
    if (!value) {
      this.pids = null;
    }
  }

  public int getProjectIdsSize() {
    return (this.projectIds == null) ? 0 : this.projectIds.size();
  }

  public java.util.Iterator<String> getProjectIdsIterator() {
    return (this.projectIds == null) ? null : this.projectIds.iterator();
  }

  public void addToProjectIds(String elem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<String>();
    }
    this.projectIds.add(elem);
  }

  public List<String> getProjectIds() {
    return this.projectIds;
  }

  public BizProject setProjectIds(List<String> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public void unsetProjectIds() {
    this.projectIds = null;
  }

  /** Returns true if field projectIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectIds() {
    return this.projectIds != null;
  }

  public void setProjectIdsIsSet(boolean value) {
    if (!value) {
      this.projectIds = null;
    }
  }

  public int getEstateListSize() {
    return (this.estateList == null) ? 0 : this.estateList.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> getEstateListIterator() {
    return (this.estateList == null) ? null : this.estateList.iterator();
  }

  public void addToEstateList(com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate elem) {
    if (this.estateList == null) {
      this.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>();
    }
    this.estateList.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> getEstateList() {
    return this.estateList;
  }

  public BizProject setEstateList(List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList) {
    this.estateList = estateList;
    return this;
  }

  public void unsetEstateList() {
    this.estateList = null;
  }

  /** Returns true if field estateList is set (has been assigned a value) and false otherwise */
  public boolean isSetEstateList() {
    return this.estateList != null;
  }

  public void setEstateListIsSet(boolean value) {
    if (!value) {
      this.estateList = null;
    }
  }

  public String getHouseIds() {
    return this.houseIds;
  }

  public BizProject setHouseIds(String houseIds) {
    this.houseIds = houseIds;
    return this;
  }

  public void unsetHouseIds() {
    this.houseIds = null;
  }

  /** Returns true if field houseIds is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseIds() {
    return this.houseIds != null;
  }

  public void setHouseIdsIsSet(boolean value) {
    if (!value) {
      this.houseIds = null;
    }
  }

  public int getForeAfterMonitorStatus() {
    return this.foreAfterMonitorStatus;
  }

  public BizProject setForeAfterMonitorStatus(int foreAfterMonitorStatus) {
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    return this;
  }

  public void unsetForeAfterMonitorStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  /** Returns true if field foreAfterMonitorStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAfterMonitorStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  public void setForeAfterMonitorStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID, value);
  }

  public int getRejectType() {
    return this.rejectType;
  }

  public BizProject setRejectType(int rejectType) {
    this.rejectType = rejectType;
    setRejectTypeIsSet(true);
    return this;
  }

  public void unsetRejectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REJECTTYPE_ISSET_ID);
  }

  /** Returns true if field rejectType is set (has been assigned a value) and false otherwise */
  public boolean isSetRejectType() {
    return EncodingUtils.testBit(__isset_bitfield, __REJECTTYPE_ISSET_ID);
  }

  public void setRejectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REJECTTYPE_ISSET_ID, value);
  }

  public String getOriginalLoanIds() {
    return this.originalLoanIds;
  }

  public BizProject setOriginalLoanIds(String originalLoanIds) {
    this.originalLoanIds = originalLoanIds;
    return this;
  }

  public void unsetOriginalLoanIds() {
    this.originalLoanIds = null;
  }

  /** Returns true if field originalLoanIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalLoanIds() {
    return this.originalLoanIds != null;
  }

  public void setOriginalLoanIdsIsSet(boolean value) {
    if (!value) {
      this.originalLoanIds = null;
    }
  }

  public int getOriginalLoanListSize() {
    return (this.originalLoanList == null) ? 0 : this.originalLoanList.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> getOriginalLoanListIterator() {
    return (this.originalLoanList == null) ? null : this.originalLoanList.iterator();
  }

  public void addToOriginalLoanList(com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan elem) {
    if (this.originalLoanList == null) {
      this.originalLoanList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan>();
    }
    this.originalLoanList.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> getOriginalLoanList() {
    return this.originalLoanList;
  }

  public BizProject setOriginalLoanList(List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan> originalLoanList) {
    this.originalLoanList = originalLoanList;
    return this;
  }

  public void unsetOriginalLoanList() {
    this.originalLoanList = null;
  }

  /** Returns true if field originalLoanList is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalLoanList() {
    return this.originalLoanList != null;
  }

  public void setOriginalLoanListIsSet(boolean value) {
    if (!value) {
      this.originalLoanList = null;
    }
  }

  public String getUserPids() {
    return this.userPids;
  }

  public BizProject setUserPids(String userPids) {
    this.userPids = userPids;
    return this;
  }

  public void unsetUserPids() {
    this.userPids = null;
  }

  /** Returns true if field userPids is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPids() {
    return this.userPids != null;
  }

  public void setUserPidsIsSet(boolean value) {
    if (!value) {
      this.userPids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case BUSINESS_CATELOG:
      if (value == null) {
        unsetBusinessCatelog();
      } else {
        setBusinessCatelog((String)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((String)value);
      }
      break;

    case FLOW_CATELOG:
      if (value == null) {
        unsetFlowCatelog();
      } else {
        setFlowCatelog((String)value);
      }
      break;

    case MY_TYPE:
      if (value == null) {
        unsetMyType();
      } else {
        setMyType((String)value);
      }
      break;

    case MY_MAIN:
      if (value == null) {
        unsetMyMain();
      } else {
        setMyMain((String)value);
      }
      break;

    case LOAN_INTEREST_RECORD:
      if (value == null) {
        unsetLoanInterestRecord();
      } else {
        setLoanInterestRecord((Integer)value);
      }
      break;

    case LOAN_MGR_RECORD:
      if (value == null) {
        unsetLoanMgrRecord();
      } else {
        setLoanMgrRecord((Integer)value);
      }
      break;

    case IS_ALLOW_PREPAY:
      if (value == null) {
        unsetIsAllowPrepay();
      } else {
        setIsAllowPrepay((Integer)value);
      }
      break;

    case IS_RETURN_INTEREST:
      if (value == null) {
        unsetIsReturnInterest();
      } else {
        setIsReturnInterest((Integer)value);
      }
      break;

    case LOAN_OTHER_FEE:
      if (value == null) {
        unsetLoanOtherFee();
      } else {
        setLoanOtherFee((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CIRCULATE_TYPE:
      if (value == null) {
        unsetCirculateType();
      } else {
        setCirculateType((Integer)value);
      }
      break;

    case SURVEY_RESULT:
      if (value == null) {
        unsetSurveyResult();
      } else {
        setSurveyResult((String)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    case IS_REJECTED:
      if (value == null) {
        unsetIsRejected();
      } else {
        setIsRejected((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case BUSINESS_CONTACTS:
      if (value == null) {
        unsetBusinessContacts();
      } else {
        setBusinessContacts((String)value);
      }
      break;

    case CONTACTS_PHONE:
      if (value == null) {
        unsetContactsPhone();
      } else {
        setContactsPhone((String)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case BUSINESS_CATEGORY:
      if (value == null) {
        unsetBusinessCategory();
      } else {
        setBusinessCategory((Integer)value);
      }
      break;

    case IS_NOTARIZATION:
      if (value == null) {
        unsetIsNotarization();
      } else {
        setIsNotarization((Integer)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Integer)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case MANAGERS:
      if (value == null) {
        unsetManagers();
      } else {
        setManagers((String)value);
      }
      break;

    case MANAGERS_PHONE:
      if (value == null) {
        unsetManagersPhone();
      } else {
        setManagersPhone((String)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case BUSINESS_SOURCE_NO:
      if (value == null) {
        unsetBusinessSourceNo();
      } else {
        setBusinessSourceNo((Integer)value);
      }
      break;

    case COLLECT_FILE_STATUS:
      if (value == null) {
        unsetCollectFileStatus();
      } else {
        setCollectFileStatus((Integer)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case AUDITOR_OPINION:
      if (value == null) {
        unsetAuditorOpinion();
      } else {
        setAuditorOpinion((String)value);
      }
      break;

    case IS_SELLER:
      if (value == null) {
        unsetIsSeller();
      } else {
        setIsSeller((Integer)value);
      }
      break;

    case DECLARATION:
      if (value == null) {
        unsetDeclaration();
      } else {
        setDeclaration((String)value);
      }
      break;

    case REFUND_FILE_STATUS:
      if (value == null) {
        unsetRefundFileStatus();
      } else {
        setRefundFileStatus((Integer)value);
      }
      break;

    case CHECHAN_DATE:
      if (value == null) {
        unsetChechanDate();
      } else {
        setChechanDate((String)value);
      }
      break;

    case CHECHAN_USER_ID:
      if (value == null) {
        unsetChechanUserId();
      } else {
        setChechanUserId((Integer)value);
      }
      break;

    case CHECHAN_CAUSE:
      if (value == null) {
        unsetChechanCause();
      } else {
        setChechanCause((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case ORG_CUSTOMER_NAME:
      if (value == null) {
        unsetOrgCustomerName();
      } else {
        setOrgCustomerName((String)value);
      }
      break;

    case ORG_CUSTOMER_PHONE:
      if (value == null) {
        unsetOrgCustomerPhone();
      } else {
        setOrgCustomerPhone((String)value);
      }
      break;

    case ORG_CUSTOMER_CARD:
      if (value == null) {
        unsetOrgCustomerCard();
      } else {
        setOrgCustomerCard((String)value);
      }
      break;

    case PLAN_LOAN_DATE:
      if (value == null) {
        unsetPlanLoanDate();
      } else {
        setPlanLoanDate((String)value);
      }
      break;

    case PLAN_LOAN_MONEY:
      if (value == null) {
        unsetPlanLoanMoney();
      } else {
        setPlanLoanMoney((Double)value);
      }
      break;

    case LOAN_RATE:
      if (value == null) {
        unsetLoanRate();
      } else {
        setLoanRate((Double)value);
      }
      break;

    case MAX_LOAN_RATE:
      if (value == null) {
        unsetMaxLoanRate();
      } else {
        setMaxLoanRate((Double)value);
      }
      break;

    case IS_CLOSED:
      if (value == null) {
        unsetIsClosed();
      } else {
        setIsClosed((Integer)value);
      }
      break;

    case PROJECT_GUARANTEE:
      if (value == null) {
        unsetProjectGuarantee();
      } else {
        setProjectGuarantee((com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee)value);
      }
      break;

    case PROJECT_PROPERTY:
      if (value == null) {
        unsetProjectProperty();
      } else {
        setProjectProperty((com.xlkfinance.bms.rpc.beforeloan.ProjectProperty)value);
      }
      break;

    case PROJECT_FORECLOSURE:
      if (value == null) {
        unsetProjectForeclosure();
      } else {
        setProjectForeclosure((com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((String)value);
      }
      break;

    case APPLY_USER_ID:
      if (value == null) {
        unsetApplyUserId();
      } else {
        setApplyUserId((Integer)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case IS_REJECT:
      if (value == null) {
        unsetIsReject();
      } else {
        setIsReject((Integer)value);
      }
      break;

    case EXAMINE_USER:
      if (value == null) {
        unsetExamineUser();
      } else {
        setExamineUser((Integer)value);
      }
      break;

    case EXAMINE_DATE:
      if (value == null) {
        unsetExamineDate();
      } else {
        setExamineDate((String)value);
      }
      break;

    case EXAMINE_OPINION:
      if (value == null) {
        unsetExamineOpinion();
      } else {
        setExamineOpinion((String)value);
      }
      break;

    case IS_ASSIGNED:
      if (value == null) {
        unsetIsAssigned();
      } else {
        setIsAssigned((Integer)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((String)value);
      }
      break;

    case PROJECT_IDS:
      if (value == null) {
        unsetProjectIds();
      } else {
        setProjectIds((List<String>)value);
      }
      break;

    case ESTATE_LIST:
      if (value == null) {
        unsetEstateList();
      } else {
        setEstateList((List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>)value);
      }
      break;

    case HOUSE_IDS:
      if (value == null) {
        unsetHouseIds();
      } else {
        setHouseIds((String)value);
      }
      break;

    case FORE_AFTER_MONITOR_STATUS:
      if (value == null) {
        unsetForeAfterMonitorStatus();
      } else {
        setForeAfterMonitorStatus((Integer)value);
      }
      break;

    case REJECT_TYPE:
      if (value == null) {
        unsetRejectType();
      } else {
        setRejectType((Integer)value);
      }
      break;

    case ORIGINAL_LOAN_IDS:
      if (value == null) {
        unsetOriginalLoanIds();
      } else {
        setOriginalLoanIds((String)value);
      }
      break;

    case ORIGINAL_LOAN_LIST:
      if (value == null) {
        unsetOriginalLoanList();
      } else {
        setOriginalLoanList((List<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan>)value);
      }
      break;

    case USER_PIDS:
      if (value == null) {
        unsetUserPids();
      } else {
        setUserPids((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case BUSINESS_CATELOG:
      return getBusinessCatelog();

    case BUSINESS_TYPE:
      return getBusinessType();

    case FLOW_CATELOG:
      return getFlowCatelog();

    case MY_TYPE:
      return getMyType();

    case MY_MAIN:
      return getMyMain();

    case LOAN_INTEREST_RECORD:
      return Integer.valueOf(getLoanInterestRecord());

    case LOAN_MGR_RECORD:
      return Integer.valueOf(getLoanMgrRecord());

    case IS_ALLOW_PREPAY:
      return Integer.valueOf(getIsAllowPrepay());

    case IS_RETURN_INTEREST:
      return Integer.valueOf(getIsReturnInterest());

    case LOAN_OTHER_FEE:
      return Integer.valueOf(getLoanOtherFee());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CIRCULATE_TYPE:
      return Integer.valueOf(getCirculateType());

    case SURVEY_RESULT:
      return getSurveyResult();

    case COMMENTS:
      return getComments();

    case IS_REJECTED:
      return Integer.valueOf(getIsRejected());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case ADDRESS:
      return getAddress();

    case BUSINESS_CONTACTS:
      return getBusinessContacts();

    case CONTACTS_PHONE:
      return getContactsPhone();

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case BUSINESS_CATEGORY:
      return Integer.valueOf(getBusinessCategory());

    case IS_NOTARIZATION:
      return Integer.valueOf(getIsNotarization());

    case IS_DELETE:
      return Integer.valueOf(getIsDelete());

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case MANAGERS:
      return getManagers();

    case MANAGERS_PHONE:
      return getManagersPhone();

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case BUSINESS_SOURCE_NO:
      return Integer.valueOf(getBusinessSourceNo());

    case COLLECT_FILE_STATUS:
      return Integer.valueOf(getCollectFileStatus());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case AUDITOR_OPINION:
      return getAuditorOpinion();

    case IS_SELLER:
      return Integer.valueOf(getIsSeller());

    case DECLARATION:
      return getDeclaration();

    case REFUND_FILE_STATUS:
      return Integer.valueOf(getRefundFileStatus());

    case CHECHAN_DATE:
      return getChechanDate();

    case CHECHAN_USER_ID:
      return Integer.valueOf(getChechanUserId());

    case CHECHAN_CAUSE:
      return getChechanCause();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case ORG_CUSTOMER_NAME:
      return getOrgCustomerName();

    case ORG_CUSTOMER_PHONE:
      return getOrgCustomerPhone();

    case ORG_CUSTOMER_CARD:
      return getOrgCustomerCard();

    case PLAN_LOAN_DATE:
      return getPlanLoanDate();

    case PLAN_LOAN_MONEY:
      return Double.valueOf(getPlanLoanMoney());

    case LOAN_RATE:
      return Double.valueOf(getLoanRate());

    case MAX_LOAN_RATE:
      return Double.valueOf(getMaxLoanRate());

    case IS_CLOSED:
      return Integer.valueOf(getIsClosed());

    case PROJECT_GUARANTEE:
      return getProjectGuarantee();

    case PROJECT_PROPERTY:
      return getProjectProperty();

    case PROJECT_FORECLOSURE:
      return getProjectForeclosure();

    case ORG_NAME:
      return getOrgName();

    case AREA_CODE:
      return getAreaCode();

    case APPLY_USER_ID:
      return Integer.valueOf(getApplyUserId());

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case IS_REJECT:
      return Integer.valueOf(getIsReject());

    case EXAMINE_USER:
      return Integer.valueOf(getExamineUser());

    case EXAMINE_DATE:
      return getExamineDate();

    case EXAMINE_OPINION:
      return getExamineOpinion();

    case IS_ASSIGNED:
      return Integer.valueOf(getIsAssigned());

    case PIDS:
      return getPids();

    case PROJECT_IDS:
      return getProjectIds();

    case ESTATE_LIST:
      return getEstateList();

    case HOUSE_IDS:
      return getHouseIds();

    case FORE_AFTER_MONITOR_STATUS:
      return Integer.valueOf(getForeAfterMonitorStatus());

    case REJECT_TYPE:
      return Integer.valueOf(getRejectType());

    case ORIGINAL_LOAN_IDS:
      return getOriginalLoanIds();

    case ORIGINAL_LOAN_LIST:
      return getOriginalLoanList();

    case USER_PIDS:
      return getUserPids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case PROJECT_TYPE:
      return isSetProjectType();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PM_USER_ID:
      return isSetPmUserId();
    case BUSINESS_CATELOG:
      return isSetBusinessCatelog();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case FLOW_CATELOG:
      return isSetFlowCatelog();
    case MY_TYPE:
      return isSetMyType();
    case MY_MAIN:
      return isSetMyMain();
    case LOAN_INTEREST_RECORD:
      return isSetLoanInterestRecord();
    case LOAN_MGR_RECORD:
      return isSetLoanMgrRecord();
    case IS_ALLOW_PREPAY:
      return isSetIsAllowPrepay();
    case IS_RETURN_INTEREST:
      return isSetIsReturnInterest();
    case LOAN_OTHER_FEE:
      return isSetLoanOtherFee();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case STATUS:
      return isSetStatus();
    case CIRCULATE_TYPE:
      return isSetCirculateType();
    case SURVEY_RESULT:
      return isSetSurveyResult();
    case COMMENTS:
      return isSetComments();
    case IS_REJECTED:
      return isSetIsRejected();
    case PRODUCT_ID:
      return isSetProductId();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case ADDRESS:
      return isSetAddress();
    case BUSINESS_CONTACTS:
      return isSetBusinessContacts();
    case CONTACTS_PHONE:
      return isSetContactsPhone();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case BUSINESS_CATEGORY:
      return isSetBusinessCategory();
    case IS_NOTARIZATION:
      return isSetIsNotarization();
    case IS_DELETE:
      return isSetIsDelete();
    case IS_CHECHAN:
      return isSetIsChechan();
    case MANAGERS:
      return isSetManagers();
    case MANAGERS_PHONE:
      return isSetManagersPhone();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case BUSINESS_SOURCE_NO:
      return isSetBusinessSourceNo();
    case COLLECT_FILE_STATUS:
      return isSetCollectFileStatus();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case AUDITOR_OPINION:
      return isSetAuditorOpinion();
    case IS_SELLER:
      return isSetIsSeller();
    case DECLARATION:
      return isSetDeclaration();
    case REFUND_FILE_STATUS:
      return isSetRefundFileStatus();
    case CHECHAN_DATE:
      return isSetChechanDate();
    case CHECHAN_USER_ID:
      return isSetChechanUserId();
    case CHECHAN_CAUSE:
      return isSetChechanCause();
    case ORG_ID:
      return isSetOrgId();
    case ORG_CUSTOMER_NAME:
      return isSetOrgCustomerName();
    case ORG_CUSTOMER_PHONE:
      return isSetOrgCustomerPhone();
    case ORG_CUSTOMER_CARD:
      return isSetOrgCustomerCard();
    case PLAN_LOAN_DATE:
      return isSetPlanLoanDate();
    case PLAN_LOAN_MONEY:
      return isSetPlanLoanMoney();
    case LOAN_RATE:
      return isSetLoanRate();
    case MAX_LOAN_RATE:
      return isSetMaxLoanRate();
    case IS_CLOSED:
      return isSetIsClosed();
    case PROJECT_GUARANTEE:
      return isSetProjectGuarantee();
    case PROJECT_PROPERTY:
      return isSetProjectProperty();
    case PROJECT_FORECLOSURE:
      return isSetProjectForeclosure();
    case ORG_NAME:
      return isSetOrgName();
    case AREA_CODE:
      return isSetAreaCode();
    case APPLY_USER_ID:
      return isSetApplyUserId();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case IS_REJECT:
      return isSetIsReject();
    case EXAMINE_USER:
      return isSetExamineUser();
    case EXAMINE_DATE:
      return isSetExamineDate();
    case EXAMINE_OPINION:
      return isSetExamineOpinion();
    case IS_ASSIGNED:
      return isSetIsAssigned();
    case PIDS:
      return isSetPids();
    case PROJECT_IDS:
      return isSetProjectIds();
    case ESTATE_LIST:
      return isSetEstateList();
    case HOUSE_IDS:
      return isSetHouseIds();
    case FORE_AFTER_MONITOR_STATUS:
      return isSetForeAfterMonitorStatus();
    case REJECT_TYPE:
      return isSetRejectType();
    case ORIGINAL_LOAN_IDS:
      return isSetOriginalLoanIds();
    case ORIGINAL_LOAN_LIST:
      return isSetOriginalLoanList();
    case USER_PIDS:
      return isSetUserPids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProject)
      return this.equals((BizProject)that);
    return false;
  }

  public boolean equals(BizProject that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_businessCatelog = true && this.isSetBusinessCatelog();
    boolean that_present_businessCatelog = true && that.isSetBusinessCatelog();
    if (this_present_businessCatelog || that_present_businessCatelog) {
      if (!(this_present_businessCatelog && that_present_businessCatelog))
        return false;
      if (!this.businessCatelog.equals(that.businessCatelog))
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (!this.businessType.equals(that.businessType))
        return false;
    }

    boolean this_present_flowCatelog = true && this.isSetFlowCatelog();
    boolean that_present_flowCatelog = true && that.isSetFlowCatelog();
    if (this_present_flowCatelog || that_present_flowCatelog) {
      if (!(this_present_flowCatelog && that_present_flowCatelog))
        return false;
      if (!this.flowCatelog.equals(that.flowCatelog))
        return false;
    }

    boolean this_present_myType = true && this.isSetMyType();
    boolean that_present_myType = true && that.isSetMyType();
    if (this_present_myType || that_present_myType) {
      if (!(this_present_myType && that_present_myType))
        return false;
      if (!this.myType.equals(that.myType))
        return false;
    }

    boolean this_present_myMain = true && this.isSetMyMain();
    boolean that_present_myMain = true && that.isSetMyMain();
    if (this_present_myMain || that_present_myMain) {
      if (!(this_present_myMain && that_present_myMain))
        return false;
      if (!this.myMain.equals(that.myMain))
        return false;
    }

    boolean this_present_loanInterestRecord = true;
    boolean that_present_loanInterestRecord = true;
    if (this_present_loanInterestRecord || that_present_loanInterestRecord) {
      if (!(this_present_loanInterestRecord && that_present_loanInterestRecord))
        return false;
      if (this.loanInterestRecord != that.loanInterestRecord)
        return false;
    }

    boolean this_present_loanMgrRecord = true;
    boolean that_present_loanMgrRecord = true;
    if (this_present_loanMgrRecord || that_present_loanMgrRecord) {
      if (!(this_present_loanMgrRecord && that_present_loanMgrRecord))
        return false;
      if (this.loanMgrRecord != that.loanMgrRecord)
        return false;
    }

    boolean this_present_isAllowPrepay = true;
    boolean that_present_isAllowPrepay = true;
    if (this_present_isAllowPrepay || that_present_isAllowPrepay) {
      if (!(this_present_isAllowPrepay && that_present_isAllowPrepay))
        return false;
      if (this.isAllowPrepay != that.isAllowPrepay)
        return false;
    }

    boolean this_present_isReturnInterest = true;
    boolean that_present_isReturnInterest = true;
    if (this_present_isReturnInterest || that_present_isReturnInterest) {
      if (!(this_present_isReturnInterest && that_present_isReturnInterest))
        return false;
      if (this.isReturnInterest != that.isReturnInterest)
        return false;
    }

    boolean this_present_loanOtherFee = true;
    boolean that_present_loanOtherFee = true;
    if (this_present_loanOtherFee || that_present_loanOtherFee) {
      if (!(this_present_loanOtherFee && that_present_loanOtherFee))
        return false;
      if (this.loanOtherFee != that.loanOtherFee)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_circulateType = true;
    boolean that_present_circulateType = true;
    if (this_present_circulateType || that_present_circulateType) {
      if (!(this_present_circulateType && that_present_circulateType))
        return false;
      if (this.circulateType != that.circulateType)
        return false;
    }

    boolean this_present_surveyResult = true && this.isSetSurveyResult();
    boolean that_present_surveyResult = true && that.isSetSurveyResult();
    if (this_present_surveyResult || that_present_surveyResult) {
      if (!(this_present_surveyResult && that_present_surveyResult))
        return false;
      if (!this.surveyResult.equals(that.surveyResult))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_isRejected = true;
    boolean that_present_isRejected = true;
    if (this_present_isRejected || that_present_isRejected) {
      if (!(this_present_isRejected && that_present_isRejected))
        return false;
      if (this.isRejected != that.isRejected)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_businessContacts = true && this.isSetBusinessContacts();
    boolean that_present_businessContacts = true && that.isSetBusinessContacts();
    if (this_present_businessContacts || that_present_businessContacts) {
      if (!(this_present_businessContacts && that_present_businessContacts))
        return false;
      if (!this.businessContacts.equals(that.businessContacts))
        return false;
    }

    boolean this_present_contactsPhone = true && this.isSetContactsPhone();
    boolean that_present_contactsPhone = true && that.isSetContactsPhone();
    if (this_present_contactsPhone || that_present_contactsPhone) {
      if (!(this_present_contactsPhone && that_present_contactsPhone))
        return false;
      if (!this.contactsPhone.equals(that.contactsPhone))
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_businessCategory = true;
    boolean that_present_businessCategory = true;
    if (this_present_businessCategory || that_present_businessCategory) {
      if (!(this_present_businessCategory && that_present_businessCategory))
        return false;
      if (this.businessCategory != that.businessCategory)
        return false;
    }

    boolean this_present_isNotarization = true;
    boolean that_present_isNotarization = true;
    if (this_present_isNotarization || that_present_isNotarization) {
      if (!(this_present_isNotarization && that_present_isNotarization))
        return false;
      if (this.isNotarization != that.isNotarization)
        return false;
    }

    boolean this_present_isDelete = true;
    boolean that_present_isDelete = true;
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_managers = true && this.isSetManagers();
    boolean that_present_managers = true && that.isSetManagers();
    if (this_present_managers || that_present_managers) {
      if (!(this_present_managers && that_present_managers))
        return false;
      if (!this.managers.equals(that.managers))
        return false;
    }

    boolean this_present_managersPhone = true && this.isSetManagersPhone();
    boolean that_present_managersPhone = true && that.isSetManagersPhone();
    if (this_present_managersPhone || that_present_managersPhone) {
      if (!(this_present_managersPhone && that_present_managersPhone))
        return false;
      if (!this.managersPhone.equals(that.managersPhone))
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_businessSourceNo = true;
    boolean that_present_businessSourceNo = true;
    if (this_present_businessSourceNo || that_present_businessSourceNo) {
      if (!(this_present_businessSourceNo && that_present_businessSourceNo))
        return false;
      if (this.businessSourceNo != that.businessSourceNo)
        return false;
    }

    boolean this_present_collectFileStatus = true;
    boolean that_present_collectFileStatus = true;
    if (this_present_collectFileStatus || that_present_collectFileStatus) {
      if (!(this_present_collectFileStatus && that_present_collectFileStatus))
        return false;
      if (this.collectFileStatus != that.collectFileStatus)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_auditorOpinion = true && this.isSetAuditorOpinion();
    boolean that_present_auditorOpinion = true && that.isSetAuditorOpinion();
    if (this_present_auditorOpinion || that_present_auditorOpinion) {
      if (!(this_present_auditorOpinion && that_present_auditorOpinion))
        return false;
      if (!this.auditorOpinion.equals(that.auditorOpinion))
        return false;
    }

    boolean this_present_isSeller = true;
    boolean that_present_isSeller = true;
    if (this_present_isSeller || that_present_isSeller) {
      if (!(this_present_isSeller && that_present_isSeller))
        return false;
      if (this.isSeller != that.isSeller)
        return false;
    }

    boolean this_present_declaration = true && this.isSetDeclaration();
    boolean that_present_declaration = true && that.isSetDeclaration();
    if (this_present_declaration || that_present_declaration) {
      if (!(this_present_declaration && that_present_declaration))
        return false;
      if (!this.declaration.equals(that.declaration))
        return false;
    }

    boolean this_present_refundFileStatus = true;
    boolean that_present_refundFileStatus = true;
    if (this_present_refundFileStatus || that_present_refundFileStatus) {
      if (!(this_present_refundFileStatus && that_present_refundFileStatus))
        return false;
      if (this.refundFileStatus != that.refundFileStatus)
        return false;
    }

    boolean this_present_chechanDate = true && this.isSetChechanDate();
    boolean that_present_chechanDate = true && that.isSetChechanDate();
    if (this_present_chechanDate || that_present_chechanDate) {
      if (!(this_present_chechanDate && that_present_chechanDate))
        return false;
      if (!this.chechanDate.equals(that.chechanDate))
        return false;
    }

    boolean this_present_chechanUserId = true;
    boolean that_present_chechanUserId = true;
    if (this_present_chechanUserId || that_present_chechanUserId) {
      if (!(this_present_chechanUserId && that_present_chechanUserId))
        return false;
      if (this.chechanUserId != that.chechanUserId)
        return false;
    }

    boolean this_present_chechanCause = true && this.isSetChechanCause();
    boolean that_present_chechanCause = true && that.isSetChechanCause();
    if (this_present_chechanCause || that_present_chechanCause) {
      if (!(this_present_chechanCause && that_present_chechanCause))
        return false;
      if (!this.chechanCause.equals(that.chechanCause))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_orgCustomerName = true && this.isSetOrgCustomerName();
    boolean that_present_orgCustomerName = true && that.isSetOrgCustomerName();
    if (this_present_orgCustomerName || that_present_orgCustomerName) {
      if (!(this_present_orgCustomerName && that_present_orgCustomerName))
        return false;
      if (!this.orgCustomerName.equals(that.orgCustomerName))
        return false;
    }

    boolean this_present_orgCustomerPhone = true && this.isSetOrgCustomerPhone();
    boolean that_present_orgCustomerPhone = true && that.isSetOrgCustomerPhone();
    if (this_present_orgCustomerPhone || that_present_orgCustomerPhone) {
      if (!(this_present_orgCustomerPhone && that_present_orgCustomerPhone))
        return false;
      if (!this.orgCustomerPhone.equals(that.orgCustomerPhone))
        return false;
    }

    boolean this_present_orgCustomerCard = true && this.isSetOrgCustomerCard();
    boolean that_present_orgCustomerCard = true && that.isSetOrgCustomerCard();
    if (this_present_orgCustomerCard || that_present_orgCustomerCard) {
      if (!(this_present_orgCustomerCard && that_present_orgCustomerCard))
        return false;
      if (!this.orgCustomerCard.equals(that.orgCustomerCard))
        return false;
    }

    boolean this_present_planLoanDate = true && this.isSetPlanLoanDate();
    boolean that_present_planLoanDate = true && that.isSetPlanLoanDate();
    if (this_present_planLoanDate || that_present_planLoanDate) {
      if (!(this_present_planLoanDate && that_present_planLoanDate))
        return false;
      if (!this.planLoanDate.equals(that.planLoanDate))
        return false;
    }

    boolean this_present_planLoanMoney = true;
    boolean that_present_planLoanMoney = true;
    if (this_present_planLoanMoney || that_present_planLoanMoney) {
      if (!(this_present_planLoanMoney && that_present_planLoanMoney))
        return false;
      if (this.planLoanMoney != that.planLoanMoney)
        return false;
    }

    boolean this_present_loanRate = true;
    boolean that_present_loanRate = true;
    if (this_present_loanRate || that_present_loanRate) {
      if (!(this_present_loanRate && that_present_loanRate))
        return false;
      if (this.loanRate != that.loanRate)
        return false;
    }

    boolean this_present_maxLoanRate = true;
    boolean that_present_maxLoanRate = true;
    if (this_present_maxLoanRate || that_present_maxLoanRate) {
      if (!(this_present_maxLoanRate && that_present_maxLoanRate))
        return false;
      if (this.maxLoanRate != that.maxLoanRate)
        return false;
    }

    boolean this_present_isClosed = true;
    boolean that_present_isClosed = true;
    if (this_present_isClosed || that_present_isClosed) {
      if (!(this_present_isClosed && that_present_isClosed))
        return false;
      if (this.isClosed != that.isClosed)
        return false;
    }

    boolean this_present_projectGuarantee = true && this.isSetProjectGuarantee();
    boolean that_present_projectGuarantee = true && that.isSetProjectGuarantee();
    if (this_present_projectGuarantee || that_present_projectGuarantee) {
      if (!(this_present_projectGuarantee && that_present_projectGuarantee))
        return false;
      if (!this.projectGuarantee.equals(that.projectGuarantee))
        return false;
    }

    boolean this_present_projectProperty = true && this.isSetProjectProperty();
    boolean that_present_projectProperty = true && that.isSetProjectProperty();
    if (this_present_projectProperty || that_present_projectProperty) {
      if (!(this_present_projectProperty && that_present_projectProperty))
        return false;
      if (!this.projectProperty.equals(that.projectProperty))
        return false;
    }

    boolean this_present_projectForeclosure = true && this.isSetProjectForeclosure();
    boolean that_present_projectForeclosure = true && that.isSetProjectForeclosure();
    if (this_present_projectForeclosure || that_present_projectForeclosure) {
      if (!(this_present_projectForeclosure && that_present_projectForeclosure))
        return false;
      if (!this.projectForeclosure.equals(that.projectForeclosure))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_areaCode = true && this.isSetAreaCode();
    boolean that_present_areaCode = true && that.isSetAreaCode();
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (!this.areaCode.equals(that.areaCode))
        return false;
    }

    boolean this_present_applyUserId = true;
    boolean that_present_applyUserId = true;
    if (this_present_applyUserId || that_present_applyUserId) {
      if (!(this_present_applyUserId && that_present_applyUserId))
        return false;
      if (this.applyUserId != that.applyUserId)
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_isReject = true;
    boolean that_present_isReject = true;
    if (this_present_isReject || that_present_isReject) {
      if (!(this_present_isReject && that_present_isReject))
        return false;
      if (this.isReject != that.isReject)
        return false;
    }

    boolean this_present_examineUser = true;
    boolean that_present_examineUser = true;
    if (this_present_examineUser || that_present_examineUser) {
      if (!(this_present_examineUser && that_present_examineUser))
        return false;
      if (this.examineUser != that.examineUser)
        return false;
    }

    boolean this_present_examineDate = true && this.isSetExamineDate();
    boolean that_present_examineDate = true && that.isSetExamineDate();
    if (this_present_examineDate || that_present_examineDate) {
      if (!(this_present_examineDate && that_present_examineDate))
        return false;
      if (!this.examineDate.equals(that.examineDate))
        return false;
    }

    boolean this_present_examineOpinion = true && this.isSetExamineOpinion();
    boolean that_present_examineOpinion = true && that.isSetExamineOpinion();
    if (this_present_examineOpinion || that_present_examineOpinion) {
      if (!(this_present_examineOpinion && that_present_examineOpinion))
        return false;
      if (!this.examineOpinion.equals(that.examineOpinion))
        return false;
    }

    boolean this_present_isAssigned = true;
    boolean that_present_isAssigned = true;
    if (this_present_isAssigned || that_present_isAssigned) {
      if (!(this_present_isAssigned && that_present_isAssigned))
        return false;
      if (this.isAssigned != that.isAssigned)
        return false;
    }

    boolean this_present_pids = true && this.isSetPids();
    boolean that_present_pids = true && that.isSetPids();
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (!this.pids.equals(that.pids))
        return false;
    }

    boolean this_present_projectIds = true && this.isSetProjectIds();
    boolean that_present_projectIds = true && that.isSetProjectIds();
    if (this_present_projectIds || that_present_projectIds) {
      if (!(this_present_projectIds && that_present_projectIds))
        return false;
      if (!this.projectIds.equals(that.projectIds))
        return false;
    }

    boolean this_present_estateList = true && this.isSetEstateList();
    boolean that_present_estateList = true && that.isSetEstateList();
    if (this_present_estateList || that_present_estateList) {
      if (!(this_present_estateList && that_present_estateList))
        return false;
      if (!this.estateList.equals(that.estateList))
        return false;
    }

    boolean this_present_houseIds = true && this.isSetHouseIds();
    boolean that_present_houseIds = true && that.isSetHouseIds();
    if (this_present_houseIds || that_present_houseIds) {
      if (!(this_present_houseIds && that_present_houseIds))
        return false;
      if (!this.houseIds.equals(that.houseIds))
        return false;
    }

    boolean this_present_foreAfterMonitorStatus = true;
    boolean that_present_foreAfterMonitorStatus = true;
    if (this_present_foreAfterMonitorStatus || that_present_foreAfterMonitorStatus) {
      if (!(this_present_foreAfterMonitorStatus && that_present_foreAfterMonitorStatus))
        return false;
      if (this.foreAfterMonitorStatus != that.foreAfterMonitorStatus)
        return false;
    }

    boolean this_present_rejectType = true;
    boolean that_present_rejectType = true;
    if (this_present_rejectType || that_present_rejectType) {
      if (!(this_present_rejectType && that_present_rejectType))
        return false;
      if (this.rejectType != that.rejectType)
        return false;
    }

    boolean this_present_originalLoanIds = true && this.isSetOriginalLoanIds();
    boolean that_present_originalLoanIds = true && that.isSetOriginalLoanIds();
    if (this_present_originalLoanIds || that_present_originalLoanIds) {
      if (!(this_present_originalLoanIds && that_present_originalLoanIds))
        return false;
      if (!this.originalLoanIds.equals(that.originalLoanIds))
        return false;
    }

    boolean this_present_originalLoanList = true && this.isSetOriginalLoanList();
    boolean that_present_originalLoanList = true && that.isSetOriginalLoanList();
    if (this_present_originalLoanList || that_present_originalLoanList) {
      if (!(this_present_originalLoanList && that_present_originalLoanList))
        return false;
      if (!this.originalLoanList.equals(that.originalLoanList))
        return false;
    }

    boolean this_present_userPids = true && this.isSetUserPids();
    boolean that_present_userPids = true && that.isSetUserPids();
    if (this_present_userPids || that_present_userPids) {
      if (!(this_present_userPids && that_present_userPids))
        return false;
      if (!this.userPids.equals(that.userPids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_businessCatelog = true && (isSetBusinessCatelog());
    list.add(present_businessCatelog);
    if (present_businessCatelog)
      list.add(businessCatelog);

    boolean present_businessType = true && (isSetBusinessType());
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_flowCatelog = true && (isSetFlowCatelog());
    list.add(present_flowCatelog);
    if (present_flowCatelog)
      list.add(flowCatelog);

    boolean present_myType = true && (isSetMyType());
    list.add(present_myType);
    if (present_myType)
      list.add(myType);

    boolean present_myMain = true && (isSetMyMain());
    list.add(present_myMain);
    if (present_myMain)
      list.add(myMain);

    boolean present_loanInterestRecord = true;
    list.add(present_loanInterestRecord);
    if (present_loanInterestRecord)
      list.add(loanInterestRecord);

    boolean present_loanMgrRecord = true;
    list.add(present_loanMgrRecord);
    if (present_loanMgrRecord)
      list.add(loanMgrRecord);

    boolean present_isAllowPrepay = true;
    list.add(present_isAllowPrepay);
    if (present_isAllowPrepay)
      list.add(isAllowPrepay);

    boolean present_isReturnInterest = true;
    list.add(present_isReturnInterest);
    if (present_isReturnInterest)
      list.add(isReturnInterest);

    boolean present_loanOtherFee = true;
    list.add(present_loanOtherFee);
    if (present_loanOtherFee)
      list.add(loanOtherFee);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_circulateType = true;
    list.add(present_circulateType);
    if (present_circulateType)
      list.add(circulateType);

    boolean present_surveyResult = true && (isSetSurveyResult());
    list.add(present_surveyResult);
    if (present_surveyResult)
      list.add(surveyResult);

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    boolean present_isRejected = true;
    list.add(present_isRejected);
    if (present_isRejected)
      list.add(isRejected);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_businessContacts = true && (isSetBusinessContacts());
    list.add(present_businessContacts);
    if (present_businessContacts)
      list.add(businessContacts);

    boolean present_contactsPhone = true && (isSetContactsPhone());
    list.add(present_contactsPhone);
    if (present_contactsPhone)
      list.add(contactsPhone);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_businessCategory = true;
    list.add(present_businessCategory);
    if (present_businessCategory)
      list.add(businessCategory);

    boolean present_isNotarization = true;
    list.add(present_isNotarization);
    if (present_isNotarization)
      list.add(isNotarization);

    boolean present_isDelete = true;
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_managers = true && (isSetManagers());
    list.add(present_managers);
    if (present_managers)
      list.add(managers);

    boolean present_managersPhone = true && (isSetManagersPhone());
    list.add(present_managersPhone);
    if (present_managersPhone)
      list.add(managersPhone);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_businessSourceNo = true;
    list.add(present_businessSourceNo);
    if (present_businessSourceNo)
      list.add(businessSourceNo);

    boolean present_collectFileStatus = true;
    list.add(present_collectFileStatus);
    if (present_collectFileStatus)
      list.add(collectFileStatus);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_auditorOpinion = true && (isSetAuditorOpinion());
    list.add(present_auditorOpinion);
    if (present_auditorOpinion)
      list.add(auditorOpinion);

    boolean present_isSeller = true;
    list.add(present_isSeller);
    if (present_isSeller)
      list.add(isSeller);

    boolean present_declaration = true && (isSetDeclaration());
    list.add(present_declaration);
    if (present_declaration)
      list.add(declaration);

    boolean present_refundFileStatus = true;
    list.add(present_refundFileStatus);
    if (present_refundFileStatus)
      list.add(refundFileStatus);

    boolean present_chechanDate = true && (isSetChechanDate());
    list.add(present_chechanDate);
    if (present_chechanDate)
      list.add(chechanDate);

    boolean present_chechanUserId = true;
    list.add(present_chechanUserId);
    if (present_chechanUserId)
      list.add(chechanUserId);

    boolean present_chechanCause = true && (isSetChechanCause());
    list.add(present_chechanCause);
    if (present_chechanCause)
      list.add(chechanCause);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_orgCustomerName = true && (isSetOrgCustomerName());
    list.add(present_orgCustomerName);
    if (present_orgCustomerName)
      list.add(orgCustomerName);

    boolean present_orgCustomerPhone = true && (isSetOrgCustomerPhone());
    list.add(present_orgCustomerPhone);
    if (present_orgCustomerPhone)
      list.add(orgCustomerPhone);

    boolean present_orgCustomerCard = true && (isSetOrgCustomerCard());
    list.add(present_orgCustomerCard);
    if (present_orgCustomerCard)
      list.add(orgCustomerCard);

    boolean present_planLoanDate = true && (isSetPlanLoanDate());
    list.add(present_planLoanDate);
    if (present_planLoanDate)
      list.add(planLoanDate);

    boolean present_planLoanMoney = true;
    list.add(present_planLoanMoney);
    if (present_planLoanMoney)
      list.add(planLoanMoney);

    boolean present_loanRate = true;
    list.add(present_loanRate);
    if (present_loanRate)
      list.add(loanRate);

    boolean present_maxLoanRate = true;
    list.add(present_maxLoanRate);
    if (present_maxLoanRate)
      list.add(maxLoanRate);

    boolean present_isClosed = true;
    list.add(present_isClosed);
    if (present_isClosed)
      list.add(isClosed);

    boolean present_projectGuarantee = true && (isSetProjectGuarantee());
    list.add(present_projectGuarantee);
    if (present_projectGuarantee)
      list.add(projectGuarantee);

    boolean present_projectProperty = true && (isSetProjectProperty());
    list.add(present_projectProperty);
    if (present_projectProperty)
      list.add(projectProperty);

    boolean present_projectForeclosure = true && (isSetProjectForeclosure());
    list.add(present_projectForeclosure);
    if (present_projectForeclosure)
      list.add(projectForeclosure);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_areaCode = true && (isSetAreaCode());
    list.add(present_areaCode);
    if (present_areaCode)
      list.add(areaCode);

    boolean present_applyUserId = true;
    list.add(present_applyUserId);
    if (present_applyUserId)
      list.add(applyUserId);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_isReject = true;
    list.add(present_isReject);
    if (present_isReject)
      list.add(isReject);

    boolean present_examineUser = true;
    list.add(present_examineUser);
    if (present_examineUser)
      list.add(examineUser);

    boolean present_examineDate = true && (isSetExamineDate());
    list.add(present_examineDate);
    if (present_examineDate)
      list.add(examineDate);

    boolean present_examineOpinion = true && (isSetExamineOpinion());
    list.add(present_examineOpinion);
    if (present_examineOpinion)
      list.add(examineOpinion);

    boolean present_isAssigned = true;
    list.add(present_isAssigned);
    if (present_isAssigned)
      list.add(isAssigned);

    boolean present_pids = true && (isSetPids());
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_projectIds = true && (isSetProjectIds());
    list.add(present_projectIds);
    if (present_projectIds)
      list.add(projectIds);

    boolean present_estateList = true && (isSetEstateList());
    list.add(present_estateList);
    if (present_estateList)
      list.add(estateList);

    boolean present_houseIds = true && (isSetHouseIds());
    list.add(present_houseIds);
    if (present_houseIds)
      list.add(houseIds);

    boolean present_foreAfterMonitorStatus = true;
    list.add(present_foreAfterMonitorStatus);
    if (present_foreAfterMonitorStatus)
      list.add(foreAfterMonitorStatus);

    boolean present_rejectType = true;
    list.add(present_rejectType);
    if (present_rejectType)
      list.add(rejectType);

    boolean present_originalLoanIds = true && (isSetOriginalLoanIds());
    list.add(present_originalLoanIds);
    if (present_originalLoanIds)
      list.add(originalLoanIds);

    boolean present_originalLoanList = true && (isSetOriginalLoanList());
    list.add(present_originalLoanList);
    if (present_originalLoanList)
      list.add(originalLoanList);

    boolean present_userPids = true && (isSetUserPids());
    list.add(present_userPids);
    if (present_userPids)
      list.add(userPids);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelog()).compareTo(other.isSetBusinessCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelog, other.businessCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowCatelog()).compareTo(other.isSetFlowCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowCatelog, other.flowCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyType()).compareTo(other.isSetMyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myType, other.myType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyMain()).compareTo(other.isSetMyMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myMain, other.myMain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecord()).compareTo(other.isSetLoanInterestRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecord, other.loanInterestRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecord()).compareTo(other.isSetLoanMgrRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecord, other.loanMgrRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllowPrepay()).compareTo(other.isSetIsAllowPrepay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllowPrepay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllowPrepay, other.isAllowPrepay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReturnInterest()).compareTo(other.isSetIsReturnInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReturnInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReturnInterest, other.isReturnInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFee()).compareTo(other.isSetLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFee, other.loanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCirculateType()).compareTo(other.isSetCirculateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCirculateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circulateType, other.circulateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyResult()).compareTo(other.isSetSurveyResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyResult, other.surveyResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRejected()).compareTo(other.isSetIsRejected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRejected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRejected, other.isRejected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessContacts()).compareTo(other.isSetBusinessContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessContacts, other.businessContacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactsPhone()).compareTo(other.isSetContactsPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactsPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactsPhone, other.contactsPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategory()).compareTo(other.isSetBusinessCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategory, other.businessCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotarization()).compareTo(other.isSetIsNotarization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotarization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotarization, other.isNotarization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagers()).compareTo(other.isSetManagers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managers, other.managers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagersPhone()).compareTo(other.isSetManagersPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagersPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managersPhone, other.managersPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceNo()).compareTo(other.isSetBusinessSourceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceNo, other.businessSourceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileStatus()).compareTo(other.isSetCollectFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileStatus, other.collectFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditorOpinion()).compareTo(other.isSetAuditorOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditorOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditorOpinion, other.auditorOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeller()).compareTo(other.isSetIsSeller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeller()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeller, other.isSeller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeclaration()).compareTo(other.isSetDeclaration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaration, other.declaration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFileStatus()).compareTo(other.isSetRefundFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFileStatus, other.refundFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanDate()).compareTo(other.isSetChechanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanDate, other.chechanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanUserId()).compareTo(other.isSetChechanUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanUserId, other.chechanUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanCause()).compareTo(other.isSetChechanCause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanCause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanCause, other.chechanCause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerName()).compareTo(other.isSetOrgCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerName, other.orgCustomerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerPhone()).compareTo(other.isSetOrgCustomerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerPhone, other.orgCustomerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerCard()).compareTo(other.isSetOrgCustomerCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerCard, other.orgCustomerCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanDate()).compareTo(other.isSetPlanLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanDate, other.planLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanMoney()).compareTo(other.isSetPlanLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanMoney, other.planLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRate()).compareTo(other.isSetLoanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRate, other.loanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLoanRate()).compareTo(other.isSetMaxLoanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLoanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLoanRate, other.maxLoanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsClosed()).compareTo(other.isSetIsClosed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsClosed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isClosed, other.isClosed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectGuarantee()).compareTo(other.isSetProjectGuarantee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectGuarantee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectGuarantee, other.projectGuarantee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectProperty()).compareTo(other.isSetProjectProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectProperty, other.projectProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectForeclosure()).compareTo(other.isSetProjectForeclosure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectForeclosure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectForeclosure, other.projectForeclosure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserId()).compareTo(other.isSetApplyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserId, other.applyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReject()).compareTo(other.isSetIsReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReject, other.isReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineUser()).compareTo(other.isSetExamineUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineUser, other.examineUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineDate()).compareTo(other.isSetExamineDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineDate, other.examineDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamineOpinion()).compareTo(other.isSetExamineOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamineOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examineOpinion, other.examineOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAssigned()).compareTo(other.isSetIsAssigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAssigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssigned, other.isAssigned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectIds()).compareTo(other.isSetProjectIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectIds, other.projectIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstateList()).compareTo(other.isSetEstateList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstateList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estateList, other.estateList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseIds()).compareTo(other.isSetHouseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseIds, other.houseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAfterMonitorStatus()).compareTo(other.isSetForeAfterMonitorStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAfterMonitorStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAfterMonitorStatus, other.foreAfterMonitorStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRejectType()).compareTo(other.isSetRejectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejectType, other.rejectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalLoanIds()).compareTo(other.isSetOriginalLoanIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalLoanIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalLoanIds, other.originalLoanIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalLoanList()).compareTo(other.isSetOriginalLoanList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalLoanList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalLoanList, other.originalLoanList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPids()).compareTo(other.isSetUserPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPids, other.userPids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProject(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelog:");
    if (this.businessCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    if (this.businessType == null) {
      sb.append("null");
    } else {
      sb.append(this.businessType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowCatelog:");
    if (this.flowCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.flowCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myType:");
    if (this.myType == null) {
      sb.append("null");
    } else {
      sb.append(this.myType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myMain:");
    if (this.myMain == null) {
      sb.append("null");
    } else {
      sb.append(this.myMain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecord:");
    sb.append(this.loanInterestRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecord:");
    sb.append(this.loanMgrRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAllowPrepay:");
    sb.append(this.isAllowPrepay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReturnInterest:");
    sb.append(this.isReturnInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFee:");
    sb.append(this.loanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("circulateType:");
    sb.append(this.circulateType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyResult:");
    if (this.surveyResult == null) {
      sb.append("null");
    } else {
      sb.append(this.surveyResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRejected:");
    sb.append(this.isRejected);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessContacts:");
    if (this.businessContacts == null) {
      sb.append("null");
    } else {
      sb.append(this.businessContacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactsPhone:");
    if (this.contactsPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.contactsPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategory:");
    sb.append(this.businessCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNotarization:");
    sb.append(this.isNotarization);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    sb.append(this.isDelete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("managers:");
    if (this.managers == null) {
      sb.append("null");
    } else {
      sb.append(this.managers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("managersPhone:");
    if (this.managersPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.managersPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceNo:");
    sb.append(this.businessSourceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileStatus:");
    sb.append(this.collectFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditorOpinion:");
    if (this.auditorOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.auditorOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeller:");
    sb.append(this.isSeller);
    first = false;
    if (!first) sb.append(", ");
    sb.append("declaration:");
    if (this.declaration == null) {
      sb.append("null");
    } else {
      sb.append(this.declaration);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFileStatus:");
    sb.append(this.refundFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanDate:");
    if (this.chechanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanUserId:");
    sb.append(this.chechanUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanCause:");
    if (this.chechanCause == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanCause);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerName:");
    if (this.orgCustomerName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerPhone:");
    if (this.orgCustomerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerCard:");
    if (this.orgCustomerCard == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanDate:");
    if (this.planLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanMoney:");
    sb.append(this.planLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRate:");
    sb.append(this.loanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLoanRate:");
    sb.append(this.maxLoanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isClosed:");
    sb.append(this.isClosed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectGuarantee:");
    if (this.projectGuarantee == null) {
      sb.append("null");
    } else {
      sb.append(this.projectGuarantee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectProperty:");
    if (this.projectProperty == null) {
      sb.append("null");
    } else {
      sb.append(this.projectProperty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectForeclosure:");
    if (this.projectForeclosure == null) {
      sb.append("null");
    } else {
      sb.append(this.projectForeclosure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    if (this.areaCode == null) {
      sb.append("null");
    } else {
      sb.append(this.areaCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserId:");
    sb.append(this.applyUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReject:");
    sb.append(this.isReject);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineUser:");
    sb.append(this.examineUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineDate:");
    if (this.examineDate == null) {
      sb.append("null");
    } else {
      sb.append(this.examineDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("examineOpinion:");
    if (this.examineOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.examineOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAssigned:");
    sb.append(this.isAssigned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pids:");
    if (this.pids == null) {
      sb.append("null");
    } else {
      sb.append(this.pids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectIds:");
    if (this.projectIds == null) {
      sb.append("null");
    } else {
      sb.append(this.projectIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estateList:");
    if (this.estateList == null) {
      sb.append("null");
    } else {
      sb.append(this.estateList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseIds:");
    if (this.houseIds == null) {
      sb.append("null");
    } else {
      sb.append(this.houseIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAfterMonitorStatus:");
    sb.append(this.foreAfterMonitorStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rejectType:");
    sb.append(this.rejectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalLoanIds:");
    if (this.originalLoanIds == null) {
      sb.append("null");
    } else {
      sb.append(this.originalLoanIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalLoanList:");
    if (this.originalLoanList == null) {
      sb.append("null");
    } else {
      sb.append(this.originalLoanList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPids:");
    if (this.userPids == null) {
      sb.append("null");
    } else {
      sb.append(this.userPids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (projectGuarantee != null) {
      projectGuarantee.validate();
    }
    if (projectProperty != null) {
      projectProperty.validate();
    }
    if (projectForeclosure != null) {
      projectForeclosure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectStandardSchemeFactory implements SchemeFactory {
    public BizProjectStandardScheme getScheme() {
      return new BizProjectStandardScheme();
    }
  }

  private static class BizProjectStandardScheme extends StandardScheme<BizProject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUSINESS_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCatelog = iprot.readString();
              struct.setBusinessCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessType = iprot.readString();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLOW_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowCatelog = iprot.readString();
              struct.setFlowCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myType = iprot.readString();
              struct.setMyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MY_MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myMain = iprot.readString();
              struct.setMyMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_INTEREST_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInterestRecord = iprot.readI32();
              struct.setLoanInterestRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAN_MGR_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanMgrRecord = iprot.readI32();
              struct.setLoanMgrRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_ALLOW_PREPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllowPrepay = iprot.readI32();
              struct.setIsAllowPrepayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_RETURN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReturnInterest = iprot.readI32();
              struct.setIsReturnInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanOtherFee = iprot.readI32();
              struct.setLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CIRCULATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.circulateType = iprot.readI32();
              struct.setCirculateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SURVEY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surveyResult = iprot.readString();
              struct.setSurveyResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_REJECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRejected = iprot.readI32();
              struct.setIsRejectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BUSINESS_CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessContacts = iprot.readString();
              struct.setBusinessContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CONTACTS_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactsPhone = iprot.readString();
              struct.setContactsPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BUSINESS_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCategory = iprot.readI32();
              struct.setBusinessCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IS_NOTARIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNotarization = iprot.readI32();
              struct.setIsNotarizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDelete = iprot.readI32();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // MANAGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managers = iprot.readString();
              struct.setManagersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // MANAGERS_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managersPhone = iprot.readString();
              struct.setManagersPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // BUSINESS_SOURCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSourceNo = iprot.readI32();
              struct.setBusinessSourceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // COLLECT_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectFileStatus = iprot.readI32();
              struct.setCollectFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // AUDITOR_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditorOpinion = iprot.readString();
              struct.setAuditorOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // IS_SELLER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSeller = iprot.readI32();
              struct.setIsSellerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // DECLARATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaration = iprot.readString();
              struct.setDeclarationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // REFUND_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundFileStatus = iprot.readI32();
              struct.setRefundFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // CHECHAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanDate = iprot.readString();
              struct.setChechanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // CHECHAN_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chechanUserId = iprot.readI32();
              struct.setChechanUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // CHECHAN_CAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanCause = iprot.readString();
              struct.setChechanCauseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // ORG_CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerName = iprot.readString();
              struct.setOrgCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ORG_CUSTOMER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerPhone = iprot.readString();
              struct.setOrgCustomerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // ORG_CUSTOMER_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerCard = iprot.readString();
              struct.setOrgCustomerCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // PLAN_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planLoanDate = iprot.readString();
              struct.setPlanLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PLAN_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planLoanMoney = iprot.readDouble();
              struct.setPlanLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // LOAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanRate = iprot.readDouble();
              struct.setLoanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // MAX_LOAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxLoanRate = iprot.readDouble();
              struct.setMaxLoanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // IS_CLOSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isClosed = iprot.readI32();
              struct.setIsClosedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // PROJECT_GUARANTEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectGuarantee = new com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee();
              struct.projectGuarantee.read(iprot);
              struct.setProjectGuaranteeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // PROJECT_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty();
              struct.projectProperty.read(iprot);
              struct.setProjectPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // PROJECT_FORECLOSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure();
              struct.projectForeclosure.read(iprot);
              struct.setProjectForeclosureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaCode = iprot.readString();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // APPLY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyUserId = iprot.readI32();
              struct.setApplyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // IS_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReject = iprot.readI32();
              struct.setIsRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // EXAMINE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.examineUser = iprot.readI32();
              struct.setExamineUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // EXAMINE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examineDate = iprot.readString();
              struct.setExamineDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // EXAMINE_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examineOpinion = iprot.readString();
              struct.setExamineOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // IS_ASSIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAssigned = iprot.readI32();
              struct.setIsAssignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pids = iprot.readString();
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // PROJECT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.projectIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.projectIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setProjectIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // ESTATE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(_list3.size);
                com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate();
                  _elem4.read(iprot);
                  struct.estateList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setEstateListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // HOUSE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseIds = iprot.readString();
              struct.setHouseIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // FORE_AFTER_MONITOR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreAfterMonitorStatus = iprot.readI32();
              struct.setForeAfterMonitorStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // REJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rejectType = iprot.readI32();
              struct.setRejectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // ORIGINAL_LOAN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalLoanIds = iprot.readString();
              struct.setOriginalLoanIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // ORIGINAL_LOAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.originalLoanList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan>(_list6.size);
                com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan();
                  _elem7.read(iprot);
                  struct.originalLoanList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setOriginalLoanListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // USER_PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPids = iprot.readString();
              struct.setUserPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.businessCatelog != null) {
        oprot.writeFieldBegin(BUSINESS_CATELOG_FIELD_DESC);
        oprot.writeString(struct.businessCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.businessType != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeString(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.flowCatelog != null) {
        oprot.writeFieldBegin(FLOW_CATELOG_FIELD_DESC);
        oprot.writeString(struct.flowCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.myType != null) {
        oprot.writeFieldBegin(MY_TYPE_FIELD_DESC);
        oprot.writeString(struct.myType);
        oprot.writeFieldEnd();
      }
      if (struct.myMain != null) {
        oprot.writeFieldBegin(MY_MAIN_FIELD_DESC);
        oprot.writeString(struct.myMain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_INTEREST_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanInterestRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MGR_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanMgrRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ALLOW_PREPAY_FIELD_DESC);
      oprot.writeI32(struct.isAllowPrepay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RETURN_INTEREST_FIELD_DESC);
      oprot.writeI32(struct.isReturnInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeI32(struct.loanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CIRCULATE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.circulateType);
      oprot.writeFieldEnd();
      if (struct.surveyResult != null) {
        oprot.writeFieldBegin(SURVEY_RESULT_FIELD_DESC);
        oprot.writeString(struct.surveyResult);
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        oprot.writeString(struct.comments);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REJECTED_FIELD_DESC);
      oprot.writeI32(struct.isRejected);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.businessContacts != null) {
        oprot.writeFieldBegin(BUSINESS_CONTACTS_FIELD_DESC);
        oprot.writeString(struct.businessContacts);
        oprot.writeFieldEnd();
      }
      if (struct.contactsPhone != null) {
        oprot.writeFieldBegin(CONTACTS_PHONE_FIELD_DESC);
        oprot.writeString(struct.contactsPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.businessCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NOTARIZATION_FIELD_DESC);
      oprot.writeI32(struct.isNotarization);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
      oprot.writeI32(struct.isDelete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      if (struct.managers != null) {
        oprot.writeFieldBegin(MANAGERS_FIELD_DESC);
        oprot.writeString(struct.managers);
        oprot.writeFieldEnd();
      }
      if (struct.managersPhone != null) {
        oprot.writeFieldBegin(MANAGERS_PHONE_FIELD_DESC);
        oprot.writeString(struct.managersPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_NO_FIELD_DESC);
      oprot.writeI32(struct.businessSourceNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.collectFileStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.auditorOpinion != null) {
        oprot.writeFieldBegin(AUDITOR_OPINION_FIELD_DESC);
        oprot.writeString(struct.auditorOpinion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_SELLER_FIELD_DESC);
      oprot.writeI32(struct.isSeller);
      oprot.writeFieldEnd();
      if (struct.declaration != null) {
        oprot.writeFieldBegin(DECLARATION_FIELD_DESC);
        oprot.writeString(struct.declaration);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundFileStatus);
      oprot.writeFieldEnd();
      if (struct.chechanDate != null) {
        oprot.writeFieldBegin(CHECHAN_DATE_FIELD_DESC);
        oprot.writeString(struct.chechanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECHAN_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.chechanUserId);
      oprot.writeFieldEnd();
      if (struct.chechanCause != null) {
        oprot.writeFieldBegin(CHECHAN_CAUSE_FIELD_DESC);
        oprot.writeString(struct.chechanCause);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.orgCustomerName != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.orgCustomerName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCustomerPhone != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_PHONE_FIELD_DESC);
        oprot.writeString(struct.orgCustomerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.orgCustomerCard != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_CARD_FIELD_DESC);
        oprot.writeString(struct.orgCustomerCard);
        oprot.writeFieldEnd();
      }
      if (struct.planLoanDate != null) {
        oprot.writeFieldBegin(PLAN_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.planLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.loanRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LOAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.maxLoanRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
      oprot.writeI32(struct.isClosed);
      oprot.writeFieldEnd();
      if (struct.projectGuarantee != null) {
        oprot.writeFieldBegin(PROJECT_GUARANTEE_FIELD_DESC);
        struct.projectGuarantee.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.projectProperty != null) {
        oprot.writeFieldBegin(PROJECT_PROPERTY_FIELD_DESC);
        struct.projectProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.projectForeclosure != null) {
        oprot.writeFieldBegin(PROJECT_FORECLOSURE_FIELD_DESC);
        struct.projectForeclosure.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.areaCode != null) {
        oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
        oprot.writeString(struct.areaCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.applyUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REJECT_FIELD_DESC);
      oprot.writeI32(struct.isReject);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXAMINE_USER_FIELD_DESC);
      oprot.writeI32(struct.examineUser);
      oprot.writeFieldEnd();
      if (struct.examineDate != null) {
        oprot.writeFieldBegin(EXAMINE_DATE_FIELD_DESC);
        oprot.writeString(struct.examineDate);
        oprot.writeFieldEnd();
      }
      if (struct.examineOpinion != null) {
        oprot.writeFieldBegin(EXAMINE_OPINION_FIELD_DESC);
        oprot.writeString(struct.examineOpinion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ASSIGNED_FIELD_DESC);
      oprot.writeI32(struct.isAssigned);
      oprot.writeFieldEnd();
      if (struct.pids != null) {
        oprot.writeFieldBegin(PIDS_FIELD_DESC);
        oprot.writeString(struct.pids);
        oprot.writeFieldEnd();
      }
      if (struct.projectIds != null) {
        oprot.writeFieldBegin(PROJECT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.projectIds.size()));
          for (String _iter9 : struct.projectIds)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.estateList != null) {
        oprot.writeFieldBegin(ESTATE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.estateList.size()));
          for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _iter10 : struct.estateList)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.houseIds != null) {
        oprot.writeFieldBegin(HOUSE_IDS_FIELD_DESC);
        oprot.writeString(struct.houseIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORE_AFTER_MONITOR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreAfterMonitorStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.rejectType);
      oprot.writeFieldEnd();
      if (struct.originalLoanIds != null) {
        oprot.writeFieldBegin(ORIGINAL_LOAN_IDS_FIELD_DESC);
        oprot.writeString(struct.originalLoanIds);
        oprot.writeFieldEnd();
      }
      if (struct.originalLoanList != null) {
        oprot.writeFieldBegin(ORIGINAL_LOAN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.originalLoanList.size()));
          for (com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan _iter11 : struct.originalLoanList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userPids != null) {
        oprot.writeFieldBegin(USER_PIDS_FIELD_DESC);
        oprot.writeString(struct.userPids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectTupleSchemeFactory implements SchemeFactory {
    public BizProjectTupleScheme getScheme() {
      return new BizProjectTupleScheme();
    }
  }

  private static class BizProjectTupleScheme extends TupleScheme<BizProject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectType()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(4);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(5);
      }
      if (struct.isSetBusinessCatelog()) {
        optionals.set(6);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(7);
      }
      if (struct.isSetFlowCatelog()) {
        optionals.set(8);
      }
      if (struct.isSetMyType()) {
        optionals.set(9);
      }
      if (struct.isSetMyMain()) {
        optionals.set(10);
      }
      if (struct.isSetLoanInterestRecord()) {
        optionals.set(11);
      }
      if (struct.isSetLoanMgrRecord()) {
        optionals.set(12);
      }
      if (struct.isSetIsAllowPrepay()) {
        optionals.set(13);
      }
      if (struct.isSetIsReturnInterest()) {
        optionals.set(14);
      }
      if (struct.isSetLoanOtherFee()) {
        optionals.set(15);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(16);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(17);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(18);
      }
      if (struct.isSetStatus()) {
        optionals.set(19);
      }
      if (struct.isSetCirculateType()) {
        optionals.set(20);
      }
      if (struct.isSetSurveyResult()) {
        optionals.set(21);
      }
      if (struct.isSetComments()) {
        optionals.set(22);
      }
      if (struct.isSetIsRejected()) {
        optionals.set(23);
      }
      if (struct.isSetProductId()) {
        optionals.set(24);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(25);
      }
      if (struct.isSetAddress()) {
        optionals.set(26);
      }
      if (struct.isSetBusinessContacts()) {
        optionals.set(27);
      }
      if (struct.isSetContactsPhone()) {
        optionals.set(28);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(29);
      }
      if (struct.isSetBusinessCategory()) {
        optionals.set(30);
      }
      if (struct.isSetIsNotarization()) {
        optionals.set(31);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(32);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(33);
      }
      if (struct.isSetManagers()) {
        optionals.set(34);
      }
      if (struct.isSetManagersPhone()) {
        optionals.set(35);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(36);
      }
      if (struct.isSetBusinessSourceNo()) {
        optionals.set(37);
      }
      if (struct.isSetCollectFileStatus()) {
        optionals.set(38);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(39);
      }
      if (struct.isSetAuditorOpinion()) {
        optionals.set(40);
      }
      if (struct.isSetIsSeller()) {
        optionals.set(41);
      }
      if (struct.isSetDeclaration()) {
        optionals.set(42);
      }
      if (struct.isSetRefundFileStatus()) {
        optionals.set(43);
      }
      if (struct.isSetChechanDate()) {
        optionals.set(44);
      }
      if (struct.isSetChechanUserId()) {
        optionals.set(45);
      }
      if (struct.isSetChechanCause()) {
        optionals.set(46);
      }
      if (struct.isSetOrgId()) {
        optionals.set(47);
      }
      if (struct.isSetOrgCustomerName()) {
        optionals.set(48);
      }
      if (struct.isSetOrgCustomerPhone()) {
        optionals.set(49);
      }
      if (struct.isSetOrgCustomerCard()) {
        optionals.set(50);
      }
      if (struct.isSetPlanLoanDate()) {
        optionals.set(51);
      }
      if (struct.isSetPlanLoanMoney()) {
        optionals.set(52);
      }
      if (struct.isSetLoanRate()) {
        optionals.set(53);
      }
      if (struct.isSetMaxLoanRate()) {
        optionals.set(54);
      }
      if (struct.isSetIsClosed()) {
        optionals.set(55);
      }
      if (struct.isSetProjectGuarantee()) {
        optionals.set(56);
      }
      if (struct.isSetProjectProperty()) {
        optionals.set(57);
      }
      if (struct.isSetProjectForeclosure()) {
        optionals.set(58);
      }
      if (struct.isSetOrgName()) {
        optionals.set(59);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(60);
      }
      if (struct.isSetApplyUserId()) {
        optionals.set(61);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(62);
      }
      if (struct.isSetIsReject()) {
        optionals.set(63);
      }
      if (struct.isSetExamineUser()) {
        optionals.set(64);
      }
      if (struct.isSetExamineDate()) {
        optionals.set(65);
      }
      if (struct.isSetExamineOpinion()) {
        optionals.set(66);
      }
      if (struct.isSetIsAssigned()) {
        optionals.set(67);
      }
      if (struct.isSetPids()) {
        optionals.set(68);
      }
      if (struct.isSetProjectIds()) {
        optionals.set(69);
      }
      if (struct.isSetEstateList()) {
        optionals.set(70);
      }
      if (struct.isSetHouseIds()) {
        optionals.set(71);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        optionals.set(72);
      }
      if (struct.isSetRejectType()) {
        optionals.set(73);
      }
      if (struct.isSetOriginalLoanIds()) {
        optionals.set(74);
      }
      if (struct.isSetOriginalLoanList()) {
        optionals.set(75);
      }
      if (struct.isSetUserPids()) {
        optionals.set(76);
      }
      oprot.writeBitSet(optionals, 77);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetBusinessCatelog()) {
        oprot.writeString(struct.businessCatelog);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeString(struct.businessType);
      }
      if (struct.isSetFlowCatelog()) {
        oprot.writeString(struct.flowCatelog);
      }
      if (struct.isSetMyType()) {
        oprot.writeString(struct.myType);
      }
      if (struct.isSetMyMain()) {
        oprot.writeString(struct.myMain);
      }
      if (struct.isSetLoanInterestRecord()) {
        oprot.writeI32(struct.loanInterestRecord);
      }
      if (struct.isSetLoanMgrRecord()) {
        oprot.writeI32(struct.loanMgrRecord);
      }
      if (struct.isSetIsAllowPrepay()) {
        oprot.writeI32(struct.isAllowPrepay);
      }
      if (struct.isSetIsReturnInterest()) {
        oprot.writeI32(struct.isReturnInterest);
      }
      if (struct.isSetLoanOtherFee()) {
        oprot.writeI32(struct.loanOtherFee);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCirculateType()) {
        oprot.writeI32(struct.circulateType);
      }
      if (struct.isSetSurveyResult()) {
        oprot.writeString(struct.surveyResult);
      }
      if (struct.isSetComments()) {
        oprot.writeString(struct.comments);
      }
      if (struct.isSetIsRejected()) {
        oprot.writeI32(struct.isRejected);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetBusinessContacts()) {
        oprot.writeString(struct.businessContacts);
      }
      if (struct.isSetContactsPhone()) {
        oprot.writeString(struct.contactsPhone);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetBusinessCategory()) {
        oprot.writeI32(struct.businessCategory);
      }
      if (struct.isSetIsNotarization()) {
        oprot.writeI32(struct.isNotarization);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeI32(struct.isDelete);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetManagers()) {
        oprot.writeString(struct.managers);
      }
      if (struct.isSetManagersPhone()) {
        oprot.writeString(struct.managersPhone);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetBusinessSourceNo()) {
        oprot.writeI32(struct.businessSourceNo);
      }
      if (struct.isSetCollectFileStatus()) {
        oprot.writeI32(struct.collectFileStatus);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetAuditorOpinion()) {
        oprot.writeString(struct.auditorOpinion);
      }
      if (struct.isSetIsSeller()) {
        oprot.writeI32(struct.isSeller);
      }
      if (struct.isSetDeclaration()) {
        oprot.writeString(struct.declaration);
      }
      if (struct.isSetRefundFileStatus()) {
        oprot.writeI32(struct.refundFileStatus);
      }
      if (struct.isSetChechanDate()) {
        oprot.writeString(struct.chechanDate);
      }
      if (struct.isSetChechanUserId()) {
        oprot.writeI32(struct.chechanUserId);
      }
      if (struct.isSetChechanCause()) {
        oprot.writeString(struct.chechanCause);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetOrgCustomerName()) {
        oprot.writeString(struct.orgCustomerName);
      }
      if (struct.isSetOrgCustomerPhone()) {
        oprot.writeString(struct.orgCustomerPhone);
      }
      if (struct.isSetOrgCustomerCard()) {
        oprot.writeString(struct.orgCustomerCard);
      }
      if (struct.isSetPlanLoanDate()) {
        oprot.writeString(struct.planLoanDate);
      }
      if (struct.isSetPlanLoanMoney()) {
        oprot.writeDouble(struct.planLoanMoney);
      }
      if (struct.isSetLoanRate()) {
        oprot.writeDouble(struct.loanRate);
      }
      if (struct.isSetMaxLoanRate()) {
        oprot.writeDouble(struct.maxLoanRate);
      }
      if (struct.isSetIsClosed()) {
        oprot.writeI32(struct.isClosed);
      }
      if (struct.isSetProjectGuarantee()) {
        struct.projectGuarantee.write(oprot);
      }
      if (struct.isSetProjectProperty()) {
        struct.projectProperty.write(oprot);
      }
      if (struct.isSetProjectForeclosure()) {
        struct.projectForeclosure.write(oprot);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeString(struct.areaCode);
      }
      if (struct.isSetApplyUserId()) {
        oprot.writeI32(struct.applyUserId);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetIsReject()) {
        oprot.writeI32(struct.isReject);
      }
      if (struct.isSetExamineUser()) {
        oprot.writeI32(struct.examineUser);
      }
      if (struct.isSetExamineDate()) {
        oprot.writeString(struct.examineDate);
      }
      if (struct.isSetExamineOpinion()) {
        oprot.writeString(struct.examineOpinion);
      }
      if (struct.isSetIsAssigned()) {
        oprot.writeI32(struct.isAssigned);
      }
      if (struct.isSetPids()) {
        oprot.writeString(struct.pids);
      }
      if (struct.isSetProjectIds()) {
        {
          oprot.writeI32(struct.projectIds.size());
          for (String _iter12 : struct.projectIds)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetEstateList()) {
        {
          oprot.writeI32(struct.estateList.size());
          for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _iter13 : struct.estateList)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetHouseIds()) {
        oprot.writeString(struct.houseIds);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        oprot.writeI32(struct.foreAfterMonitorStatus);
      }
      if (struct.isSetRejectType()) {
        oprot.writeI32(struct.rejectType);
      }
      if (struct.isSetOriginalLoanIds()) {
        oprot.writeString(struct.originalLoanIds);
      }
      if (struct.isSetOriginalLoanList()) {
        {
          oprot.writeI32(struct.originalLoanList.size());
          for (com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan _iter14 : struct.originalLoanList)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetUserPids()) {
        oprot.writeString(struct.userPids);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(77);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.businessCatelog = iprot.readString();
        struct.setBusinessCatelogIsSet(true);
      }
      if (incoming.get(7)) {
        struct.businessType = iprot.readString();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flowCatelog = iprot.readString();
        struct.setFlowCatelogIsSet(true);
      }
      if (incoming.get(9)) {
        struct.myType = iprot.readString();
        struct.setMyTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.myMain = iprot.readString();
        struct.setMyMainIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanInterestRecord = iprot.readI32();
        struct.setLoanInterestRecordIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loanMgrRecord = iprot.readI32();
        struct.setLoanMgrRecordIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isAllowPrepay = iprot.readI32();
        struct.setIsAllowPrepayIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isReturnInterest = iprot.readI32();
        struct.setIsReturnInterestIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanOtherFee = iprot.readI32();
        struct.setLoanOtherFeeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(18)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(19)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.circulateType = iprot.readI32();
        struct.setCirculateTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.surveyResult = iprot.readString();
        struct.setSurveyResultIsSet(true);
      }
      if (incoming.get(22)) {
        struct.comments = iprot.readString();
        struct.setCommentsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isRejected = iprot.readI32();
        struct.setIsRejectedIsSet(true);
      }
      if (incoming.get(24)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(25)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(26)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(27)) {
        struct.businessContacts = iprot.readString();
        struct.setBusinessContactsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.contactsPhone = iprot.readString();
        struct.setContactsPhoneIsSet(true);
      }
      if (incoming.get(29)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(30)) {
        struct.businessCategory = iprot.readI32();
        struct.setBusinessCategoryIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isNotarization = iprot.readI32();
        struct.setIsNotarizationIsSet(true);
      }
      if (incoming.get(32)) {
        struct.isDelete = iprot.readI32();
        struct.setIsDeleteIsSet(true);
      }
      if (incoming.get(33)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(34)) {
        struct.managers = iprot.readString();
        struct.setManagersIsSet(true);
      }
      if (incoming.get(35)) {
        struct.managersPhone = iprot.readString();
        struct.setManagersPhoneIsSet(true);
      }
      if (incoming.get(36)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(37)) {
        struct.businessSourceNo = iprot.readI32();
        struct.setBusinessSourceNoIsSet(true);
      }
      if (incoming.get(38)) {
        struct.collectFileStatus = iprot.readI32();
        struct.setCollectFileStatusIsSet(true);
      }
      if (incoming.get(39)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(40)) {
        struct.auditorOpinion = iprot.readString();
        struct.setAuditorOpinionIsSet(true);
      }
      if (incoming.get(41)) {
        struct.isSeller = iprot.readI32();
        struct.setIsSellerIsSet(true);
      }
      if (incoming.get(42)) {
        struct.declaration = iprot.readString();
        struct.setDeclarationIsSet(true);
      }
      if (incoming.get(43)) {
        struct.refundFileStatus = iprot.readI32();
        struct.setRefundFileStatusIsSet(true);
      }
      if (incoming.get(44)) {
        struct.chechanDate = iprot.readString();
        struct.setChechanDateIsSet(true);
      }
      if (incoming.get(45)) {
        struct.chechanUserId = iprot.readI32();
        struct.setChechanUserIdIsSet(true);
      }
      if (incoming.get(46)) {
        struct.chechanCause = iprot.readString();
        struct.setChechanCauseIsSet(true);
      }
      if (incoming.get(47)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(48)) {
        struct.orgCustomerName = iprot.readString();
        struct.setOrgCustomerNameIsSet(true);
      }
      if (incoming.get(49)) {
        struct.orgCustomerPhone = iprot.readString();
        struct.setOrgCustomerPhoneIsSet(true);
      }
      if (incoming.get(50)) {
        struct.orgCustomerCard = iprot.readString();
        struct.setOrgCustomerCardIsSet(true);
      }
      if (incoming.get(51)) {
        struct.planLoanDate = iprot.readString();
        struct.setPlanLoanDateIsSet(true);
      }
      if (incoming.get(52)) {
        struct.planLoanMoney = iprot.readDouble();
        struct.setPlanLoanMoneyIsSet(true);
      }
      if (incoming.get(53)) {
        struct.loanRate = iprot.readDouble();
        struct.setLoanRateIsSet(true);
      }
      if (incoming.get(54)) {
        struct.maxLoanRate = iprot.readDouble();
        struct.setMaxLoanRateIsSet(true);
      }
      if (incoming.get(55)) {
        struct.isClosed = iprot.readI32();
        struct.setIsClosedIsSet(true);
      }
      if (incoming.get(56)) {
        struct.projectGuarantee = new com.xlkfinance.bms.rpc.beforeloan.ProjectGuarantee();
        struct.projectGuarantee.read(iprot);
        struct.setProjectGuaranteeIsSet(true);
      }
      if (incoming.get(57)) {
        struct.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty();
        struct.projectProperty.read(iprot);
        struct.setProjectPropertyIsSet(true);
      }
      if (incoming.get(58)) {
        struct.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure();
        struct.projectForeclosure.read(iprot);
        struct.setProjectForeclosureIsSet(true);
      }
      if (incoming.get(59)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(60)) {
        struct.areaCode = iprot.readString();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(61)) {
        struct.applyUserId = iprot.readI32();
        struct.setApplyUserIdIsSet(true);
      }
      if (incoming.get(62)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(63)) {
        struct.isReject = iprot.readI32();
        struct.setIsRejectIsSet(true);
      }
      if (incoming.get(64)) {
        struct.examineUser = iprot.readI32();
        struct.setExamineUserIsSet(true);
      }
      if (incoming.get(65)) {
        struct.examineDate = iprot.readString();
        struct.setExamineDateIsSet(true);
      }
      if (incoming.get(66)) {
        struct.examineOpinion = iprot.readString();
        struct.setExamineOpinionIsSet(true);
      }
      if (incoming.get(67)) {
        struct.isAssigned = iprot.readI32();
        struct.setIsAssignedIsSet(true);
      }
      if (incoming.get(68)) {
        struct.pids = iprot.readString();
        struct.setPidsIsSet(true);
      }
      if (incoming.get(69)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.projectIds = new ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.projectIds.add(_elem16);
          }
        }
        struct.setProjectIdsIsSet(true);
      }
      if (incoming.get(70)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(_list18.size);
          com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate();
            _elem19.read(iprot);
            struct.estateList.add(_elem19);
          }
        }
        struct.setEstateListIsSet(true);
      }
      if (incoming.get(71)) {
        struct.houseIds = iprot.readString();
        struct.setHouseIdsIsSet(true);
      }
      if (incoming.get(72)) {
        struct.foreAfterMonitorStatus = iprot.readI32();
        struct.setForeAfterMonitorStatusIsSet(true);
      }
      if (incoming.get(73)) {
        struct.rejectType = iprot.readI32();
        struct.setRejectTypeIsSet(true);
      }
      if (incoming.get(74)) {
        struct.originalLoanIds = iprot.readString();
        struct.setOriginalLoanIdsIsSet(true);
      }
      if (incoming.get(75)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.originalLoanList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan>(_list21.size);
          com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new com.xlkfinance.bms.rpc.beforeloan.BizOriginalLoan();
            _elem22.read(iprot);
            struct.originalLoanList.add(_elem22);
          }
        }
        struct.setOriginalLoanListIsSet(true);
      }
      if (incoming.get(76)) {
        struct.userPids = iprot.readString();
        struct.setUserPidsIsSet(true);
      }
    }
  }

}


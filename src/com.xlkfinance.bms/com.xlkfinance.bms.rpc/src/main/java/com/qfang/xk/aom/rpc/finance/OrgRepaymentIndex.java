/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-5")
public class OrgRepaymentIndex implements org.apache.thrift.TBase<OrgRepaymentIndex, OrgRepaymentIndex._Fields>, java.io.Serializable, Cloneable, Comparable<OrgRepaymentIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgRepaymentIndex");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REAL_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REAL_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("realRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_REPAYMENT_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("realRepaymentDateEnd", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentDateEnd", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REPAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField APPLY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserId", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgRepaymentIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgRepaymentIndexTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public int orgId; // required
  public int repaymentId; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public double realRepaymentMoney; // required
  public String realRepaymentDate; // required
  public String realRepaymentDateEnd; // required
  public double planRepaymentMoney; // required
  public String planRepaymentDate; // required
  public String planRepaymentDateEnd; // required
  public int repaymentStatus; // required
  public double overdueFee; // required
  public int overdueDay; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int applyUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    ORG_ID((short)3, "orgId"),
    REPAYMENT_ID((short)4, "repaymentId"),
    PROJECT_ID((short)5, "projectId"),
    PROJECT_NUMBER((short)6, "projectNumber"),
    PROJECT_NAME((short)7, "projectName"),
    REAL_REPAYMENT_MONEY((short)8, "realRepaymentMoney"),
    REAL_REPAYMENT_DATE((short)9, "realRepaymentDate"),
    REAL_REPAYMENT_DATE_END((short)10, "realRepaymentDateEnd"),
    PLAN_REPAYMENT_MONEY((short)11, "planRepaymentMoney"),
    PLAN_REPAYMENT_DATE((short)12, "planRepaymentDate"),
    PLAN_REPAYMENT_DATE_END((short)13, "planRepaymentDateEnd"),
    REPAYMENT_STATUS((short)14, "repaymentStatus"),
    OVERDUE_FEE((short)15, "overdueFee"),
    OVERDUE_DAY((short)16, "overdueDay"),
    HOUSE_NAME((short)17, "houseName"),
    BUYER_NAME((short)18, "buyerName"),
    SELLER_NAME((short)19, "sellerName"),
    APPLY_USER_ID((short)20, "applyUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // ORG_ID
          return ORG_ID;
        case 4: // REPAYMENT_ID
          return REPAYMENT_ID;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 7: // PROJECT_NAME
          return PROJECT_NAME;
        case 8: // REAL_REPAYMENT_MONEY
          return REAL_REPAYMENT_MONEY;
        case 9: // REAL_REPAYMENT_DATE
          return REAL_REPAYMENT_DATE;
        case 10: // REAL_REPAYMENT_DATE_END
          return REAL_REPAYMENT_DATE_END;
        case 11: // PLAN_REPAYMENT_MONEY
          return PLAN_REPAYMENT_MONEY;
        case 12: // PLAN_REPAYMENT_DATE
          return PLAN_REPAYMENT_DATE;
        case 13: // PLAN_REPAYMENT_DATE_END
          return PLAN_REPAYMENT_DATE_END;
        case 14: // REPAYMENT_STATUS
          return REPAYMENT_STATUS;
        case 15: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 16: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 17: // HOUSE_NAME
          return HOUSE_NAME;
        case 18: // BUYER_NAME
          return BUYER_NAME;
        case 19: // SELLER_NAME
          return SELLER_NAME;
        case 20: // APPLY_USER_ID
          return APPLY_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __ORGID_ISSET_ID = 2;
  private static final int __REPAYMENTID_ISSET_ID = 3;
  private static final int __PROJECTID_ISSET_ID = 4;
  private static final int __REALREPAYMENTMONEY_ISSET_ID = 5;
  private static final int __PLANREPAYMENTMONEY_ISSET_ID = 6;
  private static final int __REPAYMENTSTATUS_ISSET_ID = 7;
  private static final int __OVERDUEFEE_ISSET_ID = 8;
  private static final int __OVERDUEDAY_ISSET_ID = 9;
  private static final int __APPLYUSERID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("realRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_REPAYMENT_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("realRepaymentDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("applyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgRepaymentIndex.class, metaDataMap);
  }

  public OrgRepaymentIndex() {
    this.page = 1;

    this.rows = 10;

  }

  public OrgRepaymentIndex(
    int page,
    int rows,
    int orgId,
    int repaymentId,
    int projectId,
    String projectNumber,
    String projectName,
    double realRepaymentMoney,
    String realRepaymentDate,
    String realRepaymentDateEnd,
    double planRepaymentMoney,
    String planRepaymentDate,
    String planRepaymentDateEnd,
    int repaymentStatus,
    double overdueFee,
    int overdueDay,
    String houseName,
    String buyerName,
    String sellerName,
    int applyUserId)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.realRepaymentMoney = realRepaymentMoney;
    setRealRepaymentMoneyIsSet(true);
    this.realRepaymentDate = realRepaymentDate;
    this.realRepaymentDateEnd = realRepaymentDateEnd;
    this.planRepaymentMoney = planRepaymentMoney;
    setPlanRepaymentMoneyIsSet(true);
    this.planRepaymentDate = planRepaymentDate;
    this.planRepaymentDateEnd = planRepaymentDateEnd;
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgRepaymentIndex(OrgRepaymentIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    this.orgId = other.orgId;
    this.repaymentId = other.repaymentId;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.realRepaymentMoney = other.realRepaymentMoney;
    if (other.isSetRealRepaymentDate()) {
      this.realRepaymentDate = other.realRepaymentDate;
    }
    if (other.isSetRealRepaymentDateEnd()) {
      this.realRepaymentDateEnd = other.realRepaymentDateEnd;
    }
    this.planRepaymentMoney = other.planRepaymentMoney;
    if (other.isSetPlanRepaymentDate()) {
      this.planRepaymentDate = other.planRepaymentDate;
    }
    if (other.isSetPlanRepaymentDateEnd()) {
      this.planRepaymentDateEnd = other.planRepaymentDateEnd;
    }
    this.repaymentStatus = other.repaymentStatus;
    this.overdueFee = other.overdueFee;
    this.overdueDay = other.overdueDay;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.applyUserId = other.applyUserId;
  }

  public OrgRepaymentIndex deepCopy() {
    return new OrgRepaymentIndex(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    setOrgIdIsSet(false);
    this.orgId = 0;
    setRepaymentIdIsSet(false);
    this.repaymentId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setRealRepaymentMoneyIsSet(false);
    this.realRepaymentMoney = 0.0;
    this.realRepaymentDate = null;
    this.realRepaymentDateEnd = null;
    setPlanRepaymentMoneyIsSet(false);
    this.planRepaymentMoney = 0.0;
    this.planRepaymentDate = null;
    this.planRepaymentDateEnd = null;
    setRepaymentStatusIsSet(false);
    this.repaymentStatus = 0;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setApplyUserIdIsSet(false);
    this.applyUserId = 0;
  }

  public int getPage() {
    return this.page;
  }

  public OrgRepaymentIndex setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgRepaymentIndex setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgRepaymentIndex setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getRepaymentId() {
    return this.repaymentId;
  }

  public OrgRepaymentIndex setRepaymentId(int repaymentId) {
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    return this;
  }

  public void unsetRepaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  /** Returns true if field repaymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  public void setRepaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public OrgRepaymentIndex setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public OrgRepaymentIndex setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public OrgRepaymentIndex setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public double getRealRepaymentMoney() {
    return this.realRepaymentMoney;
  }

  public OrgRepaymentIndex setRealRepaymentMoney(double realRepaymentMoney) {
    this.realRepaymentMoney = realRepaymentMoney;
    setRealRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRealRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field realRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID);
  }

  public void setRealRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID, value);
  }

  public String getRealRepaymentDate() {
    return this.realRepaymentDate;
  }

  public OrgRepaymentIndex setRealRepaymentDate(String realRepaymentDate) {
    this.realRepaymentDate = realRepaymentDate;
    return this;
  }

  public void unsetRealRepaymentDate() {
    this.realRepaymentDate = null;
  }

  /** Returns true if field realRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRealRepaymentDate() {
    return this.realRepaymentDate != null;
  }

  public void setRealRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.realRepaymentDate = null;
    }
  }

  public String getRealRepaymentDateEnd() {
    return this.realRepaymentDateEnd;
  }

  public OrgRepaymentIndex setRealRepaymentDateEnd(String realRepaymentDateEnd) {
    this.realRepaymentDateEnd = realRepaymentDateEnd;
    return this;
  }

  public void unsetRealRepaymentDateEnd() {
    this.realRepaymentDateEnd = null;
  }

  /** Returns true if field realRepaymentDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRealRepaymentDateEnd() {
    return this.realRepaymentDateEnd != null;
  }

  public void setRealRepaymentDateEndIsSet(boolean value) {
    if (!value) {
      this.realRepaymentDateEnd = null;
    }
  }

  public double getPlanRepaymentMoney() {
    return this.planRepaymentMoney;
  }

  public OrgRepaymentIndex setPlanRepaymentMoney(double planRepaymentMoney) {
    this.planRepaymentMoney = planRepaymentMoney;
    setPlanRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetPlanRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field planRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID);
  }

  public void setPlanRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID, value);
  }

  public String getPlanRepaymentDate() {
    return this.planRepaymentDate;
  }

  public OrgRepaymentIndex setPlanRepaymentDate(String planRepaymentDate) {
    this.planRepaymentDate = planRepaymentDate;
    return this;
  }

  public void unsetPlanRepaymentDate() {
    this.planRepaymentDate = null;
  }

  /** Returns true if field planRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentDate() {
    return this.planRepaymentDate != null;
  }

  public void setPlanRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentDate = null;
    }
  }

  public String getPlanRepaymentDateEnd() {
    return this.planRepaymentDateEnd;
  }

  public OrgRepaymentIndex setPlanRepaymentDateEnd(String planRepaymentDateEnd) {
    this.planRepaymentDateEnd = planRepaymentDateEnd;
    return this;
  }

  public void unsetPlanRepaymentDateEnd() {
    this.planRepaymentDateEnd = null;
  }

  /** Returns true if field planRepaymentDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentDateEnd() {
    return this.planRepaymentDateEnd != null;
  }

  public void setPlanRepaymentDateEndIsSet(boolean value) {
    if (!value) {
      this.planRepaymentDateEnd = null;
    }
  }

  public int getRepaymentStatus() {
    return this.repaymentStatus;
  }

  public OrgRepaymentIndex setRepaymentStatus(int repaymentStatus) {
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    return this;
  }

  public void unsetRepaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field repaymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  public void setRepaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID, value);
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public OrgRepaymentIndex setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public OrgRepaymentIndex setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public OrgRepaymentIndex setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public OrgRepaymentIndex setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public OrgRepaymentIndex setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getApplyUserId() {
    return this.applyUserId;
  }

  public OrgRepaymentIndex setApplyUserId(int applyUserId) {
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    return this;
  }

  public void unsetApplyUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  /** Returns true if field applyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  public void setApplyUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case REPAYMENT_ID:
      if (value == null) {
        unsetRepaymentId();
      } else {
        setRepaymentId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case REAL_REPAYMENT_MONEY:
      if (value == null) {
        unsetRealRepaymentMoney();
      } else {
        setRealRepaymentMoney((Double)value);
      }
      break;

    case REAL_REPAYMENT_DATE:
      if (value == null) {
        unsetRealRepaymentDate();
      } else {
        setRealRepaymentDate((String)value);
      }
      break;

    case REAL_REPAYMENT_DATE_END:
      if (value == null) {
        unsetRealRepaymentDateEnd();
      } else {
        setRealRepaymentDateEnd((String)value);
      }
      break;

    case PLAN_REPAYMENT_MONEY:
      if (value == null) {
        unsetPlanRepaymentMoney();
      } else {
        setPlanRepaymentMoney((Double)value);
      }
      break;

    case PLAN_REPAYMENT_DATE:
      if (value == null) {
        unsetPlanRepaymentDate();
      } else {
        setPlanRepaymentDate((String)value);
      }
      break;

    case PLAN_REPAYMENT_DATE_END:
      if (value == null) {
        unsetPlanRepaymentDateEnd();
      } else {
        setPlanRepaymentDateEnd((String)value);
      }
      break;

    case REPAYMENT_STATUS:
      if (value == null) {
        unsetRepaymentStatus();
      } else {
        setRepaymentStatus((Integer)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case APPLY_USER_ID:
      if (value == null) {
        unsetApplyUserId();
      } else {
        setApplyUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case REPAYMENT_ID:
      return Integer.valueOf(getRepaymentId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case REAL_REPAYMENT_MONEY:
      return Double.valueOf(getRealRepaymentMoney());

    case REAL_REPAYMENT_DATE:
      return getRealRepaymentDate();

    case REAL_REPAYMENT_DATE_END:
      return getRealRepaymentDateEnd();

    case PLAN_REPAYMENT_MONEY:
      return Double.valueOf(getPlanRepaymentMoney());

    case PLAN_REPAYMENT_DATE:
      return getPlanRepaymentDate();

    case PLAN_REPAYMENT_DATE_END:
      return getPlanRepaymentDateEnd();

    case REPAYMENT_STATUS:
      return Integer.valueOf(getRepaymentStatus());

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case APPLY_USER_ID:
      return Integer.valueOf(getApplyUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case ORG_ID:
      return isSetOrgId();
    case REPAYMENT_ID:
      return isSetRepaymentId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case REAL_REPAYMENT_MONEY:
      return isSetRealRepaymentMoney();
    case REAL_REPAYMENT_DATE:
      return isSetRealRepaymentDate();
    case REAL_REPAYMENT_DATE_END:
      return isSetRealRepaymentDateEnd();
    case PLAN_REPAYMENT_MONEY:
      return isSetPlanRepaymentMoney();
    case PLAN_REPAYMENT_DATE:
      return isSetPlanRepaymentDate();
    case PLAN_REPAYMENT_DATE_END:
      return isSetPlanRepaymentDateEnd();
    case REPAYMENT_STATUS:
      return isSetRepaymentStatus();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case APPLY_USER_ID:
      return isSetApplyUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgRepaymentIndex)
      return this.equals((OrgRepaymentIndex)that);
    return false;
  }

  public boolean equals(OrgRepaymentIndex that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_repaymentId = true;
    boolean that_present_repaymentId = true;
    if (this_present_repaymentId || that_present_repaymentId) {
      if (!(this_present_repaymentId && that_present_repaymentId))
        return false;
      if (this.repaymentId != that.repaymentId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_realRepaymentMoney = true;
    boolean that_present_realRepaymentMoney = true;
    if (this_present_realRepaymentMoney || that_present_realRepaymentMoney) {
      if (!(this_present_realRepaymentMoney && that_present_realRepaymentMoney))
        return false;
      if (this.realRepaymentMoney != that.realRepaymentMoney)
        return false;
    }

    boolean this_present_realRepaymentDate = true && this.isSetRealRepaymentDate();
    boolean that_present_realRepaymentDate = true && that.isSetRealRepaymentDate();
    if (this_present_realRepaymentDate || that_present_realRepaymentDate) {
      if (!(this_present_realRepaymentDate && that_present_realRepaymentDate))
        return false;
      if (!this.realRepaymentDate.equals(that.realRepaymentDate))
        return false;
    }

    boolean this_present_realRepaymentDateEnd = true && this.isSetRealRepaymentDateEnd();
    boolean that_present_realRepaymentDateEnd = true && that.isSetRealRepaymentDateEnd();
    if (this_present_realRepaymentDateEnd || that_present_realRepaymentDateEnd) {
      if (!(this_present_realRepaymentDateEnd && that_present_realRepaymentDateEnd))
        return false;
      if (!this.realRepaymentDateEnd.equals(that.realRepaymentDateEnd))
        return false;
    }

    boolean this_present_planRepaymentMoney = true;
    boolean that_present_planRepaymentMoney = true;
    if (this_present_planRepaymentMoney || that_present_planRepaymentMoney) {
      if (!(this_present_planRepaymentMoney && that_present_planRepaymentMoney))
        return false;
      if (this.planRepaymentMoney != that.planRepaymentMoney)
        return false;
    }

    boolean this_present_planRepaymentDate = true && this.isSetPlanRepaymentDate();
    boolean that_present_planRepaymentDate = true && that.isSetPlanRepaymentDate();
    if (this_present_planRepaymentDate || that_present_planRepaymentDate) {
      if (!(this_present_planRepaymentDate && that_present_planRepaymentDate))
        return false;
      if (!this.planRepaymentDate.equals(that.planRepaymentDate))
        return false;
    }

    boolean this_present_planRepaymentDateEnd = true && this.isSetPlanRepaymentDateEnd();
    boolean that_present_planRepaymentDateEnd = true && that.isSetPlanRepaymentDateEnd();
    if (this_present_planRepaymentDateEnd || that_present_planRepaymentDateEnd) {
      if (!(this_present_planRepaymentDateEnd && that_present_planRepaymentDateEnd))
        return false;
      if (!this.planRepaymentDateEnd.equals(that.planRepaymentDateEnd))
        return false;
    }

    boolean this_present_repaymentStatus = true;
    boolean that_present_repaymentStatus = true;
    if (this_present_repaymentStatus || that_present_repaymentStatus) {
      if (!(this_present_repaymentStatus && that_present_repaymentStatus))
        return false;
      if (this.repaymentStatus != that.repaymentStatus)
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_applyUserId = true;
    boolean that_present_applyUserId = true;
    if (this_present_applyUserId || that_present_applyUserId) {
      if (!(this_present_applyUserId && that_present_applyUserId))
        return false;
      if (this.applyUserId != that.applyUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_repaymentId = true;
    list.add(present_repaymentId);
    if (present_repaymentId)
      list.add(repaymentId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_realRepaymentMoney = true;
    list.add(present_realRepaymentMoney);
    if (present_realRepaymentMoney)
      list.add(realRepaymentMoney);

    boolean present_realRepaymentDate = true && (isSetRealRepaymentDate());
    list.add(present_realRepaymentDate);
    if (present_realRepaymentDate)
      list.add(realRepaymentDate);

    boolean present_realRepaymentDateEnd = true && (isSetRealRepaymentDateEnd());
    list.add(present_realRepaymentDateEnd);
    if (present_realRepaymentDateEnd)
      list.add(realRepaymentDateEnd);

    boolean present_planRepaymentMoney = true;
    list.add(present_planRepaymentMoney);
    if (present_planRepaymentMoney)
      list.add(planRepaymentMoney);

    boolean present_planRepaymentDate = true && (isSetPlanRepaymentDate());
    list.add(present_planRepaymentDate);
    if (present_planRepaymentDate)
      list.add(planRepaymentDate);

    boolean present_planRepaymentDateEnd = true && (isSetPlanRepaymentDateEnd());
    list.add(present_planRepaymentDateEnd);
    if (present_planRepaymentDateEnd)
      list.add(planRepaymentDateEnd);

    boolean present_repaymentStatus = true;
    list.add(present_repaymentStatus);
    if (present_repaymentStatus)
      list.add(repaymentStatus);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_applyUserId = true;
    list.add(present_applyUserId);
    if (present_applyUserId)
      list.add(applyUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgRepaymentIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentId()).compareTo(other.isSetRepaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentId, other.repaymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealRepaymentMoney()).compareTo(other.isSetRealRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realRepaymentMoney, other.realRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealRepaymentDate()).compareTo(other.isSetRealRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realRepaymentDate, other.realRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealRepaymentDateEnd()).compareTo(other.isSetRealRepaymentDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealRepaymentDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realRepaymentDateEnd, other.realRepaymentDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentMoney()).compareTo(other.isSetPlanRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentMoney, other.planRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentDate()).compareTo(other.isSetPlanRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentDate, other.planRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentDateEnd()).compareTo(other.isSetPlanRepaymentDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentDateEnd, other.planRepaymentDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentStatus()).compareTo(other.isSetRepaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentStatus, other.repaymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserId()).compareTo(other.isSetApplyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserId, other.applyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgRepaymentIndex(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentId:");
    sb.append(this.repaymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realRepaymentMoney:");
    sb.append(this.realRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realRepaymentDate:");
    if (this.realRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.realRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realRepaymentDateEnd:");
    if (this.realRepaymentDateEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.realRepaymentDateEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentMoney:");
    sb.append(this.planRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentDate:");
    if (this.planRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentDateEnd:");
    if (this.planRepaymentDateEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentDateEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentStatus:");
    sb.append(this.repaymentStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserId:");
    sb.append(this.applyUserId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgRepaymentIndexStandardSchemeFactory implements SchemeFactory {
    public OrgRepaymentIndexStandardScheme getScheme() {
      return new OrgRepaymentIndexStandardScheme();
    }
  }

  private static class OrgRepaymentIndexStandardScheme extends StandardScheme<OrgRepaymentIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgRepaymentIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentId = iprot.readI32();
              struct.setRepaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REAL_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realRepaymentMoney = iprot.readDouble();
              struct.setRealRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REAL_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realRepaymentDate = iprot.readString();
              struct.setRealRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_REPAYMENT_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realRepaymentDateEnd = iprot.readString();
              struct.setRealRepaymentDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planRepaymentMoney = iprot.readDouble();
              struct.setPlanRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLAN_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentDate = iprot.readString();
              struct.setPlanRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_REPAYMENT_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentDateEnd = iprot.readString();
              struct.setPlanRepaymentDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentStatus = iprot.readI32();
              struct.setRepaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // APPLY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyUserId = iprot.readI32();
              struct.setApplyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgRepaymentIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realRepaymentMoney);
      oprot.writeFieldEnd();
      if (struct.realRepaymentDate != null) {
        oprot.writeFieldBegin(REAL_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.realRepaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.realRepaymentDateEnd != null) {
        oprot.writeFieldBegin(REAL_REPAYMENT_DATE_END_FIELD_DESC);
        oprot.writeString(struct.realRepaymentDateEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planRepaymentMoney);
      oprot.writeFieldEnd();
      if (struct.planRepaymentDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.planRepaymentDateEnd != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_DATE_END_FIELD_DESC);
        oprot.writeString(struct.planRepaymentDateEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.repaymentStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.applyUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgRepaymentIndexTupleSchemeFactory implements SchemeFactory {
    public OrgRepaymentIndexTupleScheme getScheme() {
      return new OrgRepaymentIndexTupleScheme();
    }
  }

  private static class OrgRepaymentIndexTupleScheme extends TupleScheme<OrgRepaymentIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgRepaymentIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetOrgId()) {
        optionals.set(2);
      }
      if (struct.isSetRepaymentId()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(5);
      }
      if (struct.isSetProjectName()) {
        optionals.set(6);
      }
      if (struct.isSetRealRepaymentMoney()) {
        optionals.set(7);
      }
      if (struct.isSetRealRepaymentDate()) {
        optionals.set(8);
      }
      if (struct.isSetRealRepaymentDateEnd()) {
        optionals.set(9);
      }
      if (struct.isSetPlanRepaymentMoney()) {
        optionals.set(10);
      }
      if (struct.isSetPlanRepaymentDate()) {
        optionals.set(11);
      }
      if (struct.isSetPlanRepaymentDateEnd()) {
        optionals.set(12);
      }
      if (struct.isSetRepaymentStatus()) {
        optionals.set(13);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(14);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(15);
      }
      if (struct.isSetHouseName()) {
        optionals.set(16);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(17);
      }
      if (struct.isSetSellerName()) {
        optionals.set(18);
      }
      if (struct.isSetApplyUserId()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetRepaymentId()) {
        oprot.writeI32(struct.repaymentId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetRealRepaymentMoney()) {
        oprot.writeDouble(struct.realRepaymentMoney);
      }
      if (struct.isSetRealRepaymentDate()) {
        oprot.writeString(struct.realRepaymentDate);
      }
      if (struct.isSetRealRepaymentDateEnd()) {
        oprot.writeString(struct.realRepaymentDateEnd);
      }
      if (struct.isSetPlanRepaymentMoney()) {
        oprot.writeDouble(struct.planRepaymentMoney);
      }
      if (struct.isSetPlanRepaymentDate()) {
        oprot.writeString(struct.planRepaymentDate);
      }
      if (struct.isSetPlanRepaymentDateEnd()) {
        oprot.writeString(struct.planRepaymentDateEnd);
      }
      if (struct.isSetRepaymentStatus()) {
        oprot.writeI32(struct.repaymentStatus);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetApplyUserId()) {
        oprot.writeI32(struct.applyUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgRepaymentIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.repaymentId = iprot.readI32();
        struct.setRepaymentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.realRepaymentMoney = iprot.readDouble();
        struct.setRealRepaymentMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.realRepaymentDate = iprot.readString();
        struct.setRealRepaymentDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realRepaymentDateEnd = iprot.readString();
        struct.setRealRepaymentDateEndIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planRepaymentMoney = iprot.readDouble();
        struct.setPlanRepaymentMoneyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.planRepaymentDate = iprot.readString();
        struct.setPlanRepaymentDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planRepaymentDateEnd = iprot.readString();
        struct.setPlanRepaymentDateEndIsSet(true);
      }
      if (incoming.get(13)) {
        struct.repaymentStatus = iprot.readI32();
        struct.setRepaymentStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.applyUserId = iprot.readI32();
        struct.setApplyUserIdIsSet(true);
      }
    }
  }

}


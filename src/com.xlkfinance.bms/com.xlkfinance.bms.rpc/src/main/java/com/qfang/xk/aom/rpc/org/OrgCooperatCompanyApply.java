/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qfang.xk.aom.rpc.org;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-22")
public class OrgCooperatCompanyApply implements org.apache.thrift.TBase<OrgCooperatCompanyApply, OrgCooperatCompanyApply._Fields>, java.io.Serializable, Cloneable, Comparable<OrgCooperatCompanyApply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgCooperatCompanyApply");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AVAILABLE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COOPERATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperationStatus", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField HIS_COOPERATION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("hisCooperationNum", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField COOPERATION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperationNum", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PARTNER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField APPLY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyDate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SINGLE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUpperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField ACTUAL_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField FUND_SIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fundSizeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField REAL_ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realAssureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField COOPERATION_UPDATE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cooperationUpdateStatus", org.apache.thrift.protocol.TType.STRING, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrgCooperatCompanyApplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrgCooperatCompanyApplyTupleSchemeFactory());
  }

  public int pid; // required
  public int orgId; // required
  public int userId; // required
  public String startTime; // required
  public String endTime; // required
  public double creditLimit; // required
  public double availableLimit; // required
  public double assureMoney; // required
  public String orgName; // required
  public String orgCode; // required
  public int cooperationStatus; // required
  public int hisCooperationNum; // required
  public int cooperationNum; // required
  public int page; // required
  public int rows; // required
  public int applyStatus; // required
  public String partnerName; // required
  public String contact; // required
  public String phone; // required
  public String applyDate; // required
  public int isNeedHandle; // required
  public double rate; // required
  public double singleUpperLimit; // required
  public double actualFeeRate; // required
  public double fundSizeMoney; // required
  public double realAssureMoney; // required
  public List<Integer> userIds; // required
  public String cooperationUpdateStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ORG_ID((short)2, "orgId"),
    USER_ID((short)3, "userId"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime"),
    CREDIT_LIMIT((short)6, "creditLimit"),
    AVAILABLE_LIMIT((short)7, "availableLimit"),
    ASSURE_MONEY((short)8, "assureMoney"),
    ORG_NAME((short)9, "orgName"),
    ORG_CODE((short)10, "orgCode"),
    COOPERATION_STATUS((short)11, "cooperationStatus"),
    HIS_COOPERATION_NUM((short)12, "hisCooperationNum"),
    COOPERATION_NUM((short)13, "cooperationNum"),
    PAGE((short)14, "page"),
    ROWS((short)15, "rows"),
    APPLY_STATUS((short)16, "applyStatus"),
    PARTNER_NAME((short)17, "partnerName"),
    CONTACT((short)18, "contact"),
    PHONE((short)19, "phone"),
    APPLY_DATE((short)20, "applyDate"),
    IS_NEED_HANDLE((short)21, "isNeedHandle"),
    RATE((short)22, "rate"),
    SINGLE_UPPER_LIMIT((short)23, "singleUpperLimit"),
    ACTUAL_FEE_RATE((short)24, "actualFeeRate"),
    FUND_SIZE_MONEY((short)25, "fundSizeMoney"),
    REAL_ASSURE_MONEY((short)26, "realAssureMoney"),
    USER_IDS((short)27, "userIds"),
    COOPERATION_UPDATE_STATUS((short)28, "cooperationUpdateStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // CREDIT_LIMIT
          return CREDIT_LIMIT;
        case 7: // AVAILABLE_LIMIT
          return AVAILABLE_LIMIT;
        case 8: // ASSURE_MONEY
          return ASSURE_MONEY;
        case 9: // ORG_NAME
          return ORG_NAME;
        case 10: // ORG_CODE
          return ORG_CODE;
        case 11: // COOPERATION_STATUS
          return COOPERATION_STATUS;
        case 12: // HIS_COOPERATION_NUM
          return HIS_COOPERATION_NUM;
        case 13: // COOPERATION_NUM
          return COOPERATION_NUM;
        case 14: // PAGE
          return PAGE;
        case 15: // ROWS
          return ROWS;
        case 16: // APPLY_STATUS
          return APPLY_STATUS;
        case 17: // PARTNER_NAME
          return PARTNER_NAME;
        case 18: // CONTACT
          return CONTACT;
        case 19: // PHONE
          return PHONE;
        case 20: // APPLY_DATE
          return APPLY_DATE;
        case 21: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 22: // RATE
          return RATE;
        case 23: // SINGLE_UPPER_LIMIT
          return SINGLE_UPPER_LIMIT;
        case 24: // ACTUAL_FEE_RATE
          return ACTUAL_FEE_RATE;
        case 25: // FUND_SIZE_MONEY
          return FUND_SIZE_MONEY;
        case 26: // REAL_ASSURE_MONEY
          return REAL_ASSURE_MONEY;
        case 27: // USER_IDS
          return USER_IDS;
        case 28: // COOPERATION_UPDATE_STATUS
          return COOPERATION_UPDATE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __CREDITLIMIT_ISSET_ID = 3;
  private static final int __AVAILABLELIMIT_ISSET_ID = 4;
  private static final int __ASSUREMONEY_ISSET_ID = 5;
  private static final int __COOPERATIONSTATUS_ISSET_ID = 6;
  private static final int __HISCOOPERATIONNUM_ISSET_ID = 7;
  private static final int __COOPERATIONNUM_ISSET_ID = 8;
  private static final int __PAGE_ISSET_ID = 9;
  private static final int __ROWS_ISSET_ID = 10;
  private static final int __APPLYSTATUS_ISSET_ID = 11;
  private static final int __ISNEEDHANDLE_ISSET_ID = 12;
  private static final int __RATE_ISSET_ID = 13;
  private static final int __SINGLEUPPERLIMIT_ISSET_ID = 14;
  private static final int __ACTUALFEERATE_ISSET_ID = 15;
  private static final int __FUNDSIZEMONEY_ISSET_ID = 16;
  private static final int __REALASSUREMONEY_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("availableLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOPERATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("cooperationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIS_COOPERATION_NUM, new org.apache.thrift.meta_data.FieldMetaData("hisCooperationNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COOPERATION_NUM, new org.apache.thrift.meta_data.FieldMetaData("cooperationNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_NAME, new org.apache.thrift.meta_data.FieldMetaData("partnerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_DATE, new org.apache.thrift.meta_data.FieldMetaData("applyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SINGLE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singleUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("actualFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_SIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("fundSizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realAssureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COOPERATION_UPDATE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("cooperationUpdateStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgCooperatCompanyApply.class, metaDataMap);
  }

  public OrgCooperatCompanyApply() {
  }

  public OrgCooperatCompanyApply(
    int pid,
    int orgId,
    int userId,
    String startTime,
    String endTime,
    double creditLimit,
    double availableLimit,
    double assureMoney,
    String orgName,
    String orgCode,
    int cooperationStatus,
    int hisCooperationNum,
    int cooperationNum,
    int page,
    int rows,
    int applyStatus,
    String partnerName,
    String contact,
    String phone,
    String applyDate,
    int isNeedHandle,
    double rate,
    double singleUpperLimit,
    double actualFeeRate,
    double fundSizeMoney,
    double realAssureMoney,
    List<Integer> userIds,
    String cooperationUpdateStatus)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.startTime = startTime;
    this.endTime = endTime;
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    this.orgName = orgName;
    this.orgCode = orgCode;
    this.cooperationStatus = cooperationStatus;
    setCooperationStatusIsSet(true);
    this.hisCooperationNum = hisCooperationNum;
    setHisCooperationNumIsSet(true);
    this.cooperationNum = cooperationNum;
    setCooperationNumIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.partnerName = partnerName;
    this.contact = contact;
    this.phone = phone;
    this.applyDate = applyDate;
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.rate = rate;
    setRateIsSet(true);
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    this.realAssureMoney = realAssureMoney;
    setRealAssureMoneyIsSet(true);
    this.userIds = userIds;
    this.cooperationUpdateStatus = cooperationUpdateStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgCooperatCompanyApply(OrgCooperatCompanyApply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.orgId = other.orgId;
    this.userId = other.userId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.creditLimit = other.creditLimit;
    this.availableLimit = other.availableLimit;
    this.assureMoney = other.assureMoney;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    this.cooperationStatus = other.cooperationStatus;
    this.hisCooperationNum = other.hisCooperationNum;
    this.cooperationNum = other.cooperationNum;
    this.page = other.page;
    this.rows = other.rows;
    this.applyStatus = other.applyStatus;
    if (other.isSetPartnerName()) {
      this.partnerName = other.partnerName;
    }
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetApplyDate()) {
      this.applyDate = other.applyDate;
    }
    this.isNeedHandle = other.isNeedHandle;
    this.rate = other.rate;
    this.singleUpperLimit = other.singleUpperLimit;
    this.actualFeeRate = other.actualFeeRate;
    this.fundSizeMoney = other.fundSizeMoney;
    this.realAssureMoney = other.realAssureMoney;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCooperationUpdateStatus()) {
      this.cooperationUpdateStatus = other.cooperationUpdateStatus;
    }
  }

  public OrgCooperatCompanyApply deepCopy() {
    return new OrgCooperatCompanyApply(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.startTime = null;
    this.endTime = null;
    setCreditLimitIsSet(false);
    this.creditLimit = 0.0;
    setAvailableLimitIsSet(false);
    this.availableLimit = 0.0;
    setAssureMoneyIsSet(false);
    this.assureMoney = 0.0;
    this.orgName = null;
    this.orgCode = null;
    setCooperationStatusIsSet(false);
    this.cooperationStatus = 0;
    setHisCooperationNumIsSet(false);
    this.hisCooperationNum = 0;
    setCooperationNumIsSet(false);
    this.cooperationNum = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    this.partnerName = null;
    this.contact = null;
    this.phone = null;
    this.applyDate = null;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    setRateIsSet(false);
    this.rate = 0.0;
    setSingleUpperLimitIsSet(false);
    this.singleUpperLimit = 0.0;
    setActualFeeRateIsSet(false);
    this.actualFeeRate = 0.0;
    setFundSizeMoneyIsSet(false);
    this.fundSizeMoney = 0.0;
    setRealAssureMoneyIsSet(false);
    this.realAssureMoney = 0.0;
    this.userIds = null;
    this.cooperationUpdateStatus = null;
  }

  public int getPid() {
    return this.pid;
  }

  public OrgCooperatCompanyApply setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public OrgCooperatCompanyApply setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public OrgCooperatCompanyApply setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public OrgCooperatCompanyApply setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public OrgCooperatCompanyApply setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public double getCreditLimit() {
    return this.creditLimit;
  }

  public OrgCooperatCompanyApply setCreditLimit(double creditLimit) {
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    return this;
  }

  public void unsetCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  public void setCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
  }

  public double getAvailableLimit() {
    return this.availableLimit;
  }

  public OrgCooperatCompanyApply setAvailableLimit(double availableLimit) {
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    return this;
  }

  public void unsetAvailableLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  /** Returns true if field availableLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  public void setAvailableLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID, value);
  }

  public double getAssureMoney() {
    return this.assureMoney;
  }

  public OrgCooperatCompanyApply setAssureMoney(double assureMoney) {
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    return this;
  }

  public void unsetAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field assureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  public void setAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public OrgCooperatCompanyApply setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public OrgCooperatCompanyApply setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public int getCooperationStatus() {
    return this.cooperationStatus;
  }

  public OrgCooperatCompanyApply setCooperationStatus(int cooperationStatus) {
    this.cooperationStatus = cooperationStatus;
    setCooperationStatusIsSet(true);
    return this;
  }

  public void unsetCooperationStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOPERATIONSTATUS_ISSET_ID);
  }

  /** Returns true if field cooperationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperationStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COOPERATIONSTATUS_ISSET_ID);
  }

  public void setCooperationStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOPERATIONSTATUS_ISSET_ID, value);
  }

  public int getHisCooperationNum() {
    return this.hisCooperationNum;
  }

  public OrgCooperatCompanyApply setHisCooperationNum(int hisCooperationNum) {
    this.hisCooperationNum = hisCooperationNum;
    setHisCooperationNumIsSet(true);
    return this;
  }

  public void unsetHisCooperationNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISCOOPERATIONNUM_ISSET_ID);
  }

  /** Returns true if field hisCooperationNum is set (has been assigned a value) and false otherwise */
  public boolean isSetHisCooperationNum() {
    return EncodingUtils.testBit(__isset_bitfield, __HISCOOPERATIONNUM_ISSET_ID);
  }

  public void setHisCooperationNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISCOOPERATIONNUM_ISSET_ID, value);
  }

  public int getCooperationNum() {
    return this.cooperationNum;
  }

  public OrgCooperatCompanyApply setCooperationNum(int cooperationNum) {
    this.cooperationNum = cooperationNum;
    setCooperationNumIsSet(true);
    return this;
  }

  public void unsetCooperationNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOPERATIONNUM_ISSET_ID);
  }

  /** Returns true if field cooperationNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperationNum() {
    return EncodingUtils.testBit(__isset_bitfield, __COOPERATIONNUM_ISSET_ID);
  }

  public void setCooperationNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOPERATIONNUM_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public OrgCooperatCompanyApply setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OrgCooperatCompanyApply setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public OrgCooperatCompanyApply setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public String getPartnerName() {
    return this.partnerName;
  }

  public OrgCooperatCompanyApply setPartnerName(String partnerName) {
    this.partnerName = partnerName;
    return this;
  }

  public void unsetPartnerName() {
    this.partnerName = null;
  }

  /** Returns true if field partnerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerName() {
    return this.partnerName != null;
  }

  public void setPartnerNameIsSet(boolean value) {
    if (!value) {
      this.partnerName = null;
    }
  }

  public String getContact() {
    return this.contact;
  }

  public OrgCooperatCompanyApply setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public OrgCooperatCompanyApply setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getApplyDate() {
    return this.applyDate;
  }

  public OrgCooperatCompanyApply setApplyDate(String applyDate) {
    this.applyDate = applyDate;
    return this;
  }

  public void unsetApplyDate() {
    this.applyDate = null;
  }

  /** Returns true if field applyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyDate() {
    return this.applyDate != null;
  }

  public void setApplyDateIsSet(boolean value) {
    if (!value) {
      this.applyDate = null;
    }
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public OrgCooperatCompanyApply setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public double getRate() {
    return this.rate;
  }

  public OrgCooperatCompanyApply setRate(double rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public double getSingleUpperLimit() {
    return this.singleUpperLimit;
  }

  public OrgCooperatCompanyApply setSingleUpperLimit(double singleUpperLimit) {
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    return this;
  }

  public void unsetSingleUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field singleUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  public void setSingleUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID, value);
  }

  public double getActualFeeRate() {
    return this.actualFeeRate;
  }

  public OrgCooperatCompanyApply setActualFeeRate(double actualFeeRate) {
    this.actualFeeRate = actualFeeRate;
    setActualFeeRateIsSet(true);
    return this;
  }

  public void unsetActualFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  /** Returns true if field actualFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID);
  }

  public void setActualFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALFEERATE_ISSET_ID, value);
  }

  public double getFundSizeMoney() {
    return this.fundSizeMoney;
  }

  public OrgCooperatCompanyApply setFundSizeMoney(double fundSizeMoney) {
    this.fundSizeMoney = fundSizeMoney;
    setFundSizeMoneyIsSet(true);
    return this;
  }

  public void unsetFundSizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  /** Returns true if field fundSizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFundSizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID);
  }

  public void setFundSizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDSIZEMONEY_ISSET_ID, value);
  }

  public double getRealAssureMoney() {
    return this.realAssureMoney;
  }

  public OrgCooperatCompanyApply setRealAssureMoney(double realAssureMoney) {
    this.realAssureMoney = realAssureMoney;
    setRealAssureMoneyIsSet(true);
    return this;
  }

  public void unsetRealAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field realAssureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID);
  }

  public void setRealAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALASSUREMONEY_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public OrgCooperatCompanyApply setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getCooperationUpdateStatus() {
    return this.cooperationUpdateStatus;
  }

  public OrgCooperatCompanyApply setCooperationUpdateStatus(String cooperationUpdateStatus) {
    this.cooperationUpdateStatus = cooperationUpdateStatus;
    return this;
  }

  public void unsetCooperationUpdateStatus() {
    this.cooperationUpdateStatus = null;
  }

  /** Returns true if field cooperationUpdateStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCooperationUpdateStatus() {
    return this.cooperationUpdateStatus != null;
  }

  public void setCooperationUpdateStatusIsSet(boolean value) {
    if (!value) {
      this.cooperationUpdateStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case CREDIT_LIMIT:
      if (value == null) {
        unsetCreditLimit();
      } else {
        setCreditLimit((Double)value);
      }
      break;

    case AVAILABLE_LIMIT:
      if (value == null) {
        unsetAvailableLimit();
      } else {
        setAvailableLimit((Double)value);
      }
      break;

    case ASSURE_MONEY:
      if (value == null) {
        unsetAssureMoney();
      } else {
        setAssureMoney((Double)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case COOPERATION_STATUS:
      if (value == null) {
        unsetCooperationStatus();
      } else {
        setCooperationStatus((Integer)value);
      }
      break;

    case HIS_COOPERATION_NUM:
      if (value == null) {
        unsetHisCooperationNum();
      } else {
        setHisCooperationNum((Integer)value);
      }
      break;

    case COOPERATION_NUM:
      if (value == null) {
        unsetCooperationNum();
      } else {
        setCooperationNum((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case PARTNER_NAME:
      if (value == null) {
        unsetPartnerName();
      } else {
        setPartnerName((String)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case APPLY_DATE:
      if (value == null) {
        unsetApplyDate();
      } else {
        setApplyDate((String)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Double)value);
      }
      break;

    case SINGLE_UPPER_LIMIT:
      if (value == null) {
        unsetSingleUpperLimit();
      } else {
        setSingleUpperLimit((Double)value);
      }
      break;

    case ACTUAL_FEE_RATE:
      if (value == null) {
        unsetActualFeeRate();
      } else {
        setActualFeeRate((Double)value);
      }
      break;

    case FUND_SIZE_MONEY:
      if (value == null) {
        unsetFundSizeMoney();
      } else {
        setFundSizeMoney((Double)value);
      }
      break;

    case REAL_ASSURE_MONEY:
      if (value == null) {
        unsetRealAssureMoney();
      } else {
        setRealAssureMoney((Double)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case COOPERATION_UPDATE_STATUS:
      if (value == null) {
        unsetCooperationUpdateStatus();
      } else {
        setCooperationUpdateStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case CREDIT_LIMIT:
      return Double.valueOf(getCreditLimit());

    case AVAILABLE_LIMIT:
      return Double.valueOf(getAvailableLimit());

    case ASSURE_MONEY:
      return Double.valueOf(getAssureMoney());

    case ORG_NAME:
      return getOrgName();

    case ORG_CODE:
      return getOrgCode();

    case COOPERATION_STATUS:
      return Integer.valueOf(getCooperationStatus());

    case HIS_COOPERATION_NUM:
      return Integer.valueOf(getHisCooperationNum());

    case COOPERATION_NUM:
      return Integer.valueOf(getCooperationNum());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case PARTNER_NAME:
      return getPartnerName();

    case CONTACT:
      return getContact();

    case PHONE:
      return getPhone();

    case APPLY_DATE:
      return getApplyDate();

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case RATE:
      return Double.valueOf(getRate());

    case SINGLE_UPPER_LIMIT:
      return Double.valueOf(getSingleUpperLimit());

    case ACTUAL_FEE_RATE:
      return Double.valueOf(getActualFeeRate());

    case FUND_SIZE_MONEY:
      return Double.valueOf(getFundSizeMoney());

    case REAL_ASSURE_MONEY:
      return Double.valueOf(getRealAssureMoney());

    case USER_IDS:
      return getUserIds();

    case COOPERATION_UPDATE_STATUS:
      return getCooperationUpdateStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ORG_ID:
      return isSetOrgId();
    case USER_ID:
      return isSetUserId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case CREDIT_LIMIT:
      return isSetCreditLimit();
    case AVAILABLE_LIMIT:
      return isSetAvailableLimit();
    case ASSURE_MONEY:
      return isSetAssureMoney();
    case ORG_NAME:
      return isSetOrgName();
    case ORG_CODE:
      return isSetOrgCode();
    case COOPERATION_STATUS:
      return isSetCooperationStatus();
    case HIS_COOPERATION_NUM:
      return isSetHisCooperationNum();
    case COOPERATION_NUM:
      return isSetCooperationNum();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case PARTNER_NAME:
      return isSetPartnerName();
    case CONTACT:
      return isSetContact();
    case PHONE:
      return isSetPhone();
    case APPLY_DATE:
      return isSetApplyDate();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case RATE:
      return isSetRate();
    case SINGLE_UPPER_LIMIT:
      return isSetSingleUpperLimit();
    case ACTUAL_FEE_RATE:
      return isSetActualFeeRate();
    case FUND_SIZE_MONEY:
      return isSetFundSizeMoney();
    case REAL_ASSURE_MONEY:
      return isSetRealAssureMoney();
    case USER_IDS:
      return isSetUserIds();
    case COOPERATION_UPDATE_STATUS:
      return isSetCooperationUpdateStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgCooperatCompanyApply)
      return this.equals((OrgCooperatCompanyApply)that);
    return false;
  }

  public boolean equals(OrgCooperatCompanyApply that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_creditLimit = true;
    boolean that_present_creditLimit = true;
    if (this_present_creditLimit || that_present_creditLimit) {
      if (!(this_present_creditLimit && that_present_creditLimit))
        return false;
      if (this.creditLimit != that.creditLimit)
        return false;
    }

    boolean this_present_availableLimit = true;
    boolean that_present_availableLimit = true;
    if (this_present_availableLimit || that_present_availableLimit) {
      if (!(this_present_availableLimit && that_present_availableLimit))
        return false;
      if (this.availableLimit != that.availableLimit)
        return false;
    }

    boolean this_present_assureMoney = true;
    boolean that_present_assureMoney = true;
    if (this_present_assureMoney || that_present_assureMoney) {
      if (!(this_present_assureMoney && that_present_assureMoney))
        return false;
      if (this.assureMoney != that.assureMoney)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_cooperationStatus = true;
    boolean that_present_cooperationStatus = true;
    if (this_present_cooperationStatus || that_present_cooperationStatus) {
      if (!(this_present_cooperationStatus && that_present_cooperationStatus))
        return false;
      if (this.cooperationStatus != that.cooperationStatus)
        return false;
    }

    boolean this_present_hisCooperationNum = true;
    boolean that_present_hisCooperationNum = true;
    if (this_present_hisCooperationNum || that_present_hisCooperationNum) {
      if (!(this_present_hisCooperationNum && that_present_hisCooperationNum))
        return false;
      if (this.hisCooperationNum != that.hisCooperationNum)
        return false;
    }

    boolean this_present_cooperationNum = true;
    boolean that_present_cooperationNum = true;
    if (this_present_cooperationNum || that_present_cooperationNum) {
      if (!(this_present_cooperationNum && that_present_cooperationNum))
        return false;
      if (this.cooperationNum != that.cooperationNum)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_partnerName = true && this.isSetPartnerName();
    boolean that_present_partnerName = true && that.isSetPartnerName();
    if (this_present_partnerName || that_present_partnerName) {
      if (!(this_present_partnerName && that_present_partnerName))
        return false;
      if (!this.partnerName.equals(that.partnerName))
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_applyDate = true && this.isSetApplyDate();
    boolean that_present_applyDate = true && that.isSetApplyDate();
    if (this_present_applyDate || that_present_applyDate) {
      if (!(this_present_applyDate && that_present_applyDate))
        return false;
      if (!this.applyDate.equals(that.applyDate))
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_singleUpperLimit = true;
    boolean that_present_singleUpperLimit = true;
    if (this_present_singleUpperLimit || that_present_singleUpperLimit) {
      if (!(this_present_singleUpperLimit && that_present_singleUpperLimit))
        return false;
      if (this.singleUpperLimit != that.singleUpperLimit)
        return false;
    }

    boolean this_present_actualFeeRate = true;
    boolean that_present_actualFeeRate = true;
    if (this_present_actualFeeRate || that_present_actualFeeRate) {
      if (!(this_present_actualFeeRate && that_present_actualFeeRate))
        return false;
      if (this.actualFeeRate != that.actualFeeRate)
        return false;
    }

    boolean this_present_fundSizeMoney = true;
    boolean that_present_fundSizeMoney = true;
    if (this_present_fundSizeMoney || that_present_fundSizeMoney) {
      if (!(this_present_fundSizeMoney && that_present_fundSizeMoney))
        return false;
      if (this.fundSizeMoney != that.fundSizeMoney)
        return false;
    }

    boolean this_present_realAssureMoney = true;
    boolean that_present_realAssureMoney = true;
    if (this_present_realAssureMoney || that_present_realAssureMoney) {
      if (!(this_present_realAssureMoney && that_present_realAssureMoney))
        return false;
      if (this.realAssureMoney != that.realAssureMoney)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_cooperationUpdateStatus = true && this.isSetCooperationUpdateStatus();
    boolean that_present_cooperationUpdateStatus = true && that.isSetCooperationUpdateStatus();
    if (this_present_cooperationUpdateStatus || that_present_cooperationUpdateStatus) {
      if (!(this_present_cooperationUpdateStatus && that_present_cooperationUpdateStatus))
        return false;
      if (!this.cooperationUpdateStatus.equals(that.cooperationUpdateStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_creditLimit = true;
    list.add(present_creditLimit);
    if (present_creditLimit)
      list.add(creditLimit);

    boolean present_availableLimit = true;
    list.add(present_availableLimit);
    if (present_availableLimit)
      list.add(availableLimit);

    boolean present_assureMoney = true;
    list.add(present_assureMoney);
    if (present_assureMoney)
      list.add(assureMoney);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_cooperationStatus = true;
    list.add(present_cooperationStatus);
    if (present_cooperationStatus)
      list.add(cooperationStatus);

    boolean present_hisCooperationNum = true;
    list.add(present_hisCooperationNum);
    if (present_hisCooperationNum)
      list.add(hisCooperationNum);

    boolean present_cooperationNum = true;
    list.add(present_cooperationNum);
    if (present_cooperationNum)
      list.add(cooperationNum);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_partnerName = true && (isSetPartnerName());
    list.add(present_partnerName);
    if (present_partnerName)
      list.add(partnerName);

    boolean present_contact = true && (isSetContact());
    list.add(present_contact);
    if (present_contact)
      list.add(contact);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_applyDate = true && (isSetApplyDate());
    list.add(present_applyDate);
    if (present_applyDate)
      list.add(applyDate);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_rate = true;
    list.add(present_rate);
    if (present_rate)
      list.add(rate);

    boolean present_singleUpperLimit = true;
    list.add(present_singleUpperLimit);
    if (present_singleUpperLimit)
      list.add(singleUpperLimit);

    boolean present_actualFeeRate = true;
    list.add(present_actualFeeRate);
    if (present_actualFeeRate)
      list.add(actualFeeRate);

    boolean present_fundSizeMoney = true;
    list.add(present_fundSizeMoney);
    if (present_fundSizeMoney)
      list.add(fundSizeMoney);

    boolean present_realAssureMoney = true;
    list.add(present_realAssureMoney);
    if (present_realAssureMoney)
      list.add(realAssureMoney);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_cooperationUpdateStatus = true && (isSetCooperationUpdateStatus());
    list.add(present_cooperationUpdateStatus);
    if (present_cooperationUpdateStatus)
      list.add(cooperationUpdateStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrgCooperatCompanyApply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableLimit()).compareTo(other.isSetAvailableLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableLimit, other.availableLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoney()).compareTo(other.isSetAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoney, other.assureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperationStatus()).compareTo(other.isSetCooperationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperationStatus, other.cooperationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisCooperationNum()).compareTo(other.isSetHisCooperationNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisCooperationNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisCooperationNum, other.hisCooperationNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperationNum()).compareTo(other.isSetCooperationNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperationNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperationNum, other.cooperationNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerName()).compareTo(other.isSetPartnerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerName, other.partnerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyDate()).compareTo(other.isSetApplyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyDate, other.applyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUpperLimit()).compareTo(other.isSetSingleUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUpperLimit, other.singleUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualFeeRate()).compareTo(other.isSetActualFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualFeeRate, other.actualFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundSizeMoney()).compareTo(other.isSetFundSizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundSizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundSizeMoney, other.fundSizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealAssureMoney()).compareTo(other.isSetRealAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realAssureMoney, other.realAssureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooperationUpdateStatus()).compareTo(other.isSetCooperationUpdateStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooperationUpdateStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooperationUpdateStatus, other.cooperationUpdateStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrgCooperatCompanyApply(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditLimit:");
    sb.append(this.creditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableLimit:");
    sb.append(this.availableLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoney:");
    sb.append(this.assureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperationStatus:");
    sb.append(this.cooperationStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisCooperationNum:");
    sb.append(this.hisCooperationNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperationNum:");
    sb.append(this.cooperationNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerName:");
    if (this.partnerName == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyDate:");
    if (this.applyDate == null) {
      sb.append("null");
    } else {
      sb.append(this.applyDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleUpperLimit:");
    sb.append(this.singleUpperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualFeeRate:");
    sb.append(this.actualFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundSizeMoney:");
    sb.append(this.fundSizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realAssureMoney:");
    sb.append(this.realAssureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cooperationUpdateStatus:");
    if (this.cooperationUpdateStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.cooperationUpdateStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgCooperatCompanyApplyStandardSchemeFactory implements SchemeFactory {
    public OrgCooperatCompanyApplyStandardScheme getScheme() {
      return new OrgCooperatCompanyApplyStandardScheme();
    }
  }

  private static class OrgCooperatCompanyApplyStandardScheme extends StandardScheme<OrgCooperatCompanyApply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgCooperatCompanyApply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditLimit = iprot.readDouble();
              struct.setCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVAILABLE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableLimit = iprot.readDouble();
              struct.setAvailableLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoney = iprot.readDouble();
              struct.setAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COOPERATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cooperationStatus = iprot.readI32();
              struct.setCooperationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HIS_COOPERATION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hisCooperationNum = iprot.readI32();
              struct.setHisCooperationNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COOPERATION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cooperationNum = iprot.readI32();
              struct.setCooperationNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARTNER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerName = iprot.readString();
              struct.setPartnerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // APPLY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyDate = iprot.readString();
              struct.setApplyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rate = iprot.readDouble();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SINGLE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.singleUpperLimit = iprot.readDouble();
              struct.setSingleUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ACTUAL_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualFeeRate = iprot.readDouble();
              struct.setActualFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FUND_SIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundSizeMoney = iprot.readDouble();
              struct.setFundSizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REAL_ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realAssureMoney = iprot.readDouble();
              struct.setRealAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.userIds.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // COOPERATION_UPDATE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cooperationUpdateStatus = iprot.readString();
              struct.setCooperationUpdateStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgCooperatCompanyApply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.creditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.availableLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assureMoney);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COOPERATION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.cooperationStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIS_COOPERATION_NUM_FIELD_DESC);
      oprot.writeI32(struct.hisCooperationNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COOPERATION_NUM_FIELD_DESC);
      oprot.writeI32(struct.cooperationNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      if (struct.partnerName != null) {
        oprot.writeFieldBegin(PARTNER_NAME_FIELD_DESC);
        oprot.writeString(struct.partnerName);
        oprot.writeFieldEnd();
      }
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.applyDate != null) {
        oprot.writeFieldBegin(APPLY_DATE_FIELD_DESC);
        oprot.writeString(struct.applyDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeDouble(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINGLE_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.singleUpperLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.actualFeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUND_SIZE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.fundSizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realAssureMoney);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter35 : struct.userIds)
          {
            oprot.writeI32(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cooperationUpdateStatus != null) {
        oprot.writeFieldBegin(COOPERATION_UPDATE_STATUS_FIELD_DESC);
        oprot.writeString(struct.cooperationUpdateStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgCooperatCompanyApplyTupleSchemeFactory implements SchemeFactory {
    public OrgCooperatCompanyApplyTupleScheme getScheme() {
      return new OrgCooperatCompanyApplyTupleScheme();
    }
  }

  private static class OrgCooperatCompanyApplyTupleScheme extends TupleScheme<OrgCooperatCompanyApply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgCooperatCompanyApply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetCreditLimit()) {
        optionals.set(5);
      }
      if (struct.isSetAvailableLimit()) {
        optionals.set(6);
      }
      if (struct.isSetAssureMoney()) {
        optionals.set(7);
      }
      if (struct.isSetOrgName()) {
        optionals.set(8);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(9);
      }
      if (struct.isSetCooperationStatus()) {
        optionals.set(10);
      }
      if (struct.isSetHisCooperationNum()) {
        optionals.set(11);
      }
      if (struct.isSetCooperationNum()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(15);
      }
      if (struct.isSetPartnerName()) {
        optionals.set(16);
      }
      if (struct.isSetContact()) {
        optionals.set(17);
      }
      if (struct.isSetPhone()) {
        optionals.set(18);
      }
      if (struct.isSetApplyDate()) {
        optionals.set(19);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(20);
      }
      if (struct.isSetRate()) {
        optionals.set(21);
      }
      if (struct.isSetSingleUpperLimit()) {
        optionals.set(22);
      }
      if (struct.isSetActualFeeRate()) {
        optionals.set(23);
      }
      if (struct.isSetFundSizeMoney()) {
        optionals.set(24);
      }
      if (struct.isSetRealAssureMoney()) {
        optionals.set(25);
      }
      if (struct.isSetUserIds()) {
        optionals.set(26);
      }
      if (struct.isSetCooperationUpdateStatus()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetCreditLimit()) {
        oprot.writeDouble(struct.creditLimit);
      }
      if (struct.isSetAvailableLimit()) {
        oprot.writeDouble(struct.availableLimit);
      }
      if (struct.isSetAssureMoney()) {
        oprot.writeDouble(struct.assureMoney);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetCooperationStatus()) {
        oprot.writeI32(struct.cooperationStatus);
      }
      if (struct.isSetHisCooperationNum()) {
        oprot.writeI32(struct.hisCooperationNum);
      }
      if (struct.isSetCooperationNum()) {
        oprot.writeI32(struct.cooperationNum);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetPartnerName()) {
        oprot.writeString(struct.partnerName);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetApplyDate()) {
        oprot.writeString(struct.applyDate);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetRate()) {
        oprot.writeDouble(struct.rate);
      }
      if (struct.isSetSingleUpperLimit()) {
        oprot.writeDouble(struct.singleUpperLimit);
      }
      if (struct.isSetActualFeeRate()) {
        oprot.writeDouble(struct.actualFeeRate);
      }
      if (struct.isSetFundSizeMoney()) {
        oprot.writeDouble(struct.fundSizeMoney);
      }
      if (struct.isSetRealAssureMoney()) {
        oprot.writeDouble(struct.realAssureMoney);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter36 : struct.userIds)
          {
            oprot.writeI32(_iter36);
          }
        }
      }
      if (struct.isSetCooperationUpdateStatus()) {
        oprot.writeString(struct.cooperationUpdateStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgCooperatCompanyApply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creditLimit = iprot.readDouble();
        struct.setCreditLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.availableLimit = iprot.readDouble();
        struct.setAvailableLimitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assureMoney = iprot.readDouble();
        struct.setAssureMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cooperationStatus = iprot.readI32();
        struct.setCooperationStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hisCooperationNum = iprot.readI32();
        struct.setHisCooperationNumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cooperationNum = iprot.readI32();
        struct.setCooperationNumIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.partnerName = iprot.readString();
        struct.setPartnerNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
      if (incoming.get(18)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(19)) {
        struct.applyDate = iprot.readString();
        struct.setApplyDateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(21)) {
        struct.rate = iprot.readDouble();
        struct.setRateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.singleUpperLimit = iprot.readDouble();
        struct.setSingleUpperLimitIsSet(true);
      }
      if (incoming.get(23)) {
        struct.actualFeeRate = iprot.readDouble();
        struct.setActualFeeRateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.fundSizeMoney = iprot.readDouble();
        struct.setFundSizeMoneyIsSet(true);
      }
      if (incoming.get(25)) {
        struct.realAssureMoney = iprot.readDouble();
        struct.setRealAssureMoneyIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list37.size);
          int _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readI32();
            struct.userIds.add(_elem38);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(27)) {
        struct.cooperationUpdateStatus = iprot.readString();
        struct.setCooperationUpdateStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class ProjectInfo implements org.apache.thrift.TBase<ProjectInfo, ProjectInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelogName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessTypeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLOW_CATELOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("flowCatelogName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectNumber; // required
  public String businessCatelogName; // required
  public String businessTypeName; // required
  public String flowCatelogName; // required
  public String accName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_CATELOG_NAME((short)4, "businessCatelogName"),
    BUSINESS_TYPE_NAME((short)5, "businessTypeName"),
    FLOW_CATELOG_NAME((short)6, "flowCatelogName"),
    ACC_NAME((short)7, "accName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_CATELOG_NAME
          return BUSINESS_CATELOG_NAME;
        case 5: // BUSINESS_TYPE_NAME
          return BUSINESS_TYPE_NAME;
        case 6: // FLOW_CATELOG_NAME
          return FLOW_CATELOG_NAME;
        case 7: // ACC_NAME
          return ACC_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CATELOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessCatelogName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_CATELOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("flowCatelogName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectInfo.class, metaDataMap);
  }

  public ProjectInfo() {
  }

  public ProjectInfo(
    int pid,
    String projectName,
    String projectNumber,
    String businessCatelogName,
    String businessTypeName,
    String flowCatelogName,
    String accName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessCatelogName = businessCatelogName;
    this.businessTypeName = businessTypeName;
    this.flowCatelogName = flowCatelogName;
    this.accName = accName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectInfo(ProjectInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetBusinessCatelogName()) {
      this.businessCatelogName = other.businessCatelogName;
    }
    if (other.isSetBusinessTypeName()) {
      this.businessTypeName = other.businessTypeName;
    }
    if (other.isSetFlowCatelogName()) {
      this.flowCatelogName = other.flowCatelogName;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
  }

  public ProjectInfo deepCopy() {
    return new ProjectInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.businessCatelogName = null;
    this.businessTypeName = null;
    this.flowCatelogName = null;
    this.accName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectInfo setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectInfo setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getBusinessCatelogName() {
    return this.businessCatelogName;
  }

  public ProjectInfo setBusinessCatelogName(String businessCatelogName) {
    this.businessCatelogName = businessCatelogName;
    return this;
  }

  public void unsetBusinessCatelogName() {
    this.businessCatelogName = null;
  }

  /** Returns true if field businessCatelogName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelogName() {
    return this.businessCatelogName != null;
  }

  public void setBusinessCatelogNameIsSet(boolean value) {
    if (!value) {
      this.businessCatelogName = null;
    }
  }

  public String getBusinessTypeName() {
    return this.businessTypeName;
  }

  public ProjectInfo setBusinessTypeName(String businessTypeName) {
    this.businessTypeName = businessTypeName;
    return this;
  }

  public void unsetBusinessTypeName() {
    this.businessTypeName = null;
  }

  /** Returns true if field businessTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessTypeName() {
    return this.businessTypeName != null;
  }

  public void setBusinessTypeNameIsSet(boolean value) {
    if (!value) {
      this.businessTypeName = null;
    }
  }

  public String getFlowCatelogName() {
    return this.flowCatelogName;
  }

  public ProjectInfo setFlowCatelogName(String flowCatelogName) {
    this.flowCatelogName = flowCatelogName;
    return this;
  }

  public void unsetFlowCatelogName() {
    this.flowCatelogName = null;
  }

  /** Returns true if field flowCatelogName is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowCatelogName() {
    return this.flowCatelogName != null;
  }

  public void setFlowCatelogNameIsSet(boolean value) {
    if (!value) {
      this.flowCatelogName = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public ProjectInfo setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_CATELOG_NAME:
      if (value == null) {
        unsetBusinessCatelogName();
      } else {
        setBusinessCatelogName((String)value);
      }
      break;

    case BUSINESS_TYPE_NAME:
      if (value == null) {
        unsetBusinessTypeName();
      } else {
        setBusinessTypeName((String)value);
      }
      break;

    case FLOW_CATELOG_NAME:
      if (value == null) {
        unsetFlowCatelogName();
      } else {
        setFlowCatelogName((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_CATELOG_NAME:
      return getBusinessCatelogName();

    case BUSINESS_TYPE_NAME:
      return getBusinessTypeName();

    case FLOW_CATELOG_NAME:
      return getFlowCatelogName();

    case ACC_NAME:
      return getAccName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_CATELOG_NAME:
      return isSetBusinessCatelogName();
    case BUSINESS_TYPE_NAME:
      return isSetBusinessTypeName();
    case FLOW_CATELOG_NAME:
      return isSetFlowCatelogName();
    case ACC_NAME:
      return isSetAccName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectInfo)
      return this.equals((ProjectInfo)that);
    return false;
  }

  public boolean equals(ProjectInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessCatelogName = true && this.isSetBusinessCatelogName();
    boolean that_present_businessCatelogName = true && that.isSetBusinessCatelogName();
    if (this_present_businessCatelogName || that_present_businessCatelogName) {
      if (!(this_present_businessCatelogName && that_present_businessCatelogName))
        return false;
      if (!this.businessCatelogName.equals(that.businessCatelogName))
        return false;
    }

    boolean this_present_businessTypeName = true && this.isSetBusinessTypeName();
    boolean that_present_businessTypeName = true && that.isSetBusinessTypeName();
    if (this_present_businessTypeName || that_present_businessTypeName) {
      if (!(this_present_businessTypeName && that_present_businessTypeName))
        return false;
      if (!this.businessTypeName.equals(that.businessTypeName))
        return false;
    }

    boolean this_present_flowCatelogName = true && this.isSetFlowCatelogName();
    boolean that_present_flowCatelogName = true && that.isSetFlowCatelogName();
    if (this_present_flowCatelogName || that_present_flowCatelogName) {
      if (!(this_present_flowCatelogName && that_present_flowCatelogName))
        return false;
      if (!this.flowCatelogName.equals(that.flowCatelogName))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessCatelogName = true && (isSetBusinessCatelogName());
    list.add(present_businessCatelogName);
    if (present_businessCatelogName)
      list.add(businessCatelogName);

    boolean present_businessTypeName = true && (isSetBusinessTypeName());
    list.add(present_businessTypeName);
    if (present_businessTypeName)
      list.add(businessTypeName);

    boolean present_flowCatelogName = true && (isSetFlowCatelogName());
    list.add(present_flowCatelogName);
    if (present_flowCatelogName)
      list.add(flowCatelogName);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelogName()).compareTo(other.isSetBusinessCatelogName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelogName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelogName, other.businessCatelogName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessTypeName()).compareTo(other.isSetBusinessTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessTypeName, other.businessTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowCatelogName()).compareTo(other.isSetFlowCatelogName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowCatelogName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowCatelogName, other.flowCatelogName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelogName:");
    if (this.businessCatelogName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCatelogName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessTypeName:");
    if (this.businessTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowCatelogName:");
    if (this.flowCatelogName == null) {
      sb.append("null");
    } else {
      sb.append(this.flowCatelogName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectInfoStandardSchemeFactory implements SchemeFactory {
    public ProjectInfoStandardScheme getScheme() {
      return new ProjectInfoStandardScheme();
    }
  }

  private static class ProjectInfoStandardScheme extends StandardScheme<ProjectInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_CATELOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCatelogName = iprot.readString();
              struct.setBusinessCatelogNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessTypeName = iprot.readString();
              struct.setBusinessTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLOW_CATELOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowCatelogName = iprot.readString();
              struct.setFlowCatelogNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.businessCatelogName != null) {
        oprot.writeFieldBegin(BUSINESS_CATELOG_NAME_FIELD_DESC);
        oprot.writeString(struct.businessCatelogName);
        oprot.writeFieldEnd();
      }
      if (struct.businessTypeName != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.businessTypeName);
        oprot.writeFieldEnd();
      }
      if (struct.flowCatelogName != null) {
        oprot.writeFieldBegin(FLOW_CATELOG_NAME_FIELD_DESC);
        oprot.writeString(struct.flowCatelogName);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectInfoTupleSchemeFactory implements SchemeFactory {
    public ProjectInfoTupleScheme getScheme() {
      return new ProjectInfoTupleScheme();
    }
  }

  private static class ProjectInfoTupleScheme extends TupleScheme<ProjectInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessCatelogName()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessTypeName()) {
        optionals.set(4);
      }
      if (struct.isSetFlowCatelogName()) {
        optionals.set(5);
      }
      if (struct.isSetAccName()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessCatelogName()) {
        oprot.writeString(struct.businessCatelogName);
      }
      if (struct.isSetBusinessTypeName()) {
        oprot.writeString(struct.businessTypeName);
      }
      if (struct.isSetFlowCatelogName()) {
        oprot.writeString(struct.flowCatelogName);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessCatelogName = iprot.readString();
        struct.setBusinessCatelogNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessTypeName = iprot.readString();
        struct.setBusinessTypeNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flowCatelogName = iprot.readString();
        struct.setFlowCatelogNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.foreafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-1")
public class ExceptionMonitorIndex implements org.apache.thrift.TBase<ExceptionMonitorIndex, ExceptionMonitorIndex._Fields>, java.io.Serializable, Cloneable, Comparable<ExceptionMonitorIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExceptionMonitorIndex");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCEPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MONITOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MONITOR_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorTitle", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MONITOR_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MONITOR_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorResult", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MONITOR_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorOpinion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DANGER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("dangerLevel", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FOLLOW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("followStatus", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NEXT_MONITOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextMonitorDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FOLLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("followId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NEXT_FOLLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextFollowId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField NOTICE_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeWay", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField FOLLOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("followName", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExceptionMonitorIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExceptionMonitorIndexTupleSchemeFactory());
  }

  public int pid; // required
  public int exceptionId; // required
  public int projectId; // required
  public String monitorDate; // required
  public String monitorTitle; // required
  public String monitorContent; // required
  public String monitorResult; // required
  public String monitorOpinion; // required
  public int dangerLevel; // required
  public int followStatus; // required
  public String nextMonitorDate; // required
  public int followId; // required
  public int nextFollowId; // required
  public String noticeWay; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String createDate; // required
  public String createId; // required
  public String updateDate; // required
  public String updateId; // required
  public String remark; // required
  public String followName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    EXCEPTION_ID((short)2, "exceptionId"),
    PROJECT_ID((short)3, "projectId"),
    MONITOR_DATE((short)4, "monitorDate"),
    MONITOR_TITLE((short)5, "monitorTitle"),
    MONITOR_CONTENT((short)6, "monitorContent"),
    MONITOR_RESULT((short)7, "monitorResult"),
    MONITOR_OPINION((short)8, "monitorOpinion"),
    DANGER_LEVEL((short)9, "dangerLevel"),
    FOLLOW_STATUS((short)10, "followStatus"),
    NEXT_MONITOR_DATE((short)11, "nextMonitorDate"),
    FOLLOW_ID((short)12, "followId"),
    NEXT_FOLLOW_ID((short)13, "nextFollowId"),
    NOTICE_WAY((short)14, "noticeWay"),
    STATUS((short)15, "status"),
    PAGE((short)16, "page"),
    ROWS((short)17, "rows"),
    USER_IDS((short)18, "userIds"),
    CREATE_DATE((short)19, "createDate"),
    CREATE_ID((short)20, "createId"),
    UPDATE_DATE((short)21, "updateDate"),
    UPDATE_ID((short)22, "updateId"),
    REMARK((short)23, "remark"),
    FOLLOW_NAME((short)24, "followName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // EXCEPTION_ID
          return EXCEPTION_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // MONITOR_DATE
          return MONITOR_DATE;
        case 5: // MONITOR_TITLE
          return MONITOR_TITLE;
        case 6: // MONITOR_CONTENT
          return MONITOR_CONTENT;
        case 7: // MONITOR_RESULT
          return MONITOR_RESULT;
        case 8: // MONITOR_OPINION
          return MONITOR_OPINION;
        case 9: // DANGER_LEVEL
          return DANGER_LEVEL;
        case 10: // FOLLOW_STATUS
          return FOLLOW_STATUS;
        case 11: // NEXT_MONITOR_DATE
          return NEXT_MONITOR_DATE;
        case 12: // FOLLOW_ID
          return FOLLOW_ID;
        case 13: // NEXT_FOLLOW_ID
          return NEXT_FOLLOW_ID;
        case 14: // NOTICE_WAY
          return NOTICE_WAY;
        case 15: // STATUS
          return STATUS;
        case 16: // PAGE
          return PAGE;
        case 17: // ROWS
          return ROWS;
        case 18: // USER_IDS
          return USER_IDS;
        case 19: // CREATE_DATE
          return CREATE_DATE;
        case 20: // CREATE_ID
          return CREATE_ID;
        case 21: // UPDATE_DATE
          return UPDATE_DATE;
        case 22: // UPDATE_ID
          return UPDATE_ID;
        case 23: // REMARK
          return REMARK;
        case 24: // FOLLOW_NAME
          return FOLLOW_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __EXCEPTIONID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __DANGERLEVEL_ISSET_ID = 3;
  private static final int __FOLLOWSTATUS_ISSET_ID = 4;
  private static final int __FOLLOWID_ISSET_ID = 5;
  private static final int __NEXTFOLLOWID_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("exceptionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONITOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("monitorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_TITLE, new org.apache.thrift.meta_data.FieldMetaData("monitorTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("monitorContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_RESULT, new org.apache.thrift.meta_data.FieldMetaData("monitorResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_OPINION, new org.apache.thrift.meta_data.FieldMetaData("monitorOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DANGER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("dangerLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("followStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_MONITOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("nextMonitorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("followId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_FOLLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("nextFollowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTICE_WAY, new org.apache.thrift.meta_data.FieldMetaData("noticeWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("followName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExceptionMonitorIndex.class, metaDataMap);
  }

  public ExceptionMonitorIndex() {
    this.page = 1;

    this.rows = 10;

  }

  public ExceptionMonitorIndex(
    int pid,
    int exceptionId,
    int projectId,
    String monitorDate,
    String monitorTitle,
    String monitorContent,
    String monitorResult,
    String monitorOpinion,
    int dangerLevel,
    int followStatus,
    String nextMonitorDate,
    int followId,
    int nextFollowId,
    String noticeWay,
    int status,
    int page,
    int rows,
    List<Integer> userIds,
    String createDate,
    String createId,
    String updateDate,
    String updateId,
    String remark,
    String followName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.exceptionId = exceptionId;
    setExceptionIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.monitorDate = monitorDate;
    this.monitorTitle = monitorTitle;
    this.monitorContent = monitorContent;
    this.monitorResult = monitorResult;
    this.monitorOpinion = monitorOpinion;
    this.dangerLevel = dangerLevel;
    setDangerLevelIsSet(true);
    this.followStatus = followStatus;
    setFollowStatusIsSet(true);
    this.nextMonitorDate = nextMonitorDate;
    this.followId = followId;
    setFollowIdIsSet(true);
    this.nextFollowId = nextFollowId;
    setNextFollowIdIsSet(true);
    this.noticeWay = noticeWay;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.createDate = createDate;
    this.createId = createId;
    this.updateDate = updateDate;
    this.updateId = updateId;
    this.remark = remark;
    this.followName = followName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExceptionMonitorIndex(ExceptionMonitorIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.exceptionId = other.exceptionId;
    this.projectId = other.projectId;
    if (other.isSetMonitorDate()) {
      this.monitorDate = other.monitorDate;
    }
    if (other.isSetMonitorTitle()) {
      this.monitorTitle = other.monitorTitle;
    }
    if (other.isSetMonitorContent()) {
      this.monitorContent = other.monitorContent;
    }
    if (other.isSetMonitorResult()) {
      this.monitorResult = other.monitorResult;
    }
    if (other.isSetMonitorOpinion()) {
      this.monitorOpinion = other.monitorOpinion;
    }
    this.dangerLevel = other.dangerLevel;
    this.followStatus = other.followStatus;
    if (other.isSetNextMonitorDate()) {
      this.nextMonitorDate = other.nextMonitorDate;
    }
    this.followId = other.followId;
    this.nextFollowId = other.nextFollowId;
    if (other.isSetNoticeWay()) {
      this.noticeWay = other.noticeWay;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetCreateId()) {
      this.createId = other.createId;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetUpdateId()) {
      this.updateId = other.updateId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetFollowName()) {
      this.followName = other.followName;
    }
  }

  public ExceptionMonitorIndex deepCopy() {
    return new ExceptionMonitorIndex(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setExceptionIdIsSet(false);
    this.exceptionId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.monitorDate = null;
    this.monitorTitle = null;
    this.monitorContent = null;
    this.monitorResult = null;
    this.monitorOpinion = null;
    setDangerLevelIsSet(false);
    this.dangerLevel = 0;
    setFollowStatusIsSet(false);
    this.followStatus = 0;
    this.nextMonitorDate = null;
    setFollowIdIsSet(false);
    this.followId = 0;
    setNextFollowIdIsSet(false);
    this.nextFollowId = 0;
    this.noticeWay = null;
    setStatusIsSet(false);
    this.status = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.createDate = null;
    this.createId = null;
    this.updateDate = null;
    this.updateId = null;
    this.remark = null;
    this.followName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ExceptionMonitorIndex setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getExceptionId() {
    return this.exceptionId;
  }

  public ExceptionMonitorIndex setExceptionId(int exceptionId) {
    this.exceptionId = exceptionId;
    setExceptionIdIsSet(true);
    return this;
  }

  public void unsetExceptionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID);
  }

  /** Returns true if field exceptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID);
  }

  public void setExceptionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ExceptionMonitorIndex setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getMonitorDate() {
    return this.monitorDate;
  }

  public ExceptionMonitorIndex setMonitorDate(String monitorDate) {
    this.monitorDate = monitorDate;
    return this;
  }

  public void unsetMonitorDate() {
    this.monitorDate = null;
  }

  /** Returns true if field monitorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorDate() {
    return this.monitorDate != null;
  }

  public void setMonitorDateIsSet(boolean value) {
    if (!value) {
      this.monitorDate = null;
    }
  }

  public String getMonitorTitle() {
    return this.monitorTitle;
  }

  public ExceptionMonitorIndex setMonitorTitle(String monitorTitle) {
    this.monitorTitle = monitorTitle;
    return this;
  }

  public void unsetMonitorTitle() {
    this.monitorTitle = null;
  }

  /** Returns true if field monitorTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorTitle() {
    return this.monitorTitle != null;
  }

  public void setMonitorTitleIsSet(boolean value) {
    if (!value) {
      this.monitorTitle = null;
    }
  }

  public String getMonitorContent() {
    return this.monitorContent;
  }

  public ExceptionMonitorIndex setMonitorContent(String monitorContent) {
    this.monitorContent = monitorContent;
    return this;
  }

  public void unsetMonitorContent() {
    this.monitorContent = null;
  }

  /** Returns true if field monitorContent is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorContent() {
    return this.monitorContent != null;
  }

  public void setMonitorContentIsSet(boolean value) {
    if (!value) {
      this.monitorContent = null;
    }
  }

  public String getMonitorResult() {
    return this.monitorResult;
  }

  public ExceptionMonitorIndex setMonitorResult(String monitorResult) {
    this.monitorResult = monitorResult;
    return this;
  }

  public void unsetMonitorResult() {
    this.monitorResult = null;
  }

  /** Returns true if field monitorResult is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorResult() {
    return this.monitorResult != null;
  }

  public void setMonitorResultIsSet(boolean value) {
    if (!value) {
      this.monitorResult = null;
    }
  }

  public String getMonitorOpinion() {
    return this.monitorOpinion;
  }

  public ExceptionMonitorIndex setMonitorOpinion(String monitorOpinion) {
    this.monitorOpinion = monitorOpinion;
    return this;
  }

  public void unsetMonitorOpinion() {
    this.monitorOpinion = null;
  }

  /** Returns true if field monitorOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorOpinion() {
    return this.monitorOpinion != null;
  }

  public void setMonitorOpinionIsSet(boolean value) {
    if (!value) {
      this.monitorOpinion = null;
    }
  }

  public int getDangerLevel() {
    return this.dangerLevel;
  }

  public ExceptionMonitorIndex setDangerLevel(int dangerLevel) {
    this.dangerLevel = dangerLevel;
    setDangerLevelIsSet(true);
    return this;
  }

  public void unsetDangerLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID);
  }

  /** Returns true if field dangerLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetDangerLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID);
  }

  public void setDangerLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID, value);
  }

  public int getFollowStatus() {
    return this.followStatus;
  }

  public ExceptionMonitorIndex setFollowStatus(int followStatus) {
    this.followStatus = followStatus;
    setFollowStatusIsSet(true);
    return this;
  }

  public void unsetFollowStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWSTATUS_ISSET_ID);
  }

  /** Returns true if field followStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWSTATUS_ISSET_ID);
  }

  public void setFollowStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWSTATUS_ISSET_ID, value);
  }

  public String getNextMonitorDate() {
    return this.nextMonitorDate;
  }

  public ExceptionMonitorIndex setNextMonitorDate(String nextMonitorDate) {
    this.nextMonitorDate = nextMonitorDate;
    return this;
  }

  public void unsetNextMonitorDate() {
    this.nextMonitorDate = null;
  }

  /** Returns true if field nextMonitorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNextMonitorDate() {
    return this.nextMonitorDate != null;
  }

  public void setNextMonitorDateIsSet(boolean value) {
    if (!value) {
      this.nextMonitorDate = null;
    }
  }

  public int getFollowId() {
    return this.followId;
  }

  public ExceptionMonitorIndex setFollowId(int followId) {
    this.followId = followId;
    setFollowIdIsSet(true);
    return this;
  }

  public void unsetFollowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWID_ISSET_ID);
  }

  /** Returns true if field followId is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowId() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWID_ISSET_ID);
  }

  public void setFollowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWID_ISSET_ID, value);
  }

  public int getNextFollowId() {
    return this.nextFollowId;
  }

  public ExceptionMonitorIndex setNextFollowId(int nextFollowId) {
    this.nextFollowId = nextFollowId;
    setNextFollowIdIsSet(true);
    return this;
  }

  public void unsetNextFollowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTFOLLOWID_ISSET_ID);
  }

  /** Returns true if field nextFollowId is set (has been assigned a value) and false otherwise */
  public boolean isSetNextFollowId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTFOLLOWID_ISSET_ID);
  }

  public void setNextFollowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTFOLLOWID_ISSET_ID, value);
  }

  public String getNoticeWay() {
    return this.noticeWay;
  }

  public ExceptionMonitorIndex setNoticeWay(String noticeWay) {
    this.noticeWay = noticeWay;
    return this;
  }

  public void unsetNoticeWay() {
    this.noticeWay = null;
  }

  /** Returns true if field noticeWay is set (has been assigned a value) and false otherwise */
  public boolean isSetNoticeWay() {
    return this.noticeWay != null;
  }

  public void setNoticeWayIsSet(boolean value) {
    if (!value) {
      this.noticeWay = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ExceptionMonitorIndex setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ExceptionMonitorIndex setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ExceptionMonitorIndex setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ExceptionMonitorIndex setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public ExceptionMonitorIndex setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getCreateId() {
    return this.createId;
  }

  public ExceptionMonitorIndex setCreateId(String createId) {
    this.createId = createId;
    return this;
  }

  public void unsetCreateId() {
    this.createId = null;
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return this.createId != null;
  }

  public void setCreateIdIsSet(boolean value) {
    if (!value) {
      this.createId = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public ExceptionMonitorIndex setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getUpdateId() {
    return this.updateId;
  }

  public ExceptionMonitorIndex setUpdateId(String updateId) {
    this.updateId = updateId;
    return this;
  }

  public void unsetUpdateId() {
    this.updateId = null;
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return this.updateId != null;
  }

  public void setUpdateIdIsSet(boolean value) {
    if (!value) {
      this.updateId = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ExceptionMonitorIndex setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getFollowName() {
    return this.followName;
  }

  public ExceptionMonitorIndex setFollowName(String followName) {
    this.followName = followName;
    return this;
  }

  public void unsetFollowName() {
    this.followName = null;
  }

  /** Returns true if field followName is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowName() {
    return this.followName != null;
  }

  public void setFollowNameIsSet(boolean value) {
    if (!value) {
      this.followName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case EXCEPTION_ID:
      if (value == null) {
        unsetExceptionId();
      } else {
        setExceptionId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MONITOR_DATE:
      if (value == null) {
        unsetMonitorDate();
      } else {
        setMonitorDate((String)value);
      }
      break;

    case MONITOR_TITLE:
      if (value == null) {
        unsetMonitorTitle();
      } else {
        setMonitorTitle((String)value);
      }
      break;

    case MONITOR_CONTENT:
      if (value == null) {
        unsetMonitorContent();
      } else {
        setMonitorContent((String)value);
      }
      break;

    case MONITOR_RESULT:
      if (value == null) {
        unsetMonitorResult();
      } else {
        setMonitorResult((String)value);
      }
      break;

    case MONITOR_OPINION:
      if (value == null) {
        unsetMonitorOpinion();
      } else {
        setMonitorOpinion((String)value);
      }
      break;

    case DANGER_LEVEL:
      if (value == null) {
        unsetDangerLevel();
      } else {
        setDangerLevel((Integer)value);
      }
      break;

    case FOLLOW_STATUS:
      if (value == null) {
        unsetFollowStatus();
      } else {
        setFollowStatus((Integer)value);
      }
      break;

    case NEXT_MONITOR_DATE:
      if (value == null) {
        unsetNextMonitorDate();
      } else {
        setNextMonitorDate((String)value);
      }
      break;

    case FOLLOW_ID:
      if (value == null) {
        unsetFollowId();
      } else {
        setFollowId((Integer)value);
      }
      break;

    case NEXT_FOLLOW_ID:
      if (value == null) {
        unsetNextFollowId();
      } else {
        setNextFollowId((Integer)value);
      }
      break;

    case NOTICE_WAY:
      if (value == null) {
        unsetNoticeWay();
      } else {
        setNoticeWay((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case FOLLOW_NAME:
      if (value == null) {
        unsetFollowName();
      } else {
        setFollowName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case EXCEPTION_ID:
      return Integer.valueOf(getExceptionId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MONITOR_DATE:
      return getMonitorDate();

    case MONITOR_TITLE:
      return getMonitorTitle();

    case MONITOR_CONTENT:
      return getMonitorContent();

    case MONITOR_RESULT:
      return getMonitorResult();

    case MONITOR_OPINION:
      return getMonitorOpinion();

    case DANGER_LEVEL:
      return Integer.valueOf(getDangerLevel());

    case FOLLOW_STATUS:
      return Integer.valueOf(getFollowStatus());

    case NEXT_MONITOR_DATE:
      return getNextMonitorDate();

    case FOLLOW_ID:
      return Integer.valueOf(getFollowId());

    case NEXT_FOLLOW_ID:
      return Integer.valueOf(getNextFollowId());

    case NOTICE_WAY:
      return getNoticeWay();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case CREATE_DATE:
      return getCreateDate();

    case CREATE_ID:
      return getCreateId();

    case UPDATE_DATE:
      return getUpdateDate();

    case UPDATE_ID:
      return getUpdateId();

    case REMARK:
      return getRemark();

    case FOLLOW_NAME:
      return getFollowName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case EXCEPTION_ID:
      return isSetExceptionId();
    case PROJECT_ID:
      return isSetProjectId();
    case MONITOR_DATE:
      return isSetMonitorDate();
    case MONITOR_TITLE:
      return isSetMonitorTitle();
    case MONITOR_CONTENT:
      return isSetMonitorContent();
    case MONITOR_RESULT:
      return isSetMonitorResult();
    case MONITOR_OPINION:
      return isSetMonitorOpinion();
    case DANGER_LEVEL:
      return isSetDangerLevel();
    case FOLLOW_STATUS:
      return isSetFollowStatus();
    case NEXT_MONITOR_DATE:
      return isSetNextMonitorDate();
    case FOLLOW_ID:
      return isSetFollowId();
    case NEXT_FOLLOW_ID:
      return isSetNextFollowId();
    case NOTICE_WAY:
      return isSetNoticeWay();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATE_ID:
      return isSetCreateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case REMARK:
      return isSetRemark();
    case FOLLOW_NAME:
      return isSetFollowName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExceptionMonitorIndex)
      return this.equals((ExceptionMonitorIndex)that);
    return false;
  }

  public boolean equals(ExceptionMonitorIndex that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_exceptionId = true;
    boolean that_present_exceptionId = true;
    if (this_present_exceptionId || that_present_exceptionId) {
      if (!(this_present_exceptionId && that_present_exceptionId))
        return false;
      if (this.exceptionId != that.exceptionId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_monitorDate = true && this.isSetMonitorDate();
    boolean that_present_monitorDate = true && that.isSetMonitorDate();
    if (this_present_monitorDate || that_present_monitorDate) {
      if (!(this_present_monitorDate && that_present_monitorDate))
        return false;
      if (!this.monitorDate.equals(that.monitorDate))
        return false;
    }

    boolean this_present_monitorTitle = true && this.isSetMonitorTitle();
    boolean that_present_monitorTitle = true && that.isSetMonitorTitle();
    if (this_present_monitorTitle || that_present_monitorTitle) {
      if (!(this_present_monitorTitle && that_present_monitorTitle))
        return false;
      if (!this.monitorTitle.equals(that.monitorTitle))
        return false;
    }

    boolean this_present_monitorContent = true && this.isSetMonitorContent();
    boolean that_present_monitorContent = true && that.isSetMonitorContent();
    if (this_present_monitorContent || that_present_monitorContent) {
      if (!(this_present_monitorContent && that_present_monitorContent))
        return false;
      if (!this.monitorContent.equals(that.monitorContent))
        return false;
    }

    boolean this_present_monitorResult = true && this.isSetMonitorResult();
    boolean that_present_monitorResult = true && that.isSetMonitorResult();
    if (this_present_monitorResult || that_present_monitorResult) {
      if (!(this_present_monitorResult && that_present_monitorResult))
        return false;
      if (!this.monitorResult.equals(that.monitorResult))
        return false;
    }

    boolean this_present_monitorOpinion = true && this.isSetMonitorOpinion();
    boolean that_present_monitorOpinion = true && that.isSetMonitorOpinion();
    if (this_present_monitorOpinion || that_present_monitorOpinion) {
      if (!(this_present_monitorOpinion && that_present_monitorOpinion))
        return false;
      if (!this.monitorOpinion.equals(that.monitorOpinion))
        return false;
    }

    boolean this_present_dangerLevel = true;
    boolean that_present_dangerLevel = true;
    if (this_present_dangerLevel || that_present_dangerLevel) {
      if (!(this_present_dangerLevel && that_present_dangerLevel))
        return false;
      if (this.dangerLevel != that.dangerLevel)
        return false;
    }

    boolean this_present_followStatus = true;
    boolean that_present_followStatus = true;
    if (this_present_followStatus || that_present_followStatus) {
      if (!(this_present_followStatus && that_present_followStatus))
        return false;
      if (this.followStatus != that.followStatus)
        return false;
    }

    boolean this_present_nextMonitorDate = true && this.isSetNextMonitorDate();
    boolean that_present_nextMonitorDate = true && that.isSetNextMonitorDate();
    if (this_present_nextMonitorDate || that_present_nextMonitorDate) {
      if (!(this_present_nextMonitorDate && that_present_nextMonitorDate))
        return false;
      if (!this.nextMonitorDate.equals(that.nextMonitorDate))
        return false;
    }

    boolean this_present_followId = true;
    boolean that_present_followId = true;
    if (this_present_followId || that_present_followId) {
      if (!(this_present_followId && that_present_followId))
        return false;
      if (this.followId != that.followId)
        return false;
    }

    boolean this_present_nextFollowId = true;
    boolean that_present_nextFollowId = true;
    if (this_present_nextFollowId || that_present_nextFollowId) {
      if (!(this_present_nextFollowId && that_present_nextFollowId))
        return false;
      if (this.nextFollowId != that.nextFollowId)
        return false;
    }

    boolean this_present_noticeWay = true && this.isSetNoticeWay();
    boolean that_present_noticeWay = true && that.isSetNoticeWay();
    if (this_present_noticeWay || that_present_noticeWay) {
      if (!(this_present_noticeWay && that_present_noticeWay))
        return false;
      if (!this.noticeWay.equals(that.noticeWay))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createId = true && this.isSetCreateId();
    boolean that_present_createId = true && that.isSetCreateId();
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (!this.createId.equals(that.createId))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_updateId = true && this.isSetUpdateId();
    boolean that_present_updateId = true && that.isSetUpdateId();
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (!this.updateId.equals(that.updateId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_followName = true && this.isSetFollowName();
    boolean that_present_followName = true && that.isSetFollowName();
    if (this_present_followName || that_present_followName) {
      if (!(this_present_followName && that_present_followName))
        return false;
      if (!this.followName.equals(that.followName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_exceptionId = true;
    list.add(present_exceptionId);
    if (present_exceptionId)
      list.add(exceptionId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_monitorDate = true && (isSetMonitorDate());
    list.add(present_monitorDate);
    if (present_monitorDate)
      list.add(monitorDate);

    boolean present_monitorTitle = true && (isSetMonitorTitle());
    list.add(present_monitorTitle);
    if (present_monitorTitle)
      list.add(monitorTitle);

    boolean present_monitorContent = true && (isSetMonitorContent());
    list.add(present_monitorContent);
    if (present_monitorContent)
      list.add(monitorContent);

    boolean present_monitorResult = true && (isSetMonitorResult());
    list.add(present_monitorResult);
    if (present_monitorResult)
      list.add(monitorResult);

    boolean present_monitorOpinion = true && (isSetMonitorOpinion());
    list.add(present_monitorOpinion);
    if (present_monitorOpinion)
      list.add(monitorOpinion);

    boolean present_dangerLevel = true;
    list.add(present_dangerLevel);
    if (present_dangerLevel)
      list.add(dangerLevel);

    boolean present_followStatus = true;
    list.add(present_followStatus);
    if (present_followStatus)
      list.add(followStatus);

    boolean present_nextMonitorDate = true && (isSetNextMonitorDate());
    list.add(present_nextMonitorDate);
    if (present_nextMonitorDate)
      list.add(nextMonitorDate);

    boolean present_followId = true;
    list.add(present_followId);
    if (present_followId)
      list.add(followId);

    boolean present_nextFollowId = true;
    list.add(present_nextFollowId);
    if (present_nextFollowId)
      list.add(nextFollowId);

    boolean present_noticeWay = true && (isSetNoticeWay());
    list.add(present_noticeWay);
    if (present_noticeWay)
      list.add(noticeWay);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createId = true && (isSetCreateId());
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_updateId = true && (isSetUpdateId());
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_followName = true && (isSetFollowName());
    list.add(present_followName);
    if (present_followName)
      list.add(followName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExceptionMonitorIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionId()).compareTo(other.isSetExceptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionId, other.exceptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorDate()).compareTo(other.isSetMonitorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorDate, other.monitorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorTitle()).compareTo(other.isSetMonitorTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorTitle, other.monitorTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorContent()).compareTo(other.isSetMonitorContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorContent, other.monitorContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorResult()).compareTo(other.isSetMonitorResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorResult, other.monitorResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorOpinion()).compareTo(other.isSetMonitorOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorOpinion, other.monitorOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDangerLevel()).compareTo(other.isSetDangerLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDangerLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dangerLevel, other.dangerLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowStatus()).compareTo(other.isSetFollowStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followStatus, other.followStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextMonitorDate()).compareTo(other.isSetNextMonitorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextMonitorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextMonitorDate, other.nextMonitorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowId()).compareTo(other.isSetFollowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followId, other.followId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextFollowId()).compareTo(other.isSetNextFollowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextFollowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextFollowId, other.nextFollowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoticeWay()).compareTo(other.isSetNoticeWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoticeWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeWay, other.noticeWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowName()).compareTo(other.isSetFollowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followName, other.followName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExceptionMonitorIndex(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionId:");
    sb.append(this.exceptionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorDate:");
    if (this.monitorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorTitle:");
    if (this.monitorTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorContent:");
    if (this.monitorContent == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorResult:");
    if (this.monitorResult == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorOpinion:");
    if (this.monitorOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dangerLevel:");
    sb.append(this.dangerLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followStatus:");
    sb.append(this.followStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextMonitorDate:");
    if (this.nextMonitorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.nextMonitorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followId:");
    sb.append(this.followId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextFollowId:");
    sb.append(this.nextFollowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noticeWay:");
    if (this.noticeWay == null) {
      sb.append("null");
    } else {
      sb.append(this.noticeWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    if (this.createId == null) {
      sb.append("null");
    } else {
      sb.append(this.createId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    if (this.updateId == null) {
      sb.append("null");
    } else {
      sb.append(this.updateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followName:");
    if (this.followName == null) {
      sb.append("null");
    } else {
      sb.append(this.followName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExceptionMonitorIndexStandardSchemeFactory implements SchemeFactory {
    public ExceptionMonitorIndexStandardScheme getScheme() {
      return new ExceptionMonitorIndexStandardScheme();
    }
  }

  private static class ExceptionMonitorIndexStandardScheme extends StandardScheme<ExceptionMonitorIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExceptionMonitorIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCEPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exceptionId = iprot.readI32();
              struct.setExceptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONITOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorDate = iprot.readString();
              struct.setMonitorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MONITOR_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorTitle = iprot.readString();
              struct.setMonitorTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONITOR_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorContent = iprot.readString();
              struct.setMonitorContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MONITOR_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorResult = iprot.readString();
              struct.setMonitorResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MONITOR_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorOpinion = iprot.readString();
              struct.setMonitorOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DANGER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dangerLevel = iprot.readI32();
              struct.setDangerLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FOLLOW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followStatus = iprot.readI32();
              struct.setFollowStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEXT_MONITOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextMonitorDate = iprot.readString();
              struct.setNextMonitorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FOLLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followId = iprot.readI32();
              struct.setFollowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NEXT_FOLLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextFollowId = iprot.readI32();
              struct.setNextFollowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTICE_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noticeWay = iprot.readString();
              struct.setNoticeWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.userIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createId = iprot.readString();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateId = iprot.readString();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // FOLLOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.followName = iprot.readString();
              struct.setFollowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExceptionMonitorIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_ID_FIELD_DESC);
      oprot.writeI32(struct.exceptionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.monitorDate != null) {
        oprot.writeFieldBegin(MONITOR_DATE_FIELD_DESC);
        oprot.writeString(struct.monitorDate);
        oprot.writeFieldEnd();
      }
      if (struct.monitorTitle != null) {
        oprot.writeFieldBegin(MONITOR_TITLE_FIELD_DESC);
        oprot.writeString(struct.monitorTitle);
        oprot.writeFieldEnd();
      }
      if (struct.monitorContent != null) {
        oprot.writeFieldBegin(MONITOR_CONTENT_FIELD_DESC);
        oprot.writeString(struct.monitorContent);
        oprot.writeFieldEnd();
      }
      if (struct.monitorResult != null) {
        oprot.writeFieldBegin(MONITOR_RESULT_FIELD_DESC);
        oprot.writeString(struct.monitorResult);
        oprot.writeFieldEnd();
      }
      if (struct.monitorOpinion != null) {
        oprot.writeFieldBegin(MONITOR_OPINION_FIELD_DESC);
        oprot.writeString(struct.monitorOpinion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DANGER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.dangerLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.followStatus);
      oprot.writeFieldEnd();
      if (struct.nextMonitorDate != null) {
        oprot.writeFieldBegin(NEXT_MONITOR_DATE_FIELD_DESC);
        oprot.writeString(struct.nextMonitorDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOLLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.followId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_FOLLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.nextFollowId);
      oprot.writeFieldEnd();
      if (struct.noticeWay != null) {
        oprot.writeFieldBegin(NOTICE_WAY_FIELD_DESC);
        oprot.writeString(struct.noticeWay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter19 : struct.userIds)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.createId != null) {
        oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
        oprot.writeString(struct.createId);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.updateId != null) {
        oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
        oprot.writeString(struct.updateId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.followName != null) {
        oprot.writeFieldBegin(FOLLOW_NAME_FIELD_DESC);
        oprot.writeString(struct.followName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExceptionMonitorIndexTupleSchemeFactory implements SchemeFactory {
    public ExceptionMonitorIndexTupleScheme getScheme() {
      return new ExceptionMonitorIndexTupleScheme();
    }
  }

  private static class ExceptionMonitorIndexTupleScheme extends TupleScheme<ExceptionMonitorIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExceptionMonitorIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetExceptionId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetMonitorDate()) {
        optionals.set(3);
      }
      if (struct.isSetMonitorTitle()) {
        optionals.set(4);
      }
      if (struct.isSetMonitorContent()) {
        optionals.set(5);
      }
      if (struct.isSetMonitorResult()) {
        optionals.set(6);
      }
      if (struct.isSetMonitorOpinion()) {
        optionals.set(7);
      }
      if (struct.isSetDangerLevel()) {
        optionals.set(8);
      }
      if (struct.isSetFollowStatus()) {
        optionals.set(9);
      }
      if (struct.isSetNextMonitorDate()) {
        optionals.set(10);
      }
      if (struct.isSetFollowId()) {
        optionals.set(11);
      }
      if (struct.isSetNextFollowId()) {
        optionals.set(12);
      }
      if (struct.isSetNoticeWay()) {
        optionals.set(13);
      }
      if (struct.isSetStatus()) {
        optionals.set(14);
      }
      if (struct.isSetPage()) {
        optionals.set(15);
      }
      if (struct.isSetRows()) {
        optionals.set(16);
      }
      if (struct.isSetUserIds()) {
        optionals.set(17);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(18);
      }
      if (struct.isSetCreateId()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(20);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(21);
      }
      if (struct.isSetRemark()) {
        optionals.set(22);
      }
      if (struct.isSetFollowName()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetExceptionId()) {
        oprot.writeI32(struct.exceptionId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMonitorDate()) {
        oprot.writeString(struct.monitorDate);
      }
      if (struct.isSetMonitorTitle()) {
        oprot.writeString(struct.monitorTitle);
      }
      if (struct.isSetMonitorContent()) {
        oprot.writeString(struct.monitorContent);
      }
      if (struct.isSetMonitorResult()) {
        oprot.writeString(struct.monitorResult);
      }
      if (struct.isSetMonitorOpinion()) {
        oprot.writeString(struct.monitorOpinion);
      }
      if (struct.isSetDangerLevel()) {
        oprot.writeI32(struct.dangerLevel);
      }
      if (struct.isSetFollowStatus()) {
        oprot.writeI32(struct.followStatus);
      }
      if (struct.isSetNextMonitorDate()) {
        oprot.writeString(struct.nextMonitorDate);
      }
      if (struct.isSetFollowId()) {
        oprot.writeI32(struct.followId);
      }
      if (struct.isSetNextFollowId()) {
        oprot.writeI32(struct.nextFollowId);
      }
      if (struct.isSetNoticeWay()) {
        oprot.writeString(struct.noticeWay);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter20 : struct.userIds)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreateId()) {
        oprot.writeString(struct.createId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeString(struct.updateId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetFollowName()) {
        oprot.writeString(struct.followName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExceptionMonitorIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exceptionId = iprot.readI32();
        struct.setExceptionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.monitorDate = iprot.readString();
        struct.setMonitorDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.monitorTitle = iprot.readString();
        struct.setMonitorTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monitorContent = iprot.readString();
        struct.setMonitorContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.monitorResult = iprot.readString();
        struct.setMonitorResultIsSet(true);
      }
      if (incoming.get(7)) {
        struct.monitorOpinion = iprot.readString();
        struct.setMonitorOpinionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dangerLevel = iprot.readI32();
        struct.setDangerLevelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.followStatus = iprot.readI32();
        struct.setFollowStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nextMonitorDate = iprot.readString();
        struct.setNextMonitorDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.followId = iprot.readI32();
        struct.setFollowIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nextFollowId = iprot.readI32();
        struct.setNextFollowIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.noticeWay = iprot.readString();
        struct.setNoticeWayIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list21.size);
          int _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI32();
            struct.userIds.add(_elem22);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createId = iprot.readString();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.updateId = iprot.readString();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(23)) {
        struct.followName = iprot.readString();
        struct.setFollowNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class MeetingMinutesFile implements org.apache.thrift.TBase<MeetingMinutesFile, MeetingMinutesFile._Fields>, java.io.Serializable, Cloneable, Comparable<MeetingMinutesFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeetingMinutesFile");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEETING_MEMBER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingMemberUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEETING_MEMBER_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingMemberUserName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MeetingMinutesFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MeetingMinutesFileTupleSchemeFactory());
  }

  public int pid; // required
  public int meetingId; // required
  public int meetingMemberUserId; // required
  public String meetingMemberUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    MEETING_ID((short)2, "meetingId"),
    MEETING_MEMBER_USER_ID((short)3, "meetingMemberUserId"),
    MEETING_MEMBER_USER_NAME((short)4, "meetingMemberUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // MEETING_ID
          return MEETING_ID;
        case 3: // MEETING_MEMBER_USER_ID
          return MEETING_MEMBER_USER_ID;
        case 4: // MEETING_MEMBER_USER_NAME
          return MEETING_MEMBER_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MEETINGID_ISSET_ID = 1;
  private static final int __MEETINGMEMBERUSERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_MEMBER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingMemberUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_MEMBER_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("meetingMemberUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeetingMinutesFile.class, metaDataMap);
  }

  public MeetingMinutesFile() {
  }

  public MeetingMinutesFile(
    int pid,
    int meetingId,
    int meetingMemberUserId,
    String meetingMemberUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
    this.meetingMemberUserId = meetingMemberUserId;
    setMeetingMemberUserIdIsSet(true);
    this.meetingMemberUserName = meetingMemberUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeetingMinutesFile(MeetingMinutesFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.meetingId = other.meetingId;
    this.meetingMemberUserId = other.meetingMemberUserId;
    if (other.isSetMeetingMemberUserName()) {
      this.meetingMemberUserName = other.meetingMemberUserName;
    }
  }

  public MeetingMinutesFile deepCopy() {
    return new MeetingMinutesFile(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setMeetingIdIsSet(false);
    this.meetingId = 0;
    setMeetingMemberUserIdIsSet(false);
    this.meetingMemberUserId = 0;
    this.meetingMemberUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public MeetingMinutesFile setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getMeetingId() {
    return this.meetingId;
  }

  public MeetingMinutesFile setMeetingId(int meetingId) {
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
    return this;
  }

  public void unsetMeetingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  public void setMeetingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
  }

  public int getMeetingMemberUserId() {
    return this.meetingMemberUserId;
  }

  public MeetingMinutesFile setMeetingMemberUserId(int meetingMemberUserId) {
    this.meetingMemberUserId = meetingMemberUserId;
    setMeetingMemberUserIdIsSet(true);
    return this;
  }

  public void unsetMeetingMemberUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGMEMBERUSERID_ISSET_ID);
  }

  /** Returns true if field meetingMemberUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingMemberUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEETINGMEMBERUSERID_ISSET_ID);
  }

  public void setMeetingMemberUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGMEMBERUSERID_ISSET_ID, value);
  }

  public String getMeetingMemberUserName() {
    return this.meetingMemberUserName;
  }

  public MeetingMinutesFile setMeetingMemberUserName(String meetingMemberUserName) {
    this.meetingMemberUserName = meetingMemberUserName;
    return this;
  }

  public void unsetMeetingMemberUserName() {
    this.meetingMemberUserName = null;
  }

  /** Returns true if field meetingMemberUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingMemberUserName() {
    return this.meetingMemberUserName != null;
  }

  public void setMeetingMemberUserNameIsSet(boolean value) {
    if (!value) {
      this.meetingMemberUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case MEETING_ID:
      if (value == null) {
        unsetMeetingId();
      } else {
        setMeetingId((Integer)value);
      }
      break;

    case MEETING_MEMBER_USER_ID:
      if (value == null) {
        unsetMeetingMemberUserId();
      } else {
        setMeetingMemberUserId((Integer)value);
      }
      break;

    case MEETING_MEMBER_USER_NAME:
      if (value == null) {
        unsetMeetingMemberUserName();
      } else {
        setMeetingMemberUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case MEETING_ID:
      return Integer.valueOf(getMeetingId());

    case MEETING_MEMBER_USER_ID:
      return Integer.valueOf(getMeetingMemberUserId());

    case MEETING_MEMBER_USER_NAME:
      return getMeetingMemberUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case MEETING_ID:
      return isSetMeetingId();
    case MEETING_MEMBER_USER_ID:
      return isSetMeetingMemberUserId();
    case MEETING_MEMBER_USER_NAME:
      return isSetMeetingMemberUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MeetingMinutesFile)
      return this.equals((MeetingMinutesFile)that);
    return false;
  }

  public boolean equals(MeetingMinutesFile that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_meetingId = true;
    boolean that_present_meetingId = true;
    if (this_present_meetingId || that_present_meetingId) {
      if (!(this_present_meetingId && that_present_meetingId))
        return false;
      if (this.meetingId != that.meetingId)
        return false;
    }

    boolean this_present_meetingMemberUserId = true;
    boolean that_present_meetingMemberUserId = true;
    if (this_present_meetingMemberUserId || that_present_meetingMemberUserId) {
      if (!(this_present_meetingMemberUserId && that_present_meetingMemberUserId))
        return false;
      if (this.meetingMemberUserId != that.meetingMemberUserId)
        return false;
    }

    boolean this_present_meetingMemberUserName = true && this.isSetMeetingMemberUserName();
    boolean that_present_meetingMemberUserName = true && that.isSetMeetingMemberUserName();
    if (this_present_meetingMemberUserName || that_present_meetingMemberUserName) {
      if (!(this_present_meetingMemberUserName && that_present_meetingMemberUserName))
        return false;
      if (!this.meetingMemberUserName.equals(that.meetingMemberUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_meetingId = true;
    list.add(present_meetingId);
    if (present_meetingId)
      list.add(meetingId);

    boolean present_meetingMemberUserId = true;
    list.add(present_meetingMemberUserId);
    if (present_meetingMemberUserId)
      list.add(meetingMemberUserId);

    boolean present_meetingMemberUserName = true && (isSetMeetingMemberUserName());
    list.add(present_meetingMemberUserName);
    if (present_meetingMemberUserName)
      list.add(meetingMemberUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(MeetingMinutesFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingMemberUserId()).compareTo(other.isSetMeetingMemberUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingMemberUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingMemberUserId, other.meetingMemberUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingMemberUserName()).compareTo(other.isSetMeetingMemberUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingMemberUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingMemberUserName, other.meetingMemberUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MeetingMinutesFile(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingId:");
    sb.append(this.meetingId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingMemberUserId:");
    sb.append(this.meetingMemberUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingMemberUserName:");
    if (this.meetingMemberUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingMemberUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeetingMinutesFileStandardSchemeFactory implements SchemeFactory {
    public MeetingMinutesFileStandardScheme getScheme() {
      return new MeetingMinutesFileStandardScheme();
    }
  }

  private static class MeetingMinutesFileStandardScheme extends StandardScheme<MeetingMinutesFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeetingMinutesFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEETING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meetingId = iprot.readI32();
              struct.setMeetingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEETING_MEMBER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meetingMemberUserId = iprot.readI32();
              struct.setMeetingMemberUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEETING_MEMBER_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingMemberUserName = iprot.readString();
              struct.setMeetingMemberUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeetingMinutesFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
      oprot.writeI32(struct.meetingId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEETING_MEMBER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.meetingMemberUserId);
      oprot.writeFieldEnd();
      if (struct.meetingMemberUserName != null) {
        oprot.writeFieldBegin(MEETING_MEMBER_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.meetingMemberUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeetingMinutesFileTupleSchemeFactory implements SchemeFactory {
    public MeetingMinutesFileTupleScheme getScheme() {
      return new MeetingMinutesFileTupleScheme();
    }
  }

  private static class MeetingMinutesFileTupleScheme extends TupleScheme<MeetingMinutesFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeetingMinutesFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetMeetingId()) {
        optionals.set(1);
      }
      if (struct.isSetMeetingMemberUserId()) {
        optionals.set(2);
      }
      if (struct.isSetMeetingMemberUserName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetMeetingId()) {
        oprot.writeI32(struct.meetingId);
      }
      if (struct.isSetMeetingMemberUserId()) {
        oprot.writeI32(struct.meetingMemberUserId);
      }
      if (struct.isSetMeetingMemberUserName()) {
        oprot.writeString(struct.meetingMemberUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeetingMinutesFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.meetingId = iprot.readI32();
        struct.setMeetingIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.meetingMemberUserId = iprot.readI32();
        struct.setMeetingMemberUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.meetingMemberUserName = iprot.readString();
        struct.setMeetingMemberUserNameIsSet(true);
      }
    }
  }

}


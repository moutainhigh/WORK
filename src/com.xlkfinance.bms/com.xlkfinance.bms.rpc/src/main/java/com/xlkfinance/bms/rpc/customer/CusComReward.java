/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComReward implements org.apache.thrift.TBase<CusComReward, CusComReward._Fields>, java.io.Serializable, Cloneable, Comparable<CusComReward> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComReward");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CERT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("certName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ISS_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("issEvent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("issDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REW_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("rewPerson", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ISS_ORGAN_FIELD_DESC = new org.apache.thrift.protocol.TField("issOrgan", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComRewardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComRewardTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String certName; // required
  public String issEvent; // required
  public String certNo; // required
  public String issDate; // required
  public String rewPerson; // required
  public String issOrgan; // required
  public String remark; // required
  public int status; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    CERT_NAME((short)4, "certName"),
    ISS_EVENT((short)5, "issEvent"),
    CERT_NO((short)6, "certNo"),
    ISS_DATE((short)7, "issDate"),
    REW_PERSON((short)8, "rewPerson"),
    ISS_ORGAN((short)9, "issOrgan"),
    REMARK((short)3, "remark"),
    STATUS((short)10, "status"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 4: // CERT_NAME
          return CERT_NAME;
        case 5: // ISS_EVENT
          return ISS_EVENT;
        case 6: // CERT_NO
          return CERT_NO;
        case 7: // ISS_DATE
          return ISS_DATE;
        case 8: // REW_PERSON
          return REW_PERSON;
        case 9: // ISS_ORGAN
          return ISS_ORGAN;
        case 3: // REMARK
          return REMARK;
        case 10: // STATUS
          return STATUS;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __PAGE_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.CERT_NAME, new org.apache.thrift.meta_data.FieldMetaData("certName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISS_EVENT, new org.apache.thrift.meta_data.FieldMetaData("issEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NO, new org.apache.thrift.meta_data.FieldMetaData("certNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISS_DATE, new org.apache.thrift.meta_data.FieldMetaData("issDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REW_PERSON, new org.apache.thrift.meta_data.FieldMetaData("rewPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISS_ORGAN, new org.apache.thrift.meta_data.FieldMetaData("issOrgan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComReward.class, metaDataMap);
  }

  public CusComReward() {
  }

  public CusComReward(
    int pid,
    CusComBase cusComBase,
    String certName,
    String issEvent,
    String certNo,
    String issDate,
    String rewPerson,
    String issOrgan,
    String remark,
    int status,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.certName = certName;
    this.issEvent = issEvent;
    this.certNo = certNo;
    this.issDate = issDate;
    this.rewPerson = rewPerson;
    this.issOrgan = issOrgan;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComReward(CusComReward other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetCertName()) {
      this.certName = other.certName;
    }
    if (other.isSetIssEvent()) {
      this.issEvent = other.issEvent;
    }
    if (other.isSetCertNo()) {
      this.certNo = other.certNo;
    }
    if (other.isSetIssDate()) {
      this.issDate = other.issDate;
    }
    if (other.isSetRewPerson()) {
      this.rewPerson = other.rewPerson;
    }
    if (other.isSetIssOrgan()) {
      this.issOrgan = other.issOrgan;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusComReward deepCopy() {
    return new CusComReward(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.certName = null;
    this.issEvent = null;
    this.certNo = null;
    this.issDate = null;
    this.rewPerson = null;
    this.issOrgan = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComReward setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComReward setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getCertName() {
    return this.certName;
  }

  public CusComReward setCertName(String certName) {
    this.certName = certName;
    return this;
  }

  public void unsetCertName() {
    this.certName = null;
  }

  /** Returns true if field certName is set (has been assigned a value) and false otherwise */
  public boolean isSetCertName() {
    return this.certName != null;
  }

  public void setCertNameIsSet(boolean value) {
    if (!value) {
      this.certName = null;
    }
  }

  public String getIssEvent() {
    return this.issEvent;
  }

  public CusComReward setIssEvent(String issEvent) {
    this.issEvent = issEvent;
    return this;
  }

  public void unsetIssEvent() {
    this.issEvent = null;
  }

  /** Returns true if field issEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetIssEvent() {
    return this.issEvent != null;
  }

  public void setIssEventIsSet(boolean value) {
    if (!value) {
      this.issEvent = null;
    }
  }

  public String getCertNo() {
    return this.certNo;
  }

  public CusComReward setCertNo(String certNo) {
    this.certNo = certNo;
    return this;
  }

  public void unsetCertNo() {
    this.certNo = null;
  }

  /** Returns true if field certNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNo() {
    return this.certNo != null;
  }

  public void setCertNoIsSet(boolean value) {
    if (!value) {
      this.certNo = null;
    }
  }

  public String getIssDate() {
    return this.issDate;
  }

  public CusComReward setIssDate(String issDate) {
    this.issDate = issDate;
    return this;
  }

  public void unsetIssDate() {
    this.issDate = null;
  }

  /** Returns true if field issDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIssDate() {
    return this.issDate != null;
  }

  public void setIssDateIsSet(boolean value) {
    if (!value) {
      this.issDate = null;
    }
  }

  public String getRewPerson() {
    return this.rewPerson;
  }

  public CusComReward setRewPerson(String rewPerson) {
    this.rewPerson = rewPerson;
    return this;
  }

  public void unsetRewPerson() {
    this.rewPerson = null;
  }

  /** Returns true if field rewPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetRewPerson() {
    return this.rewPerson != null;
  }

  public void setRewPersonIsSet(boolean value) {
    if (!value) {
      this.rewPerson = null;
    }
  }

  public String getIssOrgan() {
    return this.issOrgan;
  }

  public CusComReward setIssOrgan(String issOrgan) {
    this.issOrgan = issOrgan;
    return this;
  }

  public void unsetIssOrgan() {
    this.issOrgan = null;
  }

  /** Returns true if field issOrgan is set (has been assigned a value) and false otherwise */
  public boolean isSetIssOrgan() {
    return this.issOrgan != null;
  }

  public void setIssOrganIsSet(boolean value) {
    if (!value) {
      this.issOrgan = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComReward setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComReward setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusComReward setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComReward setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case CERT_NAME:
      if (value == null) {
        unsetCertName();
      } else {
        setCertName((String)value);
      }
      break;

    case ISS_EVENT:
      if (value == null) {
        unsetIssEvent();
      } else {
        setIssEvent((String)value);
      }
      break;

    case CERT_NO:
      if (value == null) {
        unsetCertNo();
      } else {
        setCertNo((String)value);
      }
      break;

    case ISS_DATE:
      if (value == null) {
        unsetIssDate();
      } else {
        setIssDate((String)value);
      }
      break;

    case REW_PERSON:
      if (value == null) {
        unsetRewPerson();
      } else {
        setRewPerson((String)value);
      }
      break;

    case ISS_ORGAN:
      if (value == null) {
        unsetIssOrgan();
      } else {
        setIssOrgan((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case CERT_NAME:
      return getCertName();

    case ISS_EVENT:
      return getIssEvent();

    case CERT_NO:
      return getCertNo();

    case ISS_DATE:
      return getIssDate();

    case REW_PERSON:
      return getRewPerson();

    case ISS_ORGAN:
      return getIssOrgan();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case CERT_NAME:
      return isSetCertName();
    case ISS_EVENT:
      return isSetIssEvent();
    case CERT_NO:
      return isSetCertNo();
    case ISS_DATE:
      return isSetIssDate();
    case REW_PERSON:
      return isSetRewPerson();
    case ISS_ORGAN:
      return isSetIssOrgan();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComReward)
      return this.equals((CusComReward)that);
    return false;
  }

  public boolean equals(CusComReward that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_certName = true && this.isSetCertName();
    boolean that_present_certName = true && that.isSetCertName();
    if (this_present_certName || that_present_certName) {
      if (!(this_present_certName && that_present_certName))
        return false;
      if (!this.certName.equals(that.certName))
        return false;
    }

    boolean this_present_issEvent = true && this.isSetIssEvent();
    boolean that_present_issEvent = true && that.isSetIssEvent();
    if (this_present_issEvent || that_present_issEvent) {
      if (!(this_present_issEvent && that_present_issEvent))
        return false;
      if (!this.issEvent.equals(that.issEvent))
        return false;
    }

    boolean this_present_certNo = true && this.isSetCertNo();
    boolean that_present_certNo = true && that.isSetCertNo();
    if (this_present_certNo || that_present_certNo) {
      if (!(this_present_certNo && that_present_certNo))
        return false;
      if (!this.certNo.equals(that.certNo))
        return false;
    }

    boolean this_present_issDate = true && this.isSetIssDate();
    boolean that_present_issDate = true && that.isSetIssDate();
    if (this_present_issDate || that_present_issDate) {
      if (!(this_present_issDate && that_present_issDate))
        return false;
      if (!this.issDate.equals(that.issDate))
        return false;
    }

    boolean this_present_rewPerson = true && this.isSetRewPerson();
    boolean that_present_rewPerson = true && that.isSetRewPerson();
    if (this_present_rewPerson || that_present_rewPerson) {
      if (!(this_present_rewPerson && that_present_rewPerson))
        return false;
      if (!this.rewPerson.equals(that.rewPerson))
        return false;
    }

    boolean this_present_issOrgan = true && this.isSetIssOrgan();
    boolean that_present_issOrgan = true && that.isSetIssOrgan();
    if (this_present_issOrgan || that_present_issOrgan) {
      if (!(this_present_issOrgan && that_present_issOrgan))
        return false;
      if (!this.issOrgan.equals(that.issOrgan))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_certName = true && (isSetCertName());
    list.add(present_certName);
    if (present_certName)
      list.add(certName);

    boolean present_issEvent = true && (isSetIssEvent());
    list.add(present_issEvent);
    if (present_issEvent)
      list.add(issEvent);

    boolean present_certNo = true && (isSetCertNo());
    list.add(present_certNo);
    if (present_certNo)
      list.add(certNo);

    boolean present_issDate = true && (isSetIssDate());
    list.add(present_issDate);
    if (present_issDate)
      list.add(issDate);

    boolean present_rewPerson = true && (isSetRewPerson());
    list.add(present_rewPerson);
    if (present_rewPerson)
      list.add(rewPerson);

    boolean present_issOrgan = true && (isSetIssOrgan());
    list.add(present_issOrgan);
    if (present_issOrgan)
      list.add(issOrgan);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComReward other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertName()).compareTo(other.isSetCertName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certName, other.certName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssEvent()).compareTo(other.isSetIssEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issEvent, other.issEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNo()).compareTo(other.isSetCertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNo, other.certNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssDate()).compareTo(other.isSetIssDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issDate, other.issDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewPerson()).compareTo(other.isSetRewPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewPerson, other.rewPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssOrgan()).compareTo(other.isSetIssOrgan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssOrgan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issOrgan, other.issOrgan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComReward(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certName:");
    if (this.certName == null) {
      sb.append("null");
    } else {
      sb.append(this.certName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issEvent:");
    if (this.issEvent == null) {
      sb.append("null");
    } else {
      sb.append(this.issEvent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNo:");
    if (this.certNo == null) {
      sb.append("null");
    } else {
      sb.append(this.certNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issDate:");
    if (this.issDate == null) {
      sb.append("null");
    } else {
      sb.append(this.issDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rewPerson:");
    if (this.rewPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.rewPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issOrgan:");
    if (this.issOrgan == null) {
      sb.append("null");
    } else {
      sb.append(this.issOrgan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComRewardStandardSchemeFactory implements SchemeFactory {
    public CusComRewardStandardScheme getScheme() {
      return new CusComRewardStandardScheme();
    }
  }

  private static class CusComRewardStandardScheme extends StandardScheme<CusComReward> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComReward struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CERT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certName = iprot.readString();
              struct.setCertNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISS_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issEvent = iprot.readString();
              struct.setIssEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNo = iprot.readString();
              struct.setCertNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ISS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issDate = iprot.readString();
              struct.setIssDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REW_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rewPerson = iprot.readString();
              struct.setRewPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ISS_ORGAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issOrgan = iprot.readString();
              struct.setIssOrganIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComReward struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.certName != null) {
        oprot.writeFieldBegin(CERT_NAME_FIELD_DESC);
        oprot.writeString(struct.certName);
        oprot.writeFieldEnd();
      }
      if (struct.issEvent != null) {
        oprot.writeFieldBegin(ISS_EVENT_FIELD_DESC);
        oprot.writeString(struct.issEvent);
        oprot.writeFieldEnd();
      }
      if (struct.certNo != null) {
        oprot.writeFieldBegin(CERT_NO_FIELD_DESC);
        oprot.writeString(struct.certNo);
        oprot.writeFieldEnd();
      }
      if (struct.issDate != null) {
        oprot.writeFieldBegin(ISS_DATE_FIELD_DESC);
        oprot.writeString(struct.issDate);
        oprot.writeFieldEnd();
      }
      if (struct.rewPerson != null) {
        oprot.writeFieldBegin(REW_PERSON_FIELD_DESC);
        oprot.writeString(struct.rewPerson);
        oprot.writeFieldEnd();
      }
      if (struct.issOrgan != null) {
        oprot.writeFieldBegin(ISS_ORGAN_FIELD_DESC);
        oprot.writeString(struct.issOrgan);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComRewardTupleSchemeFactory implements SchemeFactory {
    public CusComRewardTupleScheme getScheme() {
      return new CusComRewardTupleScheme();
    }
  }

  private static class CusComRewardTupleScheme extends TupleScheme<CusComReward> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComReward struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetCertName()) {
        optionals.set(2);
      }
      if (struct.isSetIssEvent()) {
        optionals.set(3);
      }
      if (struct.isSetCertNo()) {
        optionals.set(4);
      }
      if (struct.isSetIssDate()) {
        optionals.set(5);
      }
      if (struct.isSetRewPerson()) {
        optionals.set(6);
      }
      if (struct.isSetIssOrgan()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetCertName()) {
        oprot.writeString(struct.certName);
      }
      if (struct.isSetIssEvent()) {
        oprot.writeString(struct.issEvent);
      }
      if (struct.isSetCertNo()) {
        oprot.writeString(struct.certNo);
      }
      if (struct.isSetIssDate()) {
        oprot.writeString(struct.issDate);
      }
      if (struct.isSetRewPerson()) {
        oprot.writeString(struct.rewPerson);
      }
      if (struct.isSetIssOrgan()) {
        oprot.writeString(struct.issOrgan);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComReward struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.certName = iprot.readString();
        struct.setCertNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.issEvent = iprot.readString();
        struct.setIssEventIsSet(true);
      }
      if (incoming.get(4)) {
        struct.certNo = iprot.readString();
        struct.setCertNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.issDate = iprot.readString();
        struct.setIssDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rewPerson = iprot.readString();
        struct.setRewPersonIsSet(true);
      }
      if (incoming.get(7)) {
        struct.issOrgan = iprot.readString();
        struct.setIssOrganIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


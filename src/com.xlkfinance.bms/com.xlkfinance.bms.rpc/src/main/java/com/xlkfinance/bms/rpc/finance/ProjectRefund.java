/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class ProjectRefund implements org.apache.thrift.TBase<ProjectRefund, ProjectRefund._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectRefund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectRefund");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BALANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("BalanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REFUND_BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refundBankNum", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REFUND_BANK_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundBankUser", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REFUND_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectRefundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectRefundTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public int inputId; // required
  public double refundAmt; // required
  public double BalanceAmt; // required
  public String remark; // required
  public String refundBankNum; // required
  public String refundBankUser; // required
  public String refundDt; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    INPUT_ID((short)3, "inputId"),
    REFUND_AMT((short)4, "refundAmt"),
    BALANCE_AMT((short)5, "BalanceAmt"),
    REMARK((short)6, "remark"),
    REFUND_BANK_NUM((short)7, "refundBankNum"),
    REFUND_BANK_USER((short)8, "refundBankUser"),
    REFUND_DT((short)9, "refundDt"),
    STATUS((short)10, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // INPUT_ID
          return INPUT_ID;
        case 4: // REFUND_AMT
          return REFUND_AMT;
        case 5: // BALANCE_AMT
          return BALANCE_AMT;
        case 6: // REMARK
          return REMARK;
        case 7: // REFUND_BANK_NUM
          return REFUND_BANK_NUM;
        case 8: // REFUND_BANK_USER
          return REFUND_BANK_USER;
        case 9: // REFUND_DT
          return REFUND_DT;
        case 10: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __INPUTID_ISSET_ID = 2;
  private static final int __REFUNDAMT_ISSET_ID = 3;
  private static final int __BALANCEAMT_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_AMT, new org.apache.thrift.meta_data.FieldMetaData("refundAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("BalanceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("refundBankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_BANK_USER, new org.apache.thrift.meta_data.FieldMetaData("refundBankUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_DT, new org.apache.thrift.meta_data.FieldMetaData("refundDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectRefund.class, metaDataMap);
  }

  public ProjectRefund() {
  }

  public ProjectRefund(
    int pid,
    int loanId,
    int inputId,
    double refundAmt,
    double BalanceAmt,
    String remark,
    String refundBankNum,
    String refundBankUser,
    String refundDt,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.inputId = inputId;
    setInputIdIsSet(true);
    this.refundAmt = refundAmt;
    setRefundAmtIsSet(true);
    this.BalanceAmt = BalanceAmt;
    setBalanceAmtIsSet(true);
    this.remark = remark;
    this.refundBankNum = refundBankNum;
    this.refundBankUser = refundBankUser;
    this.refundDt = refundDt;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectRefund(ProjectRefund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    this.inputId = other.inputId;
    this.refundAmt = other.refundAmt;
    this.BalanceAmt = other.BalanceAmt;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetRefundBankNum()) {
      this.refundBankNum = other.refundBankNum;
    }
    if (other.isSetRefundBankUser()) {
      this.refundBankUser = other.refundBankUser;
    }
    if (other.isSetRefundDt()) {
      this.refundDt = other.refundDt;
    }
    this.status = other.status;
  }

  public ProjectRefund deepCopy() {
    return new ProjectRefund(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setInputIdIsSet(false);
    this.inputId = 0;
    setRefundAmtIsSet(false);
    this.refundAmt = 0.0;
    setBalanceAmtIsSet(false);
    this.BalanceAmt = 0.0;
    this.remark = null;
    this.refundBankNum = null;
    this.refundBankUser = null;
    this.refundDt = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectRefund setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public ProjectRefund setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getInputId() {
    return this.inputId;
  }

  public ProjectRefund setInputId(int inputId) {
    this.inputId = inputId;
    setInputIdIsSet(true);
    return this;
  }

  public void unsetInputId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputId() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  public void setInputIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTID_ISSET_ID, value);
  }

  public double getRefundAmt() {
    return this.refundAmt;
  }

  public ProjectRefund setRefundAmt(double refundAmt) {
    this.refundAmt = refundAmt;
    setRefundAmtIsSet(true);
    return this;
  }

  public void unsetRefundAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAMT_ISSET_ID);
  }

  /** Returns true if field refundAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAMT_ISSET_ID);
  }

  public void setRefundAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAMT_ISSET_ID, value);
  }

  public double getBalanceAmt() {
    return this.BalanceAmt;
  }

  public ProjectRefund setBalanceAmt(double BalanceAmt) {
    this.BalanceAmt = BalanceAmt;
    setBalanceAmtIsSet(true);
    return this;
  }

  public void unsetBalanceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  /** Returns true if field BalanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  public void setBalanceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEAMT_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectRefund setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getRefundBankNum() {
    return this.refundBankNum;
  }

  public ProjectRefund setRefundBankNum(String refundBankNum) {
    this.refundBankNum = refundBankNum;
    return this;
  }

  public void unsetRefundBankNum() {
    this.refundBankNum = null;
  }

  /** Returns true if field refundBankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundBankNum() {
    return this.refundBankNum != null;
  }

  public void setRefundBankNumIsSet(boolean value) {
    if (!value) {
      this.refundBankNum = null;
    }
  }

  public String getRefundBankUser() {
    return this.refundBankUser;
  }

  public ProjectRefund setRefundBankUser(String refundBankUser) {
    this.refundBankUser = refundBankUser;
    return this;
  }

  public void unsetRefundBankUser() {
    this.refundBankUser = null;
  }

  /** Returns true if field refundBankUser is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundBankUser() {
    return this.refundBankUser != null;
  }

  public void setRefundBankUserIsSet(boolean value) {
    if (!value) {
      this.refundBankUser = null;
    }
  }

  public String getRefundDt() {
    return this.refundDt;
  }

  public ProjectRefund setRefundDt(String refundDt) {
    this.refundDt = refundDt;
    return this;
  }

  public void unsetRefundDt() {
    this.refundDt = null;
  }

  /** Returns true if field refundDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDt() {
    return this.refundDt != null;
  }

  public void setRefundDtIsSet(boolean value) {
    if (!value) {
      this.refundDt = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectRefund setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case INPUT_ID:
      if (value == null) {
        unsetInputId();
      } else {
        setInputId((Integer)value);
      }
      break;

    case REFUND_AMT:
      if (value == null) {
        unsetRefundAmt();
      } else {
        setRefundAmt((Double)value);
      }
      break;

    case BALANCE_AMT:
      if (value == null) {
        unsetBalanceAmt();
      } else {
        setBalanceAmt((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REFUND_BANK_NUM:
      if (value == null) {
        unsetRefundBankNum();
      } else {
        setRefundBankNum((String)value);
      }
      break;

    case REFUND_BANK_USER:
      if (value == null) {
        unsetRefundBankUser();
      } else {
        setRefundBankUser((String)value);
      }
      break;

    case REFUND_DT:
      if (value == null) {
        unsetRefundDt();
      } else {
        setRefundDt((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case INPUT_ID:
      return Integer.valueOf(getInputId());

    case REFUND_AMT:
      return Double.valueOf(getRefundAmt());

    case BALANCE_AMT:
      return Double.valueOf(getBalanceAmt());

    case REMARK:
      return getRemark();

    case REFUND_BANK_NUM:
      return getRefundBankNum();

    case REFUND_BANK_USER:
      return getRefundBankUser();

    case REFUND_DT:
      return getRefundDt();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case INPUT_ID:
      return isSetInputId();
    case REFUND_AMT:
      return isSetRefundAmt();
    case BALANCE_AMT:
      return isSetBalanceAmt();
    case REMARK:
      return isSetRemark();
    case REFUND_BANK_NUM:
      return isSetRefundBankNum();
    case REFUND_BANK_USER:
      return isSetRefundBankUser();
    case REFUND_DT:
      return isSetRefundDt();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectRefund)
      return this.equals((ProjectRefund)that);
    return false;
  }

  public boolean equals(ProjectRefund that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_inputId = true;
    boolean that_present_inputId = true;
    if (this_present_inputId || that_present_inputId) {
      if (!(this_present_inputId && that_present_inputId))
        return false;
      if (this.inputId != that.inputId)
        return false;
    }

    boolean this_present_refundAmt = true;
    boolean that_present_refundAmt = true;
    if (this_present_refundAmt || that_present_refundAmt) {
      if (!(this_present_refundAmt && that_present_refundAmt))
        return false;
      if (this.refundAmt != that.refundAmt)
        return false;
    }

    boolean this_present_BalanceAmt = true;
    boolean that_present_BalanceAmt = true;
    if (this_present_BalanceAmt || that_present_BalanceAmt) {
      if (!(this_present_BalanceAmt && that_present_BalanceAmt))
        return false;
      if (this.BalanceAmt != that.BalanceAmt)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_refundBankNum = true && this.isSetRefundBankNum();
    boolean that_present_refundBankNum = true && that.isSetRefundBankNum();
    if (this_present_refundBankNum || that_present_refundBankNum) {
      if (!(this_present_refundBankNum && that_present_refundBankNum))
        return false;
      if (!this.refundBankNum.equals(that.refundBankNum))
        return false;
    }

    boolean this_present_refundBankUser = true && this.isSetRefundBankUser();
    boolean that_present_refundBankUser = true && that.isSetRefundBankUser();
    if (this_present_refundBankUser || that_present_refundBankUser) {
      if (!(this_present_refundBankUser && that_present_refundBankUser))
        return false;
      if (!this.refundBankUser.equals(that.refundBankUser))
        return false;
    }

    boolean this_present_refundDt = true && this.isSetRefundDt();
    boolean that_present_refundDt = true && that.isSetRefundDt();
    if (this_present_refundDt || that_present_refundDt) {
      if (!(this_present_refundDt && that_present_refundDt))
        return false;
      if (!this.refundDt.equals(that.refundDt))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_inputId = true;
    list.add(present_inputId);
    if (present_inputId)
      list.add(inputId);

    boolean present_refundAmt = true;
    list.add(present_refundAmt);
    if (present_refundAmt)
      list.add(refundAmt);

    boolean present_BalanceAmt = true;
    list.add(present_BalanceAmt);
    if (present_BalanceAmt)
      list.add(BalanceAmt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_refundBankNum = true && (isSetRefundBankNum());
    list.add(present_refundBankNum);
    if (present_refundBankNum)
      list.add(refundBankNum);

    boolean present_refundBankUser = true && (isSetRefundBankUser());
    list.add(present_refundBankUser);
    if (present_refundBankUser)
      list.add(refundBankUser);

    boolean present_refundDt = true && (isSetRefundDt());
    list.add(present_refundDt);
    if (present_refundDt)
      list.add(refundDt);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectRefund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundAmt()).compareTo(other.isSetRefundAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundAmt, other.refundAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAmt()).compareTo(other.isSetBalanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BalanceAmt, other.BalanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundBankNum()).compareTo(other.isSetRefundBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundBankNum, other.refundBankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundBankUser()).compareTo(other.isSetRefundBankUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundBankUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundBankUser, other.refundBankUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDt()).compareTo(other.isSetRefundDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDt, other.refundDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectRefund(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputId:");
    sb.append(this.inputId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundAmt:");
    sb.append(this.refundAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BalanceAmt:");
    sb.append(this.BalanceAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundBankNum:");
    if (this.refundBankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.refundBankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundBankUser:");
    if (this.refundBankUser == null) {
      sb.append("null");
    } else {
      sb.append(this.refundBankUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDt:");
    if (this.refundDt == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectRefundStandardSchemeFactory implements SchemeFactory {
    public ProjectRefundStandardScheme getScheme() {
      return new ProjectRefundStandardScheme();
    }
  }

  private static class ProjectRefundStandardScheme extends StandardScheme<ProjectRefund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectRefund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inputId = iprot.readI32();
              struct.setInputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundAmt = iprot.readDouble();
              struct.setRefundAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BALANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.BalanceAmt = iprot.readDouble();
              struct.setBalanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REFUND_BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundBankNum = iprot.readString();
              struct.setRefundBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REFUND_BANK_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundBankUser = iprot.readString();
              struct.setRefundBankUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFUND_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDt = iprot.readString();
              struct.setRefundDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectRefund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
      oprot.writeI32(struct.inputId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_AMT_FIELD_DESC);
      oprot.writeDouble(struct.refundAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.BalanceAmt);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.refundBankNum != null) {
        oprot.writeFieldBegin(REFUND_BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.refundBankNum);
        oprot.writeFieldEnd();
      }
      if (struct.refundBankUser != null) {
        oprot.writeFieldBegin(REFUND_BANK_USER_FIELD_DESC);
        oprot.writeString(struct.refundBankUser);
        oprot.writeFieldEnd();
      }
      if (struct.refundDt != null) {
        oprot.writeFieldBegin(REFUND_DT_FIELD_DESC);
        oprot.writeString(struct.refundDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectRefundTupleSchemeFactory implements SchemeFactory {
    public ProjectRefundTupleScheme getScheme() {
      return new ProjectRefundTupleScheme();
    }
  }

  private static class ProjectRefundTupleScheme extends TupleScheme<ProjectRefund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectRefund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetInputId()) {
        optionals.set(2);
      }
      if (struct.isSetRefundAmt()) {
        optionals.set(3);
      }
      if (struct.isSetBalanceAmt()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetRefundBankNum()) {
        optionals.set(6);
      }
      if (struct.isSetRefundBankUser()) {
        optionals.set(7);
      }
      if (struct.isSetRefundDt()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetInputId()) {
        oprot.writeI32(struct.inputId);
      }
      if (struct.isSetRefundAmt()) {
        oprot.writeDouble(struct.refundAmt);
      }
      if (struct.isSetBalanceAmt()) {
        oprot.writeDouble(struct.BalanceAmt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRefundBankNum()) {
        oprot.writeString(struct.refundBankNum);
      }
      if (struct.isSetRefundBankUser()) {
        oprot.writeString(struct.refundBankUser);
      }
      if (struct.isSetRefundDt()) {
        oprot.writeString(struct.refundDt);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectRefund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inputId = iprot.readI32();
        struct.setInputIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundAmt = iprot.readDouble();
        struct.setRefundAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.BalanceAmt = iprot.readDouble();
        struct.setBalanceAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refundBankNum = iprot.readString();
        struct.setRefundBankNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refundBankUser = iprot.readString();
        struct.setRefundBankUserIsSet(true);
      }
      if (incoming.get(8)) {
        struct.refundDt = iprot.readString();
        struct.setRefundDtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


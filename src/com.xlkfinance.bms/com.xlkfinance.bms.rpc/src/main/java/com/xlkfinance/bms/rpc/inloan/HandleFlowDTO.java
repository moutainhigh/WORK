/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class HandleFlowDTO implements org.apache.thrift.TBase<HandleFlowDTO, HandleFlowDTO._Fields>, java.io.Serializable, Cloneable, Comparable<HandleFlowDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HandleFlowDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIX_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fixDay", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ADVANCE_NOTICE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("advanceNoticeDay", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NOTICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ONE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("oneLevel", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TWO_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("twoLevel", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField THREE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("threeLevel", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CAN_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("canHandle", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandleFlowDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandleFlowDTOTupleSchemeFactory());
  }

  public int pid; // required
  public String name; // required
  public int fixDay; // required
  public int advanceNoticeDay; // required
  public int noticeType; // required
  public int oneLevel; // required
  public int twoLevel; // required
  public int threeLevel; // required
  public boolean canHandle; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    NAME((short)2, "name"),
    FIX_DAY((short)3, "fixDay"),
    ADVANCE_NOTICE_DAY((short)4, "advanceNoticeDay"),
    NOTICE_TYPE((short)5, "noticeType"),
    ONE_LEVEL((short)6, "oneLevel"),
    TWO_LEVEL((short)7, "twoLevel"),
    THREE_LEVEL((short)8, "threeLevel"),
    CAN_HANDLE((short)9, "canHandle"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // NAME
          return NAME;
        case 3: // FIX_DAY
          return FIX_DAY;
        case 4: // ADVANCE_NOTICE_DAY
          return ADVANCE_NOTICE_DAY;
        case 5: // NOTICE_TYPE
          return NOTICE_TYPE;
        case 6: // ONE_LEVEL
          return ONE_LEVEL;
        case 7: // TWO_LEVEL
          return TWO_LEVEL;
        case 8: // THREE_LEVEL
          return THREE_LEVEL;
        case 9: // CAN_HANDLE
          return CAN_HANDLE;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __FIXDAY_ISSET_ID = 1;
  private static final int __ADVANCENOTICEDAY_ISSET_ID = 2;
  private static final int __NOTICETYPE_ISSET_ID = 3;
  private static final int __ONELEVEL_ISSET_ID = 4;
  private static final int __TWOLEVEL_ISSET_ID = 5;
  private static final int __THREELEVEL_ISSET_ID = 6;
  private static final int __CANHANDLE_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIX_DAY, new org.apache.thrift.meta_data.FieldMetaData("fixDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADVANCE_NOTICE_DAY, new org.apache.thrift.meta_data.FieldMetaData("advanceNoticeDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("noticeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("oneLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TWO_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("twoLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("threeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAN_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("canHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HandleFlowDTO.class, metaDataMap);
  }

  public HandleFlowDTO() {
    this.canHandle = false;

    this.page = 1;

    this.rows = 10;

  }

  public HandleFlowDTO(
    int pid,
    String name,
    int fixDay,
    int advanceNoticeDay,
    int noticeType,
    int oneLevel,
    int twoLevel,
    int threeLevel,
    boolean canHandle,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.name = name;
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    this.advanceNoticeDay = advanceNoticeDay;
    setAdvanceNoticeDayIsSet(true);
    this.noticeType = noticeType;
    setNoticeTypeIsSet(true);
    this.oneLevel = oneLevel;
    setOneLevelIsSet(true);
    this.twoLevel = twoLevel;
    setTwoLevelIsSet(true);
    this.threeLevel = threeLevel;
    setThreeLevelIsSet(true);
    this.canHandle = canHandle;
    setCanHandleIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HandleFlowDTO(HandleFlowDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.fixDay = other.fixDay;
    this.advanceNoticeDay = other.advanceNoticeDay;
    this.noticeType = other.noticeType;
    this.oneLevel = other.oneLevel;
    this.twoLevel = other.twoLevel;
    this.threeLevel = other.threeLevel;
    this.canHandle = other.canHandle;
    this.page = other.page;
    this.rows = other.rows;
  }

  public HandleFlowDTO deepCopy() {
    return new HandleFlowDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.name = null;
    setFixDayIsSet(false);
    this.fixDay = 0;
    setAdvanceNoticeDayIsSet(false);
    this.advanceNoticeDay = 0;
    setNoticeTypeIsSet(false);
    this.noticeType = 0;
    setOneLevelIsSet(false);
    this.oneLevel = 0;
    setTwoLevelIsSet(false);
    this.twoLevel = 0;
    setThreeLevelIsSet(false);
    this.threeLevel = 0;
    this.canHandle = false;

    this.page = 1;

    this.rows = 10;

  }

  public int getPid() {
    return this.pid;
  }

  public HandleFlowDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public HandleFlowDTO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getFixDay() {
    return this.fixDay;
  }

  public HandleFlowDTO setFixDay(int fixDay) {
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    return this;
  }

  public void unsetFixDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  /** Returns true if field fixDay is set (has been assigned a value) and false otherwise */
  public boolean isSetFixDay() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  public void setFixDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXDAY_ISSET_ID, value);
  }

  public int getAdvanceNoticeDay() {
    return this.advanceNoticeDay;
  }

  public HandleFlowDTO setAdvanceNoticeDay(int advanceNoticeDay) {
    this.advanceNoticeDay = advanceNoticeDay;
    setAdvanceNoticeDayIsSet(true);
    return this;
  }

  public void unsetAdvanceNoticeDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVANCENOTICEDAY_ISSET_ID);
  }

  /** Returns true if field advanceNoticeDay is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvanceNoticeDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVANCENOTICEDAY_ISSET_ID);
  }

  public void setAdvanceNoticeDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVANCENOTICEDAY_ISSET_ID, value);
  }

  public int getNoticeType() {
    return this.noticeType;
  }

  public HandleFlowDTO setNoticeType(int noticeType) {
    this.noticeType = noticeType;
    setNoticeTypeIsSet(true);
    return this;
  }

  public void unsetNoticeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTICETYPE_ISSET_ID);
  }

  /** Returns true if field noticeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNoticeType() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTICETYPE_ISSET_ID);
  }

  public void setNoticeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTICETYPE_ISSET_ID, value);
  }

  public int getOneLevel() {
    return this.oneLevel;
  }

  public HandleFlowDTO setOneLevel(int oneLevel) {
    this.oneLevel = oneLevel;
    setOneLevelIsSet(true);
    return this;
  }

  public void unsetOneLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONELEVEL_ISSET_ID);
  }

  /** Returns true if field oneLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetOneLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __ONELEVEL_ISSET_ID);
  }

  public void setOneLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONELEVEL_ISSET_ID, value);
  }

  public int getTwoLevel() {
    return this.twoLevel;
  }

  public HandleFlowDTO setTwoLevel(int twoLevel) {
    this.twoLevel = twoLevel;
    setTwoLevelIsSet(true);
    return this;
  }

  public void unsetTwoLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWOLEVEL_ISSET_ID);
  }

  /** Returns true if field twoLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __TWOLEVEL_ISSET_ID);
  }

  public void setTwoLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWOLEVEL_ISSET_ID, value);
  }

  public int getThreeLevel() {
    return this.threeLevel;
  }

  public HandleFlowDTO setThreeLevel(int threeLevel) {
    this.threeLevel = threeLevel;
    setThreeLevelIsSet(true);
    return this;
  }

  public void unsetThreeLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREELEVEL_ISSET_ID);
  }

  /** Returns true if field threeLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetThreeLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __THREELEVEL_ISSET_ID);
  }

  public void setThreeLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREELEVEL_ISSET_ID, value);
  }

  public boolean isCanHandle() {
    return this.canHandle;
  }

  public HandleFlowDTO setCanHandle(boolean canHandle) {
    this.canHandle = canHandle;
    setCanHandleIsSet(true);
    return this;
  }

  public void unsetCanHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANHANDLE_ISSET_ID);
  }

  /** Returns true if field canHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetCanHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __CANHANDLE_ISSET_ID);
  }

  public void setCanHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANHANDLE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public HandleFlowDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HandleFlowDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FIX_DAY:
      if (value == null) {
        unsetFixDay();
      } else {
        setFixDay((Integer)value);
      }
      break;

    case ADVANCE_NOTICE_DAY:
      if (value == null) {
        unsetAdvanceNoticeDay();
      } else {
        setAdvanceNoticeDay((Integer)value);
      }
      break;

    case NOTICE_TYPE:
      if (value == null) {
        unsetNoticeType();
      } else {
        setNoticeType((Integer)value);
      }
      break;

    case ONE_LEVEL:
      if (value == null) {
        unsetOneLevel();
      } else {
        setOneLevel((Integer)value);
      }
      break;

    case TWO_LEVEL:
      if (value == null) {
        unsetTwoLevel();
      } else {
        setTwoLevel((Integer)value);
      }
      break;

    case THREE_LEVEL:
      if (value == null) {
        unsetThreeLevel();
      } else {
        setThreeLevel((Integer)value);
      }
      break;

    case CAN_HANDLE:
      if (value == null) {
        unsetCanHandle();
      } else {
        setCanHandle((Boolean)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case NAME:
      return getName();

    case FIX_DAY:
      return Integer.valueOf(getFixDay());

    case ADVANCE_NOTICE_DAY:
      return Integer.valueOf(getAdvanceNoticeDay());

    case NOTICE_TYPE:
      return Integer.valueOf(getNoticeType());

    case ONE_LEVEL:
      return Integer.valueOf(getOneLevel());

    case TWO_LEVEL:
      return Integer.valueOf(getTwoLevel());

    case THREE_LEVEL:
      return Integer.valueOf(getThreeLevel());

    case CAN_HANDLE:
      return Boolean.valueOf(isCanHandle());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case NAME:
      return isSetName();
    case FIX_DAY:
      return isSetFixDay();
    case ADVANCE_NOTICE_DAY:
      return isSetAdvanceNoticeDay();
    case NOTICE_TYPE:
      return isSetNoticeType();
    case ONE_LEVEL:
      return isSetOneLevel();
    case TWO_LEVEL:
      return isSetTwoLevel();
    case THREE_LEVEL:
      return isSetThreeLevel();
    case CAN_HANDLE:
      return isSetCanHandle();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HandleFlowDTO)
      return this.equals((HandleFlowDTO)that);
    return false;
  }

  public boolean equals(HandleFlowDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fixDay = true;
    boolean that_present_fixDay = true;
    if (this_present_fixDay || that_present_fixDay) {
      if (!(this_present_fixDay && that_present_fixDay))
        return false;
      if (this.fixDay != that.fixDay)
        return false;
    }

    boolean this_present_advanceNoticeDay = true;
    boolean that_present_advanceNoticeDay = true;
    if (this_present_advanceNoticeDay || that_present_advanceNoticeDay) {
      if (!(this_present_advanceNoticeDay && that_present_advanceNoticeDay))
        return false;
      if (this.advanceNoticeDay != that.advanceNoticeDay)
        return false;
    }

    boolean this_present_noticeType = true;
    boolean that_present_noticeType = true;
    if (this_present_noticeType || that_present_noticeType) {
      if (!(this_present_noticeType && that_present_noticeType))
        return false;
      if (this.noticeType != that.noticeType)
        return false;
    }

    boolean this_present_oneLevel = true;
    boolean that_present_oneLevel = true;
    if (this_present_oneLevel || that_present_oneLevel) {
      if (!(this_present_oneLevel && that_present_oneLevel))
        return false;
      if (this.oneLevel != that.oneLevel)
        return false;
    }

    boolean this_present_twoLevel = true;
    boolean that_present_twoLevel = true;
    if (this_present_twoLevel || that_present_twoLevel) {
      if (!(this_present_twoLevel && that_present_twoLevel))
        return false;
      if (this.twoLevel != that.twoLevel)
        return false;
    }

    boolean this_present_threeLevel = true;
    boolean that_present_threeLevel = true;
    if (this_present_threeLevel || that_present_threeLevel) {
      if (!(this_present_threeLevel && that_present_threeLevel))
        return false;
      if (this.threeLevel != that.threeLevel)
        return false;
    }

    boolean this_present_canHandle = true;
    boolean that_present_canHandle = true;
    if (this_present_canHandle || that_present_canHandle) {
      if (!(this_present_canHandle && that_present_canHandle))
        return false;
      if (this.canHandle != that.canHandle)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_fixDay = true;
    list.add(present_fixDay);
    if (present_fixDay)
      list.add(fixDay);

    boolean present_advanceNoticeDay = true;
    list.add(present_advanceNoticeDay);
    if (present_advanceNoticeDay)
      list.add(advanceNoticeDay);

    boolean present_noticeType = true;
    list.add(present_noticeType);
    if (present_noticeType)
      list.add(noticeType);

    boolean present_oneLevel = true;
    list.add(present_oneLevel);
    if (present_oneLevel)
      list.add(oneLevel);

    boolean present_twoLevel = true;
    list.add(present_twoLevel);
    if (present_twoLevel)
      list.add(twoLevel);

    boolean present_threeLevel = true;
    list.add(present_threeLevel);
    if (present_threeLevel)
      list.add(threeLevel);

    boolean present_canHandle = true;
    list.add(present_canHandle);
    if (present_canHandle)
      list.add(canHandle);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(HandleFlowDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixDay()).compareTo(other.isSetFixDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixDay, other.fixDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvanceNoticeDay()).compareTo(other.isSetAdvanceNoticeDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvanceNoticeDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advanceNoticeDay, other.advanceNoticeDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoticeType()).compareTo(other.isSetNoticeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoticeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeType, other.noticeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneLevel()).compareTo(other.isSetOneLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneLevel, other.oneLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoLevel()).compareTo(other.isSetTwoLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoLevel, other.twoLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreeLevel()).compareTo(other.isSetThreeLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreeLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threeLevel, other.threeLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanHandle()).compareTo(other.isSetCanHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canHandle, other.canHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HandleFlowDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixDay:");
    sb.append(this.fixDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advanceNoticeDay:");
    sb.append(this.advanceNoticeDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noticeType:");
    sb.append(this.noticeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneLevel:");
    sb.append(this.oneLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoLevel:");
    sb.append(this.twoLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threeLevel:");
    sb.append(this.threeLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canHandle:");
    sb.append(this.canHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandleFlowDTOStandardSchemeFactory implements SchemeFactory {
    public HandleFlowDTOStandardScheme getScheme() {
      return new HandleFlowDTOStandardScheme();
    }
  }

  private static class HandleFlowDTOStandardScheme extends StandardScheme<HandleFlowDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HandleFlowDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIX_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fixDay = iprot.readI32();
              struct.setFixDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADVANCE_NOTICE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.advanceNoticeDay = iprot.readI32();
              struct.setAdvanceNoticeDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noticeType = iprot.readI32();
              struct.setNoticeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ONE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oneLevel = iprot.readI32();
              struct.setOneLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TWO_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.twoLevel = iprot.readI32();
              struct.setTwoLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // THREE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threeLevel = iprot.readI32();
              struct.setThreeLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CAN_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canHandle = iprot.readBool();
              struct.setCanHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HandleFlowDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIX_DAY_FIELD_DESC);
      oprot.writeI32(struct.fixDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADVANCE_NOTICE_DAY_FIELD_DESC);
      oprot.writeI32(struct.advanceNoticeDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTICE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.noticeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.oneLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TWO_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.twoLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THREE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.threeLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_HANDLE_FIELD_DESC);
      oprot.writeBool(struct.canHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandleFlowDTOTupleSchemeFactory implements SchemeFactory {
    public HandleFlowDTOTupleScheme getScheme() {
      return new HandleFlowDTOTupleScheme();
    }
  }

  private static class HandleFlowDTOTupleScheme extends TupleScheme<HandleFlowDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HandleFlowDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetFixDay()) {
        optionals.set(2);
      }
      if (struct.isSetAdvanceNoticeDay()) {
        optionals.set(3);
      }
      if (struct.isSetNoticeType()) {
        optionals.set(4);
      }
      if (struct.isSetOneLevel()) {
        optionals.set(5);
      }
      if (struct.isSetTwoLevel()) {
        optionals.set(6);
      }
      if (struct.isSetThreeLevel()) {
        optionals.set(7);
      }
      if (struct.isSetCanHandle()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFixDay()) {
        oprot.writeI32(struct.fixDay);
      }
      if (struct.isSetAdvanceNoticeDay()) {
        oprot.writeI32(struct.advanceNoticeDay);
      }
      if (struct.isSetNoticeType()) {
        oprot.writeI32(struct.noticeType);
      }
      if (struct.isSetOneLevel()) {
        oprot.writeI32(struct.oneLevel);
      }
      if (struct.isSetTwoLevel()) {
        oprot.writeI32(struct.twoLevel);
      }
      if (struct.isSetThreeLevel()) {
        oprot.writeI32(struct.threeLevel);
      }
      if (struct.isSetCanHandle()) {
        oprot.writeBool(struct.canHandle);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HandleFlowDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fixDay = iprot.readI32();
        struct.setFixDayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.advanceNoticeDay = iprot.readI32();
        struct.setAdvanceNoticeDayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.noticeType = iprot.readI32();
        struct.setNoticeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oneLevel = iprot.readI32();
        struct.setOneLevelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.twoLevel = iprot.readI32();
        struct.setTwoLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.threeLevel = iprot.readI32();
        struct.setThreeLevelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.canHandle = iprot.readBool();
        struct.setCanHandleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


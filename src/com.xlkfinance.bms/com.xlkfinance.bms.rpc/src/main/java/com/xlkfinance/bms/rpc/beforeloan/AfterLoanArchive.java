/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class AfterLoanArchive implements org.apache.thrift.TBase<AfterLoanArchive, AfterLoanArchive._Fields>, java.io.Serializable, Cloneable, Comparable<AfterLoanArchive> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AfterLoanArchive");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AFTERLOAN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("afterloanStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AFTERLOAN_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("afterloanDttm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AFTERLOAN_COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("afterloanComments", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField AFTERLOAN_STATUS_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("afterloanStatusText", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SETTLE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("settleDttm", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AfterLoanArchiveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AfterLoanArchiveTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int afterloanStatus; // required
  public String afterloanDttm; // required
  public String afterloanComments; // required
  public int status; // required
  public String projectName; // required
  public String projectNumber; // required
  public int cusType; // required
  public String afterloanStatusText; // required
  public String requestDttm; // required
  public double loanAmt; // required
  public String pmUserName; // required
  public String settleDttm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    AFTERLOAN_STATUS((short)3, "afterloanStatus"),
    AFTERLOAN_DTTM((short)4, "afterloanDttm"),
    AFTERLOAN_COMMENTS((short)5, "afterloanComments"),
    STATUS((short)6, "status"),
    PROJECT_NAME((short)7, "projectName"),
    PROJECT_NUMBER((short)8, "projectNumber"),
    CUS_TYPE((short)9, "cusType"),
    AFTERLOAN_STATUS_TEXT((short)10, "afterloanStatusText"),
    REQUEST_DTTM((short)11, "requestDttm"),
    LOAN_AMT((short)12, "loanAmt"),
    PM_USER_NAME((short)13, "pmUserName"),
    SETTLE_DTTM((short)14, "settleDttm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // AFTERLOAN_STATUS
          return AFTERLOAN_STATUS;
        case 4: // AFTERLOAN_DTTM
          return AFTERLOAN_DTTM;
        case 5: // AFTERLOAN_COMMENTS
          return AFTERLOAN_COMMENTS;
        case 6: // STATUS
          return STATUS;
        case 7: // PROJECT_NAME
          return PROJECT_NAME;
        case 8: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 9: // CUS_TYPE
          return CUS_TYPE;
        case 10: // AFTERLOAN_STATUS_TEXT
          return AFTERLOAN_STATUS_TEXT;
        case 11: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 12: // LOAN_AMT
          return LOAN_AMT;
        case 13: // PM_USER_NAME
          return PM_USER_NAME;
        case 14: // SETTLE_DTTM
          return SETTLE_DTTM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __AFTERLOANSTATUS_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __CUSTYPE_ISSET_ID = 4;
  private static final int __LOANAMT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFTERLOAN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("afterloanStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFTERLOAN_DTTM, new org.apache.thrift.meta_data.FieldMetaData("afterloanDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTERLOAN_COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("afterloanComments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFTERLOAN_STATUS_TEXT, new org.apache.thrift.meta_data.FieldMetaData("afterloanStatusText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("settleDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AfterLoanArchive.class, metaDataMap);
  }

  public AfterLoanArchive() {
  }

  public AfterLoanArchive(
    int pid,
    int projectId,
    int afterloanStatus,
    String afterloanDttm,
    String afterloanComments,
    int status,
    String projectName,
    String projectNumber,
    int cusType,
    String afterloanStatusText,
    String requestDttm,
    double loanAmt,
    String pmUserName,
    String settleDttm)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.afterloanStatus = afterloanStatus;
    setAfterloanStatusIsSet(true);
    this.afterloanDttm = afterloanDttm;
    this.afterloanComments = afterloanComments;
    this.status = status;
    setStatusIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.afterloanStatusText = afterloanStatusText;
    this.requestDttm = requestDttm;
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.pmUserName = pmUserName;
    this.settleDttm = settleDttm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AfterLoanArchive(AfterLoanArchive other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.afterloanStatus = other.afterloanStatus;
    if (other.isSetAfterloanDttm()) {
      this.afterloanDttm = other.afterloanDttm;
    }
    if (other.isSetAfterloanComments()) {
      this.afterloanComments = other.afterloanComments;
    }
    this.status = other.status;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.cusType = other.cusType;
    if (other.isSetAfterloanStatusText()) {
      this.afterloanStatusText = other.afterloanStatusText;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.loanAmt = other.loanAmt;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetSettleDttm()) {
      this.settleDttm = other.settleDttm;
    }
  }

  public AfterLoanArchive deepCopy() {
    return new AfterLoanArchive(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAfterloanStatusIsSet(false);
    this.afterloanStatus = 0;
    this.afterloanDttm = null;
    this.afterloanComments = null;
    setStatusIsSet(false);
    this.status = 0;
    this.projectName = null;
    this.projectNumber = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.afterloanStatusText = null;
    this.requestDttm = null;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    this.pmUserName = null;
    this.settleDttm = null;
  }

  public int getPid() {
    return this.pid;
  }

  public AfterLoanArchive setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public AfterLoanArchive setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAfterloanStatus() {
    return this.afterloanStatus;
  }

  public AfterLoanArchive setAfterloanStatus(int afterloanStatus) {
    this.afterloanStatus = afterloanStatus;
    setAfterloanStatusIsSet(true);
    return this;
  }

  public void unsetAfterloanStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERLOANSTATUS_ISSET_ID);
  }

  /** Returns true if field afterloanStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterloanStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERLOANSTATUS_ISSET_ID);
  }

  public void setAfterloanStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERLOANSTATUS_ISSET_ID, value);
  }

  public String getAfterloanDttm() {
    return this.afterloanDttm;
  }

  public AfterLoanArchive setAfterloanDttm(String afterloanDttm) {
    this.afterloanDttm = afterloanDttm;
    return this;
  }

  public void unsetAfterloanDttm() {
    this.afterloanDttm = null;
  }

  /** Returns true if field afterloanDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterloanDttm() {
    return this.afterloanDttm != null;
  }

  public void setAfterloanDttmIsSet(boolean value) {
    if (!value) {
      this.afterloanDttm = null;
    }
  }

  public String getAfterloanComments() {
    return this.afterloanComments;
  }

  public AfterLoanArchive setAfterloanComments(String afterloanComments) {
    this.afterloanComments = afterloanComments;
    return this;
  }

  public void unsetAfterloanComments() {
    this.afterloanComments = null;
  }

  /** Returns true if field afterloanComments is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterloanComments() {
    return this.afterloanComments != null;
  }

  public void setAfterloanCommentsIsSet(boolean value) {
    if (!value) {
      this.afterloanComments = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public AfterLoanArchive setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public AfterLoanArchive setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public AfterLoanArchive setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public AfterLoanArchive setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public String getAfterloanStatusText() {
    return this.afterloanStatusText;
  }

  public AfterLoanArchive setAfterloanStatusText(String afterloanStatusText) {
    this.afterloanStatusText = afterloanStatusText;
    return this;
  }

  public void unsetAfterloanStatusText() {
    this.afterloanStatusText = null;
  }

  /** Returns true if field afterloanStatusText is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterloanStatusText() {
    return this.afterloanStatusText != null;
  }

  public void setAfterloanStatusTextIsSet(boolean value) {
    if (!value) {
      this.afterloanStatusText = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public AfterLoanArchive setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public AfterLoanArchive setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public AfterLoanArchive setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getSettleDttm() {
    return this.settleDttm;
  }

  public AfterLoanArchive setSettleDttm(String settleDttm) {
    this.settleDttm = settleDttm;
    return this;
  }

  public void unsetSettleDttm() {
    this.settleDttm = null;
  }

  /** Returns true if field settleDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleDttm() {
    return this.settleDttm != null;
  }

  public void setSettleDttmIsSet(boolean value) {
    if (!value) {
      this.settleDttm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case AFTERLOAN_STATUS:
      if (value == null) {
        unsetAfterloanStatus();
      } else {
        setAfterloanStatus((Integer)value);
      }
      break;

    case AFTERLOAN_DTTM:
      if (value == null) {
        unsetAfterloanDttm();
      } else {
        setAfterloanDttm((String)value);
      }
      break;

    case AFTERLOAN_COMMENTS:
      if (value == null) {
        unsetAfterloanComments();
      } else {
        setAfterloanComments((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case AFTERLOAN_STATUS_TEXT:
      if (value == null) {
        unsetAfterloanStatusText();
      } else {
        setAfterloanStatusText((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case SETTLE_DTTM:
      if (value == null) {
        unsetSettleDttm();
      } else {
        setSettleDttm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case AFTERLOAN_STATUS:
      return Integer.valueOf(getAfterloanStatus());

    case AFTERLOAN_DTTM:
      return getAfterloanDttm();

    case AFTERLOAN_COMMENTS:
      return getAfterloanComments();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case AFTERLOAN_STATUS_TEXT:
      return getAfterloanStatusText();

    case REQUEST_DTTM:
      return getRequestDttm();

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case PM_USER_NAME:
      return getPmUserName();

    case SETTLE_DTTM:
      return getSettleDttm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case AFTERLOAN_STATUS:
      return isSetAfterloanStatus();
    case AFTERLOAN_DTTM:
      return isSetAfterloanDttm();
    case AFTERLOAN_COMMENTS:
      return isSetAfterloanComments();
    case STATUS:
      return isSetStatus();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUS_TYPE:
      return isSetCusType();
    case AFTERLOAN_STATUS_TEXT:
      return isSetAfterloanStatusText();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case LOAN_AMT:
      return isSetLoanAmt();
    case PM_USER_NAME:
      return isSetPmUserName();
    case SETTLE_DTTM:
      return isSetSettleDttm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AfterLoanArchive)
      return this.equals((AfterLoanArchive)that);
    return false;
  }

  public boolean equals(AfterLoanArchive that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_afterloanStatus = true;
    boolean that_present_afterloanStatus = true;
    if (this_present_afterloanStatus || that_present_afterloanStatus) {
      if (!(this_present_afterloanStatus && that_present_afterloanStatus))
        return false;
      if (this.afterloanStatus != that.afterloanStatus)
        return false;
    }

    boolean this_present_afterloanDttm = true && this.isSetAfterloanDttm();
    boolean that_present_afterloanDttm = true && that.isSetAfterloanDttm();
    if (this_present_afterloanDttm || that_present_afterloanDttm) {
      if (!(this_present_afterloanDttm && that_present_afterloanDttm))
        return false;
      if (!this.afterloanDttm.equals(that.afterloanDttm))
        return false;
    }

    boolean this_present_afterloanComments = true && this.isSetAfterloanComments();
    boolean that_present_afterloanComments = true && that.isSetAfterloanComments();
    if (this_present_afterloanComments || that_present_afterloanComments) {
      if (!(this_present_afterloanComments && that_present_afterloanComments))
        return false;
      if (!this.afterloanComments.equals(that.afterloanComments))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_afterloanStatusText = true && this.isSetAfterloanStatusText();
    boolean that_present_afterloanStatusText = true && that.isSetAfterloanStatusText();
    if (this_present_afterloanStatusText || that_present_afterloanStatusText) {
      if (!(this_present_afterloanStatusText && that_present_afterloanStatusText))
        return false;
      if (!this.afterloanStatusText.equals(that.afterloanStatusText))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_settleDttm = true && this.isSetSettleDttm();
    boolean that_present_settleDttm = true && that.isSetSettleDttm();
    if (this_present_settleDttm || that_present_settleDttm) {
      if (!(this_present_settleDttm && that_present_settleDttm))
        return false;
      if (!this.settleDttm.equals(that.settleDttm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_afterloanStatus = true;
    list.add(present_afterloanStatus);
    if (present_afterloanStatus)
      list.add(afterloanStatus);

    boolean present_afterloanDttm = true && (isSetAfterloanDttm());
    list.add(present_afterloanDttm);
    if (present_afterloanDttm)
      list.add(afterloanDttm);

    boolean present_afterloanComments = true && (isSetAfterloanComments());
    list.add(present_afterloanComments);
    if (present_afterloanComments)
      list.add(afterloanComments);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_afterloanStatusText = true && (isSetAfterloanStatusText());
    list.add(present_afterloanStatusText);
    if (present_afterloanStatusText)
      list.add(afterloanStatusText);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_settleDttm = true && (isSetSettleDttm());
    list.add(present_settleDttm);
    if (present_settleDttm)
      list.add(settleDttm);

    return list.hashCode();
  }

  @Override
  public int compareTo(AfterLoanArchive other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterloanStatus()).compareTo(other.isSetAfterloanStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterloanStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterloanStatus, other.afterloanStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterloanDttm()).compareTo(other.isSetAfterloanDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterloanDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterloanDttm, other.afterloanDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterloanComments()).compareTo(other.isSetAfterloanComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterloanComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterloanComments, other.afterloanComments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterloanStatusText()).compareTo(other.isSetAfterloanStatusText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterloanStatusText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterloanStatusText, other.afterloanStatusText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleDttm()).compareTo(other.isSetSettleDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleDttm, other.settleDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AfterLoanArchive(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterloanStatus:");
    sb.append(this.afterloanStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterloanDttm:");
    if (this.afterloanDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.afterloanDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterloanComments:");
    if (this.afterloanComments == null) {
      sb.append("null");
    } else {
      sb.append(this.afterloanComments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterloanStatusText:");
    if (this.afterloanStatusText == null) {
      sb.append("null");
    } else {
      sb.append(this.afterloanStatusText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleDttm:");
    if (this.settleDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.settleDttm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AfterLoanArchiveStandardSchemeFactory implements SchemeFactory {
    public AfterLoanArchiveStandardScheme getScheme() {
      return new AfterLoanArchiveStandardScheme();
    }
  }

  private static class AfterLoanArchiveStandardScheme extends StandardScheme<AfterLoanArchive> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AfterLoanArchive struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AFTERLOAN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.afterloanStatus = iprot.readI32();
              struct.setAfterloanStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AFTERLOAN_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterloanDttm = iprot.readString();
              struct.setAfterloanDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AFTERLOAN_COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterloanComments = iprot.readString();
              struct.setAfterloanCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AFTERLOAN_STATUS_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterloanStatusText = iprot.readString();
              struct.setAfterloanStatusTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SETTLE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleDttm = iprot.readString();
              struct.setSettleDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AfterLoanArchive struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTERLOAN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.afterloanStatus);
      oprot.writeFieldEnd();
      if (struct.afterloanDttm != null) {
        oprot.writeFieldBegin(AFTERLOAN_DTTM_FIELD_DESC);
        oprot.writeString(struct.afterloanDttm);
        oprot.writeFieldEnd();
      }
      if (struct.afterloanComments != null) {
        oprot.writeFieldBegin(AFTERLOAN_COMMENTS_FIELD_DESC);
        oprot.writeString(struct.afterloanComments);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      if (struct.afterloanStatusText != null) {
        oprot.writeFieldBegin(AFTERLOAN_STATUS_TEXT_FIELD_DESC);
        oprot.writeString(struct.afterloanStatusText);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.settleDttm != null) {
        oprot.writeFieldBegin(SETTLE_DTTM_FIELD_DESC);
        oprot.writeString(struct.settleDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AfterLoanArchiveTupleSchemeFactory implements SchemeFactory {
    public AfterLoanArchiveTupleScheme getScheme() {
      return new AfterLoanArchiveTupleScheme();
    }
  }

  private static class AfterLoanArchiveTupleScheme extends TupleScheme<AfterLoanArchive> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AfterLoanArchive struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetAfterloanStatus()) {
        optionals.set(2);
      }
      if (struct.isSetAfterloanDttm()) {
        optionals.set(3);
      }
      if (struct.isSetAfterloanComments()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetProjectName()) {
        optionals.set(6);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(7);
      }
      if (struct.isSetCusType()) {
        optionals.set(8);
      }
      if (struct.isSetAfterloanStatusText()) {
        optionals.set(9);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(10);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(11);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(12);
      }
      if (struct.isSetSettleDttm()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAfterloanStatus()) {
        oprot.writeI32(struct.afterloanStatus);
      }
      if (struct.isSetAfterloanDttm()) {
        oprot.writeString(struct.afterloanDttm);
      }
      if (struct.isSetAfterloanComments()) {
        oprot.writeString(struct.afterloanComments);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetAfterloanStatusText()) {
        oprot.writeString(struct.afterloanStatusText);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetSettleDttm()) {
        oprot.writeString(struct.settleDttm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AfterLoanArchive struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.afterloanStatus = iprot.readI32();
        struct.setAfterloanStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.afterloanDttm = iprot.readString();
        struct.setAfterloanDttmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.afterloanComments = iprot.readString();
        struct.setAfterloanCommentsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.afterloanStatusText = iprot.readString();
        struct.setAfterloanStatusTextIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.settleDttm = iprot.readString();
        struct.setSettleDttmIsSet(true);
      }
    }
  }

}


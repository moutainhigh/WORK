/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceReceivablesView implements org.apache.thrift.TBase<FinanceReceivablesView, FinanceReceivablesView._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceReceivablesView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceReceivablesView");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelog", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLOW_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("flowCatelog", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CUSTOMER_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("customerBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FINANCE_RECEIVABLES_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeReceivablesDTO", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecord", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecord", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFee", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecordNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecordNo", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFeeNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField WAIT_RECONCILIATION_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("waitReconciliationAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField HEDGING_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgingAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField AVAILABLE_RECONCILIATION_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableReconciliationAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceReceivablesViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceReceivablesViewTupleSchemeFactory());
  }

  public int loanId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String businessCatelog; // required
  public String businessType; // required
  public String flowCatelog; // required
  public String realName; // required
  public double customerBalance; // required
  public FinanceReceivablesDTO financeReceivablesDTO; // required
  public int loanInterestRecord; // required
  public int loanMgrRecord; // required
  public int loanOtherFee; // required
  public String loanInterestRecordNo; // required
  public String loanMgrRecordNo; // required
  public String loanOtherFeeNo; // required
  public int projectId; // required
  public double waitReconciliationAmount; // required
  public double hedgingAmount; // required
  public double availableReconciliationAmount; // required
  public int acctId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_CATELOG((short)4, "businessCatelog"),
    BUSINESS_TYPE((short)5, "businessType"),
    FLOW_CATELOG((short)6, "flowCatelog"),
    REAL_NAME((short)7, "realName"),
    CUSTOMER_BALANCE((short)8, "customerBalance"),
    FINANCE_RECEIVABLES_DTO((short)9, "financeReceivablesDTO"),
    LOAN_INTEREST_RECORD((short)10, "loanInterestRecord"),
    LOAN_MGR_RECORD((short)11, "loanMgrRecord"),
    LOAN_OTHER_FEE((short)12, "loanOtherFee"),
    LOAN_INTEREST_RECORD_NO((short)13, "loanInterestRecordNo"),
    LOAN_MGR_RECORD_NO((short)14, "loanMgrRecordNo"),
    LOAN_OTHER_FEE_NO((short)15, "loanOtherFeeNo"),
    PROJECT_ID((short)16, "projectId"),
    WAIT_RECONCILIATION_AMOUNT((short)17, "waitReconciliationAmount"),
    HEDGING_AMOUNT((short)18, "hedgingAmount"),
    AVAILABLE_RECONCILIATION_AMOUNT((short)19, "availableReconciliationAmount"),
    ACCT_ID((short)20, "acctId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_CATELOG
          return BUSINESS_CATELOG;
        case 5: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 6: // FLOW_CATELOG
          return FLOW_CATELOG;
        case 7: // REAL_NAME
          return REAL_NAME;
        case 8: // CUSTOMER_BALANCE
          return CUSTOMER_BALANCE;
        case 9: // FINANCE_RECEIVABLES_DTO
          return FINANCE_RECEIVABLES_DTO;
        case 10: // LOAN_INTEREST_RECORD
          return LOAN_INTEREST_RECORD;
        case 11: // LOAN_MGR_RECORD
          return LOAN_MGR_RECORD;
        case 12: // LOAN_OTHER_FEE
          return LOAN_OTHER_FEE;
        case 13: // LOAN_INTEREST_RECORD_NO
          return LOAN_INTEREST_RECORD_NO;
        case 14: // LOAN_MGR_RECORD_NO
          return LOAN_MGR_RECORD_NO;
        case 15: // LOAN_OTHER_FEE_NO
          return LOAN_OTHER_FEE_NO;
        case 16: // PROJECT_ID
          return PROJECT_ID;
        case 17: // WAIT_RECONCILIATION_AMOUNT
          return WAIT_RECONCILIATION_AMOUNT;
        case 18: // HEDGING_AMOUNT
          return HEDGING_AMOUNT;
        case 19: // AVAILABLE_RECONCILIATION_AMOUNT
          return AVAILABLE_RECONCILIATION_AMOUNT;
        case 20: // ACCT_ID
          return ACCT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __CUSTOMERBALANCE_ISSET_ID = 1;
  private static final int __LOANINTERESTRECORD_ISSET_ID = 2;
  private static final int __LOANMGRRECORD_ISSET_ID = 3;
  private static final int __LOANOTHERFEE_ISSET_ID = 4;
  private static final int __PROJECTID_ISSET_ID = 5;
  private static final int __WAITRECONCILIATIONAMOUNT_ISSET_ID = 6;
  private static final int __HEDGINGAMOUNT_ISSET_ID = 7;
  private static final int __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID = 8;
  private static final int __ACCTID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("businessCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("flowCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("customerBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINANCE_RECEIVABLES_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeReceivablesDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecordNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecordNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE_NO, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFeeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAIT_RECONCILIATION_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("waitReconciliationAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEDGING_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("hedgingAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_RECONCILIATION_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("availableReconciliationAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceReceivablesView.class, metaDataMap);
  }

  public FinanceReceivablesView() {
  }

  public FinanceReceivablesView(
    int loanId,
    String projectName,
    String projectNumber,
    String businessCatelog,
    String businessType,
    String flowCatelog,
    String realName,
    double customerBalance,
    FinanceReceivablesDTO financeReceivablesDTO,
    int loanInterestRecord,
    int loanMgrRecord,
    int loanOtherFee,
    String loanInterestRecordNo,
    String loanMgrRecordNo,
    String loanOtherFeeNo,
    int projectId,
    double waitReconciliationAmount,
    double hedgingAmount,
    double availableReconciliationAmount,
    int acctId)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessCatelog = businessCatelog;
    this.businessType = businessType;
    this.flowCatelog = flowCatelog;
    this.realName = realName;
    this.customerBalance = customerBalance;
    setCustomerBalanceIsSet(true);
    this.financeReceivablesDTO = financeReceivablesDTO;
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    this.loanInterestRecordNo = loanInterestRecordNo;
    this.loanMgrRecordNo = loanMgrRecordNo;
    this.loanOtherFeeNo = loanOtherFeeNo;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.waitReconciliationAmount = waitReconciliationAmount;
    setWaitReconciliationAmountIsSet(true);
    this.hedgingAmount = hedgingAmount;
    setHedgingAmountIsSet(true);
    this.availableReconciliationAmount = availableReconciliationAmount;
    setAvailableReconciliationAmountIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceReceivablesView(FinanceReceivablesView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetBusinessCatelog()) {
      this.businessCatelog = other.businessCatelog;
    }
    if (other.isSetBusinessType()) {
      this.businessType = other.businessType;
    }
    if (other.isSetFlowCatelog()) {
      this.flowCatelog = other.flowCatelog;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    this.customerBalance = other.customerBalance;
    if (other.isSetFinanceReceivablesDTO()) {
      this.financeReceivablesDTO = new FinanceReceivablesDTO(other.financeReceivablesDTO);
    }
    this.loanInterestRecord = other.loanInterestRecord;
    this.loanMgrRecord = other.loanMgrRecord;
    this.loanOtherFee = other.loanOtherFee;
    if (other.isSetLoanInterestRecordNo()) {
      this.loanInterestRecordNo = other.loanInterestRecordNo;
    }
    if (other.isSetLoanMgrRecordNo()) {
      this.loanMgrRecordNo = other.loanMgrRecordNo;
    }
    if (other.isSetLoanOtherFeeNo()) {
      this.loanOtherFeeNo = other.loanOtherFeeNo;
    }
    this.projectId = other.projectId;
    this.waitReconciliationAmount = other.waitReconciliationAmount;
    this.hedgingAmount = other.hedgingAmount;
    this.availableReconciliationAmount = other.availableReconciliationAmount;
    this.acctId = other.acctId;
  }

  public FinanceReceivablesView deepCopy() {
    return new FinanceReceivablesView(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.businessCatelog = null;
    this.businessType = null;
    this.flowCatelog = null;
    this.realName = null;
    setCustomerBalanceIsSet(false);
    this.customerBalance = 0.0;
    this.financeReceivablesDTO = null;
    setLoanInterestRecordIsSet(false);
    this.loanInterestRecord = 0;
    setLoanMgrRecordIsSet(false);
    this.loanMgrRecord = 0;
    setLoanOtherFeeIsSet(false);
    this.loanOtherFee = 0;
    this.loanInterestRecordNo = null;
    this.loanMgrRecordNo = null;
    this.loanOtherFeeNo = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setWaitReconciliationAmountIsSet(false);
    this.waitReconciliationAmount = 0.0;
    setHedgingAmountIsSet(false);
    this.hedgingAmount = 0.0;
    setAvailableReconciliationAmountIsSet(false);
    this.availableReconciliationAmount = 0.0;
    setAcctIdIsSet(false);
    this.acctId = 0;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public FinanceReceivablesView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public FinanceReceivablesView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public FinanceReceivablesView setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getBusinessCatelog() {
    return this.businessCatelog;
  }

  public FinanceReceivablesView setBusinessCatelog(String businessCatelog) {
    this.businessCatelog = businessCatelog;
    return this;
  }

  public void unsetBusinessCatelog() {
    this.businessCatelog = null;
  }

  /** Returns true if field businessCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelog() {
    return this.businessCatelog != null;
  }

  public void setBusinessCatelogIsSet(boolean value) {
    if (!value) {
      this.businessCatelog = null;
    }
  }

  public String getBusinessType() {
    return this.businessType;
  }

  public FinanceReceivablesView setBusinessType(String businessType) {
    this.businessType = businessType;
    return this;
  }

  public void unsetBusinessType() {
    this.businessType = null;
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return this.businessType != null;
  }

  public void setBusinessTypeIsSet(boolean value) {
    if (!value) {
      this.businessType = null;
    }
  }

  public String getFlowCatelog() {
    return this.flowCatelog;
  }

  public FinanceReceivablesView setFlowCatelog(String flowCatelog) {
    this.flowCatelog = flowCatelog;
    return this;
  }

  public void unsetFlowCatelog() {
    this.flowCatelog = null;
  }

  /** Returns true if field flowCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowCatelog() {
    return this.flowCatelog != null;
  }

  public void setFlowCatelogIsSet(boolean value) {
    if (!value) {
      this.flowCatelog = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public FinanceReceivablesView setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public double getCustomerBalance() {
    return this.customerBalance;
  }

  public FinanceReceivablesView setCustomerBalance(double customerBalance) {
    this.customerBalance = customerBalance;
    setCustomerBalanceIsSet(true);
    return this;
  }

  public void unsetCustomerBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMERBALANCE_ISSET_ID);
  }

  /** Returns true if field customerBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMERBALANCE_ISSET_ID);
  }

  public void setCustomerBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMERBALANCE_ISSET_ID, value);
  }

  public FinanceReceivablesDTO getFinanceReceivablesDTO() {
    return this.financeReceivablesDTO;
  }

  public FinanceReceivablesView setFinanceReceivablesDTO(FinanceReceivablesDTO financeReceivablesDTO) {
    this.financeReceivablesDTO = financeReceivablesDTO;
    return this;
  }

  public void unsetFinanceReceivablesDTO() {
    this.financeReceivablesDTO = null;
  }

  /** Returns true if field financeReceivablesDTO is set (has been assigned a value) and false otherwise */
  public boolean isSetFinanceReceivablesDTO() {
    return this.financeReceivablesDTO != null;
  }

  public void setFinanceReceivablesDTOIsSet(boolean value) {
    if (!value) {
      this.financeReceivablesDTO = null;
    }
  }

  public int getLoanInterestRecord() {
    return this.loanInterestRecord;
  }

  public FinanceReceivablesView setLoanInterestRecord(int loanInterestRecord) {
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    return this;
  }

  public void unsetLoanInterestRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  /** Returns true if field loanInterestRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  public void setLoanInterestRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID, value);
  }

  public int getLoanMgrRecord() {
    return this.loanMgrRecord;
  }

  public FinanceReceivablesView setLoanMgrRecord(int loanMgrRecord) {
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    return this;
  }

  public void unsetLoanMgrRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  /** Returns true if field loanMgrRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  public void setLoanMgrRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID, value);
  }

  public int getLoanOtherFee() {
    return this.loanOtherFee;
  }

  public FinanceReceivablesView setLoanOtherFee(int loanOtherFee) {
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field loanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  public void setLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID, value);
  }

  public String getLoanInterestRecordNo() {
    return this.loanInterestRecordNo;
  }

  public FinanceReceivablesView setLoanInterestRecordNo(String loanInterestRecordNo) {
    this.loanInterestRecordNo = loanInterestRecordNo;
    return this;
  }

  public void unsetLoanInterestRecordNo() {
    this.loanInterestRecordNo = null;
  }

  /** Returns true if field loanInterestRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecordNo() {
    return this.loanInterestRecordNo != null;
  }

  public void setLoanInterestRecordNoIsSet(boolean value) {
    if (!value) {
      this.loanInterestRecordNo = null;
    }
  }

  public String getLoanMgrRecordNo() {
    return this.loanMgrRecordNo;
  }

  public FinanceReceivablesView setLoanMgrRecordNo(String loanMgrRecordNo) {
    this.loanMgrRecordNo = loanMgrRecordNo;
    return this;
  }

  public void unsetLoanMgrRecordNo() {
    this.loanMgrRecordNo = null;
  }

  /** Returns true if field loanMgrRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecordNo() {
    return this.loanMgrRecordNo != null;
  }

  public void setLoanMgrRecordNoIsSet(boolean value) {
    if (!value) {
      this.loanMgrRecordNo = null;
    }
  }

  public String getLoanOtherFeeNo() {
    return this.loanOtherFeeNo;
  }

  public FinanceReceivablesView setLoanOtherFeeNo(String loanOtherFeeNo) {
    this.loanOtherFeeNo = loanOtherFeeNo;
    return this;
  }

  public void unsetLoanOtherFeeNo() {
    this.loanOtherFeeNo = null;
  }

  /** Returns true if field loanOtherFeeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFeeNo() {
    return this.loanOtherFeeNo != null;
  }

  public void setLoanOtherFeeNoIsSet(boolean value) {
    if (!value) {
      this.loanOtherFeeNo = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public FinanceReceivablesView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getWaitReconciliationAmount() {
    return this.waitReconciliationAmount;
  }

  public FinanceReceivablesView setWaitReconciliationAmount(double waitReconciliationAmount) {
    this.waitReconciliationAmount = waitReconciliationAmount;
    setWaitReconciliationAmountIsSet(true);
    return this;
  }

  public void unsetWaitReconciliationAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITRECONCILIATIONAMOUNT_ISSET_ID);
  }

  /** Returns true if field waitReconciliationAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitReconciliationAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __WAITRECONCILIATIONAMOUNT_ISSET_ID);
  }

  public void setWaitReconciliationAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITRECONCILIATIONAMOUNT_ISSET_ID, value);
  }

  public double getHedgingAmount() {
    return this.hedgingAmount;
  }

  public FinanceReceivablesView setHedgingAmount(double hedgingAmount) {
    this.hedgingAmount = hedgingAmount;
    setHedgingAmountIsSet(true);
    return this;
  }

  public void unsetHedgingAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEDGINGAMOUNT_ISSET_ID);
  }

  /** Returns true if field hedgingAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgingAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __HEDGINGAMOUNT_ISSET_ID);
  }

  public void setHedgingAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEDGINGAMOUNT_ISSET_ID, value);
  }

  public double getAvailableReconciliationAmount() {
    return this.availableReconciliationAmount;
  }

  public FinanceReceivablesView setAvailableReconciliationAmount(double availableReconciliationAmount) {
    this.availableReconciliationAmount = availableReconciliationAmount;
    setAvailableReconciliationAmountIsSet(true);
    return this;
  }

  public void unsetAvailableReconciliationAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID);
  }

  /** Returns true if field availableReconciliationAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableReconciliationAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID);
  }

  public void setAvailableReconciliationAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public FinanceReceivablesView setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_CATELOG:
      if (value == null) {
        unsetBusinessCatelog();
      } else {
        setBusinessCatelog((String)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((String)value);
      }
      break;

    case FLOW_CATELOG:
      if (value == null) {
        unsetFlowCatelog();
      } else {
        setFlowCatelog((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case CUSTOMER_BALANCE:
      if (value == null) {
        unsetCustomerBalance();
      } else {
        setCustomerBalance((Double)value);
      }
      break;

    case FINANCE_RECEIVABLES_DTO:
      if (value == null) {
        unsetFinanceReceivablesDTO();
      } else {
        setFinanceReceivablesDTO((FinanceReceivablesDTO)value);
      }
      break;

    case LOAN_INTEREST_RECORD:
      if (value == null) {
        unsetLoanInterestRecord();
      } else {
        setLoanInterestRecord((Integer)value);
      }
      break;

    case LOAN_MGR_RECORD:
      if (value == null) {
        unsetLoanMgrRecord();
      } else {
        setLoanMgrRecord((Integer)value);
      }
      break;

    case LOAN_OTHER_FEE:
      if (value == null) {
        unsetLoanOtherFee();
      } else {
        setLoanOtherFee((Integer)value);
      }
      break;

    case LOAN_INTEREST_RECORD_NO:
      if (value == null) {
        unsetLoanInterestRecordNo();
      } else {
        setLoanInterestRecordNo((String)value);
      }
      break;

    case LOAN_MGR_RECORD_NO:
      if (value == null) {
        unsetLoanMgrRecordNo();
      } else {
        setLoanMgrRecordNo((String)value);
      }
      break;

    case LOAN_OTHER_FEE_NO:
      if (value == null) {
        unsetLoanOtherFeeNo();
      } else {
        setLoanOtherFeeNo((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case WAIT_RECONCILIATION_AMOUNT:
      if (value == null) {
        unsetWaitReconciliationAmount();
      } else {
        setWaitReconciliationAmount((Double)value);
      }
      break;

    case HEDGING_AMOUNT:
      if (value == null) {
        unsetHedgingAmount();
      } else {
        setHedgingAmount((Double)value);
      }
      break;

    case AVAILABLE_RECONCILIATION_AMOUNT:
      if (value == null) {
        unsetAvailableReconciliationAmount();
      } else {
        setAvailableReconciliationAmount((Double)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_CATELOG:
      return getBusinessCatelog();

    case BUSINESS_TYPE:
      return getBusinessType();

    case FLOW_CATELOG:
      return getFlowCatelog();

    case REAL_NAME:
      return getRealName();

    case CUSTOMER_BALANCE:
      return Double.valueOf(getCustomerBalance());

    case FINANCE_RECEIVABLES_DTO:
      return getFinanceReceivablesDTO();

    case LOAN_INTEREST_RECORD:
      return Integer.valueOf(getLoanInterestRecord());

    case LOAN_MGR_RECORD:
      return Integer.valueOf(getLoanMgrRecord());

    case LOAN_OTHER_FEE:
      return Integer.valueOf(getLoanOtherFee());

    case LOAN_INTEREST_RECORD_NO:
      return getLoanInterestRecordNo();

    case LOAN_MGR_RECORD_NO:
      return getLoanMgrRecordNo();

    case LOAN_OTHER_FEE_NO:
      return getLoanOtherFeeNo();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case WAIT_RECONCILIATION_AMOUNT:
      return Double.valueOf(getWaitReconciliationAmount());

    case HEDGING_AMOUNT:
      return Double.valueOf(getHedgingAmount());

    case AVAILABLE_RECONCILIATION_AMOUNT:
      return Double.valueOf(getAvailableReconciliationAmount());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_CATELOG:
      return isSetBusinessCatelog();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case FLOW_CATELOG:
      return isSetFlowCatelog();
    case REAL_NAME:
      return isSetRealName();
    case CUSTOMER_BALANCE:
      return isSetCustomerBalance();
    case FINANCE_RECEIVABLES_DTO:
      return isSetFinanceReceivablesDTO();
    case LOAN_INTEREST_RECORD:
      return isSetLoanInterestRecord();
    case LOAN_MGR_RECORD:
      return isSetLoanMgrRecord();
    case LOAN_OTHER_FEE:
      return isSetLoanOtherFee();
    case LOAN_INTEREST_RECORD_NO:
      return isSetLoanInterestRecordNo();
    case LOAN_MGR_RECORD_NO:
      return isSetLoanMgrRecordNo();
    case LOAN_OTHER_FEE_NO:
      return isSetLoanOtherFeeNo();
    case PROJECT_ID:
      return isSetProjectId();
    case WAIT_RECONCILIATION_AMOUNT:
      return isSetWaitReconciliationAmount();
    case HEDGING_AMOUNT:
      return isSetHedgingAmount();
    case AVAILABLE_RECONCILIATION_AMOUNT:
      return isSetAvailableReconciliationAmount();
    case ACCT_ID:
      return isSetAcctId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceReceivablesView)
      return this.equals((FinanceReceivablesView)that);
    return false;
  }

  public boolean equals(FinanceReceivablesView that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessCatelog = true && this.isSetBusinessCatelog();
    boolean that_present_businessCatelog = true && that.isSetBusinessCatelog();
    if (this_present_businessCatelog || that_present_businessCatelog) {
      if (!(this_present_businessCatelog && that_present_businessCatelog))
        return false;
      if (!this.businessCatelog.equals(that.businessCatelog))
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (!this.businessType.equals(that.businessType))
        return false;
    }

    boolean this_present_flowCatelog = true && this.isSetFlowCatelog();
    boolean that_present_flowCatelog = true && that.isSetFlowCatelog();
    if (this_present_flowCatelog || that_present_flowCatelog) {
      if (!(this_present_flowCatelog && that_present_flowCatelog))
        return false;
      if (!this.flowCatelog.equals(that.flowCatelog))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_customerBalance = true;
    boolean that_present_customerBalance = true;
    if (this_present_customerBalance || that_present_customerBalance) {
      if (!(this_present_customerBalance && that_present_customerBalance))
        return false;
      if (this.customerBalance != that.customerBalance)
        return false;
    }

    boolean this_present_financeReceivablesDTO = true && this.isSetFinanceReceivablesDTO();
    boolean that_present_financeReceivablesDTO = true && that.isSetFinanceReceivablesDTO();
    if (this_present_financeReceivablesDTO || that_present_financeReceivablesDTO) {
      if (!(this_present_financeReceivablesDTO && that_present_financeReceivablesDTO))
        return false;
      if (!this.financeReceivablesDTO.equals(that.financeReceivablesDTO))
        return false;
    }

    boolean this_present_loanInterestRecord = true;
    boolean that_present_loanInterestRecord = true;
    if (this_present_loanInterestRecord || that_present_loanInterestRecord) {
      if (!(this_present_loanInterestRecord && that_present_loanInterestRecord))
        return false;
      if (this.loanInterestRecord != that.loanInterestRecord)
        return false;
    }

    boolean this_present_loanMgrRecord = true;
    boolean that_present_loanMgrRecord = true;
    if (this_present_loanMgrRecord || that_present_loanMgrRecord) {
      if (!(this_present_loanMgrRecord && that_present_loanMgrRecord))
        return false;
      if (this.loanMgrRecord != that.loanMgrRecord)
        return false;
    }

    boolean this_present_loanOtherFee = true;
    boolean that_present_loanOtherFee = true;
    if (this_present_loanOtherFee || that_present_loanOtherFee) {
      if (!(this_present_loanOtherFee && that_present_loanOtherFee))
        return false;
      if (this.loanOtherFee != that.loanOtherFee)
        return false;
    }

    boolean this_present_loanInterestRecordNo = true && this.isSetLoanInterestRecordNo();
    boolean that_present_loanInterestRecordNo = true && that.isSetLoanInterestRecordNo();
    if (this_present_loanInterestRecordNo || that_present_loanInterestRecordNo) {
      if (!(this_present_loanInterestRecordNo && that_present_loanInterestRecordNo))
        return false;
      if (!this.loanInterestRecordNo.equals(that.loanInterestRecordNo))
        return false;
    }

    boolean this_present_loanMgrRecordNo = true && this.isSetLoanMgrRecordNo();
    boolean that_present_loanMgrRecordNo = true && that.isSetLoanMgrRecordNo();
    if (this_present_loanMgrRecordNo || that_present_loanMgrRecordNo) {
      if (!(this_present_loanMgrRecordNo && that_present_loanMgrRecordNo))
        return false;
      if (!this.loanMgrRecordNo.equals(that.loanMgrRecordNo))
        return false;
    }

    boolean this_present_loanOtherFeeNo = true && this.isSetLoanOtherFeeNo();
    boolean that_present_loanOtherFeeNo = true && that.isSetLoanOtherFeeNo();
    if (this_present_loanOtherFeeNo || that_present_loanOtherFeeNo) {
      if (!(this_present_loanOtherFeeNo && that_present_loanOtherFeeNo))
        return false;
      if (!this.loanOtherFeeNo.equals(that.loanOtherFeeNo))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_waitReconciliationAmount = true;
    boolean that_present_waitReconciliationAmount = true;
    if (this_present_waitReconciliationAmount || that_present_waitReconciliationAmount) {
      if (!(this_present_waitReconciliationAmount && that_present_waitReconciliationAmount))
        return false;
      if (this.waitReconciliationAmount != that.waitReconciliationAmount)
        return false;
    }

    boolean this_present_hedgingAmount = true;
    boolean that_present_hedgingAmount = true;
    if (this_present_hedgingAmount || that_present_hedgingAmount) {
      if (!(this_present_hedgingAmount && that_present_hedgingAmount))
        return false;
      if (this.hedgingAmount != that.hedgingAmount)
        return false;
    }

    boolean this_present_availableReconciliationAmount = true;
    boolean that_present_availableReconciliationAmount = true;
    if (this_present_availableReconciliationAmount || that_present_availableReconciliationAmount) {
      if (!(this_present_availableReconciliationAmount && that_present_availableReconciliationAmount))
        return false;
      if (this.availableReconciliationAmount != that.availableReconciliationAmount)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessCatelog = true && (isSetBusinessCatelog());
    list.add(present_businessCatelog);
    if (present_businessCatelog)
      list.add(businessCatelog);

    boolean present_businessType = true && (isSetBusinessType());
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_flowCatelog = true && (isSetFlowCatelog());
    list.add(present_flowCatelog);
    if (present_flowCatelog)
      list.add(flowCatelog);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_customerBalance = true;
    list.add(present_customerBalance);
    if (present_customerBalance)
      list.add(customerBalance);

    boolean present_financeReceivablesDTO = true && (isSetFinanceReceivablesDTO());
    list.add(present_financeReceivablesDTO);
    if (present_financeReceivablesDTO)
      list.add(financeReceivablesDTO);

    boolean present_loanInterestRecord = true;
    list.add(present_loanInterestRecord);
    if (present_loanInterestRecord)
      list.add(loanInterestRecord);

    boolean present_loanMgrRecord = true;
    list.add(present_loanMgrRecord);
    if (present_loanMgrRecord)
      list.add(loanMgrRecord);

    boolean present_loanOtherFee = true;
    list.add(present_loanOtherFee);
    if (present_loanOtherFee)
      list.add(loanOtherFee);

    boolean present_loanInterestRecordNo = true && (isSetLoanInterestRecordNo());
    list.add(present_loanInterestRecordNo);
    if (present_loanInterestRecordNo)
      list.add(loanInterestRecordNo);

    boolean present_loanMgrRecordNo = true && (isSetLoanMgrRecordNo());
    list.add(present_loanMgrRecordNo);
    if (present_loanMgrRecordNo)
      list.add(loanMgrRecordNo);

    boolean present_loanOtherFeeNo = true && (isSetLoanOtherFeeNo());
    list.add(present_loanOtherFeeNo);
    if (present_loanOtherFeeNo)
      list.add(loanOtherFeeNo);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_waitReconciliationAmount = true;
    list.add(present_waitReconciliationAmount);
    if (present_waitReconciliationAmount)
      list.add(waitReconciliationAmount);

    boolean present_hedgingAmount = true;
    list.add(present_hedgingAmount);
    if (present_hedgingAmount)
      list.add(hedgingAmount);

    boolean present_availableReconciliationAmount = true;
    list.add(present_availableReconciliationAmount);
    if (present_availableReconciliationAmount)
      list.add(availableReconciliationAmount);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceReceivablesView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelog()).compareTo(other.isSetBusinessCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelog, other.businessCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowCatelog()).compareTo(other.isSetFlowCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowCatelog, other.flowCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerBalance()).compareTo(other.isSetCustomerBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerBalance, other.customerBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinanceReceivablesDTO()).compareTo(other.isSetFinanceReceivablesDTO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinanceReceivablesDTO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeReceivablesDTO, other.financeReceivablesDTO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecord()).compareTo(other.isSetLoanInterestRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecord, other.loanInterestRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecord()).compareTo(other.isSetLoanMgrRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecord, other.loanMgrRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFee()).compareTo(other.isSetLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFee, other.loanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecordNo()).compareTo(other.isSetLoanInterestRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecordNo, other.loanInterestRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecordNo()).compareTo(other.isSetLoanMgrRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecordNo, other.loanMgrRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFeeNo()).compareTo(other.isSetLoanOtherFeeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFeeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFeeNo, other.loanOtherFeeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitReconciliationAmount()).compareTo(other.isSetWaitReconciliationAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitReconciliationAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitReconciliationAmount, other.waitReconciliationAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgingAmount()).compareTo(other.isSetHedgingAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgingAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgingAmount, other.hedgingAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableReconciliationAmount()).compareTo(other.isSetAvailableReconciliationAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableReconciliationAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableReconciliationAmount, other.availableReconciliationAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceReceivablesView(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelog:");
    if (this.businessCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    if (this.businessType == null) {
      sb.append("null");
    } else {
      sb.append(this.businessType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowCatelog:");
    if (this.flowCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.flowCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerBalance:");
    sb.append(this.customerBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("financeReceivablesDTO:");
    if (this.financeReceivablesDTO == null) {
      sb.append("null");
    } else {
      sb.append(this.financeReceivablesDTO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecord:");
    sb.append(this.loanInterestRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecord:");
    sb.append(this.loanMgrRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFee:");
    sb.append(this.loanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecordNo:");
    if (this.loanInterestRecordNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanInterestRecordNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecordNo:");
    if (this.loanMgrRecordNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMgrRecordNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFeeNo:");
    if (this.loanOtherFeeNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFeeNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitReconciliationAmount:");
    sb.append(this.waitReconciliationAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgingAmount:");
    sb.append(this.hedgingAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableReconciliationAmount:");
    sb.append(this.availableReconciliationAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (financeReceivablesDTO != null) {
      financeReceivablesDTO.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceReceivablesViewStandardSchemeFactory implements SchemeFactory {
    public FinanceReceivablesViewStandardScheme getScheme() {
      return new FinanceReceivablesViewStandardScheme();
    }
  }

  private static class FinanceReceivablesViewStandardScheme extends StandardScheme<FinanceReceivablesView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceReceivablesView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCatelog = iprot.readString();
              struct.setBusinessCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessType = iprot.readString();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLOW_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowCatelog = iprot.readString();
              struct.setFlowCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CUSTOMER_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.customerBalance = iprot.readDouble();
              struct.setCustomerBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FINANCE_RECEIVABLES_DTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.financeReceivablesDTO = new FinanceReceivablesDTO();
              struct.financeReceivablesDTO.read(iprot);
              struct.setFinanceReceivablesDTOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_INTEREST_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInterestRecord = iprot.readI32();
              struct.setLoanInterestRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAN_MGR_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanMgrRecord = iprot.readI32();
              struct.setLoanMgrRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanOtherFee = iprot.readI32();
              struct.setLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAN_INTEREST_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanInterestRecordNo = iprot.readString();
              struct.setLoanInterestRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAN_MGR_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMgrRecordNo = iprot.readString();
              struct.setLoanMgrRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOAN_OTHER_FEE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFeeNo = iprot.readString();
              struct.setLoanOtherFeeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WAIT_RECONCILIATION_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.waitReconciliationAmount = iprot.readDouble();
              struct.setWaitReconciliationAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HEDGING_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hedgingAmount = iprot.readDouble();
              struct.setHedgingAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AVAILABLE_RECONCILIATION_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableReconciliationAmount = iprot.readDouble();
              struct.setAvailableReconciliationAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceReceivablesView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.businessCatelog != null) {
        oprot.writeFieldBegin(BUSINESS_CATELOG_FIELD_DESC);
        oprot.writeString(struct.businessCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.businessType != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeString(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.flowCatelog != null) {
        oprot.writeFieldBegin(FLOW_CATELOG_FIELD_DESC);
        oprot.writeString(struct.flowCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUSTOMER_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.customerBalance);
      oprot.writeFieldEnd();
      if (struct.financeReceivablesDTO != null) {
        oprot.writeFieldBegin(FINANCE_RECEIVABLES_DTO_FIELD_DESC);
        struct.financeReceivablesDTO.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_INTEREST_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanInterestRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MGR_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanMgrRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeI32(struct.loanOtherFee);
      oprot.writeFieldEnd();
      if (struct.loanInterestRecordNo != null) {
        oprot.writeFieldBegin(LOAN_INTEREST_RECORD_NO_FIELD_DESC);
        oprot.writeString(struct.loanInterestRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.loanMgrRecordNo != null) {
        oprot.writeFieldBegin(LOAN_MGR_RECORD_NO_FIELD_DESC);
        oprot.writeString(struct.loanMgrRecordNo);
        oprot.writeFieldEnd();
      }
      if (struct.loanOtherFeeNo != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FEE_NO_FIELD_DESC);
        oprot.writeString(struct.loanOtherFeeNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAIT_RECONCILIATION_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.waitReconciliationAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEDGING_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.hedgingAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_RECONCILIATION_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.availableReconciliationAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceReceivablesViewTupleSchemeFactory implements SchemeFactory {
    public FinanceReceivablesViewTupleScheme getScheme() {
      return new FinanceReceivablesViewTupleScheme();
    }
  }

  private static class FinanceReceivablesViewTupleScheme extends TupleScheme<FinanceReceivablesView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessCatelog()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(4);
      }
      if (struct.isSetFlowCatelog()) {
        optionals.set(5);
      }
      if (struct.isSetRealName()) {
        optionals.set(6);
      }
      if (struct.isSetCustomerBalance()) {
        optionals.set(7);
      }
      if (struct.isSetFinanceReceivablesDTO()) {
        optionals.set(8);
      }
      if (struct.isSetLoanInterestRecord()) {
        optionals.set(9);
      }
      if (struct.isSetLoanMgrRecord()) {
        optionals.set(10);
      }
      if (struct.isSetLoanOtherFee()) {
        optionals.set(11);
      }
      if (struct.isSetLoanInterestRecordNo()) {
        optionals.set(12);
      }
      if (struct.isSetLoanMgrRecordNo()) {
        optionals.set(13);
      }
      if (struct.isSetLoanOtherFeeNo()) {
        optionals.set(14);
      }
      if (struct.isSetProjectId()) {
        optionals.set(15);
      }
      if (struct.isSetWaitReconciliationAmount()) {
        optionals.set(16);
      }
      if (struct.isSetHedgingAmount()) {
        optionals.set(17);
      }
      if (struct.isSetAvailableReconciliationAmount()) {
        optionals.set(18);
      }
      if (struct.isSetAcctId()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessCatelog()) {
        oprot.writeString(struct.businessCatelog);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeString(struct.businessType);
      }
      if (struct.isSetFlowCatelog()) {
        oprot.writeString(struct.flowCatelog);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCustomerBalance()) {
        oprot.writeDouble(struct.customerBalance);
      }
      if (struct.isSetFinanceReceivablesDTO()) {
        struct.financeReceivablesDTO.write(oprot);
      }
      if (struct.isSetLoanInterestRecord()) {
        oprot.writeI32(struct.loanInterestRecord);
      }
      if (struct.isSetLoanMgrRecord()) {
        oprot.writeI32(struct.loanMgrRecord);
      }
      if (struct.isSetLoanOtherFee()) {
        oprot.writeI32(struct.loanOtherFee);
      }
      if (struct.isSetLoanInterestRecordNo()) {
        oprot.writeString(struct.loanInterestRecordNo);
      }
      if (struct.isSetLoanMgrRecordNo()) {
        oprot.writeString(struct.loanMgrRecordNo);
      }
      if (struct.isSetLoanOtherFeeNo()) {
        oprot.writeString(struct.loanOtherFeeNo);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetWaitReconciliationAmount()) {
        oprot.writeDouble(struct.waitReconciliationAmount);
      }
      if (struct.isSetHedgingAmount()) {
        oprot.writeDouble(struct.hedgingAmount);
      }
      if (struct.isSetAvailableReconciliationAmount()) {
        oprot.writeDouble(struct.availableReconciliationAmount);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessCatelog = iprot.readString();
        struct.setBusinessCatelogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessType = iprot.readString();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flowCatelog = iprot.readString();
        struct.setFlowCatelogIsSet(true);
      }
      if (incoming.get(6)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.customerBalance = iprot.readDouble();
        struct.setCustomerBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.financeReceivablesDTO = new FinanceReceivablesDTO();
        struct.financeReceivablesDTO.read(iprot);
        struct.setFinanceReceivablesDTOIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanInterestRecord = iprot.readI32();
        struct.setLoanInterestRecordIsSet(true);
      }
      if (incoming.get(10)) {
        struct.loanMgrRecord = iprot.readI32();
        struct.setLoanMgrRecordIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanOtherFee = iprot.readI32();
        struct.setLoanOtherFeeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loanInterestRecordNo = iprot.readString();
        struct.setLoanInterestRecordNoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.loanMgrRecordNo = iprot.readString();
        struct.setLoanMgrRecordNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loanOtherFeeNo = iprot.readString();
        struct.setLoanOtherFeeNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.waitReconciliationAmount = iprot.readDouble();
        struct.setWaitReconciliationAmountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.hedgingAmount = iprot.readDouble();
        struct.setHedgingAmountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.availableReconciliationAmount = iprot.readDouble();
        struct.setAvailableReconciliationAmountIsSet(true);
      }
      if (incoming.get(19)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
    }
  }

}


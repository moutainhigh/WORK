/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class ProjectExtensionView implements org.apache.thrift.TBase<ProjectExtensionView, ProjectExtensionView._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectExtensionView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectExtensionView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SELECT_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("selectCycleNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXTENSION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXTENSION_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionProjectId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EXTENSION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXTENSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField EXTENSION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDays", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectExtensionViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectExtensionViewTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int selectCycleNum; // required
  public double extensionAmt; // required
  public int status; // required
  public int extensionProjectId; // required
  public double extensionFee; // required
  public String extensionDate; // required
  public double extensionRate; // required
  public int extensionDays; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    SELECT_CYCLE_NUM((short)3, "selectCycleNum"),
    EXTENSION_AMT((short)4, "extensionAmt"),
    STATUS((short)5, "status"),
    EXTENSION_PROJECT_ID((short)6, "extensionProjectId"),
    EXTENSION_FEE((short)7, "extensionFee"),
    EXTENSION_DATE((short)8, "extensionDate"),
    EXTENSION_RATE((short)9, "extensionRate"),
    EXTENSION_DAYS((short)10, "extensionDays");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // SELECT_CYCLE_NUM
          return SELECT_CYCLE_NUM;
        case 4: // EXTENSION_AMT
          return EXTENSION_AMT;
        case 5: // STATUS
          return STATUS;
        case 6: // EXTENSION_PROJECT_ID
          return EXTENSION_PROJECT_ID;
        case 7: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 8: // EXTENSION_DATE
          return EXTENSION_DATE;
        case 9: // EXTENSION_RATE
          return EXTENSION_RATE;
        case 10: // EXTENSION_DAYS
          return EXTENSION_DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __SELECTCYCLENUM_ISSET_ID = 2;
  private static final int __EXTENSIONAMT_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __EXTENSIONPROJECTID_ISSET_ID = 5;
  private static final int __EXTENSIONFEE_ISSET_ID = 6;
  private static final int __EXTENSIONRATE_ISSET_ID = 7;
  private static final int __EXTENSIONDAYS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELECT_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("selectCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_AMT, new org.apache.thrift.meta_data.FieldMetaData("extensionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("extensionProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DATE, new org.apache.thrift.meta_data.FieldMetaData("extensionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("extensionRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("extensionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectExtensionView.class, metaDataMap);
  }

  public ProjectExtensionView() {
  }

  public ProjectExtensionView(
    int pid,
    int projectId,
    int selectCycleNum,
    double extensionAmt,
    int status,
    int extensionProjectId,
    double extensionFee,
    String extensionDate,
    double extensionRate,
    int extensionDays)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.selectCycleNum = selectCycleNum;
    setSelectCycleNumIsSet(true);
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.extensionProjectId = extensionProjectId;
    setExtensionProjectIdIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.extensionDate = extensionDate;
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectExtensionView(ProjectExtensionView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.selectCycleNum = other.selectCycleNum;
    this.extensionAmt = other.extensionAmt;
    this.status = other.status;
    this.extensionProjectId = other.extensionProjectId;
    this.extensionFee = other.extensionFee;
    if (other.isSetExtensionDate()) {
      this.extensionDate = other.extensionDate;
    }
    this.extensionRate = other.extensionRate;
    this.extensionDays = other.extensionDays;
  }

  public ProjectExtensionView deepCopy() {
    return new ProjectExtensionView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setSelectCycleNumIsSet(false);
    this.selectCycleNum = 0;
    setExtensionAmtIsSet(false);
    this.extensionAmt = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setExtensionProjectIdIsSet(false);
    this.extensionProjectId = 0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    this.extensionDate = null;
    setExtensionRateIsSet(false);
    this.extensionRate = 0.0;
    setExtensionDaysIsSet(false);
    this.extensionDays = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectExtensionView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectExtensionView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getSelectCycleNum() {
    return this.selectCycleNum;
  }

  public ProjectExtensionView setSelectCycleNum(int selectCycleNum) {
    this.selectCycleNum = selectCycleNum;
    setSelectCycleNumIsSet(true);
    return this;
  }

  public void unsetSelectCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELECTCYCLENUM_ISSET_ID);
  }

  /** Returns true if field selectCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SELECTCYCLENUM_ISSET_ID);
  }

  public void setSelectCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELECTCYCLENUM_ISSET_ID, value);
  }

  public double getExtensionAmt() {
    return this.extensionAmt;
  }

  public ProjectExtensionView setExtensionAmt(double extensionAmt) {
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
    return this;
  }

  public void unsetExtensionAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID);
  }

  /** Returns true if field extensionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID);
  }

  public void setExtensionAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectExtensionView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getExtensionProjectId() {
    return this.extensionProjectId;
  }

  public ProjectExtensionView setExtensionProjectId(int extensionProjectId) {
    this.extensionProjectId = extensionProjectId;
    setExtensionProjectIdIsSet(true);
    return this;
  }

  public void unsetExtensionProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONPROJECTID_ISSET_ID);
  }

  /** Returns true if field extensionProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONPROJECTID_ISSET_ID);
  }

  public void setExtensionProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONPROJECTID_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public ProjectExtensionView setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public String getExtensionDate() {
    return this.extensionDate;
  }

  public ProjectExtensionView setExtensionDate(String extensionDate) {
    this.extensionDate = extensionDate;
    return this;
  }

  public void unsetExtensionDate() {
    this.extensionDate = null;
  }

  /** Returns true if field extensionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDate() {
    return this.extensionDate != null;
  }

  public void setExtensionDateIsSet(boolean value) {
    if (!value) {
      this.extensionDate = null;
    }
  }

  public double getExtensionRate() {
    return this.extensionRate;
  }

  public ProjectExtensionView setExtensionRate(double extensionRate) {
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    return this;
  }

  public void unsetExtensionRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID);
  }

  /** Returns true if field extensionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionRate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID);
  }

  public void setExtensionRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID, value);
  }

  public int getExtensionDays() {
    return this.extensionDays;
  }

  public ProjectExtensionView setExtensionDays(int extensionDays) {
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    return this;
  }

  public void unsetExtensionDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  /** Returns true if field extensionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDays() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  public void setExtensionDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case SELECT_CYCLE_NUM:
      if (value == null) {
        unsetSelectCycleNum();
      } else {
        setSelectCycleNum((Integer)value);
      }
      break;

    case EXTENSION_AMT:
      if (value == null) {
        unsetExtensionAmt();
      } else {
        setExtensionAmt((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case EXTENSION_PROJECT_ID:
      if (value == null) {
        unsetExtensionProjectId();
      } else {
        setExtensionProjectId((Integer)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case EXTENSION_DATE:
      if (value == null) {
        unsetExtensionDate();
      } else {
        setExtensionDate((String)value);
      }
      break;

    case EXTENSION_RATE:
      if (value == null) {
        unsetExtensionRate();
      } else {
        setExtensionRate((Double)value);
      }
      break;

    case EXTENSION_DAYS:
      if (value == null) {
        unsetExtensionDays();
      } else {
        setExtensionDays((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case SELECT_CYCLE_NUM:
      return Integer.valueOf(getSelectCycleNum());

    case EXTENSION_AMT:
      return Double.valueOf(getExtensionAmt());

    case STATUS:
      return Integer.valueOf(getStatus());

    case EXTENSION_PROJECT_ID:
      return Integer.valueOf(getExtensionProjectId());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case EXTENSION_DATE:
      return getExtensionDate();

    case EXTENSION_RATE:
      return Double.valueOf(getExtensionRate());

    case EXTENSION_DAYS:
      return Integer.valueOf(getExtensionDays());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case SELECT_CYCLE_NUM:
      return isSetSelectCycleNum();
    case EXTENSION_AMT:
      return isSetExtensionAmt();
    case STATUS:
      return isSetStatus();
    case EXTENSION_PROJECT_ID:
      return isSetExtensionProjectId();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case EXTENSION_DATE:
      return isSetExtensionDate();
    case EXTENSION_RATE:
      return isSetExtensionRate();
    case EXTENSION_DAYS:
      return isSetExtensionDays();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectExtensionView)
      return this.equals((ProjectExtensionView)that);
    return false;
  }

  public boolean equals(ProjectExtensionView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_selectCycleNum = true;
    boolean that_present_selectCycleNum = true;
    if (this_present_selectCycleNum || that_present_selectCycleNum) {
      if (!(this_present_selectCycleNum && that_present_selectCycleNum))
        return false;
      if (this.selectCycleNum != that.selectCycleNum)
        return false;
    }

    boolean this_present_extensionAmt = true;
    boolean that_present_extensionAmt = true;
    if (this_present_extensionAmt || that_present_extensionAmt) {
      if (!(this_present_extensionAmt && that_present_extensionAmt))
        return false;
      if (this.extensionAmt != that.extensionAmt)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_extensionProjectId = true;
    boolean that_present_extensionProjectId = true;
    if (this_present_extensionProjectId || that_present_extensionProjectId) {
      if (!(this_present_extensionProjectId && that_present_extensionProjectId))
        return false;
      if (this.extensionProjectId != that.extensionProjectId)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_extensionDate = true && this.isSetExtensionDate();
    boolean that_present_extensionDate = true && that.isSetExtensionDate();
    if (this_present_extensionDate || that_present_extensionDate) {
      if (!(this_present_extensionDate && that_present_extensionDate))
        return false;
      if (!this.extensionDate.equals(that.extensionDate))
        return false;
    }

    boolean this_present_extensionRate = true;
    boolean that_present_extensionRate = true;
    if (this_present_extensionRate || that_present_extensionRate) {
      if (!(this_present_extensionRate && that_present_extensionRate))
        return false;
      if (this.extensionRate != that.extensionRate)
        return false;
    }

    boolean this_present_extensionDays = true;
    boolean that_present_extensionDays = true;
    if (this_present_extensionDays || that_present_extensionDays) {
      if (!(this_present_extensionDays && that_present_extensionDays))
        return false;
      if (this.extensionDays != that.extensionDays)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_selectCycleNum = true;
    list.add(present_selectCycleNum);
    if (present_selectCycleNum)
      list.add(selectCycleNum);

    boolean present_extensionAmt = true;
    list.add(present_extensionAmt);
    if (present_extensionAmt)
      list.add(extensionAmt);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_extensionProjectId = true;
    list.add(present_extensionProjectId);
    if (present_extensionProjectId)
      list.add(extensionProjectId);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_extensionDate = true && (isSetExtensionDate());
    list.add(present_extensionDate);
    if (present_extensionDate)
      list.add(extensionDate);

    boolean present_extensionRate = true;
    list.add(present_extensionRate);
    if (present_extensionRate)
      list.add(extensionRate);

    boolean present_extensionDays = true;
    list.add(present_extensionDays);
    if (present_extensionDays)
      list.add(extensionDays);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectExtensionView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectCycleNum()).compareTo(other.isSetSelectCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectCycleNum, other.selectCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionAmt()).compareTo(other.isSetExtensionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionAmt, other.extensionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionProjectId()).compareTo(other.isSetExtensionProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionProjectId, other.extensionProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDate()).compareTo(other.isSetExtensionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDate, other.extensionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionRate()).compareTo(other.isSetExtensionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionRate, other.extensionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDays()).compareTo(other.isSetExtensionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDays, other.extensionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectExtensionView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectCycleNum:");
    sb.append(this.selectCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionAmt:");
    sb.append(this.extensionAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionProjectId:");
    sb.append(this.extensionProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDate:");
    if (this.extensionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.extensionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionRate:");
    sb.append(this.extensionRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDays:");
    sb.append(this.extensionDays);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectExtensionViewStandardSchemeFactory implements SchemeFactory {
    public ProjectExtensionViewStandardScheme getScheme() {
      return new ProjectExtensionViewStandardScheme();
    }
  }

  private static class ProjectExtensionViewStandardScheme extends StandardScheme<ProjectExtensionView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectExtensionView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SELECT_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.selectCycleNum = iprot.readI32();
              struct.setSelectCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTENSION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionAmt = iprot.readDouble();
              struct.setExtensionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTENSION_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionProjectId = iprot.readI32();
              struct.setExtensionProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTENSION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extensionDate = iprot.readString();
              struct.setExtensionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTENSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionRate = iprot.readDouble();
              struct.setExtensionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTENSION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionDays = iprot.readI32();
              struct.setExtensionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectExtensionView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELECT_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.selectCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.extensionAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.extensionProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      if (struct.extensionDate != null) {
        oprot.writeFieldBegin(EXTENSION_DATE_FIELD_DESC);
        oprot.writeString(struct.extensionDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_RATE_FIELD_DESC);
      oprot.writeDouble(struct.extensionRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.extensionDays);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectExtensionViewTupleSchemeFactory implements SchemeFactory {
    public ProjectExtensionViewTupleScheme getScheme() {
      return new ProjectExtensionViewTupleScheme();
    }
  }

  private static class ProjectExtensionViewTupleScheme extends TupleScheme<ProjectExtensionView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectExtensionView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetSelectCycleNum()) {
        optionals.set(2);
      }
      if (struct.isSetExtensionAmt()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetExtensionProjectId()) {
        optionals.set(5);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(6);
      }
      if (struct.isSetExtensionDate()) {
        optionals.set(7);
      }
      if (struct.isSetExtensionRate()) {
        optionals.set(8);
      }
      if (struct.isSetExtensionDays()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetSelectCycleNum()) {
        oprot.writeI32(struct.selectCycleNum);
      }
      if (struct.isSetExtensionAmt()) {
        oprot.writeDouble(struct.extensionAmt);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetExtensionProjectId()) {
        oprot.writeI32(struct.extensionProjectId);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetExtensionDate()) {
        oprot.writeString(struct.extensionDate);
      }
      if (struct.isSetExtensionRate()) {
        oprot.writeDouble(struct.extensionRate);
      }
      if (struct.isSetExtensionDays()) {
        oprot.writeI32(struct.extensionDays);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectExtensionView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.selectCycleNum = iprot.readI32();
        struct.setSelectCycleNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extensionAmt = iprot.readDouble();
        struct.setExtensionAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.extensionProjectId = iprot.readI32();
        struct.setExtensionProjectIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.extensionDate = iprot.readString();
        struct.setExtensionDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.extensionRate = iprot.readDouble();
        struct.setExtensionRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.extensionDays = iprot.readI32();
        struct.setExtensionDaysIsSet(true);
      }
    }
  }

}


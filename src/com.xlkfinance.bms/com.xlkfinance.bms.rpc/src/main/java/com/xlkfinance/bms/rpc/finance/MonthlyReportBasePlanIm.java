/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class MonthlyReportBasePlanIm implements org.apache.thrift.TBase<MonthlyReportBasePlanIm, MonthlyReportBasePlanIm._Fields>, java.io.Serializable, Cloneable, Comparable<MonthlyReportBasePlanIm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonthlyReportBasePlanIm");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("opterType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OPER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("operCost", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MonthlyReportBasePlanImStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MonthlyReportBasePlanImTupleSchemeFactory());
  }

  public int loanId; // required
  public String repayDt; // required
  public int opterType; // required
  public double operCost; // required
  public int refId; // required
  public int pid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    REPAY_DT((short)2, "repayDt"),
    OPTER_TYPE((short)3, "opterType"),
    OPER_COST((short)4, "operCost"),
    REF_ID((short)5, "refId"),
    PID((short)6, "pid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // REPAY_DT
          return REPAY_DT;
        case 3: // OPTER_TYPE
          return OPTER_TYPE;
        case 4: // OPER_COST
          return OPER_COST;
        case 5: // REF_ID
          return REF_ID;
        case 6: // PID
          return PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __OPTERTYPE_ISSET_ID = 1;
  private static final int __OPERCOST_ISSET_ID = 2;
  private static final int __REFID_ISSET_ID = 3;
  private static final int __PID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("repayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("opterType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPER_COST, new org.apache.thrift.meta_data.FieldMetaData("operCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonthlyReportBasePlanIm.class, metaDataMap);
  }

  public MonthlyReportBasePlanIm() {
  }

  public MonthlyReportBasePlanIm(
    int loanId,
    String repayDt,
    int opterType,
    double operCost,
    int refId,
    int pid)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.repayDt = repayDt;
    this.opterType = opterType;
    setOpterTypeIsSet(true);
    this.operCost = operCost;
    setOperCostIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonthlyReportBasePlanIm(MonthlyReportBasePlanIm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetRepayDt()) {
      this.repayDt = other.repayDt;
    }
    this.opterType = other.opterType;
    this.operCost = other.operCost;
    this.refId = other.refId;
    this.pid = other.pid;
  }

  public MonthlyReportBasePlanIm deepCopy() {
    return new MonthlyReportBasePlanIm(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.repayDt = null;
    setOpterTypeIsSet(false);
    this.opterType = 0;
    setOperCostIsSet(false);
    this.operCost = 0.0;
    setRefIdIsSet(false);
    this.refId = 0;
    setPidIsSet(false);
    this.pid = 0;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public MonthlyReportBasePlanIm setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getRepayDt() {
    return this.repayDt;
  }

  public MonthlyReportBasePlanIm setRepayDt(String repayDt) {
    this.repayDt = repayDt;
    return this;
  }

  public void unsetRepayDt() {
    this.repayDt = null;
  }

  /** Returns true if field repayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDt() {
    return this.repayDt != null;
  }

  public void setRepayDtIsSet(boolean value) {
    if (!value) {
      this.repayDt = null;
    }
  }

  public int getOpterType() {
    return this.opterType;
  }

  public MonthlyReportBasePlanIm setOpterType(int opterType) {
    this.opterType = opterType;
    setOpterTypeIsSet(true);
    return this;
  }

  public void unsetOpterType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTERTYPE_ISSET_ID);
  }

  /** Returns true if field opterType is set (has been assigned a value) and false otherwise */
  public boolean isSetOpterType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPTERTYPE_ISSET_ID);
  }

  public void setOpterTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTERTYPE_ISSET_ID, value);
  }

  public double getOperCost() {
    return this.operCost;
  }

  public MonthlyReportBasePlanIm setOperCost(double operCost) {
    this.operCost = operCost;
    setOperCostIsSet(true);
    return this;
  }

  public void unsetOperCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  /** Returns true if field operCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOperCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  public void setOperCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERCOST_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public MonthlyReportBasePlanIm setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public MonthlyReportBasePlanIm setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REPAY_DT:
      if (value == null) {
        unsetRepayDt();
      } else {
        setRepayDt((String)value);
      }
      break;

    case OPTER_TYPE:
      if (value == null) {
        unsetOpterType();
      } else {
        setOpterType((Integer)value);
      }
      break;

    case OPER_COST:
      if (value == null) {
        unsetOperCost();
      } else {
        setOperCost((Double)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REPAY_DT:
      return getRepayDt();

    case OPTER_TYPE:
      return Integer.valueOf(getOpterType());

    case OPER_COST:
      return Double.valueOf(getOperCost());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case PID:
      return Integer.valueOf(getPid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case REPAY_DT:
      return isSetRepayDt();
    case OPTER_TYPE:
      return isSetOpterType();
    case OPER_COST:
      return isSetOperCost();
    case REF_ID:
      return isSetRefId();
    case PID:
      return isSetPid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MonthlyReportBasePlanIm)
      return this.equals((MonthlyReportBasePlanIm)that);
    return false;
  }

  public boolean equals(MonthlyReportBasePlanIm that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_repayDt = true && this.isSetRepayDt();
    boolean that_present_repayDt = true && that.isSetRepayDt();
    if (this_present_repayDt || that_present_repayDt) {
      if (!(this_present_repayDt && that_present_repayDt))
        return false;
      if (!this.repayDt.equals(that.repayDt))
        return false;
    }

    boolean this_present_opterType = true;
    boolean that_present_opterType = true;
    if (this_present_opterType || that_present_opterType) {
      if (!(this_present_opterType && that_present_opterType))
        return false;
      if (this.opterType != that.opterType)
        return false;
    }

    boolean this_present_operCost = true;
    boolean that_present_operCost = true;
    if (this_present_operCost || that_present_operCost) {
      if (!(this_present_operCost && that_present_operCost))
        return false;
      if (this.operCost != that.operCost)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_repayDt = true && (isSetRepayDt());
    list.add(present_repayDt);
    if (present_repayDt)
      list.add(repayDt);

    boolean present_opterType = true;
    list.add(present_opterType);
    if (present_opterType)
      list.add(opterType);

    boolean present_operCost = true;
    list.add(present_operCost);
    if (present_operCost)
      list.add(operCost);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    return list.hashCode();
  }

  @Override
  public int compareTo(MonthlyReportBasePlanIm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDt()).compareTo(other.isSetRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDt, other.repayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpterType()).compareTo(other.isSetOpterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opterType, other.opterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperCost()).compareTo(other.isSetOperCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operCost, other.operCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MonthlyReportBasePlanIm(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDt:");
    if (this.repayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opterType:");
    sb.append(this.opterType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operCost:");
    sb.append(this.operCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonthlyReportBasePlanImStandardSchemeFactory implements SchemeFactory {
    public MonthlyReportBasePlanImStandardScheme getScheme() {
      return new MonthlyReportBasePlanImStandardScheme();
    }
  }

  private static class MonthlyReportBasePlanImStandardScheme extends StandardScheme<MonthlyReportBasePlanIm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonthlyReportBasePlanIm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDt = iprot.readString();
              struct.setRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opterType = iprot.readI32();
              struct.setOpterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operCost = iprot.readDouble();
              struct.setOperCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonthlyReportBasePlanIm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.repayDt != null) {
        oprot.writeFieldBegin(REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.repayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPTER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.opterType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_COST_FIELD_DESC);
      oprot.writeDouble(struct.operCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonthlyReportBasePlanImTupleSchemeFactory implements SchemeFactory {
    public MonthlyReportBasePlanImTupleScheme getScheme() {
      return new MonthlyReportBasePlanImTupleScheme();
    }
  }

  private static class MonthlyReportBasePlanImTupleScheme extends TupleScheme<MonthlyReportBasePlanIm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonthlyReportBasePlanIm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetRepayDt()) {
        optionals.set(1);
      }
      if (struct.isSetOpterType()) {
        optionals.set(2);
      }
      if (struct.isSetOperCost()) {
        optionals.set(3);
      }
      if (struct.isSetRefId()) {
        optionals.set(4);
      }
      if (struct.isSetPid()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRepayDt()) {
        oprot.writeString(struct.repayDt);
      }
      if (struct.isSetOpterType()) {
        oprot.writeI32(struct.opterType);
      }
      if (struct.isSetOperCost()) {
        oprot.writeDouble(struct.operCost);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonthlyReportBasePlanIm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.repayDt = iprot.readString();
        struct.setRepayDtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.opterType = iprot.readI32();
        struct.setOpterTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operCost = iprot.readDouble();
        struct.setOperCostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
    }
  }

}


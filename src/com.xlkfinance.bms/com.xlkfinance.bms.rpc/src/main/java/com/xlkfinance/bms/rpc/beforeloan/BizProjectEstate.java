/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-10")
public class BizProjectEstate implements org.apache.thrift.TBase<BizProjectEstate, BizProjectEstate._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectEstate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectEstate");

  private static final org.apache.thrift.protocol.TField HOUSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("houseId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COST_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("costMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("purpose", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TRANASCTION_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tranasctionMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EVALUATION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField HOUSE_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HOUSE_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseCityCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HOUSE_DISTRICT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseDistrictCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField HOUSE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("houseIds", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField HOUSE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("houseAddress", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField EVALUATION_NET_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationNet", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField PROPERTY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyRatio", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField DOWN_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("downPayment", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PURCHASE_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField PURCHASE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField LAND_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("landUse", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ESTATE_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("estateUse", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField HOUSE_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseAge", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PROPERTY_LIFE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyLife", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField LAND_SURPLUS_LIFE_FIELD_DESC = new org.apache.thrift.protocol.TField("landSurplusLife", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField USE_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("useArea", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField BIZ_SPOT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizSpotInfo", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField HOUSE_RENT_FIELD_DESC = new org.apache.thrift.protocol.TField("houseRent", org.apache.thrift.protocol.TType.DOUBLE, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectEstateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectEstateTupleSchemeFactory());
  }

  public int houseId; // required
  public int projectId; // required
  public String houseName; // required
  public double costMoney; // required
  public double area; // required
  public String housePropertyCard; // required
  public String purpose; // required
  public double tranasctionMoney; // required
  public double evaluationPrice; // required
  public String houseProvinceCode; // required
  public String houseCityCode; // required
  public String houseDistrictCode; // required
  public int status; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public List<Integer> houseIds; // required
  public String houseAddress; // required
  public double evaluationNet; // required
  public String propertyRatio; // required
  public double downPayment; // required
  public double purchaseDeposit; // required
  public double purchaseBalance; // required
  public String landUse; // required
  public String estateUse; // required
  public String houseAge; // required
  public String propertyLife; // required
  public String landSurplusLife; // required
  public double useArea; // required
  public BizSpotInfo bizSpotInfo; // required
  public double houseRent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOUSE_ID((short)1, "houseId"),
    PROJECT_ID((short)2, "projectId"),
    HOUSE_NAME((short)3, "houseName"),
    COST_MONEY((short)4, "costMoney"),
    AREA((short)5, "area"),
    HOUSE_PROPERTY_CARD((short)6, "housePropertyCard"),
    PURPOSE((short)7, "purpose"),
    TRANASCTION_MONEY((short)8, "tranasctionMoney"),
    EVALUATION_PRICE((short)9, "evaluationPrice"),
    HOUSE_PROVINCE_CODE((short)10, "houseProvinceCode"),
    HOUSE_CITY_CODE((short)11, "houseCityCode"),
    HOUSE_DISTRICT_CODE((short)12, "houseDistrictCode"),
    STATUS((short)13, "status"),
    CREATER_DATE((short)14, "createrDate"),
    CREATER_ID((short)15, "createrId"),
    UPDATE_ID((short)16, "updateId"),
    UPDATE_DATE((short)17, "updateDate"),
    HOUSE_IDS((short)18, "houseIds"),
    HOUSE_ADDRESS((short)19, "houseAddress"),
    EVALUATION_NET((short)20, "evaluationNet"),
    PROPERTY_RATIO((short)21, "propertyRatio"),
    DOWN_PAYMENT((short)22, "downPayment"),
    PURCHASE_DEPOSIT((short)23, "purchaseDeposit"),
    PURCHASE_BALANCE((short)24, "purchaseBalance"),
    LAND_USE((short)25, "landUse"),
    ESTATE_USE((short)26, "estateUse"),
    HOUSE_AGE((short)27, "houseAge"),
    PROPERTY_LIFE((short)28, "propertyLife"),
    LAND_SURPLUS_LIFE((short)29, "landSurplusLife"),
    USE_AREA((short)30, "useArea"),
    BIZ_SPOT_INFO((short)31, "bizSpotInfo"),
    HOUSE_RENT((short)32, "houseRent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOUSE_ID
          return HOUSE_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // HOUSE_NAME
          return HOUSE_NAME;
        case 4: // COST_MONEY
          return COST_MONEY;
        case 5: // AREA
          return AREA;
        case 6: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 7: // PURPOSE
          return PURPOSE;
        case 8: // TRANASCTION_MONEY
          return TRANASCTION_MONEY;
        case 9: // EVALUATION_PRICE
          return EVALUATION_PRICE;
        case 10: // HOUSE_PROVINCE_CODE
          return HOUSE_PROVINCE_CODE;
        case 11: // HOUSE_CITY_CODE
          return HOUSE_CITY_CODE;
        case 12: // HOUSE_DISTRICT_CODE
          return HOUSE_DISTRICT_CODE;
        case 13: // STATUS
          return STATUS;
        case 14: // CREATER_DATE
          return CREATER_DATE;
        case 15: // CREATER_ID
          return CREATER_ID;
        case 16: // UPDATE_ID
          return UPDATE_ID;
        case 17: // UPDATE_DATE
          return UPDATE_DATE;
        case 18: // HOUSE_IDS
          return HOUSE_IDS;
        case 19: // HOUSE_ADDRESS
          return HOUSE_ADDRESS;
        case 20: // EVALUATION_NET
          return EVALUATION_NET;
        case 21: // PROPERTY_RATIO
          return PROPERTY_RATIO;
        case 22: // DOWN_PAYMENT
          return DOWN_PAYMENT;
        case 23: // PURCHASE_DEPOSIT
          return PURCHASE_DEPOSIT;
        case 24: // PURCHASE_BALANCE
          return PURCHASE_BALANCE;
        case 25: // LAND_USE
          return LAND_USE;
        case 26: // ESTATE_USE
          return ESTATE_USE;
        case 27: // HOUSE_AGE
          return HOUSE_AGE;
        case 28: // PROPERTY_LIFE
          return PROPERTY_LIFE;
        case 29: // LAND_SURPLUS_LIFE
          return LAND_SURPLUS_LIFE;
        case 30: // USE_AREA
          return USE_AREA;
        case 31: // BIZ_SPOT_INFO
          return BIZ_SPOT_INFO;
        case 32: // HOUSE_RENT
          return HOUSE_RENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUSEID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __COSTMONEY_ISSET_ID = 2;
  private static final int __AREA_ISSET_ID = 3;
  private static final int __TRANASCTIONMONEY_ISSET_ID = 4;
  private static final int __EVALUATIONPRICE_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __CREATERID_ISSET_ID = 7;
  private static final int __UPDATEID_ISSET_ID = 8;
  private static final int __EVALUATIONNET_ISSET_ID = 9;
  private static final int __DOWNPAYMENT_ISSET_ID = 10;
  private static final int __PURCHASEDEPOSIT_ISSET_ID = 11;
  private static final int __PURCHASEBALANCE_ISSET_ID = 12;
  private static final int __USEAREA_ISSET_ID = 13;
  private static final int __HOUSERENT_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOUSE_ID, new org.apache.thrift.meta_data.FieldMetaData("houseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_MONEY, new org.apache.thrift.meta_data.FieldMetaData("costMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("purpose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANASCTION_MONEY, new org.apache.thrift.meta_data.FieldMetaData("tranasctionMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVALUATION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("evaluationPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_DISTRICT_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseDistrictCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_IDS, new org.apache.thrift.meta_data.FieldMetaData("houseIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("houseAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVALUATION_NET, new org.apache.thrift.meta_data.FieldMetaData("evaluationNet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROPERTY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("propertyRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("downPayment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURCHASE_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("purchaseDeposit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURCHASE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("purchaseBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAND_USE, new org.apache.thrift.meta_data.FieldMetaData("landUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTATE_USE, new org.apache.thrift.meta_data.FieldMetaData("estateUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_AGE, new org.apache.thrift.meta_data.FieldMetaData("houseAge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY_LIFE, new org.apache.thrift.meta_data.FieldMetaData("propertyLife", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAND_SURPLUS_LIFE, new org.apache.thrift.meta_data.FieldMetaData("landSurplusLife", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_AREA, new org.apache.thrift.meta_data.FieldMetaData("useArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIZ_SPOT_INFO, new org.apache.thrift.meta_data.FieldMetaData("bizSpotInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "BizSpotInfo")));
    tmpMap.put(_Fields.HOUSE_RENT, new org.apache.thrift.meta_data.FieldMetaData("houseRent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectEstate.class, metaDataMap);
  }

  public BizProjectEstate() {
  }

  public BizProjectEstate(
    int houseId,
    int projectId,
    String houseName,
    double costMoney,
    double area,
    String housePropertyCard,
    String purpose,
    double tranasctionMoney,
    double evaluationPrice,
    String houseProvinceCode,
    String houseCityCode,
    String houseDistrictCode,
    int status,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    List<Integer> houseIds,
    String houseAddress,
    double evaluationNet,
    String propertyRatio,
    double downPayment,
    double purchaseDeposit,
    double purchaseBalance,
    String landUse,
    String estateUse,
    String houseAge,
    String propertyLife,
    String landSurplusLife,
    double useArea,
    BizSpotInfo bizSpotInfo,
    double houseRent)
  {
    this();
    this.houseId = houseId;
    setHouseIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.houseName = houseName;
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    this.area = area;
    setAreaIsSet(true);
    this.housePropertyCard = housePropertyCard;
    this.purpose = purpose;
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    this.evaluationPrice = evaluationPrice;
    setEvaluationPriceIsSet(true);
    this.houseProvinceCode = houseProvinceCode;
    this.houseCityCode = houseCityCode;
    this.houseDistrictCode = houseDistrictCode;
    this.status = status;
    setStatusIsSet(true);
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.houseIds = houseIds;
    this.houseAddress = houseAddress;
    this.evaluationNet = evaluationNet;
    setEvaluationNetIsSet(true);
    this.propertyRatio = propertyRatio;
    this.downPayment = downPayment;
    setDownPaymentIsSet(true);
    this.purchaseDeposit = purchaseDeposit;
    setPurchaseDepositIsSet(true);
    this.purchaseBalance = purchaseBalance;
    setPurchaseBalanceIsSet(true);
    this.landUse = landUse;
    this.estateUse = estateUse;
    this.houseAge = houseAge;
    this.propertyLife = propertyLife;
    this.landSurplusLife = landSurplusLife;
    this.useArea = useArea;
    setUseAreaIsSet(true);
    this.bizSpotInfo = bizSpotInfo;
    this.houseRent = houseRent;
    setHouseRentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectEstate(BizProjectEstate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.houseId = other.houseId;
    this.projectId = other.projectId;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.costMoney = other.costMoney;
    this.area = other.area;
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetPurpose()) {
      this.purpose = other.purpose;
    }
    this.tranasctionMoney = other.tranasctionMoney;
    this.evaluationPrice = other.evaluationPrice;
    if (other.isSetHouseProvinceCode()) {
      this.houseProvinceCode = other.houseProvinceCode;
    }
    if (other.isSetHouseCityCode()) {
      this.houseCityCode = other.houseCityCode;
    }
    if (other.isSetHouseDistrictCode()) {
      this.houseDistrictCode = other.houseDistrictCode;
    }
    this.status = other.status;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetHouseIds()) {
      List<Integer> __this__houseIds = new ArrayList<Integer>(other.houseIds);
      this.houseIds = __this__houseIds;
    }
    if (other.isSetHouseAddress()) {
      this.houseAddress = other.houseAddress;
    }
    this.evaluationNet = other.evaluationNet;
    if (other.isSetPropertyRatio()) {
      this.propertyRatio = other.propertyRatio;
    }
    this.downPayment = other.downPayment;
    this.purchaseDeposit = other.purchaseDeposit;
    this.purchaseBalance = other.purchaseBalance;
    if (other.isSetLandUse()) {
      this.landUse = other.landUse;
    }
    if (other.isSetEstateUse()) {
      this.estateUse = other.estateUse;
    }
    if (other.isSetHouseAge()) {
      this.houseAge = other.houseAge;
    }
    if (other.isSetPropertyLife()) {
      this.propertyLife = other.propertyLife;
    }
    if (other.isSetLandSurplusLife()) {
      this.landSurplusLife = other.landSurplusLife;
    }
    this.useArea = other.useArea;
    if (other.isSetBizSpotInfo()) {
      this.bizSpotInfo = other.bizSpotInfo;
    }
    this.houseRent = other.houseRent;
  }

  public BizProjectEstate deepCopy() {
    return new BizProjectEstate(this);
  }

  @Override
  public void clear() {
    setHouseIdIsSet(false);
    this.houseId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.houseName = null;
    setCostMoneyIsSet(false);
    this.costMoney = 0.0;
    setAreaIsSet(false);
    this.area = 0.0;
    this.housePropertyCard = null;
    this.purpose = null;
    setTranasctionMoneyIsSet(false);
    this.tranasctionMoney = 0.0;
    setEvaluationPriceIsSet(false);
    this.evaluationPrice = 0.0;
    this.houseProvinceCode = null;
    this.houseCityCode = null;
    this.houseDistrictCode = null;
    setStatusIsSet(false);
    this.status = 0;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.houseIds = null;
    this.houseAddress = null;
    setEvaluationNetIsSet(false);
    this.evaluationNet = 0.0;
    this.propertyRatio = null;
    setDownPaymentIsSet(false);
    this.downPayment = 0.0;
    setPurchaseDepositIsSet(false);
    this.purchaseDeposit = 0.0;
    setPurchaseBalanceIsSet(false);
    this.purchaseBalance = 0.0;
    this.landUse = null;
    this.estateUse = null;
    this.houseAge = null;
    this.propertyLife = null;
    this.landSurplusLife = null;
    setUseAreaIsSet(false);
    this.useArea = 0.0;
    this.bizSpotInfo = null;
    setHouseRentIsSet(false);
    this.houseRent = 0.0;
  }

  public int getHouseId() {
    return this.houseId;
  }

  public BizProjectEstate setHouseId(int houseId) {
    this.houseId = houseId;
    setHouseIdIsSet(true);
    return this;
  }

  public void unsetHouseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEID_ISSET_ID);
  }

  /** Returns true if field houseId is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseId() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEID_ISSET_ID);
  }

  public void setHouseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectEstate setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public BizProjectEstate setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public double getCostMoney() {
    return this.costMoney;
  }

  public BizProjectEstate setCostMoney(double costMoney) {
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    return this;
  }

  public void unsetCostMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  /** Returns true if field costMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCostMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  public void setCostMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COSTMONEY_ISSET_ID, value);
  }

  public double getArea() {
    return this.area;
  }

  public BizProjectEstate setArea(double area) {
    this.area = area;
    setAreaIsSet(true);
    return this;
  }

  public void unsetArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return EncodingUtils.testBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  public void setAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREA_ISSET_ID, value);
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public BizProjectEstate setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getPurpose() {
    return this.purpose;
  }

  public BizProjectEstate setPurpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  public void unsetPurpose() {
    this.purpose = null;
  }

  /** Returns true if field purpose is set (has been assigned a value) and false otherwise */
  public boolean isSetPurpose() {
    return this.purpose != null;
  }

  public void setPurposeIsSet(boolean value) {
    if (!value) {
      this.purpose = null;
    }
  }

  public double getTranasctionMoney() {
    return this.tranasctionMoney;
  }

  public BizProjectEstate setTranasctionMoney(double tranasctionMoney) {
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    return this;
  }

  public void unsetTranasctionMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  /** Returns true if field tranasctionMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTranasctionMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  public void setTranasctionMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID, value);
  }

  public double getEvaluationPrice() {
    return this.evaluationPrice;
  }

  public BizProjectEstate setEvaluationPrice(double evaluationPrice) {
    this.evaluationPrice = evaluationPrice;
    setEvaluationPriceIsSet(true);
    return this;
  }

  public void unsetEvaluationPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID);
  }

  /** Returns true if field evaluationPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID);
  }

  public void setEvaluationPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID, value);
  }

  public String getHouseProvinceCode() {
    return this.houseProvinceCode;
  }

  public BizProjectEstate setHouseProvinceCode(String houseProvinceCode) {
    this.houseProvinceCode = houseProvinceCode;
    return this;
  }

  public void unsetHouseProvinceCode() {
    this.houseProvinceCode = null;
  }

  /** Returns true if field houseProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseProvinceCode() {
    return this.houseProvinceCode != null;
  }

  public void setHouseProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.houseProvinceCode = null;
    }
  }

  public String getHouseCityCode() {
    return this.houseCityCode;
  }

  public BizProjectEstate setHouseCityCode(String houseCityCode) {
    this.houseCityCode = houseCityCode;
    return this;
  }

  public void unsetHouseCityCode() {
    this.houseCityCode = null;
  }

  /** Returns true if field houseCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseCityCode() {
    return this.houseCityCode != null;
  }

  public void setHouseCityCodeIsSet(boolean value) {
    if (!value) {
      this.houseCityCode = null;
    }
  }

  public String getHouseDistrictCode() {
    return this.houseDistrictCode;
  }

  public BizProjectEstate setHouseDistrictCode(String houseDistrictCode) {
    this.houseDistrictCode = houseDistrictCode;
    return this;
  }

  public void unsetHouseDistrictCode() {
    this.houseDistrictCode = null;
  }

  /** Returns true if field houseDistrictCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseDistrictCode() {
    return this.houseDistrictCode != null;
  }

  public void setHouseDistrictCodeIsSet(boolean value) {
    if (!value) {
      this.houseDistrictCode = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectEstate setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public BizProjectEstate setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizProjectEstate setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizProjectEstate setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizProjectEstate setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getHouseIdsSize() {
    return (this.houseIds == null) ? 0 : this.houseIds.size();
  }

  public java.util.Iterator<Integer> getHouseIdsIterator() {
    return (this.houseIds == null) ? null : this.houseIds.iterator();
  }

  public void addToHouseIds(int elem) {
    if (this.houseIds == null) {
      this.houseIds = new ArrayList<Integer>();
    }
    this.houseIds.add(elem);
  }

  public List<Integer> getHouseIds() {
    return this.houseIds;
  }

  public BizProjectEstate setHouseIds(List<Integer> houseIds) {
    this.houseIds = houseIds;
    return this;
  }

  public void unsetHouseIds() {
    this.houseIds = null;
  }

  /** Returns true if field houseIds is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseIds() {
    return this.houseIds != null;
  }

  public void setHouseIdsIsSet(boolean value) {
    if (!value) {
      this.houseIds = null;
    }
  }

  public String getHouseAddress() {
    return this.houseAddress;
  }

  public BizProjectEstate setHouseAddress(String houseAddress) {
    this.houseAddress = houseAddress;
    return this;
  }

  public void unsetHouseAddress() {
    this.houseAddress = null;
  }

  /** Returns true if field houseAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseAddress() {
    return this.houseAddress != null;
  }

  public void setHouseAddressIsSet(boolean value) {
    if (!value) {
      this.houseAddress = null;
    }
  }

  public double getEvaluationNet() {
    return this.evaluationNet;
  }

  public BizProjectEstate setEvaluationNet(double evaluationNet) {
    this.evaluationNet = evaluationNet;
    setEvaluationNetIsSet(true);
    return this;
  }

  public void unsetEvaluationNet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID);
  }

  /** Returns true if field evaluationNet is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationNet() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID);
  }

  public void setEvaluationNetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID, value);
  }

  public String getPropertyRatio() {
    return this.propertyRatio;
  }

  public BizProjectEstate setPropertyRatio(String propertyRatio) {
    this.propertyRatio = propertyRatio;
    return this;
  }

  public void unsetPropertyRatio() {
    this.propertyRatio = null;
  }

  /** Returns true if field propertyRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyRatio() {
    return this.propertyRatio != null;
  }

  public void setPropertyRatioIsSet(boolean value) {
    if (!value) {
      this.propertyRatio = null;
    }
  }

  public double getDownPayment() {
    return this.downPayment;
  }

  public BizProjectEstate setDownPayment(double downPayment) {
    this.downPayment = downPayment;
    setDownPaymentIsSet(true);
    return this;
  }

  public void unsetDownPayment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID);
  }

  /** Returns true if field downPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetDownPayment() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID);
  }

  public void setDownPaymentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID, value);
  }

  public double getPurchaseDeposit() {
    return this.purchaseDeposit;
  }

  public BizProjectEstate setPurchaseDeposit(double purchaseDeposit) {
    this.purchaseDeposit = purchaseDeposit;
    setPurchaseDepositIsSet(true);
    return this;
  }

  public void unsetPurchaseDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEDEPOSIT_ISSET_ID);
  }

  /** Returns true if field purchaseDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchaseDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __PURCHASEDEPOSIT_ISSET_ID);
  }

  public void setPurchaseDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEDEPOSIT_ISSET_ID, value);
  }

  public double getPurchaseBalance() {
    return this.purchaseBalance;
  }

  public BizProjectEstate setPurchaseBalance(double purchaseBalance) {
    this.purchaseBalance = purchaseBalance;
    setPurchaseBalanceIsSet(true);
    return this;
  }

  public void unsetPurchaseBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURCHASEBALANCE_ISSET_ID);
  }

  /** Returns true if field purchaseBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchaseBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PURCHASEBALANCE_ISSET_ID);
  }

  public void setPurchaseBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURCHASEBALANCE_ISSET_ID, value);
  }

  public String getLandUse() {
    return this.landUse;
  }

  public BizProjectEstate setLandUse(String landUse) {
    this.landUse = landUse;
    return this;
  }

  public void unsetLandUse() {
    this.landUse = null;
  }

  /** Returns true if field landUse is set (has been assigned a value) and false otherwise */
  public boolean isSetLandUse() {
    return this.landUse != null;
  }

  public void setLandUseIsSet(boolean value) {
    if (!value) {
      this.landUse = null;
    }
  }

  public String getEstateUse() {
    return this.estateUse;
  }

  public BizProjectEstate setEstateUse(String estateUse) {
    this.estateUse = estateUse;
    return this;
  }

  public void unsetEstateUse() {
    this.estateUse = null;
  }

  /** Returns true if field estateUse is set (has been assigned a value) and false otherwise */
  public boolean isSetEstateUse() {
    return this.estateUse != null;
  }

  public void setEstateUseIsSet(boolean value) {
    if (!value) {
      this.estateUse = null;
    }
  }

  public String getHouseAge() {
    return this.houseAge;
  }

  public BizProjectEstate setHouseAge(String houseAge) {
    this.houseAge = houseAge;
    return this;
  }

  public void unsetHouseAge() {
    this.houseAge = null;
  }

  /** Returns true if field houseAge is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseAge() {
    return this.houseAge != null;
  }

  public void setHouseAgeIsSet(boolean value) {
    if (!value) {
      this.houseAge = null;
    }
  }

  public String getPropertyLife() {
    return this.propertyLife;
  }

  public BizProjectEstate setPropertyLife(String propertyLife) {
    this.propertyLife = propertyLife;
    return this;
  }

  public void unsetPropertyLife() {
    this.propertyLife = null;
  }

  /** Returns true if field propertyLife is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyLife() {
    return this.propertyLife != null;
  }

  public void setPropertyLifeIsSet(boolean value) {
    if (!value) {
      this.propertyLife = null;
    }
  }

  public String getLandSurplusLife() {
    return this.landSurplusLife;
  }

  public BizProjectEstate setLandSurplusLife(String landSurplusLife) {
    this.landSurplusLife = landSurplusLife;
    return this;
  }

  public void unsetLandSurplusLife() {
    this.landSurplusLife = null;
  }

  /** Returns true if field landSurplusLife is set (has been assigned a value) and false otherwise */
  public boolean isSetLandSurplusLife() {
    return this.landSurplusLife != null;
  }

  public void setLandSurplusLifeIsSet(boolean value) {
    if (!value) {
      this.landSurplusLife = null;
    }
  }

  public double getUseArea() {
    return this.useArea;
  }

  public BizProjectEstate setUseArea(double useArea) {
    this.useArea = useArea;
    setUseAreaIsSet(true);
    return this;
  }

  public void unsetUseArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEAREA_ISSET_ID);
  }

  /** Returns true if field useArea is set (has been assigned a value) and false otherwise */
  public boolean isSetUseArea() {
    return EncodingUtils.testBit(__isset_bitfield, __USEAREA_ISSET_ID);
  }

  public void setUseAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEAREA_ISSET_ID, value);
  }

  public BizSpotInfo getBizSpotInfo() {
    return this.bizSpotInfo;
  }

  public BizProjectEstate setBizSpotInfo(BizSpotInfo bizSpotInfo) {
    this.bizSpotInfo = bizSpotInfo;
    return this;
  }

  public void unsetBizSpotInfo() {
    this.bizSpotInfo = null;
  }

  /** Returns true if field bizSpotInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetBizSpotInfo() {
    return this.bizSpotInfo != null;
  }

  public void setBizSpotInfoIsSet(boolean value) {
    if (!value) {
      this.bizSpotInfo = null;
    }
  }

  public double getHouseRent() {
    return this.houseRent;
  }

  public BizProjectEstate setHouseRent(double houseRent) {
    this.houseRent = houseRent;
    setHouseRentIsSet(true);
    return this;
  }

  public void unsetHouseRent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSERENT_ISSET_ID);
  }

  /** Returns true if field houseRent is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseRent() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSERENT_ISSET_ID);
  }

  public void setHouseRentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSERENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOUSE_ID:
      if (value == null) {
        unsetHouseId();
      } else {
        setHouseId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case COST_MONEY:
      if (value == null) {
        unsetCostMoney();
      } else {
        setCostMoney((Double)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((Double)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case PURPOSE:
      if (value == null) {
        unsetPurpose();
      } else {
        setPurpose((String)value);
      }
      break;

    case TRANASCTION_MONEY:
      if (value == null) {
        unsetTranasctionMoney();
      } else {
        setTranasctionMoney((Double)value);
      }
      break;

    case EVALUATION_PRICE:
      if (value == null) {
        unsetEvaluationPrice();
      } else {
        setEvaluationPrice((Double)value);
      }
      break;

    case HOUSE_PROVINCE_CODE:
      if (value == null) {
        unsetHouseProvinceCode();
      } else {
        setHouseProvinceCode((String)value);
      }
      break;

    case HOUSE_CITY_CODE:
      if (value == null) {
        unsetHouseCityCode();
      } else {
        setHouseCityCode((String)value);
      }
      break;

    case HOUSE_DISTRICT_CODE:
      if (value == null) {
        unsetHouseDistrictCode();
      } else {
        setHouseDistrictCode((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case HOUSE_IDS:
      if (value == null) {
        unsetHouseIds();
      } else {
        setHouseIds((List<Integer>)value);
      }
      break;

    case HOUSE_ADDRESS:
      if (value == null) {
        unsetHouseAddress();
      } else {
        setHouseAddress((String)value);
      }
      break;

    case EVALUATION_NET:
      if (value == null) {
        unsetEvaluationNet();
      } else {
        setEvaluationNet((Double)value);
      }
      break;

    case PROPERTY_RATIO:
      if (value == null) {
        unsetPropertyRatio();
      } else {
        setPropertyRatio((String)value);
      }
      break;

    case DOWN_PAYMENT:
      if (value == null) {
        unsetDownPayment();
      } else {
        setDownPayment((Double)value);
      }
      break;

    case PURCHASE_DEPOSIT:
      if (value == null) {
        unsetPurchaseDeposit();
      } else {
        setPurchaseDeposit((Double)value);
      }
      break;

    case PURCHASE_BALANCE:
      if (value == null) {
        unsetPurchaseBalance();
      } else {
        setPurchaseBalance((Double)value);
      }
      break;

    case LAND_USE:
      if (value == null) {
        unsetLandUse();
      } else {
        setLandUse((String)value);
      }
      break;

    case ESTATE_USE:
      if (value == null) {
        unsetEstateUse();
      } else {
        setEstateUse((String)value);
      }
      break;

    case HOUSE_AGE:
      if (value == null) {
        unsetHouseAge();
      } else {
        setHouseAge((String)value);
      }
      break;

    case PROPERTY_LIFE:
      if (value == null) {
        unsetPropertyLife();
      } else {
        setPropertyLife((String)value);
      }
      break;

    case LAND_SURPLUS_LIFE:
      if (value == null) {
        unsetLandSurplusLife();
      } else {
        setLandSurplusLife((String)value);
      }
      break;

    case USE_AREA:
      if (value == null) {
        unsetUseArea();
      } else {
        setUseArea((Double)value);
      }
      break;

    case BIZ_SPOT_INFO:
      if (value == null) {
        unsetBizSpotInfo();
      } else {
        setBizSpotInfo((BizSpotInfo)value);
      }
      break;

    case HOUSE_RENT:
      if (value == null) {
        unsetHouseRent();
      } else {
        setHouseRent((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOUSE_ID:
      return Integer.valueOf(getHouseId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case HOUSE_NAME:
      return getHouseName();

    case COST_MONEY:
      return Double.valueOf(getCostMoney());

    case AREA:
      return Double.valueOf(getArea());

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case PURPOSE:
      return getPurpose();

    case TRANASCTION_MONEY:
      return Double.valueOf(getTranasctionMoney());

    case EVALUATION_PRICE:
      return Double.valueOf(getEvaluationPrice());

    case HOUSE_PROVINCE_CODE:
      return getHouseProvinceCode();

    case HOUSE_CITY_CODE:
      return getHouseCityCode();

    case HOUSE_DISTRICT_CODE:
      return getHouseDistrictCode();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case HOUSE_IDS:
      return getHouseIds();

    case HOUSE_ADDRESS:
      return getHouseAddress();

    case EVALUATION_NET:
      return Double.valueOf(getEvaluationNet());

    case PROPERTY_RATIO:
      return getPropertyRatio();

    case DOWN_PAYMENT:
      return Double.valueOf(getDownPayment());

    case PURCHASE_DEPOSIT:
      return Double.valueOf(getPurchaseDeposit());

    case PURCHASE_BALANCE:
      return Double.valueOf(getPurchaseBalance());

    case LAND_USE:
      return getLandUse();

    case ESTATE_USE:
      return getEstateUse();

    case HOUSE_AGE:
      return getHouseAge();

    case PROPERTY_LIFE:
      return getPropertyLife();

    case LAND_SURPLUS_LIFE:
      return getLandSurplusLife();

    case USE_AREA:
      return Double.valueOf(getUseArea());

    case BIZ_SPOT_INFO:
      return getBizSpotInfo();

    case HOUSE_RENT:
      return Double.valueOf(getHouseRent());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOUSE_ID:
      return isSetHouseId();
    case PROJECT_ID:
      return isSetProjectId();
    case HOUSE_NAME:
      return isSetHouseName();
    case COST_MONEY:
      return isSetCostMoney();
    case AREA:
      return isSetArea();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case PURPOSE:
      return isSetPurpose();
    case TRANASCTION_MONEY:
      return isSetTranasctionMoney();
    case EVALUATION_PRICE:
      return isSetEvaluationPrice();
    case HOUSE_PROVINCE_CODE:
      return isSetHouseProvinceCode();
    case HOUSE_CITY_CODE:
      return isSetHouseCityCode();
    case HOUSE_DISTRICT_CODE:
      return isSetHouseDistrictCode();
    case STATUS:
      return isSetStatus();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case HOUSE_IDS:
      return isSetHouseIds();
    case HOUSE_ADDRESS:
      return isSetHouseAddress();
    case EVALUATION_NET:
      return isSetEvaluationNet();
    case PROPERTY_RATIO:
      return isSetPropertyRatio();
    case DOWN_PAYMENT:
      return isSetDownPayment();
    case PURCHASE_DEPOSIT:
      return isSetPurchaseDeposit();
    case PURCHASE_BALANCE:
      return isSetPurchaseBalance();
    case LAND_USE:
      return isSetLandUse();
    case ESTATE_USE:
      return isSetEstateUse();
    case HOUSE_AGE:
      return isSetHouseAge();
    case PROPERTY_LIFE:
      return isSetPropertyLife();
    case LAND_SURPLUS_LIFE:
      return isSetLandSurplusLife();
    case USE_AREA:
      return isSetUseArea();
    case BIZ_SPOT_INFO:
      return isSetBizSpotInfo();
    case HOUSE_RENT:
      return isSetHouseRent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectEstate)
      return this.equals((BizProjectEstate)that);
    return false;
  }

  public boolean equals(BizProjectEstate that) {
    if (that == null)
      return false;

    boolean this_present_houseId = true;
    boolean that_present_houseId = true;
    if (this_present_houseId || that_present_houseId) {
      if (!(this_present_houseId && that_present_houseId))
        return false;
      if (this.houseId != that.houseId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_costMoney = true;
    boolean that_present_costMoney = true;
    if (this_present_costMoney || that_present_costMoney) {
      if (!(this_present_costMoney && that_present_costMoney))
        return false;
      if (this.costMoney != that.costMoney)
        return false;
    }

    boolean this_present_area = true;
    boolean that_present_area = true;
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (this.area != that.area)
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_purpose = true && this.isSetPurpose();
    boolean that_present_purpose = true && that.isSetPurpose();
    if (this_present_purpose || that_present_purpose) {
      if (!(this_present_purpose && that_present_purpose))
        return false;
      if (!this.purpose.equals(that.purpose))
        return false;
    }

    boolean this_present_tranasctionMoney = true;
    boolean that_present_tranasctionMoney = true;
    if (this_present_tranasctionMoney || that_present_tranasctionMoney) {
      if (!(this_present_tranasctionMoney && that_present_tranasctionMoney))
        return false;
      if (this.tranasctionMoney != that.tranasctionMoney)
        return false;
    }

    boolean this_present_evaluationPrice = true;
    boolean that_present_evaluationPrice = true;
    if (this_present_evaluationPrice || that_present_evaluationPrice) {
      if (!(this_present_evaluationPrice && that_present_evaluationPrice))
        return false;
      if (this.evaluationPrice != that.evaluationPrice)
        return false;
    }

    boolean this_present_houseProvinceCode = true && this.isSetHouseProvinceCode();
    boolean that_present_houseProvinceCode = true && that.isSetHouseProvinceCode();
    if (this_present_houseProvinceCode || that_present_houseProvinceCode) {
      if (!(this_present_houseProvinceCode && that_present_houseProvinceCode))
        return false;
      if (!this.houseProvinceCode.equals(that.houseProvinceCode))
        return false;
    }

    boolean this_present_houseCityCode = true && this.isSetHouseCityCode();
    boolean that_present_houseCityCode = true && that.isSetHouseCityCode();
    if (this_present_houseCityCode || that_present_houseCityCode) {
      if (!(this_present_houseCityCode && that_present_houseCityCode))
        return false;
      if (!this.houseCityCode.equals(that.houseCityCode))
        return false;
    }

    boolean this_present_houseDistrictCode = true && this.isSetHouseDistrictCode();
    boolean that_present_houseDistrictCode = true && that.isSetHouseDistrictCode();
    if (this_present_houseDistrictCode || that_present_houseDistrictCode) {
      if (!(this_present_houseDistrictCode && that_present_houseDistrictCode))
        return false;
      if (!this.houseDistrictCode.equals(that.houseDistrictCode))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_houseIds = true && this.isSetHouseIds();
    boolean that_present_houseIds = true && that.isSetHouseIds();
    if (this_present_houseIds || that_present_houseIds) {
      if (!(this_present_houseIds && that_present_houseIds))
        return false;
      if (!this.houseIds.equals(that.houseIds))
        return false;
    }

    boolean this_present_houseAddress = true && this.isSetHouseAddress();
    boolean that_present_houseAddress = true && that.isSetHouseAddress();
    if (this_present_houseAddress || that_present_houseAddress) {
      if (!(this_present_houseAddress && that_present_houseAddress))
        return false;
      if (!this.houseAddress.equals(that.houseAddress))
        return false;
    }

    boolean this_present_evaluationNet = true;
    boolean that_present_evaluationNet = true;
    if (this_present_evaluationNet || that_present_evaluationNet) {
      if (!(this_present_evaluationNet && that_present_evaluationNet))
        return false;
      if (this.evaluationNet != that.evaluationNet)
        return false;
    }

    boolean this_present_propertyRatio = true && this.isSetPropertyRatio();
    boolean that_present_propertyRatio = true && that.isSetPropertyRatio();
    if (this_present_propertyRatio || that_present_propertyRatio) {
      if (!(this_present_propertyRatio && that_present_propertyRatio))
        return false;
      if (!this.propertyRatio.equals(that.propertyRatio))
        return false;
    }

    boolean this_present_downPayment = true;
    boolean that_present_downPayment = true;
    if (this_present_downPayment || that_present_downPayment) {
      if (!(this_present_downPayment && that_present_downPayment))
        return false;
      if (this.downPayment != that.downPayment)
        return false;
    }

    boolean this_present_purchaseDeposit = true;
    boolean that_present_purchaseDeposit = true;
    if (this_present_purchaseDeposit || that_present_purchaseDeposit) {
      if (!(this_present_purchaseDeposit && that_present_purchaseDeposit))
        return false;
      if (this.purchaseDeposit != that.purchaseDeposit)
        return false;
    }

    boolean this_present_purchaseBalance = true;
    boolean that_present_purchaseBalance = true;
    if (this_present_purchaseBalance || that_present_purchaseBalance) {
      if (!(this_present_purchaseBalance && that_present_purchaseBalance))
        return false;
      if (this.purchaseBalance != that.purchaseBalance)
        return false;
    }

    boolean this_present_landUse = true && this.isSetLandUse();
    boolean that_present_landUse = true && that.isSetLandUse();
    if (this_present_landUse || that_present_landUse) {
      if (!(this_present_landUse && that_present_landUse))
        return false;
      if (!this.landUse.equals(that.landUse))
        return false;
    }

    boolean this_present_estateUse = true && this.isSetEstateUse();
    boolean that_present_estateUse = true && that.isSetEstateUse();
    if (this_present_estateUse || that_present_estateUse) {
      if (!(this_present_estateUse && that_present_estateUse))
        return false;
      if (!this.estateUse.equals(that.estateUse))
        return false;
    }

    boolean this_present_houseAge = true && this.isSetHouseAge();
    boolean that_present_houseAge = true && that.isSetHouseAge();
    if (this_present_houseAge || that_present_houseAge) {
      if (!(this_present_houseAge && that_present_houseAge))
        return false;
      if (!this.houseAge.equals(that.houseAge))
        return false;
    }

    boolean this_present_propertyLife = true && this.isSetPropertyLife();
    boolean that_present_propertyLife = true && that.isSetPropertyLife();
    if (this_present_propertyLife || that_present_propertyLife) {
      if (!(this_present_propertyLife && that_present_propertyLife))
        return false;
      if (!this.propertyLife.equals(that.propertyLife))
        return false;
    }

    boolean this_present_landSurplusLife = true && this.isSetLandSurplusLife();
    boolean that_present_landSurplusLife = true && that.isSetLandSurplusLife();
    if (this_present_landSurplusLife || that_present_landSurplusLife) {
      if (!(this_present_landSurplusLife && that_present_landSurplusLife))
        return false;
      if (!this.landSurplusLife.equals(that.landSurplusLife))
        return false;
    }

    boolean this_present_useArea = true;
    boolean that_present_useArea = true;
    if (this_present_useArea || that_present_useArea) {
      if (!(this_present_useArea && that_present_useArea))
        return false;
      if (this.useArea != that.useArea)
        return false;
    }

    boolean this_present_bizSpotInfo = true && this.isSetBizSpotInfo();
    boolean that_present_bizSpotInfo = true && that.isSetBizSpotInfo();
    if (this_present_bizSpotInfo || that_present_bizSpotInfo) {
      if (!(this_present_bizSpotInfo && that_present_bizSpotInfo))
        return false;
      if (!this.bizSpotInfo.equals(that.bizSpotInfo))
        return false;
    }

    boolean this_present_houseRent = true;
    boolean that_present_houseRent = true;
    if (this_present_houseRent || that_present_houseRent) {
      if (!(this_present_houseRent && that_present_houseRent))
        return false;
      if (this.houseRent != that.houseRent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_houseId = true;
    list.add(present_houseId);
    if (present_houseId)
      list.add(houseId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_costMoney = true;
    list.add(present_costMoney);
    if (present_costMoney)
      list.add(costMoney);

    boolean present_area = true;
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_purpose = true && (isSetPurpose());
    list.add(present_purpose);
    if (present_purpose)
      list.add(purpose);

    boolean present_tranasctionMoney = true;
    list.add(present_tranasctionMoney);
    if (present_tranasctionMoney)
      list.add(tranasctionMoney);

    boolean present_evaluationPrice = true;
    list.add(present_evaluationPrice);
    if (present_evaluationPrice)
      list.add(evaluationPrice);

    boolean present_houseProvinceCode = true && (isSetHouseProvinceCode());
    list.add(present_houseProvinceCode);
    if (present_houseProvinceCode)
      list.add(houseProvinceCode);

    boolean present_houseCityCode = true && (isSetHouseCityCode());
    list.add(present_houseCityCode);
    if (present_houseCityCode)
      list.add(houseCityCode);

    boolean present_houseDistrictCode = true && (isSetHouseDistrictCode());
    list.add(present_houseDistrictCode);
    if (present_houseDistrictCode)
      list.add(houseDistrictCode);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_houseIds = true && (isSetHouseIds());
    list.add(present_houseIds);
    if (present_houseIds)
      list.add(houseIds);

    boolean present_houseAddress = true && (isSetHouseAddress());
    list.add(present_houseAddress);
    if (present_houseAddress)
      list.add(houseAddress);

    boolean present_evaluationNet = true;
    list.add(present_evaluationNet);
    if (present_evaluationNet)
      list.add(evaluationNet);

    boolean present_propertyRatio = true && (isSetPropertyRatio());
    list.add(present_propertyRatio);
    if (present_propertyRatio)
      list.add(propertyRatio);

    boolean present_downPayment = true;
    list.add(present_downPayment);
    if (present_downPayment)
      list.add(downPayment);

    boolean present_purchaseDeposit = true;
    list.add(present_purchaseDeposit);
    if (present_purchaseDeposit)
      list.add(purchaseDeposit);

    boolean present_purchaseBalance = true;
    list.add(present_purchaseBalance);
    if (present_purchaseBalance)
      list.add(purchaseBalance);

    boolean present_landUse = true && (isSetLandUse());
    list.add(present_landUse);
    if (present_landUse)
      list.add(landUse);

    boolean present_estateUse = true && (isSetEstateUse());
    list.add(present_estateUse);
    if (present_estateUse)
      list.add(estateUse);

    boolean present_houseAge = true && (isSetHouseAge());
    list.add(present_houseAge);
    if (present_houseAge)
      list.add(houseAge);

    boolean present_propertyLife = true && (isSetPropertyLife());
    list.add(present_propertyLife);
    if (present_propertyLife)
      list.add(propertyLife);

    boolean present_landSurplusLife = true && (isSetLandSurplusLife());
    list.add(present_landSurplusLife);
    if (present_landSurplusLife)
      list.add(landSurplusLife);

    boolean present_useArea = true;
    list.add(present_useArea);
    if (present_useArea)
      list.add(useArea);

    boolean present_bizSpotInfo = true && (isSetBizSpotInfo());
    list.add(present_bizSpotInfo);
    if (present_bizSpotInfo)
      list.add(bizSpotInfo);

    boolean present_houseRent = true;
    list.add(present_houseRent);
    if (present_houseRent)
      list.add(houseRent);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectEstate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHouseId()).compareTo(other.isSetHouseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseId, other.houseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostMoney()).compareTo(other.isSetCostMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costMoney, other.costMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurpose()).compareTo(other.isSetPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purpose, other.purpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranasctionMoney()).compareTo(other.isSetTranasctionMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranasctionMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tranasctionMoney, other.tranasctionMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationPrice()).compareTo(other.isSetEvaluationPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationPrice, other.evaluationPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseProvinceCode()).compareTo(other.isSetHouseProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseProvinceCode, other.houseProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseCityCode()).compareTo(other.isSetHouseCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseCityCode, other.houseCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseDistrictCode()).compareTo(other.isSetHouseDistrictCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseDistrictCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseDistrictCode, other.houseDistrictCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseIds()).compareTo(other.isSetHouseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseIds, other.houseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseAddress()).compareTo(other.isSetHouseAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseAddress, other.houseAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationNet()).compareTo(other.isSetEvaluationNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationNet, other.evaluationNet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyRatio()).compareTo(other.isSetPropertyRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyRatio, other.propertyRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownPayment()).compareTo(other.isSetDownPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downPayment, other.downPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchaseDeposit()).compareTo(other.isSetPurchaseDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchaseDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseDeposit, other.purchaseDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchaseBalance()).compareTo(other.isSetPurchaseBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchaseBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseBalance, other.purchaseBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandUse()).compareTo(other.isSetLandUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landUse, other.landUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstateUse()).compareTo(other.isSetEstateUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstateUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estateUse, other.estateUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseAge()).compareTo(other.isSetHouseAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseAge, other.houseAge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyLife()).compareTo(other.isSetPropertyLife());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyLife()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyLife, other.propertyLife);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandSurplusLife()).compareTo(other.isSetLandSurplusLife());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandSurplusLife()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landSurplusLife, other.landSurplusLife);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseArea()).compareTo(other.isSetUseArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useArea, other.useArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizSpotInfo()).compareTo(other.isSetBizSpotInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizSpotInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizSpotInfo, other.bizSpotInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseRent()).compareTo(other.isSetHouseRent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseRent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseRent, other.houseRent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectEstate(");
    boolean first = true;

    sb.append("houseId:");
    sb.append(this.houseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costMoney:");
    sb.append(this.costMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    sb.append(this.area);
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("purpose:");
    if (this.purpose == null) {
      sb.append("null");
    } else {
      sb.append(this.purpose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tranasctionMoney:");
    sb.append(this.tranasctionMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationPrice:");
    sb.append(this.evaluationPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseProvinceCode:");
    if (this.houseProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseCityCode:");
    if (this.houseCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseDistrictCode:");
    if (this.houseDistrictCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseDistrictCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseIds:");
    if (this.houseIds == null) {
      sb.append("null");
    } else {
      sb.append(this.houseIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseAddress:");
    if (this.houseAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.houseAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationNet:");
    sb.append(this.evaluationNet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyRatio:");
    if (this.propertyRatio == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyRatio);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downPayment:");
    sb.append(this.downPayment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purchaseDeposit:");
    sb.append(this.purchaseDeposit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purchaseBalance:");
    sb.append(this.purchaseBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("landUse:");
    if (this.landUse == null) {
      sb.append("null");
    } else {
      sb.append(this.landUse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estateUse:");
    if (this.estateUse == null) {
      sb.append("null");
    } else {
      sb.append(this.estateUse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseAge:");
    if (this.houseAge == null) {
      sb.append("null");
    } else {
      sb.append(this.houseAge);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyLife:");
    if (this.propertyLife == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyLife);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landSurplusLife:");
    if (this.landSurplusLife == null) {
      sb.append("null");
    } else {
      sb.append(this.landSurplusLife);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useArea:");
    sb.append(this.useArea);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizSpotInfo:");
    if (this.bizSpotInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.bizSpotInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseRent:");
    sb.append(this.houseRent);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectEstateStandardSchemeFactory implements SchemeFactory {
    public BizProjectEstateStandardScheme getScheme() {
      return new BizProjectEstateStandardScheme();
    }
  }

  private static class BizProjectEstateStandardScheme extends StandardScheme<BizProjectEstate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectEstate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOUSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseId = iprot.readI32();
              struct.setHouseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COST_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.costMoney = iprot.readDouble();
              struct.setCostMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.area = iprot.readDouble();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purpose = iprot.readString();
              struct.setPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRANASCTION_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tranasctionMoney = iprot.readDouble();
              struct.setTranasctionMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVALUATION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evaluationPrice = iprot.readDouble();
              struct.setEvaluationPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HOUSE_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseProvinceCode = iprot.readString();
              struct.setHouseProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOUSE_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseCityCode = iprot.readString();
              struct.setHouseCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOUSE_DISTRICT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseDistrictCode = iprot.readString();
              struct.setHouseDistrictCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HOUSE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.houseIds = new ArrayList<Integer>(_list88.size);
                int _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = iprot.readI32();
                  struct.houseIds.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setHouseIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HOUSE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseAddress = iprot.readString();
              struct.setHouseAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EVALUATION_NET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evaluationNet = iprot.readDouble();
              struct.setEvaluationNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROPERTY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.propertyRatio = iprot.readString();
              struct.setPropertyRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DOWN_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.downPayment = iprot.readDouble();
              struct.setDownPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PURCHASE_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.purchaseDeposit = iprot.readDouble();
              struct.setPurchaseDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PURCHASE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.purchaseBalance = iprot.readDouble();
              struct.setPurchaseBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LAND_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.landUse = iprot.readString();
              struct.setLandUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ESTATE_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.estateUse = iprot.readString();
              struct.setEstateUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HOUSE_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseAge = iprot.readString();
              struct.setHouseAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PROPERTY_LIFE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.propertyLife = iprot.readString();
              struct.setPropertyLifeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LAND_SURPLUS_LIFE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.landSurplusLife = iprot.readString();
              struct.setLandSurplusLifeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // USE_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useArea = iprot.readDouble();
              struct.setUseAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BIZ_SPOT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bizSpotInfo = new BizSpotInfo();
              struct.bizSpotInfo.read(iprot);
              struct.setBizSpotInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // HOUSE_RENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseRent = iprot.readDouble();
              struct.setHouseRentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectEstate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HOUSE_ID_FIELD_DESC);
      oprot.writeI32(struct.houseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.costMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AREA_FIELD_DESC);
      oprot.writeDouble(struct.area);
      oprot.writeFieldEnd();
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.purpose != null) {
        oprot.writeFieldBegin(PURPOSE_FIELD_DESC);
        oprot.writeString(struct.purpose);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANASCTION_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.tranasctionMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVALUATION_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.evaluationPrice);
      oprot.writeFieldEnd();
      if (struct.houseProvinceCode != null) {
        oprot.writeFieldBegin(HOUSE_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.houseProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.houseCityCode != null) {
        oprot.writeFieldBegin(HOUSE_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.houseCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.houseDistrictCode != null) {
        oprot.writeFieldBegin(HOUSE_DISTRICT_CODE_FIELD_DESC);
        oprot.writeString(struct.houseDistrictCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.houseIds != null) {
        oprot.writeFieldBegin(HOUSE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.houseIds.size()));
          for (int _iter91 : struct.houseIds)
          {
            oprot.writeI32(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.houseAddress != null) {
        oprot.writeFieldBegin(HOUSE_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.houseAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVALUATION_NET_FIELD_DESC);
      oprot.writeDouble(struct.evaluationNet);
      oprot.writeFieldEnd();
      if (struct.propertyRatio != null) {
        oprot.writeFieldBegin(PROPERTY_RATIO_FIELD_DESC);
        oprot.writeString(struct.propertyRatio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOWN_PAYMENT_FIELD_DESC);
      oprot.writeDouble(struct.downPayment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURCHASE_DEPOSIT_FIELD_DESC);
      oprot.writeDouble(struct.purchaseDeposit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURCHASE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.purchaseBalance);
      oprot.writeFieldEnd();
      if (struct.landUse != null) {
        oprot.writeFieldBegin(LAND_USE_FIELD_DESC);
        oprot.writeString(struct.landUse);
        oprot.writeFieldEnd();
      }
      if (struct.estateUse != null) {
        oprot.writeFieldBegin(ESTATE_USE_FIELD_DESC);
        oprot.writeString(struct.estateUse);
        oprot.writeFieldEnd();
      }
      if (struct.houseAge != null) {
        oprot.writeFieldBegin(HOUSE_AGE_FIELD_DESC);
        oprot.writeString(struct.houseAge);
        oprot.writeFieldEnd();
      }
      if (struct.propertyLife != null) {
        oprot.writeFieldBegin(PROPERTY_LIFE_FIELD_DESC);
        oprot.writeString(struct.propertyLife);
        oprot.writeFieldEnd();
      }
      if (struct.landSurplusLife != null) {
        oprot.writeFieldBegin(LAND_SURPLUS_LIFE_FIELD_DESC);
        oprot.writeString(struct.landSurplusLife);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_AREA_FIELD_DESC);
      oprot.writeDouble(struct.useArea);
      oprot.writeFieldEnd();
      if (struct.bizSpotInfo != null) {
        oprot.writeFieldBegin(BIZ_SPOT_INFO_FIELD_DESC);
        struct.bizSpotInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_RENT_FIELD_DESC);
      oprot.writeDouble(struct.houseRent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectEstateTupleSchemeFactory implements SchemeFactory {
    public BizProjectEstateTupleScheme getScheme() {
      return new BizProjectEstateTupleScheme();
    }
  }

  private static class BizProjectEstateTupleScheme extends TupleScheme<BizProjectEstate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectEstate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHouseId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetHouseName()) {
        optionals.set(2);
      }
      if (struct.isSetCostMoney()) {
        optionals.set(3);
      }
      if (struct.isSetArea()) {
        optionals.set(4);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(5);
      }
      if (struct.isSetPurpose()) {
        optionals.set(6);
      }
      if (struct.isSetTranasctionMoney()) {
        optionals.set(7);
      }
      if (struct.isSetEvaluationPrice()) {
        optionals.set(8);
      }
      if (struct.isSetHouseProvinceCode()) {
        optionals.set(9);
      }
      if (struct.isSetHouseCityCode()) {
        optionals.set(10);
      }
      if (struct.isSetHouseDistrictCode()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(13);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(15);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(16);
      }
      if (struct.isSetHouseIds()) {
        optionals.set(17);
      }
      if (struct.isSetHouseAddress()) {
        optionals.set(18);
      }
      if (struct.isSetEvaluationNet()) {
        optionals.set(19);
      }
      if (struct.isSetPropertyRatio()) {
        optionals.set(20);
      }
      if (struct.isSetDownPayment()) {
        optionals.set(21);
      }
      if (struct.isSetPurchaseDeposit()) {
        optionals.set(22);
      }
      if (struct.isSetPurchaseBalance()) {
        optionals.set(23);
      }
      if (struct.isSetLandUse()) {
        optionals.set(24);
      }
      if (struct.isSetEstateUse()) {
        optionals.set(25);
      }
      if (struct.isSetHouseAge()) {
        optionals.set(26);
      }
      if (struct.isSetPropertyLife()) {
        optionals.set(27);
      }
      if (struct.isSetLandSurplusLife()) {
        optionals.set(28);
      }
      if (struct.isSetUseArea()) {
        optionals.set(29);
      }
      if (struct.isSetBizSpotInfo()) {
        optionals.set(30);
      }
      if (struct.isSetHouseRent()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetHouseId()) {
        oprot.writeI32(struct.houseId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetCostMoney()) {
        oprot.writeDouble(struct.costMoney);
      }
      if (struct.isSetArea()) {
        oprot.writeDouble(struct.area);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetPurpose()) {
        oprot.writeString(struct.purpose);
      }
      if (struct.isSetTranasctionMoney()) {
        oprot.writeDouble(struct.tranasctionMoney);
      }
      if (struct.isSetEvaluationPrice()) {
        oprot.writeDouble(struct.evaluationPrice);
      }
      if (struct.isSetHouseProvinceCode()) {
        oprot.writeString(struct.houseProvinceCode);
      }
      if (struct.isSetHouseCityCode()) {
        oprot.writeString(struct.houseCityCode);
      }
      if (struct.isSetHouseDistrictCode()) {
        oprot.writeString(struct.houseDistrictCode);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetHouseIds()) {
        {
          oprot.writeI32(struct.houseIds.size());
          for (int _iter92 : struct.houseIds)
          {
            oprot.writeI32(_iter92);
          }
        }
      }
      if (struct.isSetHouseAddress()) {
        oprot.writeString(struct.houseAddress);
      }
      if (struct.isSetEvaluationNet()) {
        oprot.writeDouble(struct.evaluationNet);
      }
      if (struct.isSetPropertyRatio()) {
        oprot.writeString(struct.propertyRatio);
      }
      if (struct.isSetDownPayment()) {
        oprot.writeDouble(struct.downPayment);
      }
      if (struct.isSetPurchaseDeposit()) {
        oprot.writeDouble(struct.purchaseDeposit);
      }
      if (struct.isSetPurchaseBalance()) {
        oprot.writeDouble(struct.purchaseBalance);
      }
      if (struct.isSetLandUse()) {
        oprot.writeString(struct.landUse);
      }
      if (struct.isSetEstateUse()) {
        oprot.writeString(struct.estateUse);
      }
      if (struct.isSetHouseAge()) {
        oprot.writeString(struct.houseAge);
      }
      if (struct.isSetPropertyLife()) {
        oprot.writeString(struct.propertyLife);
      }
      if (struct.isSetLandSurplusLife()) {
        oprot.writeString(struct.landSurplusLife);
      }
      if (struct.isSetUseArea()) {
        oprot.writeDouble(struct.useArea);
      }
      if (struct.isSetBizSpotInfo()) {
        struct.bizSpotInfo.write(oprot);
      }
      if (struct.isSetHouseRent()) {
        oprot.writeDouble(struct.houseRent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectEstate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.houseId = iprot.readI32();
        struct.setHouseIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.costMoney = iprot.readDouble();
        struct.setCostMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.area = iprot.readDouble();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(6)) {
        struct.purpose = iprot.readString();
        struct.setPurposeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tranasctionMoney = iprot.readDouble();
        struct.setTranasctionMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.evaluationPrice = iprot.readDouble();
        struct.setEvaluationPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.houseProvinceCode = iprot.readString();
        struct.setHouseProvinceCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.houseCityCode = iprot.readString();
        struct.setHouseCityCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.houseDistrictCode = iprot.readString();
        struct.setHouseDistrictCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.houseIds = new ArrayList<Integer>(_list93.size);
          int _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readI32();
            struct.houseIds.add(_elem94);
          }
        }
        struct.setHouseIdsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.houseAddress = iprot.readString();
        struct.setHouseAddressIsSet(true);
      }
      if (incoming.get(19)) {
        struct.evaluationNet = iprot.readDouble();
        struct.setEvaluationNetIsSet(true);
      }
      if (incoming.get(20)) {
        struct.propertyRatio = iprot.readString();
        struct.setPropertyRatioIsSet(true);
      }
      if (incoming.get(21)) {
        struct.downPayment = iprot.readDouble();
        struct.setDownPaymentIsSet(true);
      }
      if (incoming.get(22)) {
        struct.purchaseDeposit = iprot.readDouble();
        struct.setPurchaseDepositIsSet(true);
      }
      if (incoming.get(23)) {
        struct.purchaseBalance = iprot.readDouble();
        struct.setPurchaseBalanceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.landUse = iprot.readString();
        struct.setLandUseIsSet(true);
      }
      if (incoming.get(25)) {
        struct.estateUse = iprot.readString();
        struct.setEstateUseIsSet(true);
      }
      if (incoming.get(26)) {
        struct.houseAge = iprot.readString();
        struct.setHouseAgeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.propertyLife = iprot.readString();
        struct.setPropertyLifeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.landSurplusLife = iprot.readString();
        struct.setLandSurplusLifeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.useArea = iprot.readDouble();
        struct.setUseAreaIsSet(true);
      }
      if (incoming.get(30)) {
        struct.bizSpotInfo = new BizSpotInfo();
        struct.bizSpotInfo.read(iprot);
        struct.setBizSpotInfoIsSet(true);
      }
      if (incoming.get(31)) {
        struct.houseRent = iprot.readDouble();
        struct.setHouseRentIsSet(true);
      }
    }
  }

}


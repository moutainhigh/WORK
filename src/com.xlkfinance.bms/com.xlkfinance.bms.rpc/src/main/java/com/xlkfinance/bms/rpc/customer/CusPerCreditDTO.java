/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerCreditDTO implements org.apache.thrift.TBase<CusPerCreditDTO, CusPerCreditDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerCreditDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerCreditDTO");

  private static final org.apache.thrift.protocol.TField CUS_PER_CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerCredit", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CREDIT_ADDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAddrs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEFICITS_FIELD_DESC = new org.apache.thrift.protocol.TField("deficits", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SETTLES_FIELD_DESC = new org.apache.thrift.protocol.TField("settles", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerCreditDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerCreditDTOTupleSchemeFactory());
  }

  public CusPerCredit cusPerCredit; // required
  public List<CusPerCreditAddress> creditAddrs; // required
  public List<CusPerCreditDef> deficits; // required
  public List<CusPerCreditDef> settles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUS_PER_CREDIT((short)1, "cusPerCredit"),
    CREDIT_ADDRS((short)2, "creditAddrs"),
    DEFICITS((short)3, "deficits"),
    SETTLES((short)4, "settles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUS_PER_CREDIT
          return CUS_PER_CREDIT;
        case 2: // CREDIT_ADDRS
          return CREDIT_ADDRS;
        case 3: // DEFICITS
          return DEFICITS;
        case 4: // SETTLES
          return SETTLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUS_PER_CREDIT, new org.apache.thrift.meta_data.FieldMetaData("cusPerCredit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerCredit.class)));
    tmpMap.put(_Fields.CREDIT_ADDRS, new org.apache.thrift.meta_data.FieldMetaData("creditAddrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerCreditAddress.class))));
    tmpMap.put(_Fields.DEFICITS, new org.apache.thrift.meta_data.FieldMetaData("deficits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerCreditDef.class))));
    tmpMap.put(_Fields.SETTLES, new org.apache.thrift.meta_data.FieldMetaData("settles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerCreditDef.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerCreditDTO.class, metaDataMap);
  }

  public CusPerCreditDTO() {
  }

  public CusPerCreditDTO(
    CusPerCredit cusPerCredit,
    List<CusPerCreditAddress> creditAddrs,
    List<CusPerCreditDef> deficits,
    List<CusPerCreditDef> settles)
  {
    this();
    this.cusPerCredit = cusPerCredit;
    this.creditAddrs = creditAddrs;
    this.deficits = deficits;
    this.settles = settles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerCreditDTO(CusPerCreditDTO other) {
    if (other.isSetCusPerCredit()) {
      this.cusPerCredit = new CusPerCredit(other.cusPerCredit);
    }
    if (other.isSetCreditAddrs()) {
      List<CusPerCreditAddress> __this__creditAddrs = new ArrayList<CusPerCreditAddress>(other.creditAddrs.size());
      for (CusPerCreditAddress other_element : other.creditAddrs) {
        __this__creditAddrs.add(new CusPerCreditAddress(other_element));
      }
      this.creditAddrs = __this__creditAddrs;
    }
    if (other.isSetDeficits()) {
      List<CusPerCreditDef> __this__deficits = new ArrayList<CusPerCreditDef>(other.deficits.size());
      for (CusPerCreditDef other_element : other.deficits) {
        __this__deficits.add(new CusPerCreditDef(other_element));
      }
      this.deficits = __this__deficits;
    }
    if (other.isSetSettles()) {
      List<CusPerCreditDef> __this__settles = new ArrayList<CusPerCreditDef>(other.settles.size());
      for (CusPerCreditDef other_element : other.settles) {
        __this__settles.add(new CusPerCreditDef(other_element));
      }
      this.settles = __this__settles;
    }
  }

  public CusPerCreditDTO deepCopy() {
    return new CusPerCreditDTO(this);
  }

  @Override
  public void clear() {
    this.cusPerCredit = null;
    this.creditAddrs = null;
    this.deficits = null;
    this.settles = null;
  }

  public CusPerCredit getCusPerCredit() {
    return this.cusPerCredit;
  }

  public CusPerCreditDTO setCusPerCredit(CusPerCredit cusPerCredit) {
    this.cusPerCredit = cusPerCredit;
    return this;
  }

  public void unsetCusPerCredit() {
    this.cusPerCredit = null;
  }

  /** Returns true if field cusPerCredit is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerCredit() {
    return this.cusPerCredit != null;
  }

  public void setCusPerCreditIsSet(boolean value) {
    if (!value) {
      this.cusPerCredit = null;
    }
  }

  public int getCreditAddrsSize() {
    return (this.creditAddrs == null) ? 0 : this.creditAddrs.size();
  }

  public java.util.Iterator<CusPerCreditAddress> getCreditAddrsIterator() {
    return (this.creditAddrs == null) ? null : this.creditAddrs.iterator();
  }

  public void addToCreditAddrs(CusPerCreditAddress elem) {
    if (this.creditAddrs == null) {
      this.creditAddrs = new ArrayList<CusPerCreditAddress>();
    }
    this.creditAddrs.add(elem);
  }

  public List<CusPerCreditAddress> getCreditAddrs() {
    return this.creditAddrs;
  }

  public CusPerCreditDTO setCreditAddrs(List<CusPerCreditAddress> creditAddrs) {
    this.creditAddrs = creditAddrs;
    return this;
  }

  public void unsetCreditAddrs() {
    this.creditAddrs = null;
  }

  /** Returns true if field creditAddrs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAddrs() {
    return this.creditAddrs != null;
  }

  public void setCreditAddrsIsSet(boolean value) {
    if (!value) {
      this.creditAddrs = null;
    }
  }

  public int getDeficitsSize() {
    return (this.deficits == null) ? 0 : this.deficits.size();
  }

  public java.util.Iterator<CusPerCreditDef> getDeficitsIterator() {
    return (this.deficits == null) ? null : this.deficits.iterator();
  }

  public void addToDeficits(CusPerCreditDef elem) {
    if (this.deficits == null) {
      this.deficits = new ArrayList<CusPerCreditDef>();
    }
    this.deficits.add(elem);
  }

  public List<CusPerCreditDef> getDeficits() {
    return this.deficits;
  }

  public CusPerCreditDTO setDeficits(List<CusPerCreditDef> deficits) {
    this.deficits = deficits;
    return this;
  }

  public void unsetDeficits() {
    this.deficits = null;
  }

  /** Returns true if field deficits is set (has been assigned a value) and false otherwise */
  public boolean isSetDeficits() {
    return this.deficits != null;
  }

  public void setDeficitsIsSet(boolean value) {
    if (!value) {
      this.deficits = null;
    }
  }

  public int getSettlesSize() {
    return (this.settles == null) ? 0 : this.settles.size();
  }

  public java.util.Iterator<CusPerCreditDef> getSettlesIterator() {
    return (this.settles == null) ? null : this.settles.iterator();
  }

  public void addToSettles(CusPerCreditDef elem) {
    if (this.settles == null) {
      this.settles = new ArrayList<CusPerCreditDef>();
    }
    this.settles.add(elem);
  }

  public List<CusPerCreditDef> getSettles() {
    return this.settles;
  }

  public CusPerCreditDTO setSettles(List<CusPerCreditDef> settles) {
    this.settles = settles;
    return this;
  }

  public void unsetSettles() {
    this.settles = null;
  }

  /** Returns true if field settles is set (has been assigned a value) and false otherwise */
  public boolean isSetSettles() {
    return this.settles != null;
  }

  public void setSettlesIsSet(boolean value) {
    if (!value) {
      this.settles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUS_PER_CREDIT:
      if (value == null) {
        unsetCusPerCredit();
      } else {
        setCusPerCredit((CusPerCredit)value);
      }
      break;

    case CREDIT_ADDRS:
      if (value == null) {
        unsetCreditAddrs();
      } else {
        setCreditAddrs((List<CusPerCreditAddress>)value);
      }
      break;

    case DEFICITS:
      if (value == null) {
        unsetDeficits();
      } else {
        setDeficits((List<CusPerCreditDef>)value);
      }
      break;

    case SETTLES:
      if (value == null) {
        unsetSettles();
      } else {
        setSettles((List<CusPerCreditDef>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUS_PER_CREDIT:
      return getCusPerCredit();

    case CREDIT_ADDRS:
      return getCreditAddrs();

    case DEFICITS:
      return getDeficits();

    case SETTLES:
      return getSettles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUS_PER_CREDIT:
      return isSetCusPerCredit();
    case CREDIT_ADDRS:
      return isSetCreditAddrs();
    case DEFICITS:
      return isSetDeficits();
    case SETTLES:
      return isSetSettles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerCreditDTO)
      return this.equals((CusPerCreditDTO)that);
    return false;
  }

  public boolean equals(CusPerCreditDTO that) {
    if (that == null)
      return false;

    boolean this_present_cusPerCredit = true && this.isSetCusPerCredit();
    boolean that_present_cusPerCredit = true && that.isSetCusPerCredit();
    if (this_present_cusPerCredit || that_present_cusPerCredit) {
      if (!(this_present_cusPerCredit && that_present_cusPerCredit))
        return false;
      if (!this.cusPerCredit.equals(that.cusPerCredit))
        return false;
    }

    boolean this_present_creditAddrs = true && this.isSetCreditAddrs();
    boolean that_present_creditAddrs = true && that.isSetCreditAddrs();
    if (this_present_creditAddrs || that_present_creditAddrs) {
      if (!(this_present_creditAddrs && that_present_creditAddrs))
        return false;
      if (!this.creditAddrs.equals(that.creditAddrs))
        return false;
    }

    boolean this_present_deficits = true && this.isSetDeficits();
    boolean that_present_deficits = true && that.isSetDeficits();
    if (this_present_deficits || that_present_deficits) {
      if (!(this_present_deficits && that_present_deficits))
        return false;
      if (!this.deficits.equals(that.deficits))
        return false;
    }

    boolean this_present_settles = true && this.isSetSettles();
    boolean that_present_settles = true && that.isSetSettles();
    if (this_present_settles || that_present_settles) {
      if (!(this_present_settles && that_present_settles))
        return false;
      if (!this.settles.equals(that.settles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cusPerCredit = true && (isSetCusPerCredit());
    list.add(present_cusPerCredit);
    if (present_cusPerCredit)
      list.add(cusPerCredit);

    boolean present_creditAddrs = true && (isSetCreditAddrs());
    list.add(present_creditAddrs);
    if (present_creditAddrs)
      list.add(creditAddrs);

    boolean present_deficits = true && (isSetDeficits());
    list.add(present_deficits);
    if (present_deficits)
      list.add(deficits);

    boolean present_settles = true && (isSetSettles());
    list.add(present_settles);
    if (present_settles)
      list.add(settles);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerCreditDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCusPerCredit()).compareTo(other.isSetCusPerCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerCredit, other.cusPerCredit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAddrs()).compareTo(other.isSetCreditAddrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAddrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAddrs, other.creditAddrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeficits()).compareTo(other.isSetDeficits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeficits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deficits, other.deficits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettles()).compareTo(other.isSetSettles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settles, other.settles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerCreditDTO(");
    boolean first = true;

    sb.append("cusPerCredit:");
    if (this.cusPerCredit == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerCredit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAddrs:");
    if (this.creditAddrs == null) {
      sb.append("null");
    } else {
      sb.append(this.creditAddrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deficits:");
    if (this.deficits == null) {
      sb.append("null");
    } else {
      sb.append(this.deficits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settles:");
    if (this.settles == null) {
      sb.append("null");
    } else {
      sb.append(this.settles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerCredit != null) {
      cusPerCredit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerCreditDTOStandardSchemeFactory implements SchemeFactory {
    public CusPerCreditDTOStandardScheme getScheme() {
      return new CusPerCreditDTOStandardScheme();
    }
  }

  private static class CusPerCreditDTOStandardScheme extends StandardScheme<CusPerCreditDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerCreditDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUS_PER_CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerCredit = new CusPerCredit();
              struct.cusPerCredit.read(iprot);
              struct.setCusPerCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREDIT_ADDRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.creditAddrs = new ArrayList<CusPerCreditAddress>(_list136.size);
                CusPerCreditAddress _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = new CusPerCreditAddress();
                  _elem137.read(iprot);
                  struct.creditAddrs.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setCreditAddrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEFICITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.deficits = new ArrayList<CusPerCreditDef>(_list139.size);
                CusPerCreditDef _elem140;
                for (int _i141 = 0; _i141 < _list139.size; ++_i141)
                {
                  _elem140 = new CusPerCreditDef();
                  _elem140.read(iprot);
                  struct.deficits.add(_elem140);
                }
                iprot.readListEnd();
              }
              struct.setDeficitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SETTLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.settles = new ArrayList<CusPerCreditDef>(_list142.size);
                CusPerCreditDef _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = new CusPerCreditDef();
                  _elem143.read(iprot);
                  struct.settles.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setSettlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerCreditDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cusPerCredit != null) {
        oprot.writeFieldBegin(CUS_PER_CREDIT_FIELD_DESC);
        struct.cusPerCredit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.creditAddrs != null) {
        oprot.writeFieldBegin(CREDIT_ADDRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.creditAddrs.size()));
          for (CusPerCreditAddress _iter145 : struct.creditAddrs)
          {
            _iter145.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.deficits != null) {
        oprot.writeFieldBegin(DEFICITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.deficits.size()));
          for (CusPerCreditDef _iter146 : struct.deficits)
          {
            _iter146.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.settles != null) {
        oprot.writeFieldBegin(SETTLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.settles.size()));
          for (CusPerCreditDef _iter147 : struct.settles)
          {
            _iter147.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerCreditDTOTupleSchemeFactory implements SchemeFactory {
    public CusPerCreditDTOTupleScheme getScheme() {
      return new CusPerCreditDTOTupleScheme();
    }
  }

  private static class CusPerCreditDTOTupleScheme extends TupleScheme<CusPerCreditDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerCreditDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCusPerCredit()) {
        optionals.set(0);
      }
      if (struct.isSetCreditAddrs()) {
        optionals.set(1);
      }
      if (struct.isSetDeficits()) {
        optionals.set(2);
      }
      if (struct.isSetSettles()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCusPerCredit()) {
        struct.cusPerCredit.write(oprot);
      }
      if (struct.isSetCreditAddrs()) {
        {
          oprot.writeI32(struct.creditAddrs.size());
          for (CusPerCreditAddress _iter148 : struct.creditAddrs)
          {
            _iter148.write(oprot);
          }
        }
      }
      if (struct.isSetDeficits()) {
        {
          oprot.writeI32(struct.deficits.size());
          for (CusPerCreditDef _iter149 : struct.deficits)
          {
            _iter149.write(oprot);
          }
        }
      }
      if (struct.isSetSettles()) {
        {
          oprot.writeI32(struct.settles.size());
          for (CusPerCreditDef _iter150 : struct.settles)
          {
            _iter150.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerCreditDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.cusPerCredit = new CusPerCredit();
        struct.cusPerCredit.read(iprot);
        struct.setCusPerCreditIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.creditAddrs = new ArrayList<CusPerCreditAddress>(_list151.size);
          CusPerCreditAddress _elem152;
          for (int _i153 = 0; _i153 < _list151.size; ++_i153)
          {
            _elem152 = new CusPerCreditAddress();
            _elem152.read(iprot);
            struct.creditAddrs.add(_elem152);
          }
        }
        struct.setCreditAddrsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.deficits = new ArrayList<CusPerCreditDef>(_list154.size);
          CusPerCreditDef _elem155;
          for (int _i156 = 0; _i156 < _list154.size; ++_i156)
          {
            _elem155 = new CusPerCreditDef();
            _elem155.read(iprot);
            struct.deficits.add(_elem155);
          }
        }
        struct.setDeficitsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.settles = new ArrayList<CusPerCreditDef>(_list157.size);
          CusPerCreditDef _elem158;
          for (int _i159 = 0; _i159 < _list157.size; ++_i159)
          {
            _elem158 = new CusPerCreditDef();
            _elem158.read(iprot);
            struct.settles.add(_elem158);
          }
        }
        struct.setSettlesIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RepaymentIndexDTO implements org.apache.thrift.TBase<RepaymentIndexDTO, RepaymentIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentIndexDTO");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REPAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REAL_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REAL_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("realRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REPAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeConfirm", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_PAYMENT_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeePaymentWay", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeAccountNo", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField RECE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RECE_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("receDateStart", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField RECE_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("receDateEnd", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField APPLY_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("applyLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentIndexDTOTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public int repaymentId; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public double realRepaymentMoney; // required
  public String realRepaymentDate; // required
  public double planRepaymentMoney; // required
  public String planRepaymentDate; // required
  public int repaymentStatus; // required
  public double overdueFee; // required
  public int overdueDay; // required
  public int overdueFeeConfirm; // required
  public int projectSource; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int overdueFeePaymentWay; // required
  public String overdueFeeAccountNo; // required
  public String acctName; // required
  public String receDate; // required
  public String receDateStart; // required
  public String receDateEnd; // required
  public double applyLoanMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    USER_IDS((short)3, "userIds"),
    REPAYMENT_ID((short)4, "repaymentId"),
    PROJECT_ID((short)5, "projectId"),
    PROJECT_NUMBER((short)6, "projectNumber"),
    PROJECT_NAME((short)7, "projectName"),
    REAL_REPAYMENT_MONEY((short)8, "realRepaymentMoney"),
    REAL_REPAYMENT_DATE((short)9, "realRepaymentDate"),
    PLAN_REPAYMENT_MONEY((short)10, "planRepaymentMoney"),
    PLAN_REPAYMENT_DATE((short)11, "planRepaymentDate"),
    REPAYMENT_STATUS((short)12, "repaymentStatus"),
    OVERDUE_FEE((short)13, "overdueFee"),
    OVERDUE_DAY((short)14, "overdueDay"),
    OVERDUE_FEE_CONFIRM((short)15, "overdueFeeConfirm"),
    PROJECT_SOURCE((short)16, "projectSource"),
    HOUSE_NAME((short)17, "houseName"),
    BUYER_NAME((short)18, "buyerName"),
    SELLER_NAME((short)19, "sellerName"),
    OVERDUE_FEE_PAYMENT_WAY((short)20, "overdueFeePaymentWay"),
    OVERDUE_FEE_ACCOUNT_NO((short)21, "overdueFeeAccountNo"),
    ACCT_NAME((short)22, "acctName"),
    RECE_DATE((short)23, "receDate"),
    RECE_DATE_START((short)24, "receDateStart"),
    RECE_DATE_END((short)25, "receDateEnd"),
    APPLY_LOAN_MONEY((short)26, "applyLoanMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // USER_IDS
          return USER_IDS;
        case 4: // REPAYMENT_ID
          return REPAYMENT_ID;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 7: // PROJECT_NAME
          return PROJECT_NAME;
        case 8: // REAL_REPAYMENT_MONEY
          return REAL_REPAYMENT_MONEY;
        case 9: // REAL_REPAYMENT_DATE
          return REAL_REPAYMENT_DATE;
        case 10: // PLAN_REPAYMENT_MONEY
          return PLAN_REPAYMENT_MONEY;
        case 11: // PLAN_REPAYMENT_DATE
          return PLAN_REPAYMENT_DATE;
        case 12: // REPAYMENT_STATUS
          return REPAYMENT_STATUS;
        case 13: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 14: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 15: // OVERDUE_FEE_CONFIRM
          return OVERDUE_FEE_CONFIRM;
        case 16: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 17: // HOUSE_NAME
          return HOUSE_NAME;
        case 18: // BUYER_NAME
          return BUYER_NAME;
        case 19: // SELLER_NAME
          return SELLER_NAME;
        case 20: // OVERDUE_FEE_PAYMENT_WAY
          return OVERDUE_FEE_PAYMENT_WAY;
        case 21: // OVERDUE_FEE_ACCOUNT_NO
          return OVERDUE_FEE_ACCOUNT_NO;
        case 22: // ACCT_NAME
          return ACCT_NAME;
        case 23: // RECE_DATE
          return RECE_DATE;
        case 24: // RECE_DATE_START
          return RECE_DATE_START;
        case 25: // RECE_DATE_END
          return RECE_DATE_END;
        case 26: // APPLY_LOAN_MONEY
          return APPLY_LOAN_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __REPAYMENTID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __REALREPAYMENTMONEY_ISSET_ID = 4;
  private static final int __PLANREPAYMENTMONEY_ISSET_ID = 5;
  private static final int __REPAYMENTSTATUS_ISSET_ID = 6;
  private static final int __OVERDUEFEE_ISSET_ID = 7;
  private static final int __OVERDUEDAY_ISSET_ID = 8;
  private static final int __OVERDUEFEECONFIRM_ISSET_ID = 9;
  private static final int __PROJECTSOURCE_ISSET_ID = 10;
  private static final int __OVERDUEFEEPAYMENTWAY_ISSET_ID = 11;
  private static final int __APPLYLOANMONEY_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REPAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("realRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FEE_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_FEE_PAYMENT_WAY, new org.apache.thrift.meta_data.FieldMetaData("overdueFeePaymentWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FEE_ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeAccountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE, new org.apache.thrift.meta_data.FieldMetaData("receDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("receDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("receDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("applyLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentIndexDTO.class, metaDataMap);
  }

  public RepaymentIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public RepaymentIndexDTO(
    int page,
    int rows,
    List<Integer> userIds,
    int repaymentId,
    int projectId,
    String projectNumber,
    String projectName,
    double realRepaymentMoney,
    String realRepaymentDate,
    double planRepaymentMoney,
    String planRepaymentDate,
    int repaymentStatus,
    double overdueFee,
    int overdueDay,
    int overdueFeeConfirm,
    int projectSource,
    String houseName,
    String buyerName,
    String sellerName,
    int overdueFeePaymentWay,
    String overdueFeeAccountNo,
    String acctName,
    String receDate,
    String receDateStart,
    String receDateEnd,
    double applyLoanMoney)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.realRepaymentMoney = realRepaymentMoney;
    setRealRepaymentMoneyIsSet(true);
    this.realRepaymentDate = realRepaymentDate;
    this.planRepaymentMoney = planRepaymentMoney;
    setPlanRepaymentMoneyIsSet(true);
    this.planRepaymentDate = planRepaymentDate;
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.overdueFeeConfirm = overdueFeeConfirm;
    setOverdueFeeConfirmIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.overdueFeePaymentWay = overdueFeePaymentWay;
    setOverdueFeePaymentWayIsSet(true);
    this.overdueFeeAccountNo = overdueFeeAccountNo;
    this.acctName = acctName;
    this.receDate = receDate;
    this.receDateStart = receDateStart;
    this.receDateEnd = receDateEnd;
    this.applyLoanMoney = applyLoanMoney;
    setApplyLoanMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentIndexDTO(RepaymentIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.repaymentId = other.repaymentId;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.realRepaymentMoney = other.realRepaymentMoney;
    if (other.isSetRealRepaymentDate()) {
      this.realRepaymentDate = other.realRepaymentDate;
    }
    this.planRepaymentMoney = other.planRepaymentMoney;
    if (other.isSetPlanRepaymentDate()) {
      this.planRepaymentDate = other.planRepaymentDate;
    }
    this.repaymentStatus = other.repaymentStatus;
    this.overdueFee = other.overdueFee;
    this.overdueDay = other.overdueDay;
    this.overdueFeeConfirm = other.overdueFeeConfirm;
    this.projectSource = other.projectSource;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.overdueFeePaymentWay = other.overdueFeePaymentWay;
    if (other.isSetOverdueFeeAccountNo()) {
      this.overdueFeeAccountNo = other.overdueFeeAccountNo;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetReceDate()) {
      this.receDate = other.receDate;
    }
    if (other.isSetReceDateStart()) {
      this.receDateStart = other.receDateStart;
    }
    if (other.isSetReceDateEnd()) {
      this.receDateEnd = other.receDateEnd;
    }
    this.applyLoanMoney = other.applyLoanMoney;
  }

  public RepaymentIndexDTO deepCopy() {
    return new RepaymentIndexDTO(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    setRepaymentIdIsSet(false);
    this.repaymentId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setRealRepaymentMoneyIsSet(false);
    this.realRepaymentMoney = 0.0;
    this.realRepaymentDate = null;
    setPlanRepaymentMoneyIsSet(false);
    this.planRepaymentMoney = 0.0;
    this.planRepaymentDate = null;
    setRepaymentStatusIsSet(false);
    this.repaymentStatus = 0;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    setOverdueFeeConfirmIsSet(false);
    this.overdueFeeConfirm = 0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setOverdueFeePaymentWayIsSet(false);
    this.overdueFeePaymentWay = 0;
    this.overdueFeeAccountNo = null;
    this.acctName = null;
    this.receDate = null;
    this.receDateStart = null;
    this.receDateEnd = null;
    setApplyLoanMoneyIsSet(false);
    this.applyLoanMoney = 0.0;
  }

  public int getPage() {
    return this.page;
  }

  public RepaymentIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RepaymentIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RepaymentIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getRepaymentId() {
    return this.repaymentId;
  }

  public RepaymentIndexDTO setRepaymentId(int repaymentId) {
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    return this;
  }

  public void unsetRepaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  /** Returns true if field repaymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  public void setRepaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RepaymentIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepaymentIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public double getRealRepaymentMoney() {
    return this.realRepaymentMoney;
  }

  public RepaymentIndexDTO setRealRepaymentMoney(double realRepaymentMoney) {
    this.realRepaymentMoney = realRepaymentMoney;
    setRealRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRealRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field realRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID);
  }

  public void setRealRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALREPAYMENTMONEY_ISSET_ID, value);
  }

  public String getRealRepaymentDate() {
    return this.realRepaymentDate;
  }

  public RepaymentIndexDTO setRealRepaymentDate(String realRepaymentDate) {
    this.realRepaymentDate = realRepaymentDate;
    return this;
  }

  public void unsetRealRepaymentDate() {
    this.realRepaymentDate = null;
  }

  /** Returns true if field realRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRealRepaymentDate() {
    return this.realRepaymentDate != null;
  }

  public void setRealRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.realRepaymentDate = null;
    }
  }

  public double getPlanRepaymentMoney() {
    return this.planRepaymentMoney;
  }

  public RepaymentIndexDTO setPlanRepaymentMoney(double planRepaymentMoney) {
    this.planRepaymentMoney = planRepaymentMoney;
    setPlanRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetPlanRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field planRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID);
  }

  public void setPlanRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANREPAYMENTMONEY_ISSET_ID, value);
  }

  public String getPlanRepaymentDate() {
    return this.planRepaymentDate;
  }

  public RepaymentIndexDTO setPlanRepaymentDate(String planRepaymentDate) {
    this.planRepaymentDate = planRepaymentDate;
    return this;
  }

  public void unsetPlanRepaymentDate() {
    this.planRepaymentDate = null;
  }

  /** Returns true if field planRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentDate() {
    return this.planRepaymentDate != null;
  }

  public void setPlanRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentDate = null;
    }
  }

  public int getRepaymentStatus() {
    return this.repaymentStatus;
  }

  public RepaymentIndexDTO setRepaymentStatus(int repaymentStatus) {
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    return this;
  }

  public void unsetRepaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field repaymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  public void setRepaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID, value);
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public RepaymentIndexDTO setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public RepaymentIndexDTO setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public int getOverdueFeeConfirm() {
    return this.overdueFeeConfirm;
  }

  public RepaymentIndexDTO setOverdueFeeConfirm(int overdueFeeConfirm) {
    this.overdueFeeConfirm = overdueFeeConfirm;
    setOverdueFeeConfirmIsSet(true);
    return this;
  }

  public void unsetOverdueFeeConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEECONFIRM_ISSET_ID);
  }

  /** Returns true if field overdueFeeConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFeeConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEECONFIRM_ISSET_ID);
  }

  public void setOverdueFeeConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEECONFIRM_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public RepaymentIndexDTO setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public RepaymentIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public RepaymentIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public RepaymentIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getOverdueFeePaymentWay() {
    return this.overdueFeePaymentWay;
  }

  public RepaymentIndexDTO setOverdueFeePaymentWay(int overdueFeePaymentWay) {
    this.overdueFeePaymentWay = overdueFeePaymentWay;
    setOverdueFeePaymentWayIsSet(true);
    return this;
  }

  public void unsetOverdueFeePaymentWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEEPAYMENTWAY_ISSET_ID);
  }

  /** Returns true if field overdueFeePaymentWay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFeePaymentWay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEEPAYMENTWAY_ISSET_ID);
  }

  public void setOverdueFeePaymentWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEEPAYMENTWAY_ISSET_ID, value);
  }

  public String getOverdueFeeAccountNo() {
    return this.overdueFeeAccountNo;
  }

  public RepaymentIndexDTO setOverdueFeeAccountNo(String overdueFeeAccountNo) {
    this.overdueFeeAccountNo = overdueFeeAccountNo;
    return this;
  }

  public void unsetOverdueFeeAccountNo() {
    this.overdueFeeAccountNo = null;
  }

  /** Returns true if field overdueFeeAccountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFeeAccountNo() {
    return this.overdueFeeAccountNo != null;
  }

  public void setOverdueFeeAccountNoIsSet(boolean value) {
    if (!value) {
      this.overdueFeeAccountNo = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public RepaymentIndexDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getReceDate() {
    return this.receDate;
  }

  public RepaymentIndexDTO setReceDate(String receDate) {
    this.receDate = receDate;
    return this;
  }

  public void unsetReceDate() {
    this.receDate = null;
  }

  /** Returns true if field receDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDate() {
    return this.receDate != null;
  }

  public void setReceDateIsSet(boolean value) {
    if (!value) {
      this.receDate = null;
    }
  }

  public String getReceDateStart() {
    return this.receDateStart;
  }

  public RepaymentIndexDTO setReceDateStart(String receDateStart) {
    this.receDateStart = receDateStart;
    return this;
  }

  public void unsetReceDateStart() {
    this.receDateStart = null;
  }

  /** Returns true if field receDateStart is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDateStart() {
    return this.receDateStart != null;
  }

  public void setReceDateStartIsSet(boolean value) {
    if (!value) {
      this.receDateStart = null;
    }
  }

  public String getReceDateEnd() {
    return this.receDateEnd;
  }

  public RepaymentIndexDTO setReceDateEnd(String receDateEnd) {
    this.receDateEnd = receDateEnd;
    return this;
  }

  public void unsetReceDateEnd() {
    this.receDateEnd = null;
  }

  /** Returns true if field receDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDateEnd() {
    return this.receDateEnd != null;
  }

  public void setReceDateEndIsSet(boolean value) {
    if (!value) {
      this.receDateEnd = null;
    }
  }

  public double getApplyLoanMoney() {
    return this.applyLoanMoney;
  }

  public RepaymentIndexDTO setApplyLoanMoney(double applyLoanMoney) {
    this.applyLoanMoney = applyLoanMoney;
    setApplyLoanMoneyIsSet(true);
    return this;
  }

  public void unsetApplyLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID);
  }

  /** Returns true if field applyLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID);
  }

  public void setApplyLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case REPAYMENT_ID:
      if (value == null) {
        unsetRepaymentId();
      } else {
        setRepaymentId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case REAL_REPAYMENT_MONEY:
      if (value == null) {
        unsetRealRepaymentMoney();
      } else {
        setRealRepaymentMoney((Double)value);
      }
      break;

    case REAL_REPAYMENT_DATE:
      if (value == null) {
        unsetRealRepaymentDate();
      } else {
        setRealRepaymentDate((String)value);
      }
      break;

    case PLAN_REPAYMENT_MONEY:
      if (value == null) {
        unsetPlanRepaymentMoney();
      } else {
        setPlanRepaymentMoney((Double)value);
      }
      break;

    case PLAN_REPAYMENT_DATE:
      if (value == null) {
        unsetPlanRepaymentDate();
      } else {
        setPlanRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_STATUS:
      if (value == null) {
        unsetRepaymentStatus();
      } else {
        setRepaymentStatus((Integer)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case OVERDUE_FEE_CONFIRM:
      if (value == null) {
        unsetOverdueFeeConfirm();
      } else {
        setOverdueFeeConfirm((Integer)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case OVERDUE_FEE_PAYMENT_WAY:
      if (value == null) {
        unsetOverdueFeePaymentWay();
      } else {
        setOverdueFeePaymentWay((Integer)value);
      }
      break;

    case OVERDUE_FEE_ACCOUNT_NO:
      if (value == null) {
        unsetOverdueFeeAccountNo();
      } else {
        setOverdueFeeAccountNo((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case RECE_DATE:
      if (value == null) {
        unsetReceDate();
      } else {
        setReceDate((String)value);
      }
      break;

    case RECE_DATE_START:
      if (value == null) {
        unsetReceDateStart();
      } else {
        setReceDateStart((String)value);
      }
      break;

    case RECE_DATE_END:
      if (value == null) {
        unsetReceDateEnd();
      } else {
        setReceDateEnd((String)value);
      }
      break;

    case APPLY_LOAN_MONEY:
      if (value == null) {
        unsetApplyLoanMoney();
      } else {
        setApplyLoanMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case REPAYMENT_ID:
      return Integer.valueOf(getRepaymentId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case REAL_REPAYMENT_MONEY:
      return Double.valueOf(getRealRepaymentMoney());

    case REAL_REPAYMENT_DATE:
      return getRealRepaymentDate();

    case PLAN_REPAYMENT_MONEY:
      return Double.valueOf(getPlanRepaymentMoney());

    case PLAN_REPAYMENT_DATE:
      return getPlanRepaymentDate();

    case REPAYMENT_STATUS:
      return Integer.valueOf(getRepaymentStatus());

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case OVERDUE_FEE_CONFIRM:
      return Integer.valueOf(getOverdueFeeConfirm());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case OVERDUE_FEE_PAYMENT_WAY:
      return Integer.valueOf(getOverdueFeePaymentWay());

    case OVERDUE_FEE_ACCOUNT_NO:
      return getOverdueFeeAccountNo();

    case ACCT_NAME:
      return getAcctName();

    case RECE_DATE:
      return getReceDate();

    case RECE_DATE_START:
      return getReceDateStart();

    case RECE_DATE_END:
      return getReceDateEnd();

    case APPLY_LOAN_MONEY:
      return Double.valueOf(getApplyLoanMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case REPAYMENT_ID:
      return isSetRepaymentId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case REAL_REPAYMENT_MONEY:
      return isSetRealRepaymentMoney();
    case REAL_REPAYMENT_DATE:
      return isSetRealRepaymentDate();
    case PLAN_REPAYMENT_MONEY:
      return isSetPlanRepaymentMoney();
    case PLAN_REPAYMENT_DATE:
      return isSetPlanRepaymentDate();
    case REPAYMENT_STATUS:
      return isSetRepaymentStatus();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case OVERDUE_FEE_CONFIRM:
      return isSetOverdueFeeConfirm();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case OVERDUE_FEE_PAYMENT_WAY:
      return isSetOverdueFeePaymentWay();
    case OVERDUE_FEE_ACCOUNT_NO:
      return isSetOverdueFeeAccountNo();
    case ACCT_NAME:
      return isSetAcctName();
    case RECE_DATE:
      return isSetReceDate();
    case RECE_DATE_START:
      return isSetReceDateStart();
    case RECE_DATE_END:
      return isSetReceDateEnd();
    case APPLY_LOAN_MONEY:
      return isSetApplyLoanMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentIndexDTO)
      return this.equals((RepaymentIndexDTO)that);
    return false;
  }

  public boolean equals(RepaymentIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_repaymentId = true;
    boolean that_present_repaymentId = true;
    if (this_present_repaymentId || that_present_repaymentId) {
      if (!(this_present_repaymentId && that_present_repaymentId))
        return false;
      if (this.repaymentId != that.repaymentId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_realRepaymentMoney = true;
    boolean that_present_realRepaymentMoney = true;
    if (this_present_realRepaymentMoney || that_present_realRepaymentMoney) {
      if (!(this_present_realRepaymentMoney && that_present_realRepaymentMoney))
        return false;
      if (this.realRepaymentMoney != that.realRepaymentMoney)
        return false;
    }

    boolean this_present_realRepaymentDate = true && this.isSetRealRepaymentDate();
    boolean that_present_realRepaymentDate = true && that.isSetRealRepaymentDate();
    if (this_present_realRepaymentDate || that_present_realRepaymentDate) {
      if (!(this_present_realRepaymentDate && that_present_realRepaymentDate))
        return false;
      if (!this.realRepaymentDate.equals(that.realRepaymentDate))
        return false;
    }

    boolean this_present_planRepaymentMoney = true;
    boolean that_present_planRepaymentMoney = true;
    if (this_present_planRepaymentMoney || that_present_planRepaymentMoney) {
      if (!(this_present_planRepaymentMoney && that_present_planRepaymentMoney))
        return false;
      if (this.planRepaymentMoney != that.planRepaymentMoney)
        return false;
    }

    boolean this_present_planRepaymentDate = true && this.isSetPlanRepaymentDate();
    boolean that_present_planRepaymentDate = true && that.isSetPlanRepaymentDate();
    if (this_present_planRepaymentDate || that_present_planRepaymentDate) {
      if (!(this_present_planRepaymentDate && that_present_planRepaymentDate))
        return false;
      if (!this.planRepaymentDate.equals(that.planRepaymentDate))
        return false;
    }

    boolean this_present_repaymentStatus = true;
    boolean that_present_repaymentStatus = true;
    if (this_present_repaymentStatus || that_present_repaymentStatus) {
      if (!(this_present_repaymentStatus && that_present_repaymentStatus))
        return false;
      if (this.repaymentStatus != that.repaymentStatus)
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_overdueFeeConfirm = true;
    boolean that_present_overdueFeeConfirm = true;
    if (this_present_overdueFeeConfirm || that_present_overdueFeeConfirm) {
      if (!(this_present_overdueFeeConfirm && that_present_overdueFeeConfirm))
        return false;
      if (this.overdueFeeConfirm != that.overdueFeeConfirm)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_overdueFeePaymentWay = true;
    boolean that_present_overdueFeePaymentWay = true;
    if (this_present_overdueFeePaymentWay || that_present_overdueFeePaymentWay) {
      if (!(this_present_overdueFeePaymentWay && that_present_overdueFeePaymentWay))
        return false;
      if (this.overdueFeePaymentWay != that.overdueFeePaymentWay)
        return false;
    }

    boolean this_present_overdueFeeAccountNo = true && this.isSetOverdueFeeAccountNo();
    boolean that_present_overdueFeeAccountNo = true && that.isSetOverdueFeeAccountNo();
    if (this_present_overdueFeeAccountNo || that_present_overdueFeeAccountNo) {
      if (!(this_present_overdueFeeAccountNo && that_present_overdueFeeAccountNo))
        return false;
      if (!this.overdueFeeAccountNo.equals(that.overdueFeeAccountNo))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_receDate = true && this.isSetReceDate();
    boolean that_present_receDate = true && that.isSetReceDate();
    if (this_present_receDate || that_present_receDate) {
      if (!(this_present_receDate && that_present_receDate))
        return false;
      if (!this.receDate.equals(that.receDate))
        return false;
    }

    boolean this_present_receDateStart = true && this.isSetReceDateStart();
    boolean that_present_receDateStart = true && that.isSetReceDateStart();
    if (this_present_receDateStart || that_present_receDateStart) {
      if (!(this_present_receDateStart && that_present_receDateStart))
        return false;
      if (!this.receDateStart.equals(that.receDateStart))
        return false;
    }

    boolean this_present_receDateEnd = true && this.isSetReceDateEnd();
    boolean that_present_receDateEnd = true && that.isSetReceDateEnd();
    if (this_present_receDateEnd || that_present_receDateEnd) {
      if (!(this_present_receDateEnd && that_present_receDateEnd))
        return false;
      if (!this.receDateEnd.equals(that.receDateEnd))
        return false;
    }

    boolean this_present_applyLoanMoney = true;
    boolean that_present_applyLoanMoney = true;
    if (this_present_applyLoanMoney || that_present_applyLoanMoney) {
      if (!(this_present_applyLoanMoney && that_present_applyLoanMoney))
        return false;
      if (this.applyLoanMoney != that.applyLoanMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_repaymentId = true;
    list.add(present_repaymentId);
    if (present_repaymentId)
      list.add(repaymentId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_realRepaymentMoney = true;
    list.add(present_realRepaymentMoney);
    if (present_realRepaymentMoney)
      list.add(realRepaymentMoney);

    boolean present_realRepaymentDate = true && (isSetRealRepaymentDate());
    list.add(present_realRepaymentDate);
    if (present_realRepaymentDate)
      list.add(realRepaymentDate);

    boolean present_planRepaymentMoney = true;
    list.add(present_planRepaymentMoney);
    if (present_planRepaymentMoney)
      list.add(planRepaymentMoney);

    boolean present_planRepaymentDate = true && (isSetPlanRepaymentDate());
    list.add(present_planRepaymentDate);
    if (present_planRepaymentDate)
      list.add(planRepaymentDate);

    boolean present_repaymentStatus = true;
    list.add(present_repaymentStatus);
    if (present_repaymentStatus)
      list.add(repaymentStatus);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_overdueFeeConfirm = true;
    list.add(present_overdueFeeConfirm);
    if (present_overdueFeeConfirm)
      list.add(overdueFeeConfirm);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_overdueFeePaymentWay = true;
    list.add(present_overdueFeePaymentWay);
    if (present_overdueFeePaymentWay)
      list.add(overdueFeePaymentWay);

    boolean present_overdueFeeAccountNo = true && (isSetOverdueFeeAccountNo());
    list.add(present_overdueFeeAccountNo);
    if (present_overdueFeeAccountNo)
      list.add(overdueFeeAccountNo);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_receDate = true && (isSetReceDate());
    list.add(present_receDate);
    if (present_receDate)
      list.add(receDate);

    boolean present_receDateStart = true && (isSetReceDateStart());
    list.add(present_receDateStart);
    if (present_receDateStart)
      list.add(receDateStart);

    boolean present_receDateEnd = true && (isSetReceDateEnd());
    list.add(present_receDateEnd);
    if (present_receDateEnd)
      list.add(receDateEnd);

    boolean present_applyLoanMoney = true;
    list.add(present_applyLoanMoney);
    if (present_applyLoanMoney)
      list.add(applyLoanMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentId()).compareTo(other.isSetRepaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentId, other.repaymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealRepaymentMoney()).compareTo(other.isSetRealRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realRepaymentMoney, other.realRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealRepaymentDate()).compareTo(other.isSetRealRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realRepaymentDate, other.realRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentMoney()).compareTo(other.isSetPlanRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentMoney, other.planRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentDate()).compareTo(other.isSetPlanRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentDate, other.planRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentStatus()).compareTo(other.isSetRepaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentStatus, other.repaymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFeeConfirm()).compareTo(other.isSetOverdueFeeConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFeeConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeConfirm, other.overdueFeeConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFeePaymentWay()).compareTo(other.isSetOverdueFeePaymentWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFeePaymentWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeePaymentWay, other.overdueFeePaymentWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFeeAccountNo()).compareTo(other.isSetOverdueFeeAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFeeAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeAccountNo, other.overdueFeeAccountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDate()).compareTo(other.isSetReceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDate, other.receDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDateStart()).compareTo(other.isSetReceDateStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDateStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDateStart, other.receDateStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDateEnd()).compareTo(other.isSetReceDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDateEnd, other.receDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyLoanMoney()).compareTo(other.isSetApplyLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyLoanMoney, other.applyLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentIndexDTO(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentId:");
    sb.append(this.repaymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realRepaymentMoney:");
    sb.append(this.realRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realRepaymentDate:");
    if (this.realRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.realRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentMoney:");
    sb.append(this.planRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentDate:");
    if (this.planRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentStatus:");
    sb.append(this.repaymentStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFeeConfirm:");
    sb.append(this.overdueFeeConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFeePaymentWay:");
    sb.append(this.overdueFeePaymentWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFeeAccountNo:");
    if (this.overdueFeeAccountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.overdueFeeAccountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDate:");
    if (this.receDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDateStart:");
    if (this.receDateStart == null) {
      sb.append("null");
    } else {
      sb.append(this.receDateStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDateEnd:");
    if (this.receDateEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.receDateEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyLoanMoney:");
    sb.append(this.applyLoanMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentIndexDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentIndexDTOStandardScheme getScheme() {
      return new RepaymentIndexDTOStandardScheme();
    }
  }

  private static class RepaymentIndexDTOStandardScheme extends StandardScheme<RepaymentIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list240.size);
                int _elem241;
                for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                {
                  _elem241 = iprot.readI32();
                  struct.userIds.add(_elem241);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentId = iprot.readI32();
              struct.setRepaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REAL_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realRepaymentMoney = iprot.readDouble();
              struct.setRealRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REAL_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realRepaymentDate = iprot.readString();
              struct.setRealRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAN_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planRepaymentMoney = iprot.readDouble();
              struct.setPlanRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentDate = iprot.readString();
              struct.setPlanRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentStatus = iprot.readI32();
              struct.setRepaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OVERDUE_FEE_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueFeeConfirm = iprot.readI32();
              struct.setOverdueFeeConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OVERDUE_FEE_PAYMENT_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueFeePaymentWay = iprot.readI32();
              struct.setOverdueFeePaymentWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OVERDUE_FEE_ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overdueFeeAccountNo = iprot.readString();
              struct.setOverdueFeeAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RECE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDate = iprot.readString();
              struct.setReceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RECE_DATE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDateStart = iprot.readString();
              struct.setReceDateStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RECE_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDateEnd = iprot.readString();
              struct.setReceDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // APPLY_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyLoanMoney = iprot.readDouble();
              struct.setApplyLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter243 : struct.userIds)
          {
            oprot.writeI32(_iter243);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realRepaymentMoney);
      oprot.writeFieldEnd();
      if (struct.realRepaymentDate != null) {
        oprot.writeFieldBegin(REAL_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.realRepaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planRepaymentMoney);
      oprot.writeFieldEnd();
      if (struct.planRepaymentDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.repaymentStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FEE_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.overdueFeeConfirm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_FEE_PAYMENT_WAY_FIELD_DESC);
      oprot.writeI32(struct.overdueFeePaymentWay);
      oprot.writeFieldEnd();
      if (struct.overdueFeeAccountNo != null) {
        oprot.writeFieldBegin(OVERDUE_FEE_ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.overdueFeeAccountNo);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.receDate != null) {
        oprot.writeFieldBegin(RECE_DATE_FIELD_DESC);
        oprot.writeString(struct.receDate);
        oprot.writeFieldEnd();
      }
      if (struct.receDateStart != null) {
        oprot.writeFieldBegin(RECE_DATE_START_FIELD_DESC);
        oprot.writeString(struct.receDateStart);
        oprot.writeFieldEnd();
      }
      if (struct.receDateEnd != null) {
        oprot.writeFieldBegin(RECE_DATE_END_FIELD_DESC);
        oprot.writeString(struct.receDateEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.applyLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentIndexDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentIndexDTOTupleScheme getScheme() {
      return new RepaymentIndexDTOTupleScheme();
    }
  }

  private static class RepaymentIndexDTOTupleScheme extends TupleScheme<RepaymentIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetUserIds()) {
        optionals.set(2);
      }
      if (struct.isSetRepaymentId()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(5);
      }
      if (struct.isSetProjectName()) {
        optionals.set(6);
      }
      if (struct.isSetRealRepaymentMoney()) {
        optionals.set(7);
      }
      if (struct.isSetRealRepaymentDate()) {
        optionals.set(8);
      }
      if (struct.isSetPlanRepaymentMoney()) {
        optionals.set(9);
      }
      if (struct.isSetPlanRepaymentDate()) {
        optionals.set(10);
      }
      if (struct.isSetRepaymentStatus()) {
        optionals.set(11);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(12);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(13);
      }
      if (struct.isSetOverdueFeeConfirm()) {
        optionals.set(14);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(15);
      }
      if (struct.isSetHouseName()) {
        optionals.set(16);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(17);
      }
      if (struct.isSetSellerName()) {
        optionals.set(18);
      }
      if (struct.isSetOverdueFeePaymentWay()) {
        optionals.set(19);
      }
      if (struct.isSetOverdueFeeAccountNo()) {
        optionals.set(20);
      }
      if (struct.isSetAcctName()) {
        optionals.set(21);
      }
      if (struct.isSetReceDate()) {
        optionals.set(22);
      }
      if (struct.isSetReceDateStart()) {
        optionals.set(23);
      }
      if (struct.isSetReceDateEnd()) {
        optionals.set(24);
      }
      if (struct.isSetApplyLoanMoney()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter244 : struct.userIds)
          {
            oprot.writeI32(_iter244);
          }
        }
      }
      if (struct.isSetRepaymentId()) {
        oprot.writeI32(struct.repaymentId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetRealRepaymentMoney()) {
        oprot.writeDouble(struct.realRepaymentMoney);
      }
      if (struct.isSetRealRepaymentDate()) {
        oprot.writeString(struct.realRepaymentDate);
      }
      if (struct.isSetPlanRepaymentMoney()) {
        oprot.writeDouble(struct.planRepaymentMoney);
      }
      if (struct.isSetPlanRepaymentDate()) {
        oprot.writeString(struct.planRepaymentDate);
      }
      if (struct.isSetRepaymentStatus()) {
        oprot.writeI32(struct.repaymentStatus);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetOverdueFeeConfirm()) {
        oprot.writeI32(struct.overdueFeeConfirm);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetOverdueFeePaymentWay()) {
        oprot.writeI32(struct.overdueFeePaymentWay);
      }
      if (struct.isSetOverdueFeeAccountNo()) {
        oprot.writeString(struct.overdueFeeAccountNo);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetReceDate()) {
        oprot.writeString(struct.receDate);
      }
      if (struct.isSetReceDateStart()) {
        oprot.writeString(struct.receDateStart);
      }
      if (struct.isSetReceDateEnd()) {
        oprot.writeString(struct.receDateEnd);
      }
      if (struct.isSetApplyLoanMoney()) {
        oprot.writeDouble(struct.applyLoanMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list245.size);
          int _elem246;
          for (int _i247 = 0; _i247 < _list245.size; ++_i247)
          {
            _elem246 = iprot.readI32();
            struct.userIds.add(_elem246);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.repaymentId = iprot.readI32();
        struct.setRepaymentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.realRepaymentMoney = iprot.readDouble();
        struct.setRealRepaymentMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.realRepaymentDate = iprot.readString();
        struct.setRealRepaymentDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.planRepaymentMoney = iprot.readDouble();
        struct.setPlanRepaymentMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planRepaymentDate = iprot.readString();
        struct.setPlanRepaymentDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repaymentStatus = iprot.readI32();
        struct.setRepaymentStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(14)) {
        struct.overdueFeeConfirm = iprot.readI32();
        struct.setOverdueFeeConfirmIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.overdueFeePaymentWay = iprot.readI32();
        struct.setOverdueFeePaymentWayIsSet(true);
      }
      if (incoming.get(20)) {
        struct.overdueFeeAccountNo = iprot.readString();
        struct.setOverdueFeeAccountNoIsSet(true);
      }
      if (incoming.get(21)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.receDate = iprot.readString();
        struct.setReceDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.receDateStart = iprot.readString();
        struct.setReceDateStartIsSet(true);
      }
      if (incoming.get(24)) {
        struct.receDateEnd = iprot.readString();
        struct.setReceDateEndIsSet(true);
      }
      if (incoming.get(25)) {
        struct.applyLoanMoney = iprot.readDouble();
        struct.setApplyLoanMoneyIsSet(true);
      }
    }
  }

}


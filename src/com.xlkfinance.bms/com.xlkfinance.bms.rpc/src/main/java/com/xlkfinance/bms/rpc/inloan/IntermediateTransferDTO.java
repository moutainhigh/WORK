/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 中途划转,表:BIZ_INTERMEDIATE_TRANSFER
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class IntermediateTransferDTO implements org.apache.thrift.TBase<IntermediateTransferDTO, IntermediateTransferDTO._Fields>, java.io.Serializable, Cloneable, Comparable<IntermediateTransferDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IntermediateTransferDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRANSFER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("transferMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TRANSFER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAccount", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRANSFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccountName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TRANSFER_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAccountName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatusList", org.apache.thrift.protocol.TType.LIST, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntermediateTransferDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntermediateTransferDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int applyStatus; // required
  public double recMoney; // required
  public String recAccount; // required
  public String recDate; // required
  public double transferMoney; // required
  public String transferAccount; // required
  public String transferDate; // required
  public List<Integer> userIds; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public String remark; // required
  public String recAccountName; // required
  public String transferAccountName; // required
  public int specialType; // required
  public List<Integer> applyStatusList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    APPLY_STATUS((short)3, "applyStatus"),
    REC_MONEY((short)4, "recMoney"),
    REC_ACCOUNT((short)5, "recAccount"),
    REC_DATE((short)6, "recDate"),
    TRANSFER_MONEY((short)7, "transferMoney"),
    TRANSFER_ACCOUNT((short)8, "transferAccount"),
    TRANSFER_DATE((short)9, "transferDate"),
    USER_IDS((short)10, "userIds"),
    CREATER_DATE((short)11, "createrDate"),
    CREATER_ID((short)12, "createrId"),
    UPDATE_ID((short)13, "updateId"),
    UPDATE_DATE((short)14, "updateDate"),
    PAGE((short)15, "page"),
    ROWS((short)16, "rows"),
    REMARK((short)17, "remark"),
    REC_ACCOUNT_NAME((short)18, "recAccountName"),
    TRANSFER_ACCOUNT_NAME((short)19, "transferAccountName"),
    SPECIAL_TYPE((short)20, "specialType"),
    APPLY_STATUS_LIST((short)21, "applyStatusList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // APPLY_STATUS
          return APPLY_STATUS;
        case 4: // REC_MONEY
          return REC_MONEY;
        case 5: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 6: // REC_DATE
          return REC_DATE;
        case 7: // TRANSFER_MONEY
          return TRANSFER_MONEY;
        case 8: // TRANSFER_ACCOUNT
          return TRANSFER_ACCOUNT;
        case 9: // TRANSFER_DATE
          return TRANSFER_DATE;
        case 10: // USER_IDS
          return USER_IDS;
        case 11: // CREATER_DATE
          return CREATER_DATE;
        case 12: // CREATER_ID
          return CREATER_ID;
        case 13: // UPDATE_ID
          return UPDATE_ID;
        case 14: // UPDATE_DATE
          return UPDATE_DATE;
        case 15: // PAGE
          return PAGE;
        case 16: // ROWS
          return ROWS;
        case 17: // REMARK
          return REMARK;
        case 18: // REC_ACCOUNT_NAME
          return REC_ACCOUNT_NAME;
        case 19: // TRANSFER_ACCOUNT_NAME
          return TRANSFER_ACCOUNT_NAME;
        case 20: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 21: // APPLY_STATUS_LIST
          return APPLY_STATUS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __APPLYSTATUS_ISSET_ID = 2;
  private static final int __RECMONEY_ISSET_ID = 3;
  private static final int __TRANSFERMONEY_ISSET_ID = 4;
  private static final int __CREATERID_ISSET_ID = 5;
  private static final int __UPDATEID_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __SPECIALTYPE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("recDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("transferMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANSFER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("recAccountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("transferAccountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("applyStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IntermediateTransferDTO.class, metaDataMap);
  }

  public IntermediateTransferDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public IntermediateTransferDTO(
    int pid,
    int projectId,
    int applyStatus,
    double recMoney,
    String recAccount,
    String recDate,
    double transferMoney,
    String transferAccount,
    String transferDate,
    List<Integer> userIds,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    int page,
    int rows,
    String remark,
    String recAccountName,
    String transferAccountName,
    int specialType,
    List<Integer> applyStatusList)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.recAccount = recAccount;
    this.recDate = recDate;
    this.transferMoney = transferMoney;
    setTransferMoneyIsSet(true);
    this.transferAccount = transferAccount;
    this.transferDate = transferDate;
    this.userIds = userIds;
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.remark = remark;
    this.recAccountName = recAccountName;
    this.transferAccountName = transferAccountName;
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.applyStatusList = applyStatusList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IntermediateTransferDTO(IntermediateTransferDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.applyStatus = other.applyStatus;
    this.recMoney = other.recMoney;
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    if (other.isSetRecDate()) {
      this.recDate = other.recDate;
    }
    this.transferMoney = other.transferMoney;
    if (other.isSetTransferAccount()) {
      this.transferAccount = other.transferAccount;
    }
    if (other.isSetTransferDate()) {
      this.transferDate = other.transferDate;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetRecAccountName()) {
      this.recAccountName = other.recAccountName;
    }
    if (other.isSetTransferAccountName()) {
      this.transferAccountName = other.transferAccountName;
    }
    this.specialType = other.specialType;
    if (other.isSetApplyStatusList()) {
      List<Integer> __this__applyStatusList = new ArrayList<Integer>(other.applyStatusList);
      this.applyStatusList = __this__applyStatusList;
    }
  }

  public IntermediateTransferDTO deepCopy() {
    return new IntermediateTransferDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    this.recAccount = null;
    this.recDate = null;
    setTransferMoneyIsSet(false);
    this.transferMoney = 0.0;
    this.transferAccount = null;
    this.transferDate = null;
    this.userIds = null;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.remark = null;
    this.recAccountName = null;
    this.transferAccountName = null;
    setSpecialTypeIsSet(false);
    this.specialType = 0;
    this.applyStatusList = null;
  }

  public int getPid() {
    return this.pid;
  }

  public IntermediateTransferDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public IntermediateTransferDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public IntermediateTransferDTO setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public IntermediateTransferDTO setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public IntermediateTransferDTO setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public String getRecDate() {
    return this.recDate;
  }

  public IntermediateTransferDTO setRecDate(String recDate) {
    this.recDate = recDate;
    return this;
  }

  public void unsetRecDate() {
    this.recDate = null;
  }

  /** Returns true if field recDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecDate() {
    return this.recDate != null;
  }

  public void setRecDateIsSet(boolean value) {
    if (!value) {
      this.recDate = null;
    }
  }

  public double getTransferMoney() {
    return this.transferMoney;
  }

  public IntermediateTransferDTO setTransferMoney(double transferMoney) {
    this.transferMoney = transferMoney;
    setTransferMoneyIsSet(true);
    return this;
  }

  public void unsetTransferMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID);
  }

  /** Returns true if field transferMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID);
  }

  public void setTransferMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID, value);
  }

  public String getTransferAccount() {
    return this.transferAccount;
  }

  public IntermediateTransferDTO setTransferAccount(String transferAccount) {
    this.transferAccount = transferAccount;
    return this;
  }

  public void unsetTransferAccount() {
    this.transferAccount = null;
  }

  /** Returns true if field transferAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferAccount() {
    return this.transferAccount != null;
  }

  public void setTransferAccountIsSet(boolean value) {
    if (!value) {
      this.transferAccount = null;
    }
  }

  public String getTransferDate() {
    return this.transferDate;
  }

  public IntermediateTransferDTO setTransferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  public void unsetTransferDate() {
    this.transferDate = null;
  }

  /** Returns true if field transferDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferDate() {
    return this.transferDate != null;
  }

  public void setTransferDateIsSet(boolean value) {
    if (!value) {
      this.transferDate = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public IntermediateTransferDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public IntermediateTransferDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public IntermediateTransferDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public IntermediateTransferDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public IntermediateTransferDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public IntermediateTransferDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public IntermediateTransferDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public IntermediateTransferDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getRecAccountName() {
    return this.recAccountName;
  }

  public IntermediateTransferDTO setRecAccountName(String recAccountName) {
    this.recAccountName = recAccountName;
    return this;
  }

  public void unsetRecAccountName() {
    this.recAccountName = null;
  }

  /** Returns true if field recAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccountName() {
    return this.recAccountName != null;
  }

  public void setRecAccountNameIsSet(boolean value) {
    if (!value) {
      this.recAccountName = null;
    }
  }

  public String getTransferAccountName() {
    return this.transferAccountName;
  }

  public IntermediateTransferDTO setTransferAccountName(String transferAccountName) {
    this.transferAccountName = transferAccountName;
    return this;
  }

  public void unsetTransferAccountName() {
    this.transferAccountName = null;
  }

  /** Returns true if field transferAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferAccountName() {
    return this.transferAccountName != null;
  }

  public void setTransferAccountNameIsSet(boolean value) {
    if (!value) {
      this.transferAccountName = null;
    }
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public IntermediateTransferDTO setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public int getApplyStatusListSize() {
    return (this.applyStatusList == null) ? 0 : this.applyStatusList.size();
  }

  public java.util.Iterator<Integer> getApplyStatusListIterator() {
    return (this.applyStatusList == null) ? null : this.applyStatusList.iterator();
  }

  public void addToApplyStatusList(int elem) {
    if (this.applyStatusList == null) {
      this.applyStatusList = new ArrayList<Integer>();
    }
    this.applyStatusList.add(elem);
  }

  public List<Integer> getApplyStatusList() {
    return this.applyStatusList;
  }

  public IntermediateTransferDTO setApplyStatusList(List<Integer> applyStatusList) {
    this.applyStatusList = applyStatusList;
    return this;
  }

  public void unsetApplyStatusList() {
    this.applyStatusList = null;
  }

  /** Returns true if field applyStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatusList() {
    return this.applyStatusList != null;
  }

  public void setApplyStatusListIsSet(boolean value) {
    if (!value) {
      this.applyStatusList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case REC_DATE:
      if (value == null) {
        unsetRecDate();
      } else {
        setRecDate((String)value);
      }
      break;

    case TRANSFER_MONEY:
      if (value == null) {
        unsetTransferMoney();
      } else {
        setTransferMoney((Double)value);
      }
      break;

    case TRANSFER_ACCOUNT:
      if (value == null) {
        unsetTransferAccount();
      } else {
        setTransferAccount((String)value);
      }
      break;

    case TRANSFER_DATE:
      if (value == null) {
        unsetTransferDate();
      } else {
        setTransferDate((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REC_ACCOUNT_NAME:
      if (value == null) {
        unsetRecAccountName();
      } else {
        setRecAccountName((String)value);
      }
      break;

    case TRANSFER_ACCOUNT_NAME:
      if (value == null) {
        unsetTransferAccountName();
      } else {
        setTransferAccountName((String)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case APPLY_STATUS_LIST:
      if (value == null) {
        unsetApplyStatusList();
      } else {
        setApplyStatusList((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case REC_ACCOUNT:
      return getRecAccount();

    case REC_DATE:
      return getRecDate();

    case TRANSFER_MONEY:
      return Double.valueOf(getTransferMoney());

    case TRANSFER_ACCOUNT:
      return getTransferAccount();

    case TRANSFER_DATE:
      return getTransferDate();

    case USER_IDS:
      return getUserIds();

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REMARK:
      return getRemark();

    case REC_ACCOUNT_NAME:
      return getRecAccountName();

    case TRANSFER_ACCOUNT_NAME:
      return getTransferAccountName();

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case APPLY_STATUS_LIST:
      return getApplyStatusList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case REC_MONEY:
      return isSetRecMoney();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case REC_DATE:
      return isSetRecDate();
    case TRANSFER_MONEY:
      return isSetTransferMoney();
    case TRANSFER_ACCOUNT:
      return isSetTransferAccount();
    case TRANSFER_DATE:
      return isSetTransferDate();
    case USER_IDS:
      return isSetUserIds();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REMARK:
      return isSetRemark();
    case REC_ACCOUNT_NAME:
      return isSetRecAccountName();
    case TRANSFER_ACCOUNT_NAME:
      return isSetTransferAccountName();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case APPLY_STATUS_LIST:
      return isSetApplyStatusList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IntermediateTransferDTO)
      return this.equals((IntermediateTransferDTO)that);
    return false;
  }

  public boolean equals(IntermediateTransferDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_recDate = true && this.isSetRecDate();
    boolean that_present_recDate = true && that.isSetRecDate();
    if (this_present_recDate || that_present_recDate) {
      if (!(this_present_recDate && that_present_recDate))
        return false;
      if (!this.recDate.equals(that.recDate))
        return false;
    }

    boolean this_present_transferMoney = true;
    boolean that_present_transferMoney = true;
    if (this_present_transferMoney || that_present_transferMoney) {
      if (!(this_present_transferMoney && that_present_transferMoney))
        return false;
      if (this.transferMoney != that.transferMoney)
        return false;
    }

    boolean this_present_transferAccount = true && this.isSetTransferAccount();
    boolean that_present_transferAccount = true && that.isSetTransferAccount();
    if (this_present_transferAccount || that_present_transferAccount) {
      if (!(this_present_transferAccount && that_present_transferAccount))
        return false;
      if (!this.transferAccount.equals(that.transferAccount))
        return false;
    }

    boolean this_present_transferDate = true && this.isSetTransferDate();
    boolean that_present_transferDate = true && that.isSetTransferDate();
    if (this_present_transferDate || that_present_transferDate) {
      if (!(this_present_transferDate && that_present_transferDate))
        return false;
      if (!this.transferDate.equals(that.transferDate))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_recAccountName = true && this.isSetRecAccountName();
    boolean that_present_recAccountName = true && that.isSetRecAccountName();
    if (this_present_recAccountName || that_present_recAccountName) {
      if (!(this_present_recAccountName && that_present_recAccountName))
        return false;
      if (!this.recAccountName.equals(that.recAccountName))
        return false;
    }

    boolean this_present_transferAccountName = true && this.isSetTransferAccountName();
    boolean that_present_transferAccountName = true && that.isSetTransferAccountName();
    if (this_present_transferAccountName || that_present_transferAccountName) {
      if (!(this_present_transferAccountName && that_present_transferAccountName))
        return false;
      if (!this.transferAccountName.equals(that.transferAccountName))
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_applyStatusList = true && this.isSetApplyStatusList();
    boolean that_present_applyStatusList = true && that.isSetApplyStatusList();
    if (this_present_applyStatusList || that_present_applyStatusList) {
      if (!(this_present_applyStatusList && that_present_applyStatusList))
        return false;
      if (!this.applyStatusList.equals(that.applyStatusList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_recDate = true && (isSetRecDate());
    list.add(present_recDate);
    if (present_recDate)
      list.add(recDate);

    boolean present_transferMoney = true;
    list.add(present_transferMoney);
    if (present_transferMoney)
      list.add(transferMoney);

    boolean present_transferAccount = true && (isSetTransferAccount());
    list.add(present_transferAccount);
    if (present_transferAccount)
      list.add(transferAccount);

    boolean present_transferDate = true && (isSetTransferDate());
    list.add(present_transferDate);
    if (present_transferDate)
      list.add(transferDate);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_recAccountName = true && (isSetRecAccountName());
    list.add(present_recAccountName);
    if (present_recAccountName)
      list.add(recAccountName);

    boolean present_transferAccountName = true && (isSetTransferAccountName());
    list.add(present_transferAccountName);
    if (present_transferAccountName)
      list.add(transferAccountName);

    boolean present_specialType = true;
    list.add(present_specialType);
    if (present_specialType)
      list.add(specialType);

    boolean present_applyStatusList = true && (isSetApplyStatusList());
    list.add(present_applyStatusList);
    if (present_applyStatusList)
      list.add(applyStatusList);

    return list.hashCode();
  }

  @Override
  public int compareTo(IntermediateTransferDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecDate()).compareTo(other.isSetRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recDate, other.recDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferMoney()).compareTo(other.isSetTransferMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferMoney, other.transferMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferAccount()).compareTo(other.isSetTransferAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAccount, other.transferAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferDate()).compareTo(other.isSetTransferDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferDate, other.transferDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccountName()).compareTo(other.isSetRecAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccountName, other.recAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferAccountName()).compareTo(other.isSetTransferAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAccountName, other.transferAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(other.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, other.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatusList()).compareTo(other.isSetApplyStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatusList, other.applyStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IntermediateTransferDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recDate:");
    if (this.recDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferMoney:");
    sb.append(this.transferMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferAccount:");
    if (this.transferAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.transferAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferDate:");
    if (this.transferDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccountName:");
    if (this.recAccountName == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferAccountName:");
    if (this.transferAccountName == null) {
      sb.append("null");
    } else {
      sb.append(this.transferAccountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatusList:");
    if (this.applyStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.applyStatusList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntermediateTransferDTOStandardSchemeFactory implements SchemeFactory {
    public IntermediateTransferDTOStandardScheme getScheme() {
      return new IntermediateTransferDTOStandardScheme();
    }
  }

  private static class IntermediateTransferDTOStandardScheme extends StandardScheme<IntermediateTransferDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IntermediateTransferDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recDate = iprot.readString();
              struct.setRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRANSFER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.transferMoney = iprot.readDouble();
              struct.setTransferMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRANSFER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferAccount = iprot.readString();
              struct.setTransferAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRANSFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferDate = iprot.readString();
              struct.setTransferDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list272.size);
                int _elem273;
                for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                {
                  _elem273 = iprot.readI32();
                  struct.userIds.add(_elem273);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REC_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccountName = iprot.readString();
              struct.setRecAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRANSFER_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferAccountName = iprot.readString();
              struct.setTransferAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // APPLY_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list275 = iprot.readListBegin();
                struct.applyStatusList = new ArrayList<Integer>(_list275.size);
                int _elem276;
                for (int _i277 = 0; _i277 < _list275.size; ++_i277)
                {
                  _elem276 = iprot.readI32();
                  struct.applyStatusList.add(_elem276);
                }
                iprot.readListEnd();
              }
              struct.setApplyStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IntermediateTransferDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      if (struct.recDate != null) {
        oprot.writeFieldBegin(REC_DATE_FIELD_DESC);
        oprot.writeString(struct.recDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSFER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.transferMoney);
      oprot.writeFieldEnd();
      if (struct.transferAccount != null) {
        oprot.writeFieldBegin(TRANSFER_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.transferAccount);
        oprot.writeFieldEnd();
      }
      if (struct.transferDate != null) {
        oprot.writeFieldBegin(TRANSFER_DATE_FIELD_DESC);
        oprot.writeString(struct.transferDate);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter278 : struct.userIds)
          {
            oprot.writeI32(_iter278);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.recAccountName != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.recAccountName);
        oprot.writeFieldEnd();
      }
      if (struct.transferAccountName != null) {
        oprot.writeFieldBegin(TRANSFER_ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.transferAccountName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      if (struct.applyStatusList != null) {
        oprot.writeFieldBegin(APPLY_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.applyStatusList.size()));
          for (int _iter279 : struct.applyStatusList)
          {
            oprot.writeI32(_iter279);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntermediateTransferDTOTupleSchemeFactory implements SchemeFactory {
    public IntermediateTransferDTOTupleScheme getScheme() {
      return new IntermediateTransferDTOTupleScheme();
    }
  }

  private static class IntermediateTransferDTOTupleScheme extends TupleScheme<IntermediateTransferDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IntermediateTransferDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(2);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(3);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(4);
      }
      if (struct.isSetRecDate()) {
        optionals.set(5);
      }
      if (struct.isSetTransferMoney()) {
        optionals.set(6);
      }
      if (struct.isSetTransferAccount()) {
        optionals.set(7);
      }
      if (struct.isSetTransferDate()) {
        optionals.set(8);
      }
      if (struct.isSetUserIds()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(10);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(13);
      }
      if (struct.isSetPage()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetRemark()) {
        optionals.set(16);
      }
      if (struct.isSetRecAccountName()) {
        optionals.set(17);
      }
      if (struct.isSetTransferAccountName()) {
        optionals.set(18);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(19);
      }
      if (struct.isSetApplyStatusList()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetRecDate()) {
        oprot.writeString(struct.recDate);
      }
      if (struct.isSetTransferMoney()) {
        oprot.writeDouble(struct.transferMoney);
      }
      if (struct.isSetTransferAccount()) {
        oprot.writeString(struct.transferAccount);
      }
      if (struct.isSetTransferDate()) {
        oprot.writeString(struct.transferDate);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter280 : struct.userIds)
          {
            oprot.writeI32(_iter280);
          }
        }
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRecAccountName()) {
        oprot.writeString(struct.recAccountName);
      }
      if (struct.isSetTransferAccountName()) {
        oprot.writeString(struct.transferAccountName);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetApplyStatusList()) {
        {
          oprot.writeI32(struct.applyStatusList.size());
          for (int _iter281 : struct.applyStatusList)
          {
            oprot.writeI32(_iter281);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IntermediateTransferDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recDate = iprot.readString();
        struct.setRecDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.transferMoney = iprot.readDouble();
        struct.setTransferMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.transferAccount = iprot.readString();
        struct.setTransferAccountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.transferDate = iprot.readString();
        struct.setTransferDateIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list282 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list282.size);
          int _elem283;
          for (int _i284 = 0; _i284 < _list282.size; ++_i284)
          {
            _elem283 = iprot.readI32();
            struct.userIds.add(_elem283);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(17)) {
        struct.recAccountName = iprot.readString();
        struct.setRecAccountNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.transferAccountName = iprot.readString();
        struct.setTransferAccountNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.applyStatusList = new ArrayList<Integer>(_list285.size);
          int _elem286;
          for (int _i287 = 0; _i287 < _list285.size; ++_i287)
          {
            _elem286 = iprot.readI32();
            struct.applyStatusList.add(_elem286);
          }
        }
        struct.setApplyStatusListIsSet(true);
      }
    }
  }

}


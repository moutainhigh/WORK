/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizHandleService {

  public interface Iface {

    public List<ApplyHandleIndexDTO> findAllApplyHandleIndex(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException;

    public int getApplyHandleIndexTotal(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException;

    public List<HandleDynamicMap> qeuryHandleDynamicCountMapList(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException;

    public List<HandleInfoDTO> findAllHandleInfoDTO(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException;

    public int getHandleInfoDTOTotal(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException;

    public boolean addHandleInfo(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public HandleInfoDTO getHandleInfoById(int pid) throws org.apache.thrift.TException;

    public HandleInfoDTO getHandleInfoByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean updateHandleInfo(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException;

    public boolean foreclosureTurnDown(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException;

    public boolean isBalanceConfirm(int projectId, int handleId) throws org.apache.thrift.TException;

    public List<ApplyHandleInfoDTO> findAllApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException;

    public int getApplyHandleInfoTotal(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException;

    public boolean addApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException;

    public ApplyHandleInfoDTO getApplyHandleInfoById(int pid) throws org.apache.thrift.TException;

    public boolean updateApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException;

    public List<HouseBalanceDTO> findAllHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException;

    public int getHouseBalanceTotal(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException;

    public List<HouseBalanceDTO> getHouseBalanceListByProjectId(int projectId) throws org.apache.thrift.TException;

    public double getForeclosureMoneyByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean addHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException;

    public HouseBalanceDTO getHouseBalanceById(int pid) throws org.apache.thrift.TException;

    public boolean updateHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException;

    public boolean balanceConfirm(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException;

    public Set<Map<String,String>> getHandleUser(int handleId, int handleFlowId, String loginUserName) throws org.apache.thrift.TException;

    public int getProjectIdByHandleId(int handleId) throws org.apache.thrift.TException;

    public List<RefundDetailsDTO> findAllRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException;

    public int getRefundDetailsTotal(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException;

    public List<RefundDetailsDTO> getRefundDetailsListByProjectId(int projectId, List<Integer> refundPros) throws org.apache.thrift.TException;

    public boolean addRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException;

    public RefundDetailsDTO getRefundDetailsById(int pid) throws org.apache.thrift.TException;

    public boolean updateRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException;

    public List<HandleFlowDTO> findAllHandleFlow(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException;

    public int getHandleFlowTotal(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException;

    public List<HandleDynamicDTO> findAllHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException;

    public int getHandleDynamicTotal(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException;

    public int gethandleDaysByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean addHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException;

    public HandleDynamicDTO getHandleDynamicById(int pid) throws org.apache.thrift.TException;

    public boolean updateHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException;

    public boolean updateHandleDynamicAndFinishTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException;

    public boolean finishHandleDynamicTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException;

    public boolean finishAllHandleDynamicTask(int projectId, String loginUserName) throws org.apache.thrift.TException;

    public List<BizHandleWorkflowDTO> findAllBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException;

    public boolean addBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException;

    public boolean updateBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException;

    public List<HandleDifferWarnDTO> findAllHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public int getHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public int getHisHandleDifferWarnCount(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public List<HandleDifferWarnDTO> findIndexHandleDifferWarn(int userId) throws org.apache.thrift.TException;

    public int getIndexHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public boolean addHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public boolean delHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public HandleDifferWarnDTO getHandleDifferWarnById(int pid) throws org.apache.thrift.TException;

    public boolean updateHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public boolean addHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public List<HandleDifferWarnDTO> findAllHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public int getHisHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public List<HandleDynamicFileDTO> findAllHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException;

    public int getHandleDynamicFileTotal(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException;

    public boolean addHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile) throws org.apache.thrift.TException;

    public boolean addHandleDynamicFileOfComm(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException;

    public HandleDynamicFileDTO getHandleDynamicFileById(int pid) throws org.apache.thrift.TException;

    public boolean updateHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException;

    public List<Integer> getCanHandleFlowByHandleId(int handleId, String userName) throws org.apache.thrift.TException;

    public List<Integer> getCanHandleDynamicIds(String userName) throws org.apache.thrift.TException;

    public List<HandleDifferWarnDTO> getNeedHandleWarn(int userId) throws org.apache.thrift.TException;

    public List<HandleDifferWarnIndexDTO> queryNeedHandleWarnIndex(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException;

    public int getNeedHandleWarnIndexTotal(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException;

    public List<ForeclosureIndexDTO> queryForeclosureIndex(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException;

    public int getForeclosureIndexTotal(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException;

    public boolean foreclosure(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException;

    public List<OrgBizHandlePage> queryOrgBizHandlePage(OrgBizHandlePage query) throws org.apache.thrift.TException;

    public int getOrgBizHandlePageTotal(OrgBizHandlePage query) throws org.apache.thrift.TException;

    public List<HandleDifferWarnDTO> getHandleDifferWarnList(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException;

    public List<HandleDynamicFileDTO> findHandleDynamicFileByProjectId(int projectId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findAllApplyHandleIndex(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyHandleIndexTotal(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void qeuryHandleDynamicCountMapList(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHandleInfoDTO(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleInfoDTOTotal(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHandleInfo(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleInfoById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleInfoByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHandleInfo(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void foreclosureTurnDown(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isBalanceConfirm(int projectId, int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyHandleInfoTotal(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyHandleInfoById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHouseBalanceTotal(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHouseBalanceListByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getForeclosureMoneyByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHouseBalanceById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void balanceConfirm(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleUser(int handleId, int handleFlowId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectIdByHandleId(int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundDetailsTotal(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundDetailsListByProjectId(int projectId, List<Integer> refundPros, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundDetailsById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHandleFlow(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleFlowTotal(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDynamicTotal(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gethandleDaysByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDynamicById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHandleDynamicAndFinishTask(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void finishHandleDynamicTask(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void finishAllHandleDynamicTask(int projectId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHisHandleDifferWarnCount(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findIndexHandleDifferWarn(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIndexHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDifferWarnById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHisHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDynamicFileTotal(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHandleDynamicFileOfComm(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDynamicFileById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCanHandleFlowByHandleId(int handleId, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCanHandleDynamicIds(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNeedHandleWarn(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryNeedHandleWarnIndex(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNeedHandleWarnIndexTotal(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureIndex(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getForeclosureIndexTotal(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void foreclosure(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOrgBizHandlePage(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrgBizHandlePageTotal(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDifferWarnList(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findHandleDynamicFileByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ApplyHandleIndexDTO> findAllApplyHandleIndex(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      send_findAllApplyHandleIndex(applyHandleIndexDTO);
      return recv_findAllApplyHandleIndex();
    }

    public void send_findAllApplyHandleIndex(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      findAllApplyHandleIndex_args args = new findAllApplyHandleIndex_args();
      args.setApplyHandleIndexDTO(applyHandleIndexDTO);
      sendBase("findAllApplyHandleIndex", args);
    }

    public List<ApplyHandleIndexDTO> recv_findAllApplyHandleIndex() throws org.apache.thrift.TException
    {
      findAllApplyHandleIndex_result result = new findAllApplyHandleIndex_result();
      receiveBase(result, "findAllApplyHandleIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllApplyHandleIndex failed: unknown result");
    }

    public int getApplyHandleIndexTotal(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      send_getApplyHandleIndexTotal(applyHandleIndexDTO);
      return recv_getApplyHandleIndexTotal();
    }

    public void send_getApplyHandleIndexTotal(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      getApplyHandleIndexTotal_args args = new getApplyHandleIndexTotal_args();
      args.setApplyHandleIndexDTO(applyHandleIndexDTO);
      sendBase("getApplyHandleIndexTotal", args);
    }

    public int recv_getApplyHandleIndexTotal() throws org.apache.thrift.TException
    {
      getApplyHandleIndexTotal_result result = new getApplyHandleIndexTotal_result();
      receiveBase(result, "getApplyHandleIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyHandleIndexTotal failed: unknown result");
    }

    public List<HandleDynamicMap> qeuryHandleDynamicCountMapList(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      send_qeuryHandleDynamicCountMapList(applyHandleIndexDTO);
      return recv_qeuryHandleDynamicCountMapList();
    }

    public void send_qeuryHandleDynamicCountMapList(ApplyHandleIndexDTO applyHandleIndexDTO) throws org.apache.thrift.TException
    {
      qeuryHandleDynamicCountMapList_args args = new qeuryHandleDynamicCountMapList_args();
      args.setApplyHandleIndexDTO(applyHandleIndexDTO);
      sendBase("qeuryHandleDynamicCountMapList", args);
    }

    public List<HandleDynamicMap> recv_qeuryHandleDynamicCountMapList() throws org.apache.thrift.TException
    {
      qeuryHandleDynamicCountMapList_result result = new qeuryHandleDynamicCountMapList_result();
      receiveBase(result, "qeuryHandleDynamicCountMapList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "qeuryHandleDynamicCountMapList failed: unknown result");
    }

    public List<HandleInfoDTO> findAllHandleInfoDTO(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      send_findAllHandleInfoDTO(handleInfoDTO);
      return recv_findAllHandleInfoDTO();
    }

    public void send_findAllHandleInfoDTO(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      findAllHandleInfoDTO_args args = new findAllHandleInfoDTO_args();
      args.setHandleInfoDTO(handleInfoDTO);
      sendBase("findAllHandleInfoDTO", args);
    }

    public List<HandleInfoDTO> recv_findAllHandleInfoDTO() throws org.apache.thrift.TException
    {
      findAllHandleInfoDTO_result result = new findAllHandleInfoDTO_result();
      receiveBase(result, "findAllHandleInfoDTO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHandleInfoDTO failed: unknown result");
    }

    public int getHandleInfoDTOTotal(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      send_getHandleInfoDTOTotal(handleInfoDTO);
      return recv_getHandleInfoDTOTotal();
    }

    public void send_getHandleInfoDTOTotal(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      getHandleInfoDTOTotal_args args = new getHandleInfoDTOTotal_args();
      args.setHandleInfoDTO(handleInfoDTO);
      sendBase("getHandleInfoDTOTotal", args);
    }

    public int recv_getHandleInfoDTOTotal() throws org.apache.thrift.TException
    {
      getHandleInfoDTOTotal_result result = new getHandleInfoDTOTotal_result();
      receiveBase(result, "getHandleInfoDTOTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleInfoDTOTotal failed: unknown result");
    }

    public boolean addHandleInfo(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_addHandleInfo(handleInfoDTO, paramMap);
      return recv_addHandleInfo();
    }

    public void send_addHandleInfo(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      addHandleInfo_args args = new addHandleInfo_args();
      args.setHandleInfoDTO(handleInfoDTO);
      args.setParamMap(paramMap);
      sendBase("addHandleInfo", args);
    }

    public boolean recv_addHandleInfo() throws org.apache.thrift.TException
    {
      addHandleInfo_result result = new addHandleInfo_result();
      receiveBase(result, "addHandleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHandleInfo failed: unknown result");
    }

    public HandleInfoDTO getHandleInfoById(int pid) throws org.apache.thrift.TException
    {
      send_getHandleInfoById(pid);
      return recv_getHandleInfoById();
    }

    public void send_getHandleInfoById(int pid) throws org.apache.thrift.TException
    {
      getHandleInfoById_args args = new getHandleInfoById_args();
      args.setPid(pid);
      sendBase("getHandleInfoById", args);
    }

    public HandleInfoDTO recv_getHandleInfoById() throws org.apache.thrift.TException
    {
      getHandleInfoById_result result = new getHandleInfoById_result();
      receiveBase(result, "getHandleInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleInfoById failed: unknown result");
    }

    public HandleInfoDTO getHandleInfoByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getHandleInfoByProjectId(projectId);
      return recv_getHandleInfoByProjectId();
    }

    public void send_getHandleInfoByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getHandleInfoByProjectId_args args = new getHandleInfoByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getHandleInfoByProjectId", args);
    }

    public HandleInfoDTO recv_getHandleInfoByProjectId() throws org.apache.thrift.TException
    {
      getHandleInfoByProjectId_result result = new getHandleInfoByProjectId_result();
      receiveBase(result, "getHandleInfoByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleInfoByProjectId failed: unknown result");
    }

    public boolean updateHandleInfo(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      send_updateHandleInfo(handleInfoDTO);
      return recv_updateHandleInfo();
    }

    public void send_updateHandleInfo(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      updateHandleInfo_args args = new updateHandleInfo_args();
      args.setHandleInfoDTO(handleInfoDTO);
      sendBase("updateHandleInfo", args);
    }

    public boolean recv_updateHandleInfo() throws org.apache.thrift.TException
    {
      updateHandleInfo_result result = new updateHandleInfo_result();
      receiveBase(result, "updateHandleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHandleInfo failed: unknown result");
    }

    public boolean foreclosureTurnDown(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      send_foreclosureTurnDown(handleInfoDTO);
      return recv_foreclosureTurnDown();
    }

    public void send_foreclosureTurnDown(HandleInfoDTO handleInfoDTO) throws org.apache.thrift.TException
    {
      foreclosureTurnDown_args args = new foreclosureTurnDown_args();
      args.setHandleInfoDTO(handleInfoDTO);
      sendBase("foreclosureTurnDown", args);
    }

    public boolean recv_foreclosureTurnDown() throws org.apache.thrift.TException
    {
      foreclosureTurnDown_result result = new foreclosureTurnDown_result();
      receiveBase(result, "foreclosureTurnDown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "foreclosureTurnDown failed: unknown result");
    }

    public boolean isBalanceConfirm(int projectId, int handleId) throws org.apache.thrift.TException
    {
      send_isBalanceConfirm(projectId, handleId);
      return recv_isBalanceConfirm();
    }

    public void send_isBalanceConfirm(int projectId, int handleId) throws org.apache.thrift.TException
    {
      isBalanceConfirm_args args = new isBalanceConfirm_args();
      args.setProjectId(projectId);
      args.setHandleId(handleId);
      sendBase("isBalanceConfirm", args);
    }

    public boolean recv_isBalanceConfirm() throws org.apache.thrift.TException
    {
      isBalanceConfirm_result result = new isBalanceConfirm_result();
      receiveBase(result, "isBalanceConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isBalanceConfirm failed: unknown result");
    }

    public List<ApplyHandleInfoDTO> findAllApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      send_findAllApplyHandleInfo(applyHandleInfoDTO);
      return recv_findAllApplyHandleInfo();
    }

    public void send_findAllApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      findAllApplyHandleInfo_args args = new findAllApplyHandleInfo_args();
      args.setApplyHandleInfoDTO(applyHandleInfoDTO);
      sendBase("findAllApplyHandleInfo", args);
    }

    public List<ApplyHandleInfoDTO> recv_findAllApplyHandleInfo() throws org.apache.thrift.TException
    {
      findAllApplyHandleInfo_result result = new findAllApplyHandleInfo_result();
      receiveBase(result, "findAllApplyHandleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllApplyHandleInfo failed: unknown result");
    }

    public int getApplyHandleInfoTotal(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      send_getApplyHandleInfoTotal(applyHandleInfoDTO);
      return recv_getApplyHandleInfoTotal();
    }

    public void send_getApplyHandleInfoTotal(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      getApplyHandleInfoTotal_args args = new getApplyHandleInfoTotal_args();
      args.setApplyHandleInfoDTO(applyHandleInfoDTO);
      sendBase("getApplyHandleInfoTotal", args);
    }

    public int recv_getApplyHandleInfoTotal() throws org.apache.thrift.TException
    {
      getApplyHandleInfoTotal_result result = new getApplyHandleInfoTotal_result();
      receiveBase(result, "getApplyHandleInfoTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyHandleInfoTotal failed: unknown result");
    }

    public boolean addApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      send_addApplyHandleInfo(applyHandleInfoDTO);
      return recv_addApplyHandleInfo();
    }

    public void send_addApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      addApplyHandleInfo_args args = new addApplyHandleInfo_args();
      args.setApplyHandleInfoDTO(applyHandleInfoDTO);
      sendBase("addApplyHandleInfo", args);
    }

    public boolean recv_addApplyHandleInfo() throws org.apache.thrift.TException
    {
      addApplyHandleInfo_result result = new addApplyHandleInfo_result();
      receiveBase(result, "addApplyHandleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplyHandleInfo failed: unknown result");
    }

    public ApplyHandleInfoDTO getApplyHandleInfoById(int pid) throws org.apache.thrift.TException
    {
      send_getApplyHandleInfoById(pid);
      return recv_getApplyHandleInfoById();
    }

    public void send_getApplyHandleInfoById(int pid) throws org.apache.thrift.TException
    {
      getApplyHandleInfoById_args args = new getApplyHandleInfoById_args();
      args.setPid(pid);
      sendBase("getApplyHandleInfoById", args);
    }

    public ApplyHandleInfoDTO recv_getApplyHandleInfoById() throws org.apache.thrift.TException
    {
      getApplyHandleInfoById_result result = new getApplyHandleInfoById_result();
      receiveBase(result, "getApplyHandleInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyHandleInfoById failed: unknown result");
    }

    public boolean updateApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      send_updateApplyHandleInfo(applyHandleInfoDTO);
      return recv_updateApplyHandleInfo();
    }

    public void send_updateApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO) throws org.apache.thrift.TException
    {
      updateApplyHandleInfo_args args = new updateApplyHandleInfo_args();
      args.setApplyHandleInfoDTO(applyHandleInfoDTO);
      sendBase("updateApplyHandleInfo", args);
    }

    public boolean recv_updateApplyHandleInfo() throws org.apache.thrift.TException
    {
      updateApplyHandleInfo_result result = new updateApplyHandleInfo_result();
      receiveBase(result, "updateApplyHandleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplyHandleInfo failed: unknown result");
    }

    public List<HouseBalanceDTO> findAllHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      send_findAllHouseBalance(houseBalanceDTO);
      return recv_findAllHouseBalance();
    }

    public void send_findAllHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      findAllHouseBalance_args args = new findAllHouseBalance_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      sendBase("findAllHouseBalance", args);
    }

    public List<HouseBalanceDTO> recv_findAllHouseBalance() throws org.apache.thrift.TException
    {
      findAllHouseBalance_result result = new findAllHouseBalance_result();
      receiveBase(result, "findAllHouseBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHouseBalance failed: unknown result");
    }

    public int getHouseBalanceTotal(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      send_getHouseBalanceTotal(houseBalanceDTO);
      return recv_getHouseBalanceTotal();
    }

    public void send_getHouseBalanceTotal(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      getHouseBalanceTotal_args args = new getHouseBalanceTotal_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      sendBase("getHouseBalanceTotal", args);
    }

    public int recv_getHouseBalanceTotal() throws org.apache.thrift.TException
    {
      getHouseBalanceTotal_result result = new getHouseBalanceTotal_result();
      receiveBase(result, "getHouseBalanceTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHouseBalanceTotal failed: unknown result");
    }

    public List<HouseBalanceDTO> getHouseBalanceListByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getHouseBalanceListByProjectId(projectId);
      return recv_getHouseBalanceListByProjectId();
    }

    public void send_getHouseBalanceListByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getHouseBalanceListByProjectId_args args = new getHouseBalanceListByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getHouseBalanceListByProjectId", args);
    }

    public List<HouseBalanceDTO> recv_getHouseBalanceListByProjectId() throws org.apache.thrift.TException
    {
      getHouseBalanceListByProjectId_result result = new getHouseBalanceListByProjectId_result();
      receiveBase(result, "getHouseBalanceListByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHouseBalanceListByProjectId failed: unknown result");
    }

    public double getForeclosureMoneyByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getForeclosureMoneyByProjectId(projectId);
      return recv_getForeclosureMoneyByProjectId();
    }

    public void send_getForeclosureMoneyByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getForeclosureMoneyByProjectId_args args = new getForeclosureMoneyByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getForeclosureMoneyByProjectId", args);
    }

    public double recv_getForeclosureMoneyByProjectId() throws org.apache.thrift.TException
    {
      getForeclosureMoneyByProjectId_result result = new getForeclosureMoneyByProjectId_result();
      receiveBase(result, "getForeclosureMoneyByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getForeclosureMoneyByProjectId failed: unknown result");
    }

    public boolean addHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      send_addHouseBalance(houseBalanceDTO);
      return recv_addHouseBalance();
    }

    public void send_addHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      addHouseBalance_args args = new addHouseBalance_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      sendBase("addHouseBalance", args);
    }

    public boolean recv_addHouseBalance() throws org.apache.thrift.TException
    {
      addHouseBalance_result result = new addHouseBalance_result();
      receiveBase(result, "addHouseBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHouseBalance failed: unknown result");
    }

    public HouseBalanceDTO getHouseBalanceById(int pid) throws org.apache.thrift.TException
    {
      send_getHouseBalanceById(pid);
      return recv_getHouseBalanceById();
    }

    public void send_getHouseBalanceById(int pid) throws org.apache.thrift.TException
    {
      getHouseBalanceById_args args = new getHouseBalanceById_args();
      args.setPid(pid);
      sendBase("getHouseBalanceById", args);
    }

    public HouseBalanceDTO recv_getHouseBalanceById() throws org.apache.thrift.TException
    {
      getHouseBalanceById_result result = new getHouseBalanceById_result();
      receiveBase(result, "getHouseBalanceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHouseBalanceById failed: unknown result");
    }

    public boolean updateHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      send_updateHouseBalance(houseBalanceDTO);
      return recv_updateHouseBalance();
    }

    public void send_updateHouseBalance(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      updateHouseBalance_args args = new updateHouseBalance_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      sendBase("updateHouseBalance", args);
    }

    public boolean recv_updateHouseBalance() throws org.apache.thrift.TException
    {
      updateHouseBalance_result result = new updateHouseBalance_result();
      receiveBase(result, "updateHouseBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHouseBalance failed: unknown result");
    }

    public boolean balanceConfirm(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      send_balanceConfirm(houseBalanceDTO);
      return recv_balanceConfirm();
    }

    public void send_balanceConfirm(HouseBalanceDTO houseBalanceDTO) throws org.apache.thrift.TException
    {
      balanceConfirm_args args = new balanceConfirm_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      sendBase("balanceConfirm", args);
    }

    public boolean recv_balanceConfirm() throws org.apache.thrift.TException
    {
      balanceConfirm_result result = new balanceConfirm_result();
      receiveBase(result, "balanceConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "balanceConfirm failed: unknown result");
    }

    public Set<Map<String,String>> getHandleUser(int handleId, int handleFlowId, String loginUserName) throws org.apache.thrift.TException
    {
      send_getHandleUser(handleId, handleFlowId, loginUserName);
      return recv_getHandleUser();
    }

    public void send_getHandleUser(int handleId, int handleFlowId, String loginUserName) throws org.apache.thrift.TException
    {
      getHandleUser_args args = new getHandleUser_args();
      args.setHandleId(handleId);
      args.setHandleFlowId(handleFlowId);
      args.setLoginUserName(loginUserName);
      sendBase("getHandleUser", args);
    }

    public Set<Map<String,String>> recv_getHandleUser() throws org.apache.thrift.TException
    {
      getHandleUser_result result = new getHandleUser_result();
      receiveBase(result, "getHandleUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleUser failed: unknown result");
    }

    public int getProjectIdByHandleId(int handleId) throws org.apache.thrift.TException
    {
      send_getProjectIdByHandleId(handleId);
      return recv_getProjectIdByHandleId();
    }

    public void send_getProjectIdByHandleId(int handleId) throws org.apache.thrift.TException
    {
      getProjectIdByHandleId_args args = new getProjectIdByHandleId_args();
      args.setHandleId(handleId);
      sendBase("getProjectIdByHandleId", args);
    }

    public int recv_getProjectIdByHandleId() throws org.apache.thrift.TException
    {
      getProjectIdByHandleId_result result = new getProjectIdByHandleId_result();
      receiveBase(result, "getProjectIdByHandleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectIdByHandleId failed: unknown result");
    }

    public List<RefundDetailsDTO> findAllRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      send_findAllRefundDetails(refundDetailsDTO);
      return recv_findAllRefundDetails();
    }

    public void send_findAllRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      findAllRefundDetails_args args = new findAllRefundDetails_args();
      args.setRefundDetailsDTO(refundDetailsDTO);
      sendBase("findAllRefundDetails", args);
    }

    public List<RefundDetailsDTO> recv_findAllRefundDetails() throws org.apache.thrift.TException
    {
      findAllRefundDetails_result result = new findAllRefundDetails_result();
      receiveBase(result, "findAllRefundDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllRefundDetails failed: unknown result");
    }

    public int getRefundDetailsTotal(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      send_getRefundDetailsTotal(refundDetailsDTO);
      return recv_getRefundDetailsTotal();
    }

    public void send_getRefundDetailsTotal(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      getRefundDetailsTotal_args args = new getRefundDetailsTotal_args();
      args.setRefundDetailsDTO(refundDetailsDTO);
      sendBase("getRefundDetailsTotal", args);
    }

    public int recv_getRefundDetailsTotal() throws org.apache.thrift.TException
    {
      getRefundDetailsTotal_result result = new getRefundDetailsTotal_result();
      receiveBase(result, "getRefundDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundDetailsTotal failed: unknown result");
    }

    public List<RefundDetailsDTO> getRefundDetailsListByProjectId(int projectId, List<Integer> refundPros) throws org.apache.thrift.TException
    {
      send_getRefundDetailsListByProjectId(projectId, refundPros);
      return recv_getRefundDetailsListByProjectId();
    }

    public void send_getRefundDetailsListByProjectId(int projectId, List<Integer> refundPros) throws org.apache.thrift.TException
    {
      getRefundDetailsListByProjectId_args args = new getRefundDetailsListByProjectId_args();
      args.setProjectId(projectId);
      args.setRefundPros(refundPros);
      sendBase("getRefundDetailsListByProjectId", args);
    }

    public List<RefundDetailsDTO> recv_getRefundDetailsListByProjectId() throws org.apache.thrift.TException
    {
      getRefundDetailsListByProjectId_result result = new getRefundDetailsListByProjectId_result();
      receiveBase(result, "getRefundDetailsListByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundDetailsListByProjectId failed: unknown result");
    }

    public boolean addRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      send_addRefundDetails(refundDetailsDTO);
      return recv_addRefundDetails();
    }

    public void send_addRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      addRefundDetails_args args = new addRefundDetails_args();
      args.setRefundDetailsDTO(refundDetailsDTO);
      sendBase("addRefundDetails", args);
    }

    public boolean recv_addRefundDetails() throws org.apache.thrift.TException
    {
      addRefundDetails_result result = new addRefundDetails_result();
      receiveBase(result, "addRefundDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRefundDetails failed: unknown result");
    }

    public RefundDetailsDTO getRefundDetailsById(int pid) throws org.apache.thrift.TException
    {
      send_getRefundDetailsById(pid);
      return recv_getRefundDetailsById();
    }

    public void send_getRefundDetailsById(int pid) throws org.apache.thrift.TException
    {
      getRefundDetailsById_args args = new getRefundDetailsById_args();
      args.setPid(pid);
      sendBase("getRefundDetailsById", args);
    }

    public RefundDetailsDTO recv_getRefundDetailsById() throws org.apache.thrift.TException
    {
      getRefundDetailsById_result result = new getRefundDetailsById_result();
      receiveBase(result, "getRefundDetailsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundDetailsById failed: unknown result");
    }

    public boolean updateRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      send_updateRefundDetails(refundDetailsDTO);
      return recv_updateRefundDetails();
    }

    public void send_updateRefundDetails(RefundDetailsDTO refundDetailsDTO) throws org.apache.thrift.TException
    {
      updateRefundDetails_args args = new updateRefundDetails_args();
      args.setRefundDetailsDTO(refundDetailsDTO);
      sendBase("updateRefundDetails", args);
    }

    public boolean recv_updateRefundDetails() throws org.apache.thrift.TException
    {
      updateRefundDetails_result result = new updateRefundDetails_result();
      receiveBase(result, "updateRefundDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRefundDetails failed: unknown result");
    }

    public List<HandleFlowDTO> findAllHandleFlow(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException
    {
      send_findAllHandleFlow(handleFlowDTO);
      return recv_findAllHandleFlow();
    }

    public void send_findAllHandleFlow(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException
    {
      findAllHandleFlow_args args = new findAllHandleFlow_args();
      args.setHandleFlowDTO(handleFlowDTO);
      sendBase("findAllHandleFlow", args);
    }

    public List<HandleFlowDTO> recv_findAllHandleFlow() throws org.apache.thrift.TException
    {
      findAllHandleFlow_result result = new findAllHandleFlow_result();
      receiveBase(result, "findAllHandleFlow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHandleFlow failed: unknown result");
    }

    public int getHandleFlowTotal(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException
    {
      send_getHandleFlowTotal(handleFlowDTO);
      return recv_getHandleFlowTotal();
    }

    public void send_getHandleFlowTotal(HandleFlowDTO handleFlowDTO) throws org.apache.thrift.TException
    {
      getHandleFlowTotal_args args = new getHandleFlowTotal_args();
      args.setHandleFlowDTO(handleFlowDTO);
      sendBase("getHandleFlowTotal", args);
    }

    public int recv_getHandleFlowTotal() throws org.apache.thrift.TException
    {
      getHandleFlowTotal_result result = new getHandleFlowTotal_result();
      receiveBase(result, "getHandleFlowTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleFlowTotal failed: unknown result");
    }

    public List<HandleDynamicDTO> findAllHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      send_findAllHandleDynamic(handleDynamicDTO);
      return recv_findAllHandleDynamic();
    }

    public void send_findAllHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      findAllHandleDynamic_args args = new findAllHandleDynamic_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      sendBase("findAllHandleDynamic", args);
    }

    public List<HandleDynamicDTO> recv_findAllHandleDynamic() throws org.apache.thrift.TException
    {
      findAllHandleDynamic_result result = new findAllHandleDynamic_result();
      receiveBase(result, "findAllHandleDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHandleDynamic failed: unknown result");
    }

    public int getHandleDynamicTotal(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      send_getHandleDynamicTotal(handleDynamicDTO);
      return recv_getHandleDynamicTotal();
    }

    public void send_getHandleDynamicTotal(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      getHandleDynamicTotal_args args = new getHandleDynamicTotal_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      sendBase("getHandleDynamicTotal", args);
    }

    public int recv_getHandleDynamicTotal() throws org.apache.thrift.TException
    {
      getHandleDynamicTotal_result result = new getHandleDynamicTotal_result();
      receiveBase(result, "getHandleDynamicTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDynamicTotal failed: unknown result");
    }

    public int gethandleDaysByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_gethandleDaysByProjectId(projectId);
      return recv_gethandleDaysByProjectId();
    }

    public void send_gethandleDaysByProjectId(int projectId) throws org.apache.thrift.TException
    {
      gethandleDaysByProjectId_args args = new gethandleDaysByProjectId_args();
      args.setProjectId(projectId);
      sendBase("gethandleDaysByProjectId", args);
    }

    public int recv_gethandleDaysByProjectId() throws org.apache.thrift.TException
    {
      gethandleDaysByProjectId_result result = new gethandleDaysByProjectId_result();
      receiveBase(result, "gethandleDaysByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gethandleDaysByProjectId failed: unknown result");
    }

    public boolean addHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      send_addHandleDynamic(handleDynamicDTO);
      return recv_addHandleDynamic();
    }

    public void send_addHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      addHandleDynamic_args args = new addHandleDynamic_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      sendBase("addHandleDynamic", args);
    }

    public boolean recv_addHandleDynamic() throws org.apache.thrift.TException
    {
      addHandleDynamic_result result = new addHandleDynamic_result();
      receiveBase(result, "addHandleDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHandleDynamic failed: unknown result");
    }

    public HandleDynamicDTO getHandleDynamicById(int pid) throws org.apache.thrift.TException
    {
      send_getHandleDynamicById(pid);
      return recv_getHandleDynamicById();
    }

    public void send_getHandleDynamicById(int pid) throws org.apache.thrift.TException
    {
      getHandleDynamicById_args args = new getHandleDynamicById_args();
      args.setPid(pid);
      sendBase("getHandleDynamicById", args);
    }

    public HandleDynamicDTO recv_getHandleDynamicById() throws org.apache.thrift.TException
    {
      getHandleDynamicById_result result = new getHandleDynamicById_result();
      receiveBase(result, "getHandleDynamicById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDynamicById failed: unknown result");
    }

    public boolean updateHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      send_updateHandleDynamic(handleDynamicDTO);
      return recv_updateHandleDynamic();
    }

    public void send_updateHandleDynamic(HandleDynamicDTO handleDynamicDTO) throws org.apache.thrift.TException
    {
      updateHandleDynamic_args args = new updateHandleDynamic_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      sendBase("updateHandleDynamic", args);
    }

    public boolean recv_updateHandleDynamic() throws org.apache.thrift.TException
    {
      updateHandleDynamic_result result = new updateHandleDynamic_result();
      receiveBase(result, "updateHandleDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHandleDynamic failed: unknown result");
    }

    public boolean updateHandleDynamicAndFinishTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      send_updateHandleDynamicAndFinishTask(handleDynamicDTO, loginUserName);
      return recv_updateHandleDynamicAndFinishTask();
    }

    public void send_updateHandleDynamicAndFinishTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      updateHandleDynamicAndFinishTask_args args = new updateHandleDynamicAndFinishTask_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      args.setLoginUserName(loginUserName);
      sendBase("updateHandleDynamicAndFinishTask", args);
    }

    public boolean recv_updateHandleDynamicAndFinishTask() throws org.apache.thrift.TException
    {
      updateHandleDynamicAndFinishTask_result result = new updateHandleDynamicAndFinishTask_result();
      receiveBase(result, "updateHandleDynamicAndFinishTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHandleDynamicAndFinishTask failed: unknown result");
    }

    public boolean finishHandleDynamicTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      send_finishHandleDynamicTask(handleDynamicDTO, loginUserName);
      return recv_finishHandleDynamicTask();
    }

    public void send_finishHandleDynamicTask(HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      finishHandleDynamicTask_args args = new finishHandleDynamicTask_args();
      args.setHandleDynamicDTO(handleDynamicDTO);
      args.setLoginUserName(loginUserName);
      sendBase("finishHandleDynamicTask", args);
    }

    public boolean recv_finishHandleDynamicTask() throws org.apache.thrift.TException
    {
      finishHandleDynamicTask_result result = new finishHandleDynamicTask_result();
      receiveBase(result, "finishHandleDynamicTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "finishHandleDynamicTask failed: unknown result");
    }

    public boolean finishAllHandleDynamicTask(int projectId, String loginUserName) throws org.apache.thrift.TException
    {
      send_finishAllHandleDynamicTask(projectId, loginUserName);
      return recv_finishAllHandleDynamicTask();
    }

    public void send_finishAllHandleDynamicTask(int projectId, String loginUserName) throws org.apache.thrift.TException
    {
      finishAllHandleDynamicTask_args args = new finishAllHandleDynamicTask_args();
      args.setProjectId(projectId);
      args.setLoginUserName(loginUserName);
      sendBase("finishAllHandleDynamicTask", args);
    }

    public boolean recv_finishAllHandleDynamicTask() throws org.apache.thrift.TException
    {
      finishAllHandleDynamicTask_result result = new finishAllHandleDynamicTask_result();
      receiveBase(result, "finishAllHandleDynamicTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "finishAllHandleDynamicTask failed: unknown result");
    }

    public List<BizHandleWorkflowDTO> findAllBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      send_findAllBizHandleWorkflow(bizHandleWorkflowDto);
      return recv_findAllBizHandleWorkflow();
    }

    public void send_findAllBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      findAllBizHandleWorkflow_args args = new findAllBizHandleWorkflow_args();
      args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
      sendBase("findAllBizHandleWorkflow", args);
    }

    public List<BizHandleWorkflowDTO> recv_findAllBizHandleWorkflow() throws org.apache.thrift.TException
    {
      findAllBizHandleWorkflow_result result = new findAllBizHandleWorkflow_result();
      receiveBase(result, "findAllBizHandleWorkflow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllBizHandleWorkflow failed: unknown result");
    }

    public boolean addBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      send_addBizHandleWorkflow(bizHandleWorkflowDto);
      return recv_addBizHandleWorkflow();
    }

    public void send_addBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      addBizHandleWorkflow_args args = new addBizHandleWorkflow_args();
      args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
      sendBase("addBizHandleWorkflow", args);
    }

    public boolean recv_addBizHandleWorkflow() throws org.apache.thrift.TException
    {
      addBizHandleWorkflow_result result = new addBizHandleWorkflow_result();
      receiveBase(result, "addBizHandleWorkflow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBizHandleWorkflow failed: unknown result");
    }

    public boolean updateBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      send_updateBizHandleWorkflow(bizHandleWorkflowDto);
      return recv_updateBizHandleWorkflow();
    }

    public void send_updateBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto) throws org.apache.thrift.TException
    {
      updateBizHandleWorkflow_args args = new updateBizHandleWorkflow_args();
      args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
      sendBase("updateBizHandleWorkflow", args);
    }

    public boolean recv_updateBizHandleWorkflow() throws org.apache.thrift.TException
    {
      updateBizHandleWorkflow_result result = new updateBizHandleWorkflow_result();
      receiveBase(result, "updateBizHandleWorkflow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizHandleWorkflow failed: unknown result");
    }

    public List<HandleDifferWarnDTO> findAllHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_findAllHandleDifferWarn(handleDifferWarnDTO);
      return recv_findAllHandleDifferWarn();
    }

    public void send_findAllHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      findAllHandleDifferWarn_args args = new findAllHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("findAllHandleDifferWarn", args);
    }

    public List<HandleDifferWarnDTO> recv_findAllHandleDifferWarn() throws org.apache.thrift.TException
    {
      findAllHandleDifferWarn_result result = new findAllHandleDifferWarn_result();
      receiveBase(result, "findAllHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHandleDifferWarn failed: unknown result");
    }

    public int getHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_getHandleDifferWarnTotal(handleDifferWarnDTO);
      return recv_getHandleDifferWarnTotal();
    }

    public void send_getHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      getHandleDifferWarnTotal_args args = new getHandleDifferWarnTotal_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("getHandleDifferWarnTotal", args);
    }

    public int recv_getHandleDifferWarnTotal() throws org.apache.thrift.TException
    {
      getHandleDifferWarnTotal_result result = new getHandleDifferWarnTotal_result();
      receiveBase(result, "getHandleDifferWarnTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDifferWarnTotal failed: unknown result");
    }

    public int getHisHandleDifferWarnCount(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_getHisHandleDifferWarnCount(handleDifferWarnDTO);
      return recv_getHisHandleDifferWarnCount();
    }

    public void send_getHisHandleDifferWarnCount(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      getHisHandleDifferWarnCount_args args = new getHisHandleDifferWarnCount_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("getHisHandleDifferWarnCount", args);
    }

    public int recv_getHisHandleDifferWarnCount() throws org.apache.thrift.TException
    {
      getHisHandleDifferWarnCount_result result = new getHisHandleDifferWarnCount_result();
      receiveBase(result, "getHisHandleDifferWarnCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHisHandleDifferWarnCount failed: unknown result");
    }

    public List<HandleDifferWarnDTO> findIndexHandleDifferWarn(int userId) throws org.apache.thrift.TException
    {
      send_findIndexHandleDifferWarn(userId);
      return recv_findIndexHandleDifferWarn();
    }

    public void send_findIndexHandleDifferWarn(int userId) throws org.apache.thrift.TException
    {
      findIndexHandleDifferWarn_args args = new findIndexHandleDifferWarn_args();
      args.setUserId(userId);
      sendBase("findIndexHandleDifferWarn", args);
    }

    public List<HandleDifferWarnDTO> recv_findIndexHandleDifferWarn() throws org.apache.thrift.TException
    {
      findIndexHandleDifferWarn_result result = new findIndexHandleDifferWarn_result();
      receiveBase(result, "findIndexHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findIndexHandleDifferWarn failed: unknown result");
    }

    public int getIndexHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_getIndexHandleDifferWarnTotal(handleDifferWarnDTO);
      return recv_getIndexHandleDifferWarnTotal();
    }

    public void send_getIndexHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      getIndexHandleDifferWarnTotal_args args = new getIndexHandleDifferWarnTotal_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("getIndexHandleDifferWarnTotal", args);
    }

    public int recv_getIndexHandleDifferWarnTotal() throws org.apache.thrift.TException
    {
      getIndexHandleDifferWarnTotal_result result = new getIndexHandleDifferWarnTotal_result();
      receiveBase(result, "getIndexHandleDifferWarnTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIndexHandleDifferWarnTotal failed: unknown result");
    }

    public boolean addHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_addHandleDifferWarn(handleDifferWarnDTO);
      return recv_addHandleDifferWarn();
    }

    public void send_addHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      addHandleDifferWarn_args args = new addHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("addHandleDifferWarn", args);
    }

    public boolean recv_addHandleDifferWarn() throws org.apache.thrift.TException
    {
      addHandleDifferWarn_result result = new addHandleDifferWarn_result();
      receiveBase(result, "addHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHandleDifferWarn failed: unknown result");
    }

    public boolean delHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_delHandleDifferWarn(handleDifferWarnDTO);
      return recv_delHandleDifferWarn();
    }

    public void send_delHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      delHandleDifferWarn_args args = new delHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("delHandleDifferWarn", args);
    }

    public boolean recv_delHandleDifferWarn() throws org.apache.thrift.TException
    {
      delHandleDifferWarn_result result = new delHandleDifferWarn_result();
      receiveBase(result, "delHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delHandleDifferWarn failed: unknown result");
    }

    public HandleDifferWarnDTO getHandleDifferWarnById(int pid) throws org.apache.thrift.TException
    {
      send_getHandleDifferWarnById(pid);
      return recv_getHandleDifferWarnById();
    }

    public void send_getHandleDifferWarnById(int pid) throws org.apache.thrift.TException
    {
      getHandleDifferWarnById_args args = new getHandleDifferWarnById_args();
      args.setPid(pid);
      sendBase("getHandleDifferWarnById", args);
    }

    public HandleDifferWarnDTO recv_getHandleDifferWarnById() throws org.apache.thrift.TException
    {
      getHandleDifferWarnById_result result = new getHandleDifferWarnById_result();
      receiveBase(result, "getHandleDifferWarnById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDifferWarnById failed: unknown result");
    }

    public boolean updateHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_updateHandleDifferWarn(handleDifferWarnDTO);
      return recv_updateHandleDifferWarn();
    }

    public void send_updateHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      updateHandleDifferWarn_args args = new updateHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("updateHandleDifferWarn", args);
    }

    public boolean recv_updateHandleDifferWarn() throws org.apache.thrift.TException
    {
      updateHandleDifferWarn_result result = new updateHandleDifferWarn_result();
      receiveBase(result, "updateHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHandleDifferWarn failed: unknown result");
    }

    public boolean addHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_addHisHandleDifferWarn(handleDifferWarnDTO);
      return recv_addHisHandleDifferWarn();
    }

    public void send_addHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      addHisHandleDifferWarn_args args = new addHisHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("addHisHandleDifferWarn", args);
    }

    public boolean recv_addHisHandleDifferWarn() throws org.apache.thrift.TException
    {
      addHisHandleDifferWarn_result result = new addHisHandleDifferWarn_result();
      receiveBase(result, "addHisHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHisHandleDifferWarn failed: unknown result");
    }

    public List<HandleDifferWarnDTO> findAllHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_findAllHisHandleDifferWarn(handleDifferWarnDTO);
      return recv_findAllHisHandleDifferWarn();
    }

    public void send_findAllHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      findAllHisHandleDifferWarn_args args = new findAllHisHandleDifferWarn_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("findAllHisHandleDifferWarn", args);
    }

    public List<HandleDifferWarnDTO> recv_findAllHisHandleDifferWarn() throws org.apache.thrift.TException
    {
      findAllHisHandleDifferWarn_result result = new findAllHisHandleDifferWarn_result();
      receiveBase(result, "findAllHisHandleDifferWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHisHandleDifferWarn failed: unknown result");
    }

    public int getHisHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_getHisHandleDifferWarnTotal(handleDifferWarnDTO);
      return recv_getHisHandleDifferWarnTotal();
    }

    public void send_getHisHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      getHisHandleDifferWarnTotal_args args = new getHisHandleDifferWarnTotal_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("getHisHandleDifferWarnTotal", args);
    }

    public int recv_getHisHandleDifferWarnTotal() throws org.apache.thrift.TException
    {
      getHisHandleDifferWarnTotal_result result = new getHisHandleDifferWarnTotal_result();
      receiveBase(result, "getHisHandleDifferWarnTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHisHandleDifferWarnTotal failed: unknown result");
    }

    public List<HandleDynamicFileDTO> findAllHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      send_findAllHandleDynamicFile(handleDynamicFileDTO);
      return recv_findAllHandleDynamicFile();
    }

    public void send_findAllHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      findAllHandleDynamicFile_args args = new findAllHandleDynamicFile_args();
      args.setHandleDynamicFileDTO(handleDynamicFileDTO);
      sendBase("findAllHandleDynamicFile", args);
    }

    public List<HandleDynamicFileDTO> recv_findAllHandleDynamicFile() throws org.apache.thrift.TException
    {
      findAllHandleDynamicFile_result result = new findAllHandleDynamicFile_result();
      receiveBase(result, "findAllHandleDynamicFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHandleDynamicFile failed: unknown result");
    }

    public int getHandleDynamicFileTotal(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      send_getHandleDynamicFileTotal(handleDynamicFileDTO);
      return recv_getHandleDynamicFileTotal();
    }

    public void send_getHandleDynamicFileTotal(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      getHandleDynamicFileTotal_args args = new getHandleDynamicFileTotal_args();
      args.setHandleDynamicFileDTO(handleDynamicFileDTO);
      sendBase("getHandleDynamicFileTotal", args);
    }

    public int recv_getHandleDynamicFileTotal() throws org.apache.thrift.TException
    {
      getHandleDynamicFileTotal_result result = new getHandleDynamicFileTotal_result();
      receiveBase(result, "getHandleDynamicFileTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDynamicFileTotal failed: unknown result");
    }

    public boolean addHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile) throws org.apache.thrift.TException
    {
      send_addHandleDynamicFile(handleDynamicFileDTO, bizFile);
      return recv_addHandleDynamicFile();
    }

    public void send_addHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile) throws org.apache.thrift.TException
    {
      addHandleDynamicFile_args args = new addHandleDynamicFile_args();
      args.setHandleDynamicFileDTO(handleDynamicFileDTO);
      args.setBizFile(bizFile);
      sendBase("addHandleDynamicFile", args);
    }

    public boolean recv_addHandleDynamicFile() throws org.apache.thrift.TException
    {
      addHandleDynamicFile_result result = new addHandleDynamicFile_result();
      receiveBase(result, "addHandleDynamicFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHandleDynamicFile failed: unknown result");
    }

    public boolean addHandleDynamicFileOfComm(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      send_addHandleDynamicFileOfComm(handleDynamicFileDTO);
      return recv_addHandleDynamicFileOfComm();
    }

    public void send_addHandleDynamicFileOfComm(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      addHandleDynamicFileOfComm_args args = new addHandleDynamicFileOfComm_args();
      args.setHandleDynamicFileDTO(handleDynamicFileDTO);
      sendBase("addHandleDynamicFileOfComm", args);
    }

    public boolean recv_addHandleDynamicFileOfComm() throws org.apache.thrift.TException
    {
      addHandleDynamicFileOfComm_result result = new addHandleDynamicFileOfComm_result();
      receiveBase(result, "addHandleDynamicFileOfComm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHandleDynamicFileOfComm failed: unknown result");
    }

    public HandleDynamicFileDTO getHandleDynamicFileById(int pid) throws org.apache.thrift.TException
    {
      send_getHandleDynamicFileById(pid);
      return recv_getHandleDynamicFileById();
    }

    public void send_getHandleDynamicFileById(int pid) throws org.apache.thrift.TException
    {
      getHandleDynamicFileById_args args = new getHandleDynamicFileById_args();
      args.setPid(pid);
      sendBase("getHandleDynamicFileById", args);
    }

    public HandleDynamicFileDTO recv_getHandleDynamicFileById() throws org.apache.thrift.TException
    {
      getHandleDynamicFileById_result result = new getHandleDynamicFileById_result();
      receiveBase(result, "getHandleDynamicFileById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDynamicFileById failed: unknown result");
    }

    public boolean updateHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      send_updateHandleDynamicFile(handleDynamicFileDTO);
      return recv_updateHandleDynamicFile();
    }

    public void send_updateHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO) throws org.apache.thrift.TException
    {
      updateHandleDynamicFile_args args = new updateHandleDynamicFile_args();
      args.setHandleDynamicFileDTO(handleDynamicFileDTO);
      sendBase("updateHandleDynamicFile", args);
    }

    public boolean recv_updateHandleDynamicFile() throws org.apache.thrift.TException
    {
      updateHandleDynamicFile_result result = new updateHandleDynamicFile_result();
      receiveBase(result, "updateHandleDynamicFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHandleDynamicFile failed: unknown result");
    }

    public List<Integer> getCanHandleFlowByHandleId(int handleId, String userName) throws org.apache.thrift.TException
    {
      send_getCanHandleFlowByHandleId(handleId, userName);
      return recv_getCanHandleFlowByHandleId();
    }

    public void send_getCanHandleFlowByHandleId(int handleId, String userName) throws org.apache.thrift.TException
    {
      getCanHandleFlowByHandleId_args args = new getCanHandleFlowByHandleId_args();
      args.setHandleId(handleId);
      args.setUserName(userName);
      sendBase("getCanHandleFlowByHandleId", args);
    }

    public List<Integer> recv_getCanHandleFlowByHandleId() throws org.apache.thrift.TException
    {
      getCanHandleFlowByHandleId_result result = new getCanHandleFlowByHandleId_result();
      receiveBase(result, "getCanHandleFlowByHandleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCanHandleFlowByHandleId failed: unknown result");
    }

    public List<Integer> getCanHandleDynamicIds(String userName) throws org.apache.thrift.TException
    {
      send_getCanHandleDynamicIds(userName);
      return recv_getCanHandleDynamicIds();
    }

    public void send_getCanHandleDynamicIds(String userName) throws org.apache.thrift.TException
    {
      getCanHandleDynamicIds_args args = new getCanHandleDynamicIds_args();
      args.setUserName(userName);
      sendBase("getCanHandleDynamicIds", args);
    }

    public List<Integer> recv_getCanHandleDynamicIds() throws org.apache.thrift.TException
    {
      getCanHandleDynamicIds_result result = new getCanHandleDynamicIds_result();
      receiveBase(result, "getCanHandleDynamicIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCanHandleDynamicIds failed: unknown result");
    }

    public List<HandleDifferWarnDTO> getNeedHandleWarn(int userId) throws org.apache.thrift.TException
    {
      send_getNeedHandleWarn(userId);
      return recv_getNeedHandleWarn();
    }

    public void send_getNeedHandleWarn(int userId) throws org.apache.thrift.TException
    {
      getNeedHandleWarn_args args = new getNeedHandleWarn_args();
      args.setUserId(userId);
      sendBase("getNeedHandleWarn", args);
    }

    public List<HandleDifferWarnDTO> recv_getNeedHandleWarn() throws org.apache.thrift.TException
    {
      getNeedHandleWarn_result result = new getNeedHandleWarn_result();
      receiveBase(result, "getNeedHandleWarn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNeedHandleWarn failed: unknown result");
    }

    public List<HandleDifferWarnIndexDTO> queryNeedHandleWarnIndex(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException
    {
      send_queryNeedHandleWarnIndex(handleDifferWarnIndexDTO);
      return recv_queryNeedHandleWarnIndex();
    }

    public void send_queryNeedHandleWarnIndex(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException
    {
      queryNeedHandleWarnIndex_args args = new queryNeedHandleWarnIndex_args();
      args.setHandleDifferWarnIndexDTO(handleDifferWarnIndexDTO);
      sendBase("queryNeedHandleWarnIndex", args);
    }

    public List<HandleDifferWarnIndexDTO> recv_queryNeedHandleWarnIndex() throws org.apache.thrift.TException
    {
      queryNeedHandleWarnIndex_result result = new queryNeedHandleWarnIndex_result();
      receiveBase(result, "queryNeedHandleWarnIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryNeedHandleWarnIndex failed: unknown result");
    }

    public int getNeedHandleWarnIndexTotal(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException
    {
      send_getNeedHandleWarnIndexTotal(handleDifferWarnIndexDTO);
      return recv_getNeedHandleWarnIndexTotal();
    }

    public void send_getNeedHandleWarnIndexTotal(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) throws org.apache.thrift.TException
    {
      getNeedHandleWarnIndexTotal_args args = new getNeedHandleWarnIndexTotal_args();
      args.setHandleDifferWarnIndexDTO(handleDifferWarnIndexDTO);
      sendBase("getNeedHandleWarnIndexTotal", args);
    }

    public int recv_getNeedHandleWarnIndexTotal() throws org.apache.thrift.TException
    {
      getNeedHandleWarnIndexTotal_result result = new getNeedHandleWarnIndexTotal_result();
      receiveBase(result, "getNeedHandleWarnIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNeedHandleWarnIndexTotal failed: unknown result");
    }

    public List<ForeclosureIndexDTO> queryForeclosureIndex(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException
    {
      send_queryForeclosureIndex(foreclosureIndexDTO);
      return recv_queryForeclosureIndex();
    }

    public void send_queryForeclosureIndex(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException
    {
      queryForeclosureIndex_args args = new queryForeclosureIndex_args();
      args.setForeclosureIndexDTO(foreclosureIndexDTO);
      sendBase("queryForeclosureIndex", args);
    }

    public List<ForeclosureIndexDTO> recv_queryForeclosureIndex() throws org.apache.thrift.TException
    {
      queryForeclosureIndex_result result = new queryForeclosureIndex_result();
      receiveBase(result, "queryForeclosureIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureIndex failed: unknown result");
    }

    public int getForeclosureIndexTotal(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException
    {
      send_getForeclosureIndexTotal(foreclosureIndexDTO);
      return recv_getForeclosureIndexTotal();
    }

    public void send_getForeclosureIndexTotal(ForeclosureIndexDTO foreclosureIndexDTO) throws org.apache.thrift.TException
    {
      getForeclosureIndexTotal_args args = new getForeclosureIndexTotal_args();
      args.setForeclosureIndexDTO(foreclosureIndexDTO);
      sendBase("getForeclosureIndexTotal", args);
    }

    public int recv_getForeclosureIndexTotal() throws org.apache.thrift.TException
    {
      getForeclosureIndexTotal_result result = new getForeclosureIndexTotal_result();
      receiveBase(result, "getForeclosureIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getForeclosureIndexTotal failed: unknown result");
    }

    public boolean foreclosure(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      send_foreclosure(houseBalanceDTO, handleInfoDTO, handleDynamicDTO, loginUserName);
      return recv_foreclosure();
    }

    public void send_foreclosure(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName) throws org.apache.thrift.TException
    {
      foreclosure_args args = new foreclosure_args();
      args.setHouseBalanceDTO(houseBalanceDTO);
      args.setHandleInfoDTO(handleInfoDTO);
      args.setHandleDynamicDTO(handleDynamicDTO);
      args.setLoginUserName(loginUserName);
      sendBase("foreclosure", args);
    }

    public boolean recv_foreclosure() throws org.apache.thrift.TException
    {
      foreclosure_result result = new foreclosure_result();
      receiveBase(result, "foreclosure");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "foreclosure failed: unknown result");
    }

    public List<OrgBizHandlePage> queryOrgBizHandlePage(OrgBizHandlePage query) throws org.apache.thrift.TException
    {
      send_queryOrgBizHandlePage(query);
      return recv_queryOrgBizHandlePage();
    }

    public void send_queryOrgBizHandlePage(OrgBizHandlePage query) throws org.apache.thrift.TException
    {
      queryOrgBizHandlePage_args args = new queryOrgBizHandlePage_args();
      args.setQuery(query);
      sendBase("queryOrgBizHandlePage", args);
    }

    public List<OrgBizHandlePage> recv_queryOrgBizHandlePage() throws org.apache.thrift.TException
    {
      queryOrgBizHandlePage_result result = new queryOrgBizHandlePage_result();
      receiveBase(result, "queryOrgBizHandlePage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOrgBizHandlePage failed: unknown result");
    }

    public int getOrgBizHandlePageTotal(OrgBizHandlePage query) throws org.apache.thrift.TException
    {
      send_getOrgBizHandlePageTotal(query);
      return recv_getOrgBizHandlePageTotal();
    }

    public void send_getOrgBizHandlePageTotal(OrgBizHandlePage query) throws org.apache.thrift.TException
    {
      getOrgBizHandlePageTotal_args args = new getOrgBizHandlePageTotal_args();
      args.setQuery(query);
      sendBase("getOrgBizHandlePageTotal", args);
    }

    public int recv_getOrgBizHandlePageTotal() throws org.apache.thrift.TException
    {
      getOrgBizHandlePageTotal_result result = new getOrgBizHandlePageTotal_result();
      receiveBase(result, "getOrgBizHandlePageTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgBizHandlePageTotal failed: unknown result");
    }

    public List<HandleDifferWarnDTO> getHandleDifferWarnList(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      send_getHandleDifferWarnList(handleDifferWarnDTO);
      return recv_getHandleDifferWarnList();
    }

    public void send_getHandleDifferWarnList(HandleDifferWarnDTO handleDifferWarnDTO) throws org.apache.thrift.TException
    {
      getHandleDifferWarnList_args args = new getHandleDifferWarnList_args();
      args.setHandleDifferWarnDTO(handleDifferWarnDTO);
      sendBase("getHandleDifferWarnList", args);
    }

    public List<HandleDifferWarnDTO> recv_getHandleDifferWarnList() throws org.apache.thrift.TException
    {
      getHandleDifferWarnList_result result = new getHandleDifferWarnList_result();
      receiveBase(result, "getHandleDifferWarnList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDifferWarnList failed: unknown result");
    }

    public List<HandleDynamicFileDTO> findHandleDynamicFileByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_findHandleDynamicFileByProjectId(projectId);
      return recv_findHandleDynamicFileByProjectId();
    }

    public void send_findHandleDynamicFileByProjectId(int projectId) throws org.apache.thrift.TException
    {
      findHandleDynamicFileByProjectId_args args = new findHandleDynamicFileByProjectId_args();
      args.setProjectId(projectId);
      sendBase("findHandleDynamicFileByProjectId", args);
    }

    public List<HandleDynamicFileDTO> recv_findHandleDynamicFileByProjectId() throws org.apache.thrift.TException
    {
      findHandleDynamicFileByProjectId_result result = new findHandleDynamicFileByProjectId_result();
      receiveBase(result, "findHandleDynamicFileByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHandleDynamicFileByProjectId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findAllApplyHandleIndex(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllApplyHandleIndex_call method_call = new findAllApplyHandleIndex_call(applyHandleIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllApplyHandleIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleIndexDTO applyHandleIndexDTO;
      public findAllApplyHandleIndex_call(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleIndexDTO = applyHandleIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllApplyHandleIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllApplyHandleIndex_args args = new findAllApplyHandleIndex_args();
        args.setApplyHandleIndexDTO(applyHandleIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ApplyHandleIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllApplyHandleIndex();
      }
    }

    public void getApplyHandleIndexTotal(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyHandleIndexTotal_call method_call = new getApplyHandleIndexTotal_call(applyHandleIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyHandleIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleIndexDTO applyHandleIndexDTO;
      public getApplyHandleIndexTotal_call(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleIndexDTO = applyHandleIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyHandleIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyHandleIndexTotal_args args = new getApplyHandleIndexTotal_args();
        args.setApplyHandleIndexDTO(applyHandleIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyHandleIndexTotal();
      }
    }

    public void qeuryHandleDynamicCountMapList(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      qeuryHandleDynamicCountMapList_call method_call = new qeuryHandleDynamicCountMapList_call(applyHandleIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class qeuryHandleDynamicCountMapList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleIndexDTO applyHandleIndexDTO;
      public qeuryHandleDynamicCountMapList_call(ApplyHandleIndexDTO applyHandleIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleIndexDTO = applyHandleIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("qeuryHandleDynamicCountMapList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        qeuryHandleDynamicCountMapList_args args = new qeuryHandleDynamicCountMapList_args();
        args.setApplyHandleIndexDTO(applyHandleIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDynamicMap> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_qeuryHandleDynamicCountMapList();
      }
    }

    public void findAllHandleInfoDTO(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHandleInfoDTO_call method_call = new findAllHandleInfoDTO_call(handleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHandleInfoDTO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleInfoDTO handleInfoDTO;
      public findAllHandleInfoDTO_call(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleInfoDTO = handleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHandleInfoDTO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHandleInfoDTO_args args = new findAllHandleInfoDTO_args();
        args.setHandleInfoDTO(handleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleInfoDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHandleInfoDTO();
      }
    }

    public void getHandleInfoDTOTotal(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleInfoDTOTotal_call method_call = new getHandleInfoDTOTotal_call(handleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleInfoDTOTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleInfoDTO handleInfoDTO;
      public getHandleInfoDTOTotal_call(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleInfoDTO = handleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleInfoDTOTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleInfoDTOTotal_args args = new getHandleInfoDTOTotal_args();
        args.setHandleInfoDTO(handleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleInfoDTOTotal();
      }
    }

    public void addHandleInfo(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHandleInfo_call method_call = new addHandleInfo_call(handleInfoDTO, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHandleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleInfoDTO handleInfoDTO;
      private Map<String,String> paramMap;
      public addHandleInfo_call(HandleInfoDTO handleInfoDTO, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleInfoDTO = handleInfoDTO;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHandleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHandleInfo_args args = new addHandleInfo_args();
        args.setHandleInfoDTO(handleInfoDTO);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHandleInfo();
      }
    }

    public void getHandleInfoById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleInfoById_call method_call = new getHandleInfoById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getHandleInfoById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleInfoById_args args = new getHandleInfoById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HandleInfoDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleInfoById();
      }
    }

    public void getHandleInfoByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleInfoByProjectId_call method_call = new getHandleInfoByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleInfoByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getHandleInfoByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleInfoByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleInfoByProjectId_args args = new getHandleInfoByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HandleInfoDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleInfoByProjectId();
      }
    }

    public void updateHandleInfo(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHandleInfo_call method_call = new updateHandleInfo_call(handleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHandleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleInfoDTO handleInfoDTO;
      public updateHandleInfo_call(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleInfoDTO = handleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHandleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHandleInfo_args args = new updateHandleInfo_args();
        args.setHandleInfoDTO(handleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHandleInfo();
      }
    }

    public void foreclosureTurnDown(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      foreclosureTurnDown_call method_call = new foreclosureTurnDown_call(handleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class foreclosureTurnDown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleInfoDTO handleInfoDTO;
      public foreclosureTurnDown_call(HandleInfoDTO handleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleInfoDTO = handleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("foreclosureTurnDown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        foreclosureTurnDown_args args = new foreclosureTurnDown_args();
        args.setHandleInfoDTO(handleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_foreclosureTurnDown();
      }
    }

    public void isBalanceConfirm(int projectId, int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isBalanceConfirm_call method_call = new isBalanceConfirm_call(projectId, handleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isBalanceConfirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private int handleId;
      public isBalanceConfirm_call(int projectId, int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.handleId = handleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isBalanceConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isBalanceConfirm_args args = new isBalanceConfirm_args();
        args.setProjectId(projectId);
        args.setHandleId(handleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isBalanceConfirm();
      }
    }

    public void findAllApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllApplyHandleInfo_call method_call = new findAllApplyHandleInfo_call(applyHandleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllApplyHandleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleInfoDTO applyHandleInfoDTO;
      public findAllApplyHandleInfo_call(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleInfoDTO = applyHandleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllApplyHandleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllApplyHandleInfo_args args = new findAllApplyHandleInfo_args();
        args.setApplyHandleInfoDTO(applyHandleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ApplyHandleInfoDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllApplyHandleInfo();
      }
    }

    public void getApplyHandleInfoTotal(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyHandleInfoTotal_call method_call = new getApplyHandleInfoTotal_call(applyHandleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyHandleInfoTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleInfoDTO applyHandleInfoDTO;
      public getApplyHandleInfoTotal_call(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleInfoDTO = applyHandleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyHandleInfoTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyHandleInfoTotal_args args = new getApplyHandleInfoTotal_args();
        args.setApplyHandleInfoDTO(applyHandleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyHandleInfoTotal();
      }
    }

    public void addApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addApplyHandleInfo_call method_call = new addApplyHandleInfo_call(applyHandleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addApplyHandleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleInfoDTO applyHandleInfoDTO;
      public addApplyHandleInfo_call(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleInfoDTO = applyHandleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplyHandleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addApplyHandleInfo_args args = new addApplyHandleInfo_args();
        args.setApplyHandleInfoDTO(applyHandleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addApplyHandleInfo();
      }
    }

    public void getApplyHandleInfoById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyHandleInfoById_call method_call = new getApplyHandleInfoById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyHandleInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getApplyHandleInfoById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyHandleInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyHandleInfoById_args args = new getApplyHandleInfoById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplyHandleInfoDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyHandleInfoById();
      }
    }

    public void updateApplyHandleInfo(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplyHandleInfo_call method_call = new updateApplyHandleInfo_call(applyHandleInfoDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplyHandleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyHandleInfoDTO applyHandleInfoDTO;
      public updateApplyHandleInfo_call(ApplyHandleInfoDTO applyHandleInfoDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyHandleInfoDTO = applyHandleInfoDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplyHandleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplyHandleInfo_args args = new updateApplyHandleInfo_args();
        args.setApplyHandleInfoDTO(applyHandleInfoDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplyHandleInfo();
      }
    }

    public void findAllHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHouseBalance_call method_call = new findAllHouseBalance_call(houseBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHouseBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      public findAllHouseBalance_call(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHouseBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHouseBalance_args args = new findAllHouseBalance_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HouseBalanceDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHouseBalance();
      }
    }

    public void getHouseBalanceTotal(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHouseBalanceTotal_call method_call = new getHouseBalanceTotal_call(houseBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHouseBalanceTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      public getHouseBalanceTotal_call(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHouseBalanceTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHouseBalanceTotal_args args = new getHouseBalanceTotal_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHouseBalanceTotal();
      }
    }

    public void getHouseBalanceListByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHouseBalanceListByProjectId_call method_call = new getHouseBalanceListByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHouseBalanceListByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getHouseBalanceListByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHouseBalanceListByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHouseBalanceListByProjectId_args args = new getHouseBalanceListByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HouseBalanceDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHouseBalanceListByProjectId();
      }
    }

    public void getForeclosureMoneyByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getForeclosureMoneyByProjectId_call method_call = new getForeclosureMoneyByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getForeclosureMoneyByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getForeclosureMoneyByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getForeclosureMoneyByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getForeclosureMoneyByProjectId_args args = new getForeclosureMoneyByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getForeclosureMoneyByProjectId();
      }
    }

    public void addHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHouseBalance_call method_call = new addHouseBalance_call(houseBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHouseBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      public addHouseBalance_call(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHouseBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHouseBalance_args args = new addHouseBalance_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHouseBalance();
      }
    }

    public void getHouseBalanceById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHouseBalanceById_call method_call = new getHouseBalanceById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHouseBalanceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getHouseBalanceById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHouseBalanceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHouseBalanceById_args args = new getHouseBalanceById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HouseBalanceDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHouseBalanceById();
      }
    }

    public void updateHouseBalance(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHouseBalance_call method_call = new updateHouseBalance_call(houseBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHouseBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      public updateHouseBalance_call(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHouseBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHouseBalance_args args = new updateHouseBalance_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHouseBalance();
      }
    }

    public void balanceConfirm(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      balanceConfirm_call method_call = new balanceConfirm_call(houseBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class balanceConfirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      public balanceConfirm_call(HouseBalanceDTO houseBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("balanceConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        balanceConfirm_args args = new balanceConfirm_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_balanceConfirm();
      }
    }

    public void getHandleUser(int handleId, int handleFlowId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleUser_call method_call = new getHandleUser_call(handleId, handleFlowId, loginUserName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int handleId;
      private int handleFlowId;
      private String loginUserName;
      public getHandleUser_call(int handleId, int handleFlowId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleId = handleId;
        this.handleFlowId = handleFlowId;
        this.loginUserName = loginUserName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleUser_args args = new getHandleUser_args();
        args.setHandleId(handleId);
        args.setHandleFlowId(handleFlowId);
        args.setLoginUserName(loginUserName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleUser();
      }
    }

    public void getProjectIdByHandleId(int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectIdByHandleId_call method_call = new getProjectIdByHandleId_call(handleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectIdByHandleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int handleId;
      public getProjectIdByHandleId_call(int handleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleId = handleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectIdByHandleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectIdByHandleId_args args = new getProjectIdByHandleId_args();
        args.setHandleId(handleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectIdByHandleId();
      }
    }

    public void findAllRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllRefundDetails_call method_call = new findAllRefundDetails_call(refundDetailsDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllRefundDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundDetailsDTO refundDetailsDTO;
      public findAllRefundDetails_call(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundDetailsDTO = refundDetailsDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllRefundDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllRefundDetails_args args = new findAllRefundDetails_args();
        args.setRefundDetailsDTO(refundDetailsDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundDetailsDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllRefundDetails();
      }
    }

    public void getRefundDetailsTotal(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundDetailsTotal_call method_call = new getRefundDetailsTotal_call(refundDetailsDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundDetailsDTO refundDetailsDTO;
      public getRefundDetailsTotal_call(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundDetailsDTO = refundDetailsDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundDetailsTotal_args args = new getRefundDetailsTotal_args();
        args.setRefundDetailsDTO(refundDetailsDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundDetailsTotal();
      }
    }

    public void getRefundDetailsListByProjectId(int projectId, List<Integer> refundPros, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundDetailsListByProjectId_call method_call = new getRefundDetailsListByProjectId_call(projectId, refundPros, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundDetailsListByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private List<Integer> refundPros;
      public getRefundDetailsListByProjectId_call(int projectId, List<Integer> refundPros, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.refundPros = refundPros;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundDetailsListByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundDetailsListByProjectId_args args = new getRefundDetailsListByProjectId_args();
        args.setProjectId(projectId);
        args.setRefundPros(refundPros);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundDetailsDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundDetailsListByProjectId();
      }
    }

    public void addRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRefundDetails_call method_call = new addRefundDetails_call(refundDetailsDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRefundDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundDetailsDTO refundDetailsDTO;
      public addRefundDetails_call(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundDetailsDTO = refundDetailsDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRefundDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRefundDetails_args args = new addRefundDetails_args();
        args.setRefundDetailsDTO(refundDetailsDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRefundDetails();
      }
    }

    public void getRefundDetailsById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundDetailsById_call method_call = new getRefundDetailsById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundDetailsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getRefundDetailsById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundDetailsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundDetailsById_args args = new getRefundDetailsById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RefundDetailsDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundDetailsById();
      }
    }

    public void updateRefundDetails(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRefundDetails_call method_call = new updateRefundDetails_call(refundDetailsDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRefundDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundDetailsDTO refundDetailsDTO;
      public updateRefundDetails_call(RefundDetailsDTO refundDetailsDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundDetailsDTO = refundDetailsDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRefundDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRefundDetails_args args = new updateRefundDetails_args();
        args.setRefundDetailsDTO(refundDetailsDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRefundDetails();
      }
    }

    public void findAllHandleFlow(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHandleFlow_call method_call = new findAllHandleFlow_call(handleFlowDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHandleFlow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleFlowDTO handleFlowDTO;
      public findAllHandleFlow_call(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleFlowDTO = handleFlowDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHandleFlow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHandleFlow_args args = new findAllHandleFlow_args();
        args.setHandleFlowDTO(handleFlowDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleFlowDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHandleFlow();
      }
    }

    public void getHandleFlowTotal(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleFlowTotal_call method_call = new getHandleFlowTotal_call(handleFlowDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleFlowTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleFlowDTO handleFlowDTO;
      public getHandleFlowTotal_call(HandleFlowDTO handleFlowDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleFlowDTO = handleFlowDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleFlowTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleFlowTotal_args args = new getHandleFlowTotal_args();
        args.setHandleFlowDTO(handleFlowDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleFlowTotal();
      }
    }

    public void findAllHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHandleDynamic_call method_call = new findAllHandleDynamic_call(handleDynamicDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHandleDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      public findAllHandleDynamic_call(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHandleDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHandleDynamic_args args = new findAllHandleDynamic_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDynamicDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHandleDynamic();
      }
    }

    public void getHandleDynamicTotal(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDynamicTotal_call method_call = new getHandleDynamicTotal_call(handleDynamicDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDynamicTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      public getHandleDynamicTotal_call(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDynamicTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDynamicTotal_args args = new getHandleDynamicTotal_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDynamicTotal();
      }
    }

    public void gethandleDaysByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gethandleDaysByProjectId_call method_call = new gethandleDaysByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gethandleDaysByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public gethandleDaysByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gethandleDaysByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gethandleDaysByProjectId_args args = new gethandleDaysByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gethandleDaysByProjectId();
      }
    }

    public void addHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHandleDynamic_call method_call = new addHandleDynamic_call(handleDynamicDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHandleDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      public addHandleDynamic_call(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHandleDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHandleDynamic_args args = new addHandleDynamic_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHandleDynamic();
      }
    }

    public void getHandleDynamicById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDynamicById_call method_call = new getHandleDynamicById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDynamicById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getHandleDynamicById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDynamicById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDynamicById_args args = new getHandleDynamicById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HandleDynamicDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDynamicById();
      }
    }

    public void updateHandleDynamic(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHandleDynamic_call method_call = new updateHandleDynamic_call(handleDynamicDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHandleDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      public updateHandleDynamic_call(HandleDynamicDTO handleDynamicDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHandleDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHandleDynamic_args args = new updateHandleDynamic_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHandleDynamic();
      }
    }

    public void updateHandleDynamicAndFinishTask(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHandleDynamicAndFinishTask_call method_call = new updateHandleDynamicAndFinishTask_call(handleDynamicDTO, loginUserName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHandleDynamicAndFinishTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      private String loginUserName;
      public updateHandleDynamicAndFinishTask_call(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
        this.loginUserName = loginUserName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHandleDynamicAndFinishTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHandleDynamicAndFinishTask_args args = new updateHandleDynamicAndFinishTask_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.setLoginUserName(loginUserName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHandleDynamicAndFinishTask();
      }
    }

    public void finishHandleDynamicTask(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      finishHandleDynamicTask_call method_call = new finishHandleDynamicTask_call(handleDynamicDTO, loginUserName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class finishHandleDynamicTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicDTO handleDynamicDTO;
      private String loginUserName;
      public finishHandleDynamicTask_call(HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicDTO = handleDynamicDTO;
        this.loginUserName = loginUserName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("finishHandleDynamicTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        finishHandleDynamicTask_args args = new finishHandleDynamicTask_args();
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.setLoginUserName(loginUserName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_finishHandleDynamicTask();
      }
    }

    public void finishAllHandleDynamicTask(int projectId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      finishAllHandleDynamicTask_call method_call = new finishAllHandleDynamicTask_call(projectId, loginUserName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class finishAllHandleDynamicTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private String loginUserName;
      public finishAllHandleDynamicTask_call(int projectId, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.loginUserName = loginUserName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("finishAllHandleDynamicTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        finishAllHandleDynamicTask_args args = new finishAllHandleDynamicTask_args();
        args.setProjectId(projectId);
        args.setLoginUserName(loginUserName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_finishAllHandleDynamicTask();
      }
    }

    public void findAllBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllBizHandleWorkflow_call method_call = new findAllBizHandleWorkflow_call(bizHandleWorkflowDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllBizHandleWorkflow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizHandleWorkflowDTO bizHandleWorkflowDto;
      public findAllBizHandleWorkflow_call(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllBizHandleWorkflow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllBizHandleWorkflow_args args = new findAllBizHandleWorkflow_args();
        args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BizHandleWorkflowDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllBizHandleWorkflow();
      }
    }

    public void addBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBizHandleWorkflow_call method_call = new addBizHandleWorkflow_call(bizHandleWorkflowDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBizHandleWorkflow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizHandleWorkflowDTO bizHandleWorkflowDto;
      public addBizHandleWorkflow_call(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBizHandleWorkflow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBizHandleWorkflow_args args = new addBizHandleWorkflow_args();
        args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBizHandleWorkflow();
      }
    }

    public void updateBizHandleWorkflow(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizHandleWorkflow_call method_call = new updateBizHandleWorkflow_call(bizHandleWorkflowDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizHandleWorkflow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizHandleWorkflowDTO bizHandleWorkflowDto;
      public updateBizHandleWorkflow_call(BizHandleWorkflowDTO bizHandleWorkflowDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizHandleWorkflow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizHandleWorkflow_args args = new updateBizHandleWorkflow_args();
        args.setBizHandleWorkflowDto(bizHandleWorkflowDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizHandleWorkflow();
      }
    }

    public void findAllHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHandleDifferWarn_call method_call = new findAllHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public findAllHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHandleDifferWarn_args args = new findAllHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHandleDifferWarn();
      }
    }

    public void getHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDifferWarnTotal_call method_call = new getHandleDifferWarnTotal_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDifferWarnTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public getHandleDifferWarnTotal_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDifferWarnTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDifferWarnTotal_args args = new getHandleDifferWarnTotal_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDifferWarnTotal();
      }
    }

    public void getHisHandleDifferWarnCount(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHisHandleDifferWarnCount_call method_call = new getHisHandleDifferWarnCount_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHisHandleDifferWarnCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public getHisHandleDifferWarnCount_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHisHandleDifferWarnCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHisHandleDifferWarnCount_args args = new getHisHandleDifferWarnCount_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHisHandleDifferWarnCount();
      }
    }

    public void findIndexHandleDifferWarn(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findIndexHandleDifferWarn_call method_call = new findIndexHandleDifferWarn_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findIndexHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public findIndexHandleDifferWarn_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findIndexHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findIndexHandleDifferWarn_args args = new findIndexHandleDifferWarn_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findIndexHandleDifferWarn();
      }
    }

    public void getIndexHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIndexHandleDifferWarnTotal_call method_call = new getIndexHandleDifferWarnTotal_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIndexHandleDifferWarnTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public getIndexHandleDifferWarnTotal_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIndexHandleDifferWarnTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIndexHandleDifferWarnTotal_args args = new getIndexHandleDifferWarnTotal_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIndexHandleDifferWarnTotal();
      }
    }

    public void addHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHandleDifferWarn_call method_call = new addHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public addHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHandleDifferWarn_args args = new addHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHandleDifferWarn();
      }
    }

    public void delHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delHandleDifferWarn_call method_call = new delHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public delHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delHandleDifferWarn_args args = new delHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delHandleDifferWarn();
      }
    }

    public void getHandleDifferWarnById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDifferWarnById_call method_call = new getHandleDifferWarnById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDifferWarnById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getHandleDifferWarnById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDifferWarnById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDifferWarnById_args args = new getHandleDifferWarnById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HandleDifferWarnDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDifferWarnById();
      }
    }

    public void updateHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHandleDifferWarn_call method_call = new updateHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public updateHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHandleDifferWarn_args args = new updateHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHandleDifferWarn();
      }
    }

    public void addHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHisHandleDifferWarn_call method_call = new addHisHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHisHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public addHisHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHisHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHisHandleDifferWarn_args args = new addHisHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHisHandleDifferWarn();
      }
    }

    public void findAllHisHandleDifferWarn(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHisHandleDifferWarn_call method_call = new findAllHisHandleDifferWarn_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHisHandleDifferWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public findAllHisHandleDifferWarn_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHisHandleDifferWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHisHandleDifferWarn_args args = new findAllHisHandleDifferWarn_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHisHandleDifferWarn();
      }
    }

    public void getHisHandleDifferWarnTotal(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHisHandleDifferWarnTotal_call method_call = new getHisHandleDifferWarnTotal_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHisHandleDifferWarnTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public getHisHandleDifferWarnTotal_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHisHandleDifferWarnTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHisHandleDifferWarnTotal_args args = new getHisHandleDifferWarnTotal_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHisHandleDifferWarnTotal();
      }
    }

    public void findAllHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHandleDynamicFile_call method_call = new findAllHandleDynamicFile_call(handleDynamicFileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllHandleDynamicFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicFileDTO handleDynamicFileDTO;
      public findAllHandleDynamicFile_call(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicFileDTO = handleDynamicFileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHandleDynamicFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHandleDynamicFile_args args = new findAllHandleDynamicFile_args();
        args.setHandleDynamicFileDTO(handleDynamicFileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDynamicFileDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHandleDynamicFile();
      }
    }

    public void getHandleDynamicFileTotal(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDynamicFileTotal_call method_call = new getHandleDynamicFileTotal_call(handleDynamicFileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDynamicFileTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicFileDTO handleDynamicFileDTO;
      public getHandleDynamicFileTotal_call(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicFileDTO = handleDynamicFileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDynamicFileTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDynamicFileTotal_args args = new getHandleDynamicFileTotal_args();
        args.setHandleDynamicFileDTO(handleDynamicFileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDynamicFileTotal();
      }
    }

    public void addHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHandleDynamicFile_call method_call = new addHandleDynamicFile_call(handleDynamicFileDTO, bizFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHandleDynamicFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicFileDTO handleDynamicFileDTO;
      private com.xlkfinance.bms.rpc.system.BizFile bizFile;
      public addHandleDynamicFile_call(HandleDynamicFileDTO handleDynamicFileDTO, com.xlkfinance.bms.rpc.system.BizFile bizFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicFileDTO = handleDynamicFileDTO;
        this.bizFile = bizFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHandleDynamicFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHandleDynamicFile_args args = new addHandleDynamicFile_args();
        args.setHandleDynamicFileDTO(handleDynamicFileDTO);
        args.setBizFile(bizFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHandleDynamicFile();
      }
    }

    public void addHandleDynamicFileOfComm(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHandleDynamicFileOfComm_call method_call = new addHandleDynamicFileOfComm_call(handleDynamicFileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHandleDynamicFileOfComm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicFileDTO handleDynamicFileDTO;
      public addHandleDynamicFileOfComm_call(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicFileDTO = handleDynamicFileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHandleDynamicFileOfComm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHandleDynamicFileOfComm_args args = new addHandleDynamicFileOfComm_args();
        args.setHandleDynamicFileDTO(handleDynamicFileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHandleDynamicFileOfComm();
      }
    }

    public void getHandleDynamicFileById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDynamicFileById_call method_call = new getHandleDynamicFileById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDynamicFileById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getHandleDynamicFileById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDynamicFileById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDynamicFileById_args args = new getHandleDynamicFileById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HandleDynamicFileDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDynamicFileById();
      }
    }

    public void updateHandleDynamicFile(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHandleDynamicFile_call method_call = new updateHandleDynamicFile_call(handleDynamicFileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHandleDynamicFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDynamicFileDTO handleDynamicFileDTO;
      public updateHandleDynamicFile_call(HandleDynamicFileDTO handleDynamicFileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicFileDTO = handleDynamicFileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHandleDynamicFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHandleDynamicFile_args args = new updateHandleDynamicFile_args();
        args.setHandleDynamicFileDTO(handleDynamicFileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHandleDynamicFile();
      }
    }

    public void getCanHandleFlowByHandleId(int handleId, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCanHandleFlowByHandleId_call method_call = new getCanHandleFlowByHandleId_call(handleId, userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCanHandleFlowByHandleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int handleId;
      private String userName;
      public getCanHandleFlowByHandleId_call(int handleId, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleId = handleId;
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCanHandleFlowByHandleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCanHandleFlowByHandleId_args args = new getCanHandleFlowByHandleId_args();
        args.setHandleId(handleId);
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCanHandleFlowByHandleId();
      }
    }

    public void getCanHandleDynamicIds(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCanHandleDynamicIds_call method_call = new getCanHandleDynamicIds_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCanHandleDynamicIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public getCanHandleDynamicIds_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCanHandleDynamicIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCanHandleDynamicIds_args args = new getCanHandleDynamicIds_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCanHandleDynamicIds();
      }
    }

    public void getNeedHandleWarn(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNeedHandleWarn_call method_call = new getNeedHandleWarn_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNeedHandleWarn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getNeedHandleWarn_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNeedHandleWarn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNeedHandleWarn_args args = new getNeedHandleWarn_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNeedHandleWarn();
      }
    }

    public void queryNeedHandleWarnIndex(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryNeedHandleWarnIndex_call method_call = new queryNeedHandleWarnIndex_call(handleDifferWarnIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryNeedHandleWarnIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnIndexDTO handleDifferWarnIndexDTO;
      public queryNeedHandleWarnIndex_call(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryNeedHandleWarnIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryNeedHandleWarnIndex_args args = new queryNeedHandleWarnIndex_args();
        args.setHandleDifferWarnIndexDTO(handleDifferWarnIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryNeedHandleWarnIndex();
      }
    }

    public void getNeedHandleWarnIndexTotal(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNeedHandleWarnIndexTotal_call method_call = new getNeedHandleWarnIndexTotal_call(handleDifferWarnIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNeedHandleWarnIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnIndexDTO handleDifferWarnIndexDTO;
      public getNeedHandleWarnIndexTotal_call(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNeedHandleWarnIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNeedHandleWarnIndexTotal_args args = new getNeedHandleWarnIndexTotal_args();
        args.setHandleDifferWarnIndexDTO(handleDifferWarnIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNeedHandleWarnIndexTotal();
      }
    }

    public void queryForeclosureIndex(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureIndex_call method_call = new queryForeclosureIndex_call(foreclosureIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureIndexDTO foreclosureIndexDTO;
      public queryForeclosureIndex_call(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureIndexDTO = foreclosureIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureIndex_args args = new queryForeclosureIndex_args();
        args.setForeclosureIndexDTO(foreclosureIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureIndex();
      }
    }

    public void getForeclosureIndexTotal(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getForeclosureIndexTotal_call method_call = new getForeclosureIndexTotal_call(foreclosureIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getForeclosureIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureIndexDTO foreclosureIndexDTO;
      public getForeclosureIndexTotal_call(ForeclosureIndexDTO foreclosureIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureIndexDTO = foreclosureIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getForeclosureIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getForeclosureIndexTotal_args args = new getForeclosureIndexTotal_args();
        args.setForeclosureIndexDTO(foreclosureIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getForeclosureIndexTotal();
      }
    }

    public void foreclosure(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      foreclosure_call method_call = new foreclosure_call(houseBalanceDTO, handleInfoDTO, handleDynamicDTO, loginUserName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class foreclosure_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HouseBalanceDTO houseBalanceDTO;
      private HandleInfoDTO handleInfoDTO;
      private HandleDynamicDTO handleDynamicDTO;
      private String loginUserName;
      public foreclosure_call(HouseBalanceDTO houseBalanceDTO, HandleInfoDTO handleInfoDTO, HandleDynamicDTO handleDynamicDTO, String loginUserName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.houseBalanceDTO = houseBalanceDTO;
        this.handleInfoDTO = handleInfoDTO;
        this.handleDynamicDTO = handleDynamicDTO;
        this.loginUserName = loginUserName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("foreclosure", org.apache.thrift.protocol.TMessageType.CALL, 0));
        foreclosure_args args = new foreclosure_args();
        args.setHouseBalanceDTO(houseBalanceDTO);
        args.setHandleInfoDTO(handleInfoDTO);
        args.setHandleDynamicDTO(handleDynamicDTO);
        args.setLoginUserName(loginUserName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_foreclosure();
      }
    }

    public void queryOrgBizHandlePage(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOrgBizHandlePage_call method_call = new queryOrgBizHandlePage_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOrgBizHandlePage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrgBizHandlePage query;
      public queryOrgBizHandlePage_call(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOrgBizHandlePage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOrgBizHandlePage_args args = new queryOrgBizHandlePage_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrgBizHandlePage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOrgBizHandlePage();
      }
    }

    public void getOrgBizHandlePageTotal(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgBizHandlePageTotal_call method_call = new getOrgBizHandlePageTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgBizHandlePageTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrgBizHandlePage query;
      public getOrgBizHandlePageTotal_call(OrgBizHandlePage query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgBizHandlePageTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgBizHandlePageTotal_args args = new getOrgBizHandlePageTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgBizHandlePageTotal();
      }
    }

    public void getHandleDifferWarnList(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDifferWarnList_call method_call = new getHandleDifferWarnList_call(handleDifferWarnDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDifferWarnList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnDTO handleDifferWarnDTO;
      public getHandleDifferWarnList_call(HandleDifferWarnDTO handleDifferWarnDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnDTO = handleDifferWarnDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDifferWarnList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDifferWarnList_args args = new getHandleDifferWarnList_args();
        args.setHandleDifferWarnDTO(handleDifferWarnDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDifferWarnList();
      }
    }

    public void findHandleDynamicFileByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHandleDynamicFileByProjectId_call method_call = new findHandleDynamicFileByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findHandleDynamicFileByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public findHandleDynamicFileByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHandleDynamicFileByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHandleDynamicFileByProjectId_args args = new findHandleDynamicFileByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDynamicFileDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHandleDynamicFileByProjectId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findAllApplyHandleIndex", new findAllApplyHandleIndex());
      processMap.put("getApplyHandleIndexTotal", new getApplyHandleIndexTotal());
      processMap.put("qeuryHandleDynamicCountMapList", new qeuryHandleDynamicCountMapList());
      processMap.put("findAllHandleInfoDTO", new findAllHandleInfoDTO());
      processMap.put("getHandleInfoDTOTotal", new getHandleInfoDTOTotal());
      processMap.put("addHandleInfo", new addHandleInfo());
      processMap.put("getHandleInfoById", new getHandleInfoById());
      processMap.put("getHandleInfoByProjectId", new getHandleInfoByProjectId());
      processMap.put("updateHandleInfo", new updateHandleInfo());
      processMap.put("foreclosureTurnDown", new foreclosureTurnDown());
      processMap.put("isBalanceConfirm", new isBalanceConfirm());
      processMap.put("findAllApplyHandleInfo", new findAllApplyHandleInfo());
      processMap.put("getApplyHandleInfoTotal", new getApplyHandleInfoTotal());
      processMap.put("addApplyHandleInfo", new addApplyHandleInfo());
      processMap.put("getApplyHandleInfoById", new getApplyHandleInfoById());
      processMap.put("updateApplyHandleInfo", new updateApplyHandleInfo());
      processMap.put("findAllHouseBalance", new findAllHouseBalance());
      processMap.put("getHouseBalanceTotal", new getHouseBalanceTotal());
      processMap.put("getHouseBalanceListByProjectId", new getHouseBalanceListByProjectId());
      processMap.put("getForeclosureMoneyByProjectId", new getForeclosureMoneyByProjectId());
      processMap.put("addHouseBalance", new addHouseBalance());
      processMap.put("getHouseBalanceById", new getHouseBalanceById());
      processMap.put("updateHouseBalance", new updateHouseBalance());
      processMap.put("balanceConfirm", new balanceConfirm());
      processMap.put("getHandleUser", new getHandleUser());
      processMap.put("getProjectIdByHandleId", new getProjectIdByHandleId());
      processMap.put("findAllRefundDetails", new findAllRefundDetails());
      processMap.put("getRefundDetailsTotal", new getRefundDetailsTotal());
      processMap.put("getRefundDetailsListByProjectId", new getRefundDetailsListByProjectId());
      processMap.put("addRefundDetails", new addRefundDetails());
      processMap.put("getRefundDetailsById", new getRefundDetailsById());
      processMap.put("updateRefundDetails", new updateRefundDetails());
      processMap.put("findAllHandleFlow", new findAllHandleFlow());
      processMap.put("getHandleFlowTotal", new getHandleFlowTotal());
      processMap.put("findAllHandleDynamic", new findAllHandleDynamic());
      processMap.put("getHandleDynamicTotal", new getHandleDynamicTotal());
      processMap.put("gethandleDaysByProjectId", new gethandleDaysByProjectId());
      processMap.put("addHandleDynamic", new addHandleDynamic());
      processMap.put("getHandleDynamicById", new getHandleDynamicById());
      processMap.put("updateHandleDynamic", new updateHandleDynamic());
      processMap.put("updateHandleDynamicAndFinishTask", new updateHandleDynamicAndFinishTask());
      processMap.put("finishHandleDynamicTask", new finishHandleDynamicTask());
      processMap.put("finishAllHandleDynamicTask", new finishAllHandleDynamicTask());
      processMap.put("findAllBizHandleWorkflow", new findAllBizHandleWorkflow());
      processMap.put("addBizHandleWorkflow", new addBizHandleWorkflow());
      processMap.put("updateBizHandleWorkflow", new updateBizHandleWorkflow());
      processMap.put("findAllHandleDifferWarn", new findAllHandleDifferWarn());
      processMap.put("getHandleDifferWarnTotal", new getHandleDifferWarnTotal());
      processMap.put("getHisHandleDifferWarnCount", new getHisHandleDifferWarnCount());
      processMap.put("findIndexHandleDifferWarn", new findIndexHandleDifferWarn());
      processMap.put("getIndexHandleDifferWarnTotal", new getIndexHandleDifferWarnTotal());
      processMap.put("addHandleDifferWarn", new addHandleDifferWarn());
      processMap.put("delHandleDifferWarn", new delHandleDifferWarn());
      processMap.put("getHandleDifferWarnById", new getHandleDifferWarnById());
      processMap.put("updateHandleDifferWarn", new updateHandleDifferWarn());
      processMap.put("addHisHandleDifferWarn", new addHisHandleDifferWarn());
      processMap.put("findAllHisHandleDifferWarn", new findAllHisHandleDifferWarn());
      processMap.put("getHisHandleDifferWarnTotal", new getHisHandleDifferWarnTotal());
      processMap.put("findAllHandleDynamicFile", new findAllHandleDynamicFile());
      processMap.put("getHandleDynamicFileTotal", new getHandleDynamicFileTotal());
      processMap.put("addHandleDynamicFile", new addHandleDynamicFile());
      processMap.put("addHandleDynamicFileOfComm", new addHandleDynamicFileOfComm());
      processMap.put("getHandleDynamicFileById", new getHandleDynamicFileById());
      processMap.put("updateHandleDynamicFile", new updateHandleDynamicFile());
      processMap.put("getCanHandleFlowByHandleId", new getCanHandleFlowByHandleId());
      processMap.put("getCanHandleDynamicIds", new getCanHandleDynamicIds());
      processMap.put("getNeedHandleWarn", new getNeedHandleWarn());
      processMap.put("queryNeedHandleWarnIndex", new queryNeedHandleWarnIndex());
      processMap.put("getNeedHandleWarnIndexTotal", new getNeedHandleWarnIndexTotal());
      processMap.put("queryForeclosureIndex", new queryForeclosureIndex());
      processMap.put("getForeclosureIndexTotal", new getForeclosureIndexTotal());
      processMap.put("foreclosure", new foreclosure());
      processMap.put("queryOrgBizHandlePage", new queryOrgBizHandlePage());
      processMap.put("getOrgBizHandlePageTotal", new getOrgBizHandlePageTotal());
      processMap.put("getHandleDifferWarnList", new getHandleDifferWarnList());
      processMap.put("findHandleDynamicFileByProjectId", new findHandleDynamicFileByProjectId());
      return processMap;
    }

    public static class findAllApplyHandleIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllApplyHandleIndex_args> {
      public findAllApplyHandleIndex() {
        super("findAllApplyHandleIndex");
      }

      public findAllApplyHandleIndex_args getEmptyArgsInstance() {
        return new findAllApplyHandleIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllApplyHandleIndex_result getResult(I iface, findAllApplyHandleIndex_args args) throws org.apache.thrift.TException {
        findAllApplyHandleIndex_result result = new findAllApplyHandleIndex_result();
        result.success = iface.findAllApplyHandleIndex(args.applyHandleIndexDTO);
        return result;
      }
    }

    public static class getApplyHandleIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyHandleIndexTotal_args> {
      public getApplyHandleIndexTotal() {
        super("getApplyHandleIndexTotal");
      }

      public getApplyHandleIndexTotal_args getEmptyArgsInstance() {
        return new getApplyHandleIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyHandleIndexTotal_result getResult(I iface, getApplyHandleIndexTotal_args args) throws org.apache.thrift.TException {
        getApplyHandleIndexTotal_result result = new getApplyHandleIndexTotal_result();
        result.success = iface.getApplyHandleIndexTotal(args.applyHandleIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class qeuryHandleDynamicCountMapList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, qeuryHandleDynamicCountMapList_args> {
      public qeuryHandleDynamicCountMapList() {
        super("qeuryHandleDynamicCountMapList");
      }

      public qeuryHandleDynamicCountMapList_args getEmptyArgsInstance() {
        return new qeuryHandleDynamicCountMapList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public qeuryHandleDynamicCountMapList_result getResult(I iface, qeuryHandleDynamicCountMapList_args args) throws org.apache.thrift.TException {
        qeuryHandleDynamicCountMapList_result result = new qeuryHandleDynamicCountMapList_result();
        result.success = iface.qeuryHandleDynamicCountMapList(args.applyHandleIndexDTO);
        return result;
      }
    }

    public static class findAllHandleInfoDTO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHandleInfoDTO_args> {
      public findAllHandleInfoDTO() {
        super("findAllHandleInfoDTO");
      }

      public findAllHandleInfoDTO_args getEmptyArgsInstance() {
        return new findAllHandleInfoDTO_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHandleInfoDTO_result getResult(I iface, findAllHandleInfoDTO_args args) throws org.apache.thrift.TException {
        findAllHandleInfoDTO_result result = new findAllHandleInfoDTO_result();
        result.success = iface.findAllHandleInfoDTO(args.handleInfoDTO);
        return result;
      }
    }

    public static class getHandleInfoDTOTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleInfoDTOTotal_args> {
      public getHandleInfoDTOTotal() {
        super("getHandleInfoDTOTotal");
      }

      public getHandleInfoDTOTotal_args getEmptyArgsInstance() {
        return new getHandleInfoDTOTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleInfoDTOTotal_result getResult(I iface, getHandleInfoDTOTotal_args args) throws org.apache.thrift.TException {
        getHandleInfoDTOTotal_result result = new getHandleInfoDTOTotal_result();
        result.success = iface.getHandleInfoDTOTotal(args.handleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHandleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHandleInfo_args> {
      public addHandleInfo() {
        super("addHandleInfo");
      }

      public addHandleInfo_args getEmptyArgsInstance() {
        return new addHandleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHandleInfo_result getResult(I iface, addHandleInfo_args args) throws org.apache.thrift.TException {
        addHandleInfo_result result = new addHandleInfo_result();
        result.success = iface.addHandleInfo(args.handleInfoDTO, args.paramMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleInfoById_args> {
      public getHandleInfoById() {
        super("getHandleInfoById");
      }

      public getHandleInfoById_args getEmptyArgsInstance() {
        return new getHandleInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleInfoById_result getResult(I iface, getHandleInfoById_args args) throws org.apache.thrift.TException {
        getHandleInfoById_result result = new getHandleInfoById_result();
        result.success = iface.getHandleInfoById(args.pid);
        return result;
      }
    }

    public static class getHandleInfoByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleInfoByProjectId_args> {
      public getHandleInfoByProjectId() {
        super("getHandleInfoByProjectId");
      }

      public getHandleInfoByProjectId_args getEmptyArgsInstance() {
        return new getHandleInfoByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleInfoByProjectId_result getResult(I iface, getHandleInfoByProjectId_args args) throws org.apache.thrift.TException {
        getHandleInfoByProjectId_result result = new getHandleInfoByProjectId_result();
        result.success = iface.getHandleInfoByProjectId(args.projectId);
        return result;
      }
    }

    public static class updateHandleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHandleInfo_args> {
      public updateHandleInfo() {
        super("updateHandleInfo");
      }

      public updateHandleInfo_args getEmptyArgsInstance() {
        return new updateHandleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHandleInfo_result getResult(I iface, updateHandleInfo_args args) throws org.apache.thrift.TException {
        updateHandleInfo_result result = new updateHandleInfo_result();
        result.success = iface.updateHandleInfo(args.handleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class foreclosureTurnDown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, foreclosureTurnDown_args> {
      public foreclosureTurnDown() {
        super("foreclosureTurnDown");
      }

      public foreclosureTurnDown_args getEmptyArgsInstance() {
        return new foreclosureTurnDown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public foreclosureTurnDown_result getResult(I iface, foreclosureTurnDown_args args) throws org.apache.thrift.TException {
        foreclosureTurnDown_result result = new foreclosureTurnDown_result();
        result.success = iface.foreclosureTurnDown(args.handleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isBalanceConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isBalanceConfirm_args> {
      public isBalanceConfirm() {
        super("isBalanceConfirm");
      }

      public isBalanceConfirm_args getEmptyArgsInstance() {
        return new isBalanceConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isBalanceConfirm_result getResult(I iface, isBalanceConfirm_args args) throws org.apache.thrift.TException {
        isBalanceConfirm_result result = new isBalanceConfirm_result();
        result.success = iface.isBalanceConfirm(args.projectId, args.handleId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllApplyHandleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllApplyHandleInfo_args> {
      public findAllApplyHandleInfo() {
        super("findAllApplyHandleInfo");
      }

      public findAllApplyHandleInfo_args getEmptyArgsInstance() {
        return new findAllApplyHandleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllApplyHandleInfo_result getResult(I iface, findAllApplyHandleInfo_args args) throws org.apache.thrift.TException {
        findAllApplyHandleInfo_result result = new findAllApplyHandleInfo_result();
        result.success = iface.findAllApplyHandleInfo(args.applyHandleInfoDTO);
        return result;
      }
    }

    public static class getApplyHandleInfoTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyHandleInfoTotal_args> {
      public getApplyHandleInfoTotal() {
        super("getApplyHandleInfoTotal");
      }

      public getApplyHandleInfoTotal_args getEmptyArgsInstance() {
        return new getApplyHandleInfoTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyHandleInfoTotal_result getResult(I iface, getApplyHandleInfoTotal_args args) throws org.apache.thrift.TException {
        getApplyHandleInfoTotal_result result = new getApplyHandleInfoTotal_result();
        result.success = iface.getApplyHandleInfoTotal(args.applyHandleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addApplyHandleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplyHandleInfo_args> {
      public addApplyHandleInfo() {
        super("addApplyHandleInfo");
      }

      public addApplyHandleInfo_args getEmptyArgsInstance() {
        return new addApplyHandleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addApplyHandleInfo_result getResult(I iface, addApplyHandleInfo_args args) throws org.apache.thrift.TException {
        addApplyHandleInfo_result result = new addApplyHandleInfo_result();
        result.success = iface.addApplyHandleInfo(args.applyHandleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getApplyHandleInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyHandleInfoById_args> {
      public getApplyHandleInfoById() {
        super("getApplyHandleInfoById");
      }

      public getApplyHandleInfoById_args getEmptyArgsInstance() {
        return new getApplyHandleInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyHandleInfoById_result getResult(I iface, getApplyHandleInfoById_args args) throws org.apache.thrift.TException {
        getApplyHandleInfoById_result result = new getApplyHandleInfoById_result();
        result.success = iface.getApplyHandleInfoById(args.pid);
        return result;
      }
    }

    public static class updateApplyHandleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplyHandleInfo_args> {
      public updateApplyHandleInfo() {
        super("updateApplyHandleInfo");
      }

      public updateApplyHandleInfo_args getEmptyArgsInstance() {
        return new updateApplyHandleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplyHandleInfo_result getResult(I iface, updateApplyHandleInfo_args args) throws org.apache.thrift.TException {
        updateApplyHandleInfo_result result = new updateApplyHandleInfo_result();
        result.success = iface.updateApplyHandleInfo(args.applyHandleInfoDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHouseBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHouseBalance_args> {
      public findAllHouseBalance() {
        super("findAllHouseBalance");
      }

      public findAllHouseBalance_args getEmptyArgsInstance() {
        return new findAllHouseBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHouseBalance_result getResult(I iface, findAllHouseBalance_args args) throws org.apache.thrift.TException {
        findAllHouseBalance_result result = new findAllHouseBalance_result();
        result.success = iface.findAllHouseBalance(args.houseBalanceDTO);
        return result;
      }
    }

    public static class getHouseBalanceTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHouseBalanceTotal_args> {
      public getHouseBalanceTotal() {
        super("getHouseBalanceTotal");
      }

      public getHouseBalanceTotal_args getEmptyArgsInstance() {
        return new getHouseBalanceTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHouseBalanceTotal_result getResult(I iface, getHouseBalanceTotal_args args) throws org.apache.thrift.TException {
        getHouseBalanceTotal_result result = new getHouseBalanceTotal_result();
        result.success = iface.getHouseBalanceTotal(args.houseBalanceDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHouseBalanceListByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHouseBalanceListByProjectId_args> {
      public getHouseBalanceListByProjectId() {
        super("getHouseBalanceListByProjectId");
      }

      public getHouseBalanceListByProjectId_args getEmptyArgsInstance() {
        return new getHouseBalanceListByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHouseBalanceListByProjectId_result getResult(I iface, getHouseBalanceListByProjectId_args args) throws org.apache.thrift.TException {
        getHouseBalanceListByProjectId_result result = new getHouseBalanceListByProjectId_result();
        result.success = iface.getHouseBalanceListByProjectId(args.projectId);
        return result;
      }
    }

    public static class getForeclosureMoneyByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getForeclosureMoneyByProjectId_args> {
      public getForeclosureMoneyByProjectId() {
        super("getForeclosureMoneyByProjectId");
      }

      public getForeclosureMoneyByProjectId_args getEmptyArgsInstance() {
        return new getForeclosureMoneyByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getForeclosureMoneyByProjectId_result getResult(I iface, getForeclosureMoneyByProjectId_args args) throws org.apache.thrift.TException {
        getForeclosureMoneyByProjectId_result result = new getForeclosureMoneyByProjectId_result();
        result.success = iface.getForeclosureMoneyByProjectId(args.projectId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHouseBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHouseBalance_args> {
      public addHouseBalance() {
        super("addHouseBalance");
      }

      public addHouseBalance_args getEmptyArgsInstance() {
        return new addHouseBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHouseBalance_result getResult(I iface, addHouseBalance_args args) throws org.apache.thrift.TException {
        addHouseBalance_result result = new addHouseBalance_result();
        result.success = iface.addHouseBalance(args.houseBalanceDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHouseBalanceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHouseBalanceById_args> {
      public getHouseBalanceById() {
        super("getHouseBalanceById");
      }

      public getHouseBalanceById_args getEmptyArgsInstance() {
        return new getHouseBalanceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHouseBalanceById_result getResult(I iface, getHouseBalanceById_args args) throws org.apache.thrift.TException {
        getHouseBalanceById_result result = new getHouseBalanceById_result();
        result.success = iface.getHouseBalanceById(args.pid);
        return result;
      }
    }

    public static class updateHouseBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHouseBalance_args> {
      public updateHouseBalance() {
        super("updateHouseBalance");
      }

      public updateHouseBalance_args getEmptyArgsInstance() {
        return new updateHouseBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHouseBalance_result getResult(I iface, updateHouseBalance_args args) throws org.apache.thrift.TException {
        updateHouseBalance_result result = new updateHouseBalance_result();
        result.success = iface.updateHouseBalance(args.houseBalanceDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class balanceConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, balanceConfirm_args> {
      public balanceConfirm() {
        super("balanceConfirm");
      }

      public balanceConfirm_args getEmptyArgsInstance() {
        return new balanceConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public balanceConfirm_result getResult(I iface, balanceConfirm_args args) throws org.apache.thrift.TException {
        balanceConfirm_result result = new balanceConfirm_result();
        result.success = iface.balanceConfirm(args.houseBalanceDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleUser_args> {
      public getHandleUser() {
        super("getHandleUser");
      }

      public getHandleUser_args getEmptyArgsInstance() {
        return new getHandleUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleUser_result getResult(I iface, getHandleUser_args args) throws org.apache.thrift.TException {
        getHandleUser_result result = new getHandleUser_result();
        result.success = iface.getHandleUser(args.handleId, args.handleFlowId, args.loginUserName);
        return result;
      }
    }

    public static class getProjectIdByHandleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectIdByHandleId_args> {
      public getProjectIdByHandleId() {
        super("getProjectIdByHandleId");
      }

      public getProjectIdByHandleId_args getEmptyArgsInstance() {
        return new getProjectIdByHandleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectIdByHandleId_result getResult(I iface, getProjectIdByHandleId_args args) throws org.apache.thrift.TException {
        getProjectIdByHandleId_result result = new getProjectIdByHandleId_result();
        result.success = iface.getProjectIdByHandleId(args.handleId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllRefundDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllRefundDetails_args> {
      public findAllRefundDetails() {
        super("findAllRefundDetails");
      }

      public findAllRefundDetails_args getEmptyArgsInstance() {
        return new findAllRefundDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllRefundDetails_result getResult(I iface, findAllRefundDetails_args args) throws org.apache.thrift.TException {
        findAllRefundDetails_result result = new findAllRefundDetails_result();
        result.success = iface.findAllRefundDetails(args.refundDetailsDTO);
        return result;
      }
    }

    public static class getRefundDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundDetailsTotal_args> {
      public getRefundDetailsTotal() {
        super("getRefundDetailsTotal");
      }

      public getRefundDetailsTotal_args getEmptyArgsInstance() {
        return new getRefundDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundDetailsTotal_result getResult(I iface, getRefundDetailsTotal_args args) throws org.apache.thrift.TException {
        getRefundDetailsTotal_result result = new getRefundDetailsTotal_result();
        result.success = iface.getRefundDetailsTotal(args.refundDetailsDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRefundDetailsListByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundDetailsListByProjectId_args> {
      public getRefundDetailsListByProjectId() {
        super("getRefundDetailsListByProjectId");
      }

      public getRefundDetailsListByProjectId_args getEmptyArgsInstance() {
        return new getRefundDetailsListByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundDetailsListByProjectId_result getResult(I iface, getRefundDetailsListByProjectId_args args) throws org.apache.thrift.TException {
        getRefundDetailsListByProjectId_result result = new getRefundDetailsListByProjectId_result();
        result.success = iface.getRefundDetailsListByProjectId(args.projectId, args.refundPros);
        return result;
      }
    }

    public static class addRefundDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRefundDetails_args> {
      public addRefundDetails() {
        super("addRefundDetails");
      }

      public addRefundDetails_args getEmptyArgsInstance() {
        return new addRefundDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRefundDetails_result getResult(I iface, addRefundDetails_args args) throws org.apache.thrift.TException {
        addRefundDetails_result result = new addRefundDetails_result();
        result.success = iface.addRefundDetails(args.refundDetailsDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRefundDetailsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundDetailsById_args> {
      public getRefundDetailsById() {
        super("getRefundDetailsById");
      }

      public getRefundDetailsById_args getEmptyArgsInstance() {
        return new getRefundDetailsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundDetailsById_result getResult(I iface, getRefundDetailsById_args args) throws org.apache.thrift.TException {
        getRefundDetailsById_result result = new getRefundDetailsById_result();
        result.success = iface.getRefundDetailsById(args.pid);
        return result;
      }
    }

    public static class updateRefundDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRefundDetails_args> {
      public updateRefundDetails() {
        super("updateRefundDetails");
      }

      public updateRefundDetails_args getEmptyArgsInstance() {
        return new updateRefundDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRefundDetails_result getResult(I iface, updateRefundDetails_args args) throws org.apache.thrift.TException {
        updateRefundDetails_result result = new updateRefundDetails_result();
        result.success = iface.updateRefundDetails(args.refundDetailsDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHandleFlow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHandleFlow_args> {
      public findAllHandleFlow() {
        super("findAllHandleFlow");
      }

      public findAllHandleFlow_args getEmptyArgsInstance() {
        return new findAllHandleFlow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHandleFlow_result getResult(I iface, findAllHandleFlow_args args) throws org.apache.thrift.TException {
        findAllHandleFlow_result result = new findAllHandleFlow_result();
        result.success = iface.findAllHandleFlow(args.handleFlowDTO);
        return result;
      }
    }

    public static class getHandleFlowTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleFlowTotal_args> {
      public getHandleFlowTotal() {
        super("getHandleFlowTotal");
      }

      public getHandleFlowTotal_args getEmptyArgsInstance() {
        return new getHandleFlowTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleFlowTotal_result getResult(I iface, getHandleFlowTotal_args args) throws org.apache.thrift.TException {
        getHandleFlowTotal_result result = new getHandleFlowTotal_result();
        result.success = iface.getHandleFlowTotal(args.handleFlowDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHandleDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHandleDynamic_args> {
      public findAllHandleDynamic() {
        super("findAllHandleDynamic");
      }

      public findAllHandleDynamic_args getEmptyArgsInstance() {
        return new findAllHandleDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHandleDynamic_result getResult(I iface, findAllHandleDynamic_args args) throws org.apache.thrift.TException {
        findAllHandleDynamic_result result = new findAllHandleDynamic_result();
        result.success = iface.findAllHandleDynamic(args.handleDynamicDTO);
        return result;
      }
    }

    public static class getHandleDynamicTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDynamicTotal_args> {
      public getHandleDynamicTotal() {
        super("getHandleDynamicTotal");
      }

      public getHandleDynamicTotal_args getEmptyArgsInstance() {
        return new getHandleDynamicTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDynamicTotal_result getResult(I iface, getHandleDynamicTotal_args args) throws org.apache.thrift.TException {
        getHandleDynamicTotal_result result = new getHandleDynamicTotal_result();
        result.success = iface.getHandleDynamicTotal(args.handleDynamicDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class gethandleDaysByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gethandleDaysByProjectId_args> {
      public gethandleDaysByProjectId() {
        super("gethandleDaysByProjectId");
      }

      public gethandleDaysByProjectId_args getEmptyArgsInstance() {
        return new gethandleDaysByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gethandleDaysByProjectId_result getResult(I iface, gethandleDaysByProjectId_args args) throws org.apache.thrift.TException {
        gethandleDaysByProjectId_result result = new gethandleDaysByProjectId_result();
        result.success = iface.gethandleDaysByProjectId(args.projectId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHandleDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHandleDynamic_args> {
      public addHandleDynamic() {
        super("addHandleDynamic");
      }

      public addHandleDynamic_args getEmptyArgsInstance() {
        return new addHandleDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHandleDynamic_result getResult(I iface, addHandleDynamic_args args) throws org.apache.thrift.TException {
        addHandleDynamic_result result = new addHandleDynamic_result();
        result.success = iface.addHandleDynamic(args.handleDynamicDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleDynamicById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDynamicById_args> {
      public getHandleDynamicById() {
        super("getHandleDynamicById");
      }

      public getHandleDynamicById_args getEmptyArgsInstance() {
        return new getHandleDynamicById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDynamicById_result getResult(I iface, getHandleDynamicById_args args) throws org.apache.thrift.TException {
        getHandleDynamicById_result result = new getHandleDynamicById_result();
        result.success = iface.getHandleDynamicById(args.pid);
        return result;
      }
    }

    public static class updateHandleDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHandleDynamic_args> {
      public updateHandleDynamic() {
        super("updateHandleDynamic");
      }

      public updateHandleDynamic_args getEmptyArgsInstance() {
        return new updateHandleDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHandleDynamic_result getResult(I iface, updateHandleDynamic_args args) throws org.apache.thrift.TException {
        updateHandleDynamic_result result = new updateHandleDynamic_result();
        result.success = iface.updateHandleDynamic(args.handleDynamicDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHandleDynamicAndFinishTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHandleDynamicAndFinishTask_args> {
      public updateHandleDynamicAndFinishTask() {
        super("updateHandleDynamicAndFinishTask");
      }

      public updateHandleDynamicAndFinishTask_args getEmptyArgsInstance() {
        return new updateHandleDynamicAndFinishTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHandleDynamicAndFinishTask_result getResult(I iface, updateHandleDynamicAndFinishTask_args args) throws org.apache.thrift.TException {
        updateHandleDynamicAndFinishTask_result result = new updateHandleDynamicAndFinishTask_result();
        result.success = iface.updateHandleDynamicAndFinishTask(args.handleDynamicDTO, args.loginUserName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class finishHandleDynamicTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, finishHandleDynamicTask_args> {
      public finishHandleDynamicTask() {
        super("finishHandleDynamicTask");
      }

      public finishHandleDynamicTask_args getEmptyArgsInstance() {
        return new finishHandleDynamicTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public finishHandleDynamicTask_result getResult(I iface, finishHandleDynamicTask_args args) throws org.apache.thrift.TException {
        finishHandleDynamicTask_result result = new finishHandleDynamicTask_result();
        result.success = iface.finishHandleDynamicTask(args.handleDynamicDTO, args.loginUserName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class finishAllHandleDynamicTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, finishAllHandleDynamicTask_args> {
      public finishAllHandleDynamicTask() {
        super("finishAllHandleDynamicTask");
      }

      public finishAllHandleDynamicTask_args getEmptyArgsInstance() {
        return new finishAllHandleDynamicTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public finishAllHandleDynamicTask_result getResult(I iface, finishAllHandleDynamicTask_args args) throws org.apache.thrift.TException {
        finishAllHandleDynamicTask_result result = new finishAllHandleDynamicTask_result();
        result.success = iface.finishAllHandleDynamicTask(args.projectId, args.loginUserName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllBizHandleWorkflow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllBizHandleWorkflow_args> {
      public findAllBizHandleWorkflow() {
        super("findAllBizHandleWorkflow");
      }

      public findAllBizHandleWorkflow_args getEmptyArgsInstance() {
        return new findAllBizHandleWorkflow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllBizHandleWorkflow_result getResult(I iface, findAllBizHandleWorkflow_args args) throws org.apache.thrift.TException {
        findAllBizHandleWorkflow_result result = new findAllBizHandleWorkflow_result();
        result.success = iface.findAllBizHandleWorkflow(args.bizHandleWorkflowDto);
        return result;
      }
    }

    public static class addBizHandleWorkflow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBizHandleWorkflow_args> {
      public addBizHandleWorkflow() {
        super("addBizHandleWorkflow");
      }

      public addBizHandleWorkflow_args getEmptyArgsInstance() {
        return new addBizHandleWorkflow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBizHandleWorkflow_result getResult(I iface, addBizHandleWorkflow_args args) throws org.apache.thrift.TException {
        addBizHandleWorkflow_result result = new addBizHandleWorkflow_result();
        result.success = iface.addBizHandleWorkflow(args.bizHandleWorkflowDto);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateBizHandleWorkflow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizHandleWorkflow_args> {
      public updateBizHandleWorkflow() {
        super("updateBizHandleWorkflow");
      }

      public updateBizHandleWorkflow_args getEmptyArgsInstance() {
        return new updateBizHandleWorkflow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizHandleWorkflow_result getResult(I iface, updateBizHandleWorkflow_args args) throws org.apache.thrift.TException {
        updateBizHandleWorkflow_result result = new updateBizHandleWorkflow_result();
        result.success = iface.updateBizHandleWorkflow(args.bizHandleWorkflowDto);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHandleDifferWarn_args> {
      public findAllHandleDifferWarn() {
        super("findAllHandleDifferWarn");
      }

      public findAllHandleDifferWarn_args getEmptyArgsInstance() {
        return new findAllHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHandleDifferWarn_result getResult(I iface, findAllHandleDifferWarn_args args) throws org.apache.thrift.TException {
        findAllHandleDifferWarn_result result = new findAllHandleDifferWarn_result();
        result.success = iface.findAllHandleDifferWarn(args.handleDifferWarnDTO);
        return result;
      }
    }

    public static class getHandleDifferWarnTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDifferWarnTotal_args> {
      public getHandleDifferWarnTotal() {
        super("getHandleDifferWarnTotal");
      }

      public getHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getHandleDifferWarnTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDifferWarnTotal_result getResult(I iface, getHandleDifferWarnTotal_args args) throws org.apache.thrift.TException {
        getHandleDifferWarnTotal_result result = new getHandleDifferWarnTotal_result();
        result.success = iface.getHandleDifferWarnTotal(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHisHandleDifferWarnCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHisHandleDifferWarnCount_args> {
      public getHisHandleDifferWarnCount() {
        super("getHisHandleDifferWarnCount");
      }

      public getHisHandleDifferWarnCount_args getEmptyArgsInstance() {
        return new getHisHandleDifferWarnCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHisHandleDifferWarnCount_result getResult(I iface, getHisHandleDifferWarnCount_args args) throws org.apache.thrift.TException {
        getHisHandleDifferWarnCount_result result = new getHisHandleDifferWarnCount_result();
        result.success = iface.getHisHandleDifferWarnCount(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findIndexHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findIndexHandleDifferWarn_args> {
      public findIndexHandleDifferWarn() {
        super("findIndexHandleDifferWarn");
      }

      public findIndexHandleDifferWarn_args getEmptyArgsInstance() {
        return new findIndexHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findIndexHandleDifferWarn_result getResult(I iface, findIndexHandleDifferWarn_args args) throws org.apache.thrift.TException {
        findIndexHandleDifferWarn_result result = new findIndexHandleDifferWarn_result();
        result.success = iface.findIndexHandleDifferWarn(args.userId);
        return result;
      }
    }

    public static class getIndexHandleDifferWarnTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIndexHandleDifferWarnTotal_args> {
      public getIndexHandleDifferWarnTotal() {
        super("getIndexHandleDifferWarnTotal");
      }

      public getIndexHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getIndexHandleDifferWarnTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIndexHandleDifferWarnTotal_result getResult(I iface, getIndexHandleDifferWarnTotal_args args) throws org.apache.thrift.TException {
        getIndexHandleDifferWarnTotal_result result = new getIndexHandleDifferWarnTotal_result();
        result.success = iface.getIndexHandleDifferWarnTotal(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHandleDifferWarn_args> {
      public addHandleDifferWarn() {
        super("addHandleDifferWarn");
      }

      public addHandleDifferWarn_args getEmptyArgsInstance() {
        return new addHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHandleDifferWarn_result getResult(I iface, addHandleDifferWarn_args args) throws org.apache.thrift.TException {
        addHandleDifferWarn_result result = new addHandleDifferWarn_result();
        result.success = iface.addHandleDifferWarn(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delHandleDifferWarn_args> {
      public delHandleDifferWarn() {
        super("delHandleDifferWarn");
      }

      public delHandleDifferWarn_args getEmptyArgsInstance() {
        return new delHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delHandleDifferWarn_result getResult(I iface, delHandleDifferWarn_args args) throws org.apache.thrift.TException {
        delHandleDifferWarn_result result = new delHandleDifferWarn_result();
        result.success = iface.delHandleDifferWarn(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleDifferWarnById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDifferWarnById_args> {
      public getHandleDifferWarnById() {
        super("getHandleDifferWarnById");
      }

      public getHandleDifferWarnById_args getEmptyArgsInstance() {
        return new getHandleDifferWarnById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDifferWarnById_result getResult(I iface, getHandleDifferWarnById_args args) throws org.apache.thrift.TException {
        getHandleDifferWarnById_result result = new getHandleDifferWarnById_result();
        result.success = iface.getHandleDifferWarnById(args.pid);
        return result;
      }
    }

    public static class updateHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHandleDifferWarn_args> {
      public updateHandleDifferWarn() {
        super("updateHandleDifferWarn");
      }

      public updateHandleDifferWarn_args getEmptyArgsInstance() {
        return new updateHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHandleDifferWarn_result getResult(I iface, updateHandleDifferWarn_args args) throws org.apache.thrift.TException {
        updateHandleDifferWarn_result result = new updateHandleDifferWarn_result();
        result.success = iface.updateHandleDifferWarn(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHisHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHisHandleDifferWarn_args> {
      public addHisHandleDifferWarn() {
        super("addHisHandleDifferWarn");
      }

      public addHisHandleDifferWarn_args getEmptyArgsInstance() {
        return new addHisHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHisHandleDifferWarn_result getResult(I iface, addHisHandleDifferWarn_args args) throws org.apache.thrift.TException {
        addHisHandleDifferWarn_result result = new addHisHandleDifferWarn_result();
        result.success = iface.addHisHandleDifferWarn(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHisHandleDifferWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHisHandleDifferWarn_args> {
      public findAllHisHandleDifferWarn() {
        super("findAllHisHandleDifferWarn");
      }

      public findAllHisHandleDifferWarn_args getEmptyArgsInstance() {
        return new findAllHisHandleDifferWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHisHandleDifferWarn_result getResult(I iface, findAllHisHandleDifferWarn_args args) throws org.apache.thrift.TException {
        findAllHisHandleDifferWarn_result result = new findAllHisHandleDifferWarn_result();
        result.success = iface.findAllHisHandleDifferWarn(args.handleDifferWarnDTO);
        return result;
      }
    }

    public static class getHisHandleDifferWarnTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHisHandleDifferWarnTotal_args> {
      public getHisHandleDifferWarnTotal() {
        super("getHisHandleDifferWarnTotal");
      }

      public getHisHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getHisHandleDifferWarnTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHisHandleDifferWarnTotal_result getResult(I iface, getHisHandleDifferWarnTotal_args args) throws org.apache.thrift.TException {
        getHisHandleDifferWarnTotal_result result = new getHisHandleDifferWarnTotal_result();
        result.success = iface.getHisHandleDifferWarnTotal(args.handleDifferWarnDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllHandleDynamicFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHandleDynamicFile_args> {
      public findAllHandleDynamicFile() {
        super("findAllHandleDynamicFile");
      }

      public findAllHandleDynamicFile_args getEmptyArgsInstance() {
        return new findAllHandleDynamicFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllHandleDynamicFile_result getResult(I iface, findAllHandleDynamicFile_args args) throws org.apache.thrift.TException {
        findAllHandleDynamicFile_result result = new findAllHandleDynamicFile_result();
        result.success = iface.findAllHandleDynamicFile(args.handleDynamicFileDTO);
        return result;
      }
    }

    public static class getHandleDynamicFileTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDynamicFileTotal_args> {
      public getHandleDynamicFileTotal() {
        super("getHandleDynamicFileTotal");
      }

      public getHandleDynamicFileTotal_args getEmptyArgsInstance() {
        return new getHandleDynamicFileTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDynamicFileTotal_result getResult(I iface, getHandleDynamicFileTotal_args args) throws org.apache.thrift.TException {
        getHandleDynamicFileTotal_result result = new getHandleDynamicFileTotal_result();
        result.success = iface.getHandleDynamicFileTotal(args.handleDynamicFileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHandleDynamicFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHandleDynamicFile_args> {
      public addHandleDynamicFile() {
        super("addHandleDynamicFile");
      }

      public addHandleDynamicFile_args getEmptyArgsInstance() {
        return new addHandleDynamicFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHandleDynamicFile_result getResult(I iface, addHandleDynamicFile_args args) throws org.apache.thrift.TException {
        addHandleDynamicFile_result result = new addHandleDynamicFile_result();
        result.success = iface.addHandleDynamicFile(args.handleDynamicFileDTO, args.bizFile);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addHandleDynamicFileOfComm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHandleDynamicFileOfComm_args> {
      public addHandleDynamicFileOfComm() {
        super("addHandleDynamicFileOfComm");
      }

      public addHandleDynamicFileOfComm_args getEmptyArgsInstance() {
        return new addHandleDynamicFileOfComm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHandleDynamicFileOfComm_result getResult(I iface, addHandleDynamicFileOfComm_args args) throws org.apache.thrift.TException {
        addHandleDynamicFileOfComm_result result = new addHandleDynamicFileOfComm_result();
        result.success = iface.addHandleDynamicFileOfComm(args.handleDynamicFileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleDynamicFileById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDynamicFileById_args> {
      public getHandleDynamicFileById() {
        super("getHandleDynamicFileById");
      }

      public getHandleDynamicFileById_args getEmptyArgsInstance() {
        return new getHandleDynamicFileById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDynamicFileById_result getResult(I iface, getHandleDynamicFileById_args args) throws org.apache.thrift.TException {
        getHandleDynamicFileById_result result = new getHandleDynamicFileById_result();
        result.success = iface.getHandleDynamicFileById(args.pid);
        return result;
      }
    }

    public static class updateHandleDynamicFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHandleDynamicFile_args> {
      public updateHandleDynamicFile() {
        super("updateHandleDynamicFile");
      }

      public updateHandleDynamicFile_args getEmptyArgsInstance() {
        return new updateHandleDynamicFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHandleDynamicFile_result getResult(I iface, updateHandleDynamicFile_args args) throws org.apache.thrift.TException {
        updateHandleDynamicFile_result result = new updateHandleDynamicFile_result();
        result.success = iface.updateHandleDynamicFile(args.handleDynamicFileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCanHandleFlowByHandleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCanHandleFlowByHandleId_args> {
      public getCanHandleFlowByHandleId() {
        super("getCanHandleFlowByHandleId");
      }

      public getCanHandleFlowByHandleId_args getEmptyArgsInstance() {
        return new getCanHandleFlowByHandleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCanHandleFlowByHandleId_result getResult(I iface, getCanHandleFlowByHandleId_args args) throws org.apache.thrift.TException {
        getCanHandleFlowByHandleId_result result = new getCanHandleFlowByHandleId_result();
        result.success = iface.getCanHandleFlowByHandleId(args.handleId, args.userName);
        return result;
      }
    }

    public static class getCanHandleDynamicIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCanHandleDynamicIds_args> {
      public getCanHandleDynamicIds() {
        super("getCanHandleDynamicIds");
      }

      public getCanHandleDynamicIds_args getEmptyArgsInstance() {
        return new getCanHandleDynamicIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCanHandleDynamicIds_result getResult(I iface, getCanHandleDynamicIds_args args) throws org.apache.thrift.TException {
        getCanHandleDynamicIds_result result = new getCanHandleDynamicIds_result();
        result.success = iface.getCanHandleDynamicIds(args.userName);
        return result;
      }
    }

    public static class getNeedHandleWarn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNeedHandleWarn_args> {
      public getNeedHandleWarn() {
        super("getNeedHandleWarn");
      }

      public getNeedHandleWarn_args getEmptyArgsInstance() {
        return new getNeedHandleWarn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNeedHandleWarn_result getResult(I iface, getNeedHandleWarn_args args) throws org.apache.thrift.TException {
        getNeedHandleWarn_result result = new getNeedHandleWarn_result();
        result.success = iface.getNeedHandleWarn(args.userId);
        return result;
      }
    }

    public static class queryNeedHandleWarnIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryNeedHandleWarnIndex_args> {
      public queryNeedHandleWarnIndex() {
        super("queryNeedHandleWarnIndex");
      }

      public queryNeedHandleWarnIndex_args getEmptyArgsInstance() {
        return new queryNeedHandleWarnIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryNeedHandleWarnIndex_result getResult(I iface, queryNeedHandleWarnIndex_args args) throws org.apache.thrift.TException {
        queryNeedHandleWarnIndex_result result = new queryNeedHandleWarnIndex_result();
        result.success = iface.queryNeedHandleWarnIndex(args.handleDifferWarnIndexDTO);
        return result;
      }
    }

    public static class getNeedHandleWarnIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNeedHandleWarnIndexTotal_args> {
      public getNeedHandleWarnIndexTotal() {
        super("getNeedHandleWarnIndexTotal");
      }

      public getNeedHandleWarnIndexTotal_args getEmptyArgsInstance() {
        return new getNeedHandleWarnIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNeedHandleWarnIndexTotal_result getResult(I iface, getNeedHandleWarnIndexTotal_args args) throws org.apache.thrift.TException {
        getNeedHandleWarnIndexTotal_result result = new getNeedHandleWarnIndexTotal_result();
        result.success = iface.getNeedHandleWarnIndexTotal(args.handleDifferWarnIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureIndex_args> {
      public queryForeclosureIndex() {
        super("queryForeclosureIndex");
      }

      public queryForeclosureIndex_args getEmptyArgsInstance() {
        return new queryForeclosureIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureIndex_result getResult(I iface, queryForeclosureIndex_args args) throws org.apache.thrift.TException {
        queryForeclosureIndex_result result = new queryForeclosureIndex_result();
        result.success = iface.queryForeclosureIndex(args.foreclosureIndexDTO);
        return result;
      }
    }

    public static class getForeclosureIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getForeclosureIndexTotal_args> {
      public getForeclosureIndexTotal() {
        super("getForeclosureIndexTotal");
      }

      public getForeclosureIndexTotal_args getEmptyArgsInstance() {
        return new getForeclosureIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getForeclosureIndexTotal_result getResult(I iface, getForeclosureIndexTotal_args args) throws org.apache.thrift.TException {
        getForeclosureIndexTotal_result result = new getForeclosureIndexTotal_result();
        result.success = iface.getForeclosureIndexTotal(args.foreclosureIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class foreclosure<I extends Iface> extends org.apache.thrift.ProcessFunction<I, foreclosure_args> {
      public foreclosure() {
        super("foreclosure");
      }

      public foreclosure_args getEmptyArgsInstance() {
        return new foreclosure_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public foreclosure_result getResult(I iface, foreclosure_args args) throws org.apache.thrift.TException {
        foreclosure_result result = new foreclosure_result();
        result.success = iface.foreclosure(args.houseBalanceDTO, args.handleInfoDTO, args.handleDynamicDTO, args.loginUserName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryOrgBizHandlePage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOrgBizHandlePage_args> {
      public queryOrgBizHandlePage() {
        super("queryOrgBizHandlePage");
      }

      public queryOrgBizHandlePage_args getEmptyArgsInstance() {
        return new queryOrgBizHandlePage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOrgBizHandlePage_result getResult(I iface, queryOrgBizHandlePage_args args) throws org.apache.thrift.TException {
        queryOrgBizHandlePage_result result = new queryOrgBizHandlePage_result();
        result.success = iface.queryOrgBizHandlePage(args.query);
        return result;
      }
    }

    public static class getOrgBizHandlePageTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgBizHandlePageTotal_args> {
      public getOrgBizHandlePageTotal() {
        super("getOrgBizHandlePageTotal");
      }

      public getOrgBizHandlePageTotal_args getEmptyArgsInstance() {
        return new getOrgBizHandlePageTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrgBizHandlePageTotal_result getResult(I iface, getOrgBizHandlePageTotal_args args) throws org.apache.thrift.TException {
        getOrgBizHandlePageTotal_result result = new getOrgBizHandlePageTotal_result();
        result.success = iface.getOrgBizHandlePageTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHandleDifferWarnList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDifferWarnList_args> {
      public getHandleDifferWarnList() {
        super("getHandleDifferWarnList");
      }

      public getHandleDifferWarnList_args getEmptyArgsInstance() {
        return new getHandleDifferWarnList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDifferWarnList_result getResult(I iface, getHandleDifferWarnList_args args) throws org.apache.thrift.TException {
        getHandleDifferWarnList_result result = new getHandleDifferWarnList_result();
        result.success = iface.getHandleDifferWarnList(args.handleDifferWarnDTO);
        return result;
      }
    }

    public static class findHandleDynamicFileByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHandleDynamicFileByProjectId_args> {
      public findHandleDynamicFileByProjectId() {
        super("findHandleDynamicFileByProjectId");
      }

      public findHandleDynamicFileByProjectId_args getEmptyArgsInstance() {
        return new findHandleDynamicFileByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findHandleDynamicFileByProjectId_result getResult(I iface, findHandleDynamicFileByProjectId_args args) throws org.apache.thrift.TException {
        findHandleDynamicFileByProjectId_result result = new findHandleDynamicFileByProjectId_result();
        result.success = iface.findHandleDynamicFileByProjectId(args.projectId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findAllApplyHandleIndex", new findAllApplyHandleIndex());
      processMap.put("getApplyHandleIndexTotal", new getApplyHandleIndexTotal());
      processMap.put("qeuryHandleDynamicCountMapList", new qeuryHandleDynamicCountMapList());
      processMap.put("findAllHandleInfoDTO", new findAllHandleInfoDTO());
      processMap.put("getHandleInfoDTOTotal", new getHandleInfoDTOTotal());
      processMap.put("addHandleInfo", new addHandleInfo());
      processMap.put("getHandleInfoById", new getHandleInfoById());
      processMap.put("getHandleInfoByProjectId", new getHandleInfoByProjectId());
      processMap.put("updateHandleInfo", new updateHandleInfo());
      processMap.put("foreclosureTurnDown", new foreclosureTurnDown());
      processMap.put("isBalanceConfirm", new isBalanceConfirm());
      processMap.put("findAllApplyHandleInfo", new findAllApplyHandleInfo());
      processMap.put("getApplyHandleInfoTotal", new getApplyHandleInfoTotal());
      processMap.put("addApplyHandleInfo", new addApplyHandleInfo());
      processMap.put("getApplyHandleInfoById", new getApplyHandleInfoById());
      processMap.put("updateApplyHandleInfo", new updateApplyHandleInfo());
      processMap.put("findAllHouseBalance", new findAllHouseBalance());
      processMap.put("getHouseBalanceTotal", new getHouseBalanceTotal());
      processMap.put("getHouseBalanceListByProjectId", new getHouseBalanceListByProjectId());
      processMap.put("getForeclosureMoneyByProjectId", new getForeclosureMoneyByProjectId());
      processMap.put("addHouseBalance", new addHouseBalance());
      processMap.put("getHouseBalanceById", new getHouseBalanceById());
      processMap.put("updateHouseBalance", new updateHouseBalance());
      processMap.put("balanceConfirm", new balanceConfirm());
      processMap.put("getHandleUser", new getHandleUser());
      processMap.put("getProjectIdByHandleId", new getProjectIdByHandleId());
      processMap.put("findAllRefundDetails", new findAllRefundDetails());
      processMap.put("getRefundDetailsTotal", new getRefundDetailsTotal());
      processMap.put("getRefundDetailsListByProjectId", new getRefundDetailsListByProjectId());
      processMap.put("addRefundDetails", new addRefundDetails());
      processMap.put("getRefundDetailsById", new getRefundDetailsById());
      processMap.put("updateRefundDetails", new updateRefundDetails());
      processMap.put("findAllHandleFlow", new findAllHandleFlow());
      processMap.put("getHandleFlowTotal", new getHandleFlowTotal());
      processMap.put("findAllHandleDynamic", new findAllHandleDynamic());
      processMap.put("getHandleDynamicTotal", new getHandleDynamicTotal());
      processMap.put("gethandleDaysByProjectId", new gethandleDaysByProjectId());
      processMap.put("addHandleDynamic", new addHandleDynamic());
      processMap.put("getHandleDynamicById", new getHandleDynamicById());
      processMap.put("updateHandleDynamic", new updateHandleDynamic());
      processMap.put("updateHandleDynamicAndFinishTask", new updateHandleDynamicAndFinishTask());
      processMap.put("finishHandleDynamicTask", new finishHandleDynamicTask());
      processMap.put("finishAllHandleDynamicTask", new finishAllHandleDynamicTask());
      processMap.put("findAllBizHandleWorkflow", new findAllBizHandleWorkflow());
      processMap.put("addBizHandleWorkflow", new addBizHandleWorkflow());
      processMap.put("updateBizHandleWorkflow", new updateBizHandleWorkflow());
      processMap.put("findAllHandleDifferWarn", new findAllHandleDifferWarn());
      processMap.put("getHandleDifferWarnTotal", new getHandleDifferWarnTotal());
      processMap.put("getHisHandleDifferWarnCount", new getHisHandleDifferWarnCount());
      processMap.put("findIndexHandleDifferWarn", new findIndexHandleDifferWarn());
      processMap.put("getIndexHandleDifferWarnTotal", new getIndexHandleDifferWarnTotal());
      processMap.put("addHandleDifferWarn", new addHandleDifferWarn());
      processMap.put("delHandleDifferWarn", new delHandleDifferWarn());
      processMap.put("getHandleDifferWarnById", new getHandleDifferWarnById());
      processMap.put("updateHandleDifferWarn", new updateHandleDifferWarn());
      processMap.put("addHisHandleDifferWarn", new addHisHandleDifferWarn());
      processMap.put("findAllHisHandleDifferWarn", new findAllHisHandleDifferWarn());
      processMap.put("getHisHandleDifferWarnTotal", new getHisHandleDifferWarnTotal());
      processMap.put("findAllHandleDynamicFile", new findAllHandleDynamicFile());
      processMap.put("getHandleDynamicFileTotal", new getHandleDynamicFileTotal());
      processMap.put("addHandleDynamicFile", new addHandleDynamicFile());
      processMap.put("addHandleDynamicFileOfComm", new addHandleDynamicFileOfComm());
      processMap.put("getHandleDynamicFileById", new getHandleDynamicFileById());
      processMap.put("updateHandleDynamicFile", new updateHandleDynamicFile());
      processMap.put("getCanHandleFlowByHandleId", new getCanHandleFlowByHandleId());
      processMap.put("getCanHandleDynamicIds", new getCanHandleDynamicIds());
      processMap.put("getNeedHandleWarn", new getNeedHandleWarn());
      processMap.put("queryNeedHandleWarnIndex", new queryNeedHandleWarnIndex());
      processMap.put("getNeedHandleWarnIndexTotal", new getNeedHandleWarnIndexTotal());
      processMap.put("queryForeclosureIndex", new queryForeclosureIndex());
      processMap.put("getForeclosureIndexTotal", new getForeclosureIndexTotal());
      processMap.put("foreclosure", new foreclosure());
      processMap.put("queryOrgBizHandlePage", new queryOrgBizHandlePage());
      processMap.put("getOrgBizHandlePageTotal", new getOrgBizHandlePageTotal());
      processMap.put("getHandleDifferWarnList", new getHandleDifferWarnList());
      processMap.put("findHandleDynamicFileByProjectId", new findHandleDynamicFileByProjectId());
      return processMap;
    }

    public static class findAllApplyHandleIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllApplyHandleIndex_args, List<ApplyHandleIndexDTO>> {
      public findAllApplyHandleIndex() {
        super("findAllApplyHandleIndex");
      }

      public findAllApplyHandleIndex_args getEmptyArgsInstance() {
        return new findAllApplyHandleIndex_args();
      }

      public AsyncMethodCallback<List<ApplyHandleIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ApplyHandleIndexDTO>>() { 
          public void onComplete(List<ApplyHandleIndexDTO> o) {
            findAllApplyHandleIndex_result result = new findAllApplyHandleIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllApplyHandleIndex_result result = new findAllApplyHandleIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllApplyHandleIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<ApplyHandleIndexDTO>> resultHandler) throws TException {
        iface.findAllApplyHandleIndex(args.applyHandleIndexDTO,resultHandler);
      }
    }

    public static class getApplyHandleIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyHandleIndexTotal_args, Integer> {
      public getApplyHandleIndexTotal() {
        super("getApplyHandleIndexTotal");
      }

      public getApplyHandleIndexTotal_args getEmptyArgsInstance() {
        return new getApplyHandleIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getApplyHandleIndexTotal_result result = new getApplyHandleIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyHandleIndexTotal_result result = new getApplyHandleIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyHandleIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getApplyHandleIndexTotal(args.applyHandleIndexDTO,resultHandler);
      }
    }

    public static class qeuryHandleDynamicCountMapList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, qeuryHandleDynamicCountMapList_args, List<HandleDynamicMap>> {
      public qeuryHandleDynamicCountMapList() {
        super("qeuryHandleDynamicCountMapList");
      }

      public qeuryHandleDynamicCountMapList_args getEmptyArgsInstance() {
        return new qeuryHandleDynamicCountMapList_args();
      }

      public AsyncMethodCallback<List<HandleDynamicMap>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDynamicMap>>() { 
          public void onComplete(List<HandleDynamicMap> o) {
            qeuryHandleDynamicCountMapList_result result = new qeuryHandleDynamicCountMapList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            qeuryHandleDynamicCountMapList_result result = new qeuryHandleDynamicCountMapList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, qeuryHandleDynamicCountMapList_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDynamicMap>> resultHandler) throws TException {
        iface.qeuryHandleDynamicCountMapList(args.applyHandleIndexDTO,resultHandler);
      }
    }

    public static class findAllHandleInfoDTO<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHandleInfoDTO_args, List<HandleInfoDTO>> {
      public findAllHandleInfoDTO() {
        super("findAllHandleInfoDTO");
      }

      public findAllHandleInfoDTO_args getEmptyArgsInstance() {
        return new findAllHandleInfoDTO_args();
      }

      public AsyncMethodCallback<List<HandleInfoDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleInfoDTO>>() { 
          public void onComplete(List<HandleInfoDTO> o) {
            findAllHandleInfoDTO_result result = new findAllHandleInfoDTO_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHandleInfoDTO_result result = new findAllHandleInfoDTO_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHandleInfoDTO_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleInfoDTO>> resultHandler) throws TException {
        iface.findAllHandleInfoDTO(args.handleInfoDTO,resultHandler);
      }
    }

    public static class getHandleInfoDTOTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleInfoDTOTotal_args, Integer> {
      public getHandleInfoDTOTotal() {
        super("getHandleInfoDTOTotal");
      }

      public getHandleInfoDTOTotal_args getEmptyArgsInstance() {
        return new getHandleInfoDTOTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleInfoDTOTotal_result result = new getHandleInfoDTOTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleInfoDTOTotal_result result = new getHandleInfoDTOTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleInfoDTOTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleInfoDTOTotal(args.handleInfoDTO,resultHandler);
      }
    }

    public static class addHandleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHandleInfo_args, Boolean> {
      public addHandleInfo() {
        super("addHandleInfo");
      }

      public addHandleInfo_args getEmptyArgsInstance() {
        return new addHandleInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHandleInfo_result result = new addHandleInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHandleInfo_result result = new addHandleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHandleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHandleInfo(args.handleInfoDTO, args.paramMap,resultHandler);
      }
    }

    public static class getHandleInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleInfoById_args, HandleInfoDTO> {
      public getHandleInfoById() {
        super("getHandleInfoById");
      }

      public getHandleInfoById_args getEmptyArgsInstance() {
        return new getHandleInfoById_args();
      }

      public AsyncMethodCallback<HandleInfoDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HandleInfoDTO>() { 
          public void onComplete(HandleInfoDTO o) {
            getHandleInfoById_result result = new getHandleInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleInfoById_result result = new getHandleInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<HandleInfoDTO> resultHandler) throws TException {
        iface.getHandleInfoById(args.pid,resultHandler);
      }
    }

    public static class getHandleInfoByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleInfoByProjectId_args, HandleInfoDTO> {
      public getHandleInfoByProjectId() {
        super("getHandleInfoByProjectId");
      }

      public getHandleInfoByProjectId_args getEmptyArgsInstance() {
        return new getHandleInfoByProjectId_args();
      }

      public AsyncMethodCallback<HandleInfoDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HandleInfoDTO>() { 
          public void onComplete(HandleInfoDTO o) {
            getHandleInfoByProjectId_result result = new getHandleInfoByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleInfoByProjectId_result result = new getHandleInfoByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleInfoByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<HandleInfoDTO> resultHandler) throws TException {
        iface.getHandleInfoByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateHandleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHandleInfo_args, Boolean> {
      public updateHandleInfo() {
        super("updateHandleInfo");
      }

      public updateHandleInfo_args getEmptyArgsInstance() {
        return new updateHandleInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHandleInfo_result result = new updateHandleInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHandleInfo_result result = new updateHandleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHandleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHandleInfo(args.handleInfoDTO,resultHandler);
      }
    }

    public static class foreclosureTurnDown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, foreclosureTurnDown_args, Boolean> {
      public foreclosureTurnDown() {
        super("foreclosureTurnDown");
      }

      public foreclosureTurnDown_args getEmptyArgsInstance() {
        return new foreclosureTurnDown_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            foreclosureTurnDown_result result = new foreclosureTurnDown_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            foreclosureTurnDown_result result = new foreclosureTurnDown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, foreclosureTurnDown_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.foreclosureTurnDown(args.handleInfoDTO,resultHandler);
      }
    }

    public static class isBalanceConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isBalanceConfirm_args, Boolean> {
      public isBalanceConfirm() {
        super("isBalanceConfirm");
      }

      public isBalanceConfirm_args getEmptyArgsInstance() {
        return new isBalanceConfirm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isBalanceConfirm_result result = new isBalanceConfirm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isBalanceConfirm_result result = new isBalanceConfirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isBalanceConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isBalanceConfirm(args.projectId, args.handleId,resultHandler);
      }
    }

    public static class findAllApplyHandleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllApplyHandleInfo_args, List<ApplyHandleInfoDTO>> {
      public findAllApplyHandleInfo() {
        super("findAllApplyHandleInfo");
      }

      public findAllApplyHandleInfo_args getEmptyArgsInstance() {
        return new findAllApplyHandleInfo_args();
      }

      public AsyncMethodCallback<List<ApplyHandleInfoDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ApplyHandleInfoDTO>>() { 
          public void onComplete(List<ApplyHandleInfoDTO> o) {
            findAllApplyHandleInfo_result result = new findAllApplyHandleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllApplyHandleInfo_result result = new findAllApplyHandleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllApplyHandleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<ApplyHandleInfoDTO>> resultHandler) throws TException {
        iface.findAllApplyHandleInfo(args.applyHandleInfoDTO,resultHandler);
      }
    }

    public static class getApplyHandleInfoTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyHandleInfoTotal_args, Integer> {
      public getApplyHandleInfoTotal() {
        super("getApplyHandleInfoTotal");
      }

      public getApplyHandleInfoTotal_args getEmptyArgsInstance() {
        return new getApplyHandleInfoTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getApplyHandleInfoTotal_result result = new getApplyHandleInfoTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyHandleInfoTotal_result result = new getApplyHandleInfoTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyHandleInfoTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getApplyHandleInfoTotal(args.applyHandleInfoDTO,resultHandler);
      }
    }

    public static class addApplyHandleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplyHandleInfo_args, Boolean> {
      public addApplyHandleInfo() {
        super("addApplyHandleInfo");
      }

      public addApplyHandleInfo_args getEmptyArgsInstance() {
        return new addApplyHandleInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addApplyHandleInfo_result result = new addApplyHandleInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addApplyHandleInfo_result result = new addApplyHandleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addApplyHandleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addApplyHandleInfo(args.applyHandleInfoDTO,resultHandler);
      }
    }

    public static class getApplyHandleInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyHandleInfoById_args, ApplyHandleInfoDTO> {
      public getApplyHandleInfoById() {
        super("getApplyHandleInfoById");
      }

      public getApplyHandleInfoById_args getEmptyArgsInstance() {
        return new getApplyHandleInfoById_args();
      }

      public AsyncMethodCallback<ApplyHandleInfoDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplyHandleInfoDTO>() { 
          public void onComplete(ApplyHandleInfoDTO o) {
            getApplyHandleInfoById_result result = new getApplyHandleInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyHandleInfoById_result result = new getApplyHandleInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyHandleInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<ApplyHandleInfoDTO> resultHandler) throws TException {
        iface.getApplyHandleInfoById(args.pid,resultHandler);
      }
    }

    public static class updateApplyHandleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplyHandleInfo_args, Boolean> {
      public updateApplyHandleInfo() {
        super("updateApplyHandleInfo");
      }

      public updateApplyHandleInfo_args getEmptyArgsInstance() {
        return new updateApplyHandleInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateApplyHandleInfo_result result = new updateApplyHandleInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplyHandleInfo_result result = new updateApplyHandleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplyHandleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateApplyHandleInfo(args.applyHandleInfoDTO,resultHandler);
      }
    }

    public static class findAllHouseBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHouseBalance_args, List<HouseBalanceDTO>> {
      public findAllHouseBalance() {
        super("findAllHouseBalance");
      }

      public findAllHouseBalance_args getEmptyArgsInstance() {
        return new findAllHouseBalance_args();
      }

      public AsyncMethodCallback<List<HouseBalanceDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HouseBalanceDTO>>() { 
          public void onComplete(List<HouseBalanceDTO> o) {
            findAllHouseBalance_result result = new findAllHouseBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHouseBalance_result result = new findAllHouseBalance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHouseBalance_args args, org.apache.thrift.async.AsyncMethodCallback<List<HouseBalanceDTO>> resultHandler) throws TException {
        iface.findAllHouseBalance(args.houseBalanceDTO,resultHandler);
      }
    }

    public static class getHouseBalanceTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHouseBalanceTotal_args, Integer> {
      public getHouseBalanceTotal() {
        super("getHouseBalanceTotal");
      }

      public getHouseBalanceTotal_args getEmptyArgsInstance() {
        return new getHouseBalanceTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHouseBalanceTotal_result result = new getHouseBalanceTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHouseBalanceTotal_result result = new getHouseBalanceTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHouseBalanceTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHouseBalanceTotal(args.houseBalanceDTO,resultHandler);
      }
    }

    public static class getHouseBalanceListByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHouseBalanceListByProjectId_args, List<HouseBalanceDTO>> {
      public getHouseBalanceListByProjectId() {
        super("getHouseBalanceListByProjectId");
      }

      public getHouseBalanceListByProjectId_args getEmptyArgsInstance() {
        return new getHouseBalanceListByProjectId_args();
      }

      public AsyncMethodCallback<List<HouseBalanceDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HouseBalanceDTO>>() { 
          public void onComplete(List<HouseBalanceDTO> o) {
            getHouseBalanceListByProjectId_result result = new getHouseBalanceListByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHouseBalanceListByProjectId_result result = new getHouseBalanceListByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHouseBalanceListByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<List<HouseBalanceDTO>> resultHandler) throws TException {
        iface.getHouseBalanceListByProjectId(args.projectId,resultHandler);
      }
    }

    public static class getForeclosureMoneyByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getForeclosureMoneyByProjectId_args, Double> {
      public getForeclosureMoneyByProjectId() {
        super("getForeclosureMoneyByProjectId");
      }

      public getForeclosureMoneyByProjectId_args getEmptyArgsInstance() {
        return new getForeclosureMoneyByProjectId_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getForeclosureMoneyByProjectId_result result = new getForeclosureMoneyByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getForeclosureMoneyByProjectId_result result = new getForeclosureMoneyByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getForeclosureMoneyByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getForeclosureMoneyByProjectId(args.projectId,resultHandler);
      }
    }

    public static class addHouseBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHouseBalance_args, Boolean> {
      public addHouseBalance() {
        super("addHouseBalance");
      }

      public addHouseBalance_args getEmptyArgsInstance() {
        return new addHouseBalance_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHouseBalance_result result = new addHouseBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHouseBalance_result result = new addHouseBalance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHouseBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHouseBalance(args.houseBalanceDTO,resultHandler);
      }
    }

    public static class getHouseBalanceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHouseBalanceById_args, HouseBalanceDTO> {
      public getHouseBalanceById() {
        super("getHouseBalanceById");
      }

      public getHouseBalanceById_args getEmptyArgsInstance() {
        return new getHouseBalanceById_args();
      }

      public AsyncMethodCallback<HouseBalanceDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HouseBalanceDTO>() { 
          public void onComplete(HouseBalanceDTO o) {
            getHouseBalanceById_result result = new getHouseBalanceById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHouseBalanceById_result result = new getHouseBalanceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHouseBalanceById_args args, org.apache.thrift.async.AsyncMethodCallback<HouseBalanceDTO> resultHandler) throws TException {
        iface.getHouseBalanceById(args.pid,resultHandler);
      }
    }

    public static class updateHouseBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHouseBalance_args, Boolean> {
      public updateHouseBalance() {
        super("updateHouseBalance");
      }

      public updateHouseBalance_args getEmptyArgsInstance() {
        return new updateHouseBalance_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHouseBalance_result result = new updateHouseBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHouseBalance_result result = new updateHouseBalance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHouseBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHouseBalance(args.houseBalanceDTO,resultHandler);
      }
    }

    public static class balanceConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, balanceConfirm_args, Boolean> {
      public balanceConfirm() {
        super("balanceConfirm");
      }

      public balanceConfirm_args getEmptyArgsInstance() {
        return new balanceConfirm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            balanceConfirm_result result = new balanceConfirm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            balanceConfirm_result result = new balanceConfirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, balanceConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.balanceConfirm(args.houseBalanceDTO,resultHandler);
      }
    }

    public static class getHandleUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleUser_args, Set<Map<String,String>>> {
      public getHandleUser() {
        super("getHandleUser");
      }

      public getHandleUser_args getEmptyArgsInstance() {
        return new getHandleUser_args();
      }

      public AsyncMethodCallback<Set<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Map<String,String>>>() { 
          public void onComplete(Set<Map<String,String>> o) {
            getHandleUser_result result = new getHandleUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleUser_result result = new getHandleUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleUser_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Map<String,String>>> resultHandler) throws TException {
        iface.getHandleUser(args.handleId, args.handleFlowId, args.loginUserName,resultHandler);
      }
    }

    public static class getProjectIdByHandleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectIdByHandleId_args, Integer> {
      public getProjectIdByHandleId() {
        super("getProjectIdByHandleId");
      }

      public getProjectIdByHandleId_args getEmptyArgsInstance() {
        return new getProjectIdByHandleId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getProjectIdByHandleId_result result = new getProjectIdByHandleId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectIdByHandleId_result result = new getProjectIdByHandleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectIdByHandleId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getProjectIdByHandleId(args.handleId,resultHandler);
      }
    }

    public static class findAllRefundDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllRefundDetails_args, List<RefundDetailsDTO>> {
      public findAllRefundDetails() {
        super("findAllRefundDetails");
      }

      public findAllRefundDetails_args getEmptyArgsInstance() {
        return new findAllRefundDetails_args();
      }

      public AsyncMethodCallback<List<RefundDetailsDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundDetailsDTO>>() { 
          public void onComplete(List<RefundDetailsDTO> o) {
            findAllRefundDetails_result result = new findAllRefundDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllRefundDetails_result result = new findAllRefundDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllRefundDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundDetailsDTO>> resultHandler) throws TException {
        iface.findAllRefundDetails(args.refundDetailsDTO,resultHandler);
      }
    }

    public static class getRefundDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundDetailsTotal_args, Integer> {
      public getRefundDetailsTotal() {
        super("getRefundDetailsTotal");
      }

      public getRefundDetailsTotal_args getEmptyArgsInstance() {
        return new getRefundDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRefundDetailsTotal_result result = new getRefundDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundDetailsTotal_result result = new getRefundDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRefundDetailsTotal(args.refundDetailsDTO,resultHandler);
      }
    }

    public static class getRefundDetailsListByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundDetailsListByProjectId_args, List<RefundDetailsDTO>> {
      public getRefundDetailsListByProjectId() {
        super("getRefundDetailsListByProjectId");
      }

      public getRefundDetailsListByProjectId_args getEmptyArgsInstance() {
        return new getRefundDetailsListByProjectId_args();
      }

      public AsyncMethodCallback<List<RefundDetailsDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundDetailsDTO>>() { 
          public void onComplete(List<RefundDetailsDTO> o) {
            getRefundDetailsListByProjectId_result result = new getRefundDetailsListByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundDetailsListByProjectId_result result = new getRefundDetailsListByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundDetailsListByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundDetailsDTO>> resultHandler) throws TException {
        iface.getRefundDetailsListByProjectId(args.projectId, args.refundPros,resultHandler);
      }
    }

    public static class addRefundDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRefundDetails_args, Boolean> {
      public addRefundDetails() {
        super("addRefundDetails");
      }

      public addRefundDetails_args getEmptyArgsInstance() {
        return new addRefundDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addRefundDetails_result result = new addRefundDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRefundDetails_result result = new addRefundDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRefundDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addRefundDetails(args.refundDetailsDTO,resultHandler);
      }
    }

    public static class getRefundDetailsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundDetailsById_args, RefundDetailsDTO> {
      public getRefundDetailsById() {
        super("getRefundDetailsById");
      }

      public getRefundDetailsById_args getEmptyArgsInstance() {
        return new getRefundDetailsById_args();
      }

      public AsyncMethodCallback<RefundDetailsDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RefundDetailsDTO>() { 
          public void onComplete(RefundDetailsDTO o) {
            getRefundDetailsById_result result = new getRefundDetailsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundDetailsById_result result = new getRefundDetailsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundDetailsById_args args, org.apache.thrift.async.AsyncMethodCallback<RefundDetailsDTO> resultHandler) throws TException {
        iface.getRefundDetailsById(args.pid,resultHandler);
      }
    }

    public static class updateRefundDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRefundDetails_args, Boolean> {
      public updateRefundDetails() {
        super("updateRefundDetails");
      }

      public updateRefundDetails_args getEmptyArgsInstance() {
        return new updateRefundDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateRefundDetails_result result = new updateRefundDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRefundDetails_result result = new updateRefundDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRefundDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateRefundDetails(args.refundDetailsDTO,resultHandler);
      }
    }

    public static class findAllHandleFlow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHandleFlow_args, List<HandleFlowDTO>> {
      public findAllHandleFlow() {
        super("findAllHandleFlow");
      }

      public findAllHandleFlow_args getEmptyArgsInstance() {
        return new findAllHandleFlow_args();
      }

      public AsyncMethodCallback<List<HandleFlowDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleFlowDTO>>() { 
          public void onComplete(List<HandleFlowDTO> o) {
            findAllHandleFlow_result result = new findAllHandleFlow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHandleFlow_result result = new findAllHandleFlow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHandleFlow_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleFlowDTO>> resultHandler) throws TException {
        iface.findAllHandleFlow(args.handleFlowDTO,resultHandler);
      }
    }

    public static class getHandleFlowTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleFlowTotal_args, Integer> {
      public getHandleFlowTotal() {
        super("getHandleFlowTotal");
      }

      public getHandleFlowTotal_args getEmptyArgsInstance() {
        return new getHandleFlowTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleFlowTotal_result result = new getHandleFlowTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleFlowTotal_result result = new getHandleFlowTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleFlowTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleFlowTotal(args.handleFlowDTO,resultHandler);
      }
    }

    public static class findAllHandleDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHandleDynamic_args, List<HandleDynamicDTO>> {
      public findAllHandleDynamic() {
        super("findAllHandleDynamic");
      }

      public findAllHandleDynamic_args getEmptyArgsInstance() {
        return new findAllHandleDynamic_args();
      }

      public AsyncMethodCallback<List<HandleDynamicDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDynamicDTO>>() { 
          public void onComplete(List<HandleDynamicDTO> o) {
            findAllHandleDynamic_result result = new findAllHandleDynamic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHandleDynamic_result result = new findAllHandleDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHandleDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDynamicDTO>> resultHandler) throws TException {
        iface.findAllHandleDynamic(args.handleDynamicDTO,resultHandler);
      }
    }

    public static class getHandleDynamicTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDynamicTotal_args, Integer> {
      public getHandleDynamicTotal() {
        super("getHandleDynamicTotal");
      }

      public getHandleDynamicTotal_args getEmptyArgsInstance() {
        return new getHandleDynamicTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleDynamicTotal_result result = new getHandleDynamicTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDynamicTotal_result result = new getHandleDynamicTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDynamicTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleDynamicTotal(args.handleDynamicDTO,resultHandler);
      }
    }

    public static class gethandleDaysByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gethandleDaysByProjectId_args, Integer> {
      public gethandleDaysByProjectId() {
        super("gethandleDaysByProjectId");
      }

      public gethandleDaysByProjectId_args getEmptyArgsInstance() {
        return new gethandleDaysByProjectId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            gethandleDaysByProjectId_result result = new gethandleDaysByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gethandleDaysByProjectId_result result = new gethandleDaysByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gethandleDaysByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.gethandleDaysByProjectId(args.projectId,resultHandler);
      }
    }

    public static class addHandleDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHandleDynamic_args, Boolean> {
      public addHandleDynamic() {
        super("addHandleDynamic");
      }

      public addHandleDynamic_args getEmptyArgsInstance() {
        return new addHandleDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHandleDynamic_result result = new addHandleDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHandleDynamic_result result = new addHandleDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHandleDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHandleDynamic(args.handleDynamicDTO,resultHandler);
      }
    }

    public static class getHandleDynamicById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDynamicById_args, HandleDynamicDTO> {
      public getHandleDynamicById() {
        super("getHandleDynamicById");
      }

      public getHandleDynamicById_args getEmptyArgsInstance() {
        return new getHandleDynamicById_args();
      }

      public AsyncMethodCallback<HandleDynamicDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HandleDynamicDTO>() { 
          public void onComplete(HandleDynamicDTO o) {
            getHandleDynamicById_result result = new getHandleDynamicById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDynamicById_result result = new getHandleDynamicById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDynamicById_args args, org.apache.thrift.async.AsyncMethodCallback<HandleDynamicDTO> resultHandler) throws TException {
        iface.getHandleDynamicById(args.pid,resultHandler);
      }
    }

    public static class updateHandleDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHandleDynamic_args, Boolean> {
      public updateHandleDynamic() {
        super("updateHandleDynamic");
      }

      public updateHandleDynamic_args getEmptyArgsInstance() {
        return new updateHandleDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHandleDynamic_result result = new updateHandleDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHandleDynamic_result result = new updateHandleDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHandleDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHandleDynamic(args.handleDynamicDTO,resultHandler);
      }
    }

    public static class updateHandleDynamicAndFinishTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHandleDynamicAndFinishTask_args, Boolean> {
      public updateHandleDynamicAndFinishTask() {
        super("updateHandleDynamicAndFinishTask");
      }

      public updateHandleDynamicAndFinishTask_args getEmptyArgsInstance() {
        return new updateHandleDynamicAndFinishTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHandleDynamicAndFinishTask_result result = new updateHandleDynamicAndFinishTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHandleDynamicAndFinishTask_result result = new updateHandleDynamicAndFinishTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHandleDynamicAndFinishTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHandleDynamicAndFinishTask(args.handleDynamicDTO, args.loginUserName,resultHandler);
      }
    }

    public static class finishHandleDynamicTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, finishHandleDynamicTask_args, Boolean> {
      public finishHandleDynamicTask() {
        super("finishHandleDynamicTask");
      }

      public finishHandleDynamicTask_args getEmptyArgsInstance() {
        return new finishHandleDynamicTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            finishHandleDynamicTask_result result = new finishHandleDynamicTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            finishHandleDynamicTask_result result = new finishHandleDynamicTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, finishHandleDynamicTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.finishHandleDynamicTask(args.handleDynamicDTO, args.loginUserName,resultHandler);
      }
    }

    public static class finishAllHandleDynamicTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, finishAllHandleDynamicTask_args, Boolean> {
      public finishAllHandleDynamicTask() {
        super("finishAllHandleDynamicTask");
      }

      public finishAllHandleDynamicTask_args getEmptyArgsInstance() {
        return new finishAllHandleDynamicTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            finishAllHandleDynamicTask_result result = new finishAllHandleDynamicTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            finishAllHandleDynamicTask_result result = new finishAllHandleDynamicTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, finishAllHandleDynamicTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.finishAllHandleDynamicTask(args.projectId, args.loginUserName,resultHandler);
      }
    }

    public static class findAllBizHandleWorkflow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllBizHandleWorkflow_args, List<BizHandleWorkflowDTO>> {
      public findAllBizHandleWorkflow() {
        super("findAllBizHandleWorkflow");
      }

      public findAllBizHandleWorkflow_args getEmptyArgsInstance() {
        return new findAllBizHandleWorkflow_args();
      }

      public AsyncMethodCallback<List<BizHandleWorkflowDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BizHandleWorkflowDTO>>() { 
          public void onComplete(List<BizHandleWorkflowDTO> o) {
            findAllBizHandleWorkflow_result result = new findAllBizHandleWorkflow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllBizHandleWorkflow_result result = new findAllBizHandleWorkflow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllBizHandleWorkflow_args args, org.apache.thrift.async.AsyncMethodCallback<List<BizHandleWorkflowDTO>> resultHandler) throws TException {
        iface.findAllBizHandleWorkflow(args.bizHandleWorkflowDto,resultHandler);
      }
    }

    public static class addBizHandleWorkflow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBizHandleWorkflow_args, Boolean> {
      public addBizHandleWorkflow() {
        super("addBizHandleWorkflow");
      }

      public addBizHandleWorkflow_args getEmptyArgsInstance() {
        return new addBizHandleWorkflow_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addBizHandleWorkflow_result result = new addBizHandleWorkflow_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBizHandleWorkflow_result result = new addBizHandleWorkflow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBizHandleWorkflow_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addBizHandleWorkflow(args.bizHandleWorkflowDto,resultHandler);
      }
    }

    public static class updateBizHandleWorkflow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizHandleWorkflow_args, Boolean> {
      public updateBizHandleWorkflow() {
        super("updateBizHandleWorkflow");
      }

      public updateBizHandleWorkflow_args getEmptyArgsInstance() {
        return new updateBizHandleWorkflow_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateBizHandleWorkflow_result result = new updateBizHandleWorkflow_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizHandleWorkflow_result result = new updateBizHandleWorkflow_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizHandleWorkflow_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateBizHandleWorkflow(args.bizHandleWorkflowDto,resultHandler);
      }
    }

    public static class findAllHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHandleDifferWarn_args, List<HandleDifferWarnDTO>> {
      public findAllHandleDifferWarn() {
        super("findAllHandleDifferWarn");
      }

      public findAllHandleDifferWarn_args getEmptyArgsInstance() {
        return new findAllHandleDifferWarn_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnDTO>>() { 
          public void onComplete(List<HandleDifferWarnDTO> o) {
            findAllHandleDifferWarn_result result = new findAllHandleDifferWarn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHandleDifferWarn_result result = new findAllHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnDTO>> resultHandler) throws TException {
        iface.findAllHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class getHandleDifferWarnTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDifferWarnTotal_args, Integer> {
      public getHandleDifferWarnTotal() {
        super("getHandleDifferWarnTotal");
      }

      public getHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getHandleDifferWarnTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleDifferWarnTotal_result result = new getHandleDifferWarnTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDifferWarnTotal_result result = new getHandleDifferWarnTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDifferWarnTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleDifferWarnTotal(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class getHisHandleDifferWarnCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHisHandleDifferWarnCount_args, Integer> {
      public getHisHandleDifferWarnCount() {
        super("getHisHandleDifferWarnCount");
      }

      public getHisHandleDifferWarnCount_args getEmptyArgsInstance() {
        return new getHisHandleDifferWarnCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHisHandleDifferWarnCount_result result = new getHisHandleDifferWarnCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHisHandleDifferWarnCount_result result = new getHisHandleDifferWarnCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHisHandleDifferWarnCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHisHandleDifferWarnCount(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class findIndexHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findIndexHandleDifferWarn_args, List<HandleDifferWarnDTO>> {
      public findIndexHandleDifferWarn() {
        super("findIndexHandleDifferWarn");
      }

      public findIndexHandleDifferWarn_args getEmptyArgsInstance() {
        return new findIndexHandleDifferWarn_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnDTO>>() { 
          public void onComplete(List<HandleDifferWarnDTO> o) {
            findIndexHandleDifferWarn_result result = new findIndexHandleDifferWarn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findIndexHandleDifferWarn_result result = new findIndexHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findIndexHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnDTO>> resultHandler) throws TException {
        iface.findIndexHandleDifferWarn(args.userId,resultHandler);
      }
    }

    public static class getIndexHandleDifferWarnTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIndexHandleDifferWarnTotal_args, Integer> {
      public getIndexHandleDifferWarnTotal() {
        super("getIndexHandleDifferWarnTotal");
      }

      public getIndexHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getIndexHandleDifferWarnTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getIndexHandleDifferWarnTotal_result result = new getIndexHandleDifferWarnTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIndexHandleDifferWarnTotal_result result = new getIndexHandleDifferWarnTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIndexHandleDifferWarnTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getIndexHandleDifferWarnTotal(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class addHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHandleDifferWarn_args, Boolean> {
      public addHandleDifferWarn() {
        super("addHandleDifferWarn");
      }

      public addHandleDifferWarn_args getEmptyArgsInstance() {
        return new addHandleDifferWarn_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHandleDifferWarn_result result = new addHandleDifferWarn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHandleDifferWarn_result result = new addHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class delHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delHandleDifferWarn_args, Boolean> {
      public delHandleDifferWarn() {
        super("delHandleDifferWarn");
      }

      public delHandleDifferWarn_args getEmptyArgsInstance() {
        return new delHandleDifferWarn_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delHandleDifferWarn_result result = new delHandleDifferWarn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delHandleDifferWarn_result result = new delHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class getHandleDifferWarnById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDifferWarnById_args, HandleDifferWarnDTO> {
      public getHandleDifferWarnById() {
        super("getHandleDifferWarnById");
      }

      public getHandleDifferWarnById_args getEmptyArgsInstance() {
        return new getHandleDifferWarnById_args();
      }

      public AsyncMethodCallback<HandleDifferWarnDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HandleDifferWarnDTO>() { 
          public void onComplete(HandleDifferWarnDTO o) {
            getHandleDifferWarnById_result result = new getHandleDifferWarnById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDifferWarnById_result result = new getHandleDifferWarnById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDifferWarnById_args args, org.apache.thrift.async.AsyncMethodCallback<HandleDifferWarnDTO> resultHandler) throws TException {
        iface.getHandleDifferWarnById(args.pid,resultHandler);
      }
    }

    public static class updateHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHandleDifferWarn_args, Boolean> {
      public updateHandleDifferWarn() {
        super("updateHandleDifferWarn");
      }

      public updateHandleDifferWarn_args getEmptyArgsInstance() {
        return new updateHandleDifferWarn_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHandleDifferWarn_result result = new updateHandleDifferWarn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHandleDifferWarn_result result = new updateHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class addHisHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHisHandleDifferWarn_args, Boolean> {
      public addHisHandleDifferWarn() {
        super("addHisHandleDifferWarn");
      }

      public addHisHandleDifferWarn_args getEmptyArgsInstance() {
        return new addHisHandleDifferWarn_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHisHandleDifferWarn_result result = new addHisHandleDifferWarn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHisHandleDifferWarn_result result = new addHisHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHisHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHisHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class findAllHisHandleDifferWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHisHandleDifferWarn_args, List<HandleDifferWarnDTO>> {
      public findAllHisHandleDifferWarn() {
        super("findAllHisHandleDifferWarn");
      }

      public findAllHisHandleDifferWarn_args getEmptyArgsInstance() {
        return new findAllHisHandleDifferWarn_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnDTO>>() { 
          public void onComplete(List<HandleDifferWarnDTO> o) {
            findAllHisHandleDifferWarn_result result = new findAllHisHandleDifferWarn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHisHandleDifferWarn_result result = new findAllHisHandleDifferWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHisHandleDifferWarn_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnDTO>> resultHandler) throws TException {
        iface.findAllHisHandleDifferWarn(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class getHisHandleDifferWarnTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHisHandleDifferWarnTotal_args, Integer> {
      public getHisHandleDifferWarnTotal() {
        super("getHisHandleDifferWarnTotal");
      }

      public getHisHandleDifferWarnTotal_args getEmptyArgsInstance() {
        return new getHisHandleDifferWarnTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHisHandleDifferWarnTotal_result result = new getHisHandleDifferWarnTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHisHandleDifferWarnTotal_result result = new getHisHandleDifferWarnTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHisHandleDifferWarnTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHisHandleDifferWarnTotal(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class findAllHandleDynamicFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllHandleDynamicFile_args, List<HandleDynamicFileDTO>> {
      public findAllHandleDynamicFile() {
        super("findAllHandleDynamicFile");
      }

      public findAllHandleDynamicFile_args getEmptyArgsInstance() {
        return new findAllHandleDynamicFile_args();
      }

      public AsyncMethodCallback<List<HandleDynamicFileDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDynamicFileDTO>>() { 
          public void onComplete(List<HandleDynamicFileDTO> o) {
            findAllHandleDynamicFile_result result = new findAllHandleDynamicFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllHandleDynamicFile_result result = new findAllHandleDynamicFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllHandleDynamicFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDynamicFileDTO>> resultHandler) throws TException {
        iface.findAllHandleDynamicFile(args.handleDynamicFileDTO,resultHandler);
      }
    }

    public static class getHandleDynamicFileTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDynamicFileTotal_args, Integer> {
      public getHandleDynamicFileTotal() {
        super("getHandleDynamicFileTotal");
      }

      public getHandleDynamicFileTotal_args getEmptyArgsInstance() {
        return new getHandleDynamicFileTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleDynamicFileTotal_result result = new getHandleDynamicFileTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDynamicFileTotal_result result = new getHandleDynamicFileTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDynamicFileTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleDynamicFileTotal(args.handleDynamicFileDTO,resultHandler);
      }
    }

    public static class addHandleDynamicFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHandleDynamicFile_args, Boolean> {
      public addHandleDynamicFile() {
        super("addHandleDynamicFile");
      }

      public addHandleDynamicFile_args getEmptyArgsInstance() {
        return new addHandleDynamicFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHandleDynamicFile_result result = new addHandleDynamicFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHandleDynamicFile_result result = new addHandleDynamicFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHandleDynamicFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHandleDynamicFile(args.handleDynamicFileDTO, args.bizFile,resultHandler);
      }
    }

    public static class addHandleDynamicFileOfComm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHandleDynamicFileOfComm_args, Boolean> {
      public addHandleDynamicFileOfComm() {
        super("addHandleDynamicFileOfComm");
      }

      public addHandleDynamicFileOfComm_args getEmptyArgsInstance() {
        return new addHandleDynamicFileOfComm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addHandleDynamicFileOfComm_result result = new addHandleDynamicFileOfComm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHandleDynamicFileOfComm_result result = new addHandleDynamicFileOfComm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHandleDynamicFileOfComm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addHandleDynamicFileOfComm(args.handleDynamicFileDTO,resultHandler);
      }
    }

    public static class getHandleDynamicFileById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDynamicFileById_args, HandleDynamicFileDTO> {
      public getHandleDynamicFileById() {
        super("getHandleDynamicFileById");
      }

      public getHandleDynamicFileById_args getEmptyArgsInstance() {
        return new getHandleDynamicFileById_args();
      }

      public AsyncMethodCallback<HandleDynamicFileDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HandleDynamicFileDTO>() { 
          public void onComplete(HandleDynamicFileDTO o) {
            getHandleDynamicFileById_result result = new getHandleDynamicFileById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDynamicFileById_result result = new getHandleDynamicFileById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDynamicFileById_args args, org.apache.thrift.async.AsyncMethodCallback<HandleDynamicFileDTO> resultHandler) throws TException {
        iface.getHandleDynamicFileById(args.pid,resultHandler);
      }
    }

    public static class updateHandleDynamicFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHandleDynamicFile_args, Boolean> {
      public updateHandleDynamicFile() {
        super("updateHandleDynamicFile");
      }

      public updateHandleDynamicFile_args getEmptyArgsInstance() {
        return new updateHandleDynamicFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHandleDynamicFile_result result = new updateHandleDynamicFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHandleDynamicFile_result result = new updateHandleDynamicFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHandleDynamicFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHandleDynamicFile(args.handleDynamicFileDTO,resultHandler);
      }
    }

    public static class getCanHandleFlowByHandleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCanHandleFlowByHandleId_args, List<Integer>> {
      public getCanHandleFlowByHandleId() {
        super("getCanHandleFlowByHandleId");
      }

      public getCanHandleFlowByHandleId_args getEmptyArgsInstance() {
        return new getCanHandleFlowByHandleId_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getCanHandleFlowByHandleId_result result = new getCanHandleFlowByHandleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCanHandleFlowByHandleId_result result = new getCanHandleFlowByHandleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCanHandleFlowByHandleId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getCanHandleFlowByHandleId(args.handleId, args.userName,resultHandler);
      }
    }

    public static class getCanHandleDynamicIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCanHandleDynamicIds_args, List<Integer>> {
      public getCanHandleDynamicIds() {
        super("getCanHandleDynamicIds");
      }

      public getCanHandleDynamicIds_args getEmptyArgsInstance() {
        return new getCanHandleDynamicIds_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getCanHandleDynamicIds_result result = new getCanHandleDynamicIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCanHandleDynamicIds_result result = new getCanHandleDynamicIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCanHandleDynamicIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getCanHandleDynamicIds(args.userName,resultHandler);
      }
    }

    public static class getNeedHandleWarn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNeedHandleWarn_args, List<HandleDifferWarnDTO>> {
      public getNeedHandleWarn() {
        super("getNeedHandleWarn");
      }

      public getNeedHandleWarn_args getEmptyArgsInstance() {
        return new getNeedHandleWarn_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnDTO>>() { 
          public void onComplete(List<HandleDifferWarnDTO> o) {
            getNeedHandleWarn_result result = new getNeedHandleWarn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNeedHandleWarn_result result = new getNeedHandleWarn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNeedHandleWarn_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnDTO>> resultHandler) throws TException {
        iface.getNeedHandleWarn(args.userId,resultHandler);
      }
    }

    public static class queryNeedHandleWarnIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryNeedHandleWarnIndex_args, List<HandleDifferWarnIndexDTO>> {
      public queryNeedHandleWarnIndex() {
        super("queryNeedHandleWarnIndex");
      }

      public queryNeedHandleWarnIndex_args getEmptyArgsInstance() {
        return new queryNeedHandleWarnIndex_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnIndexDTO>>() { 
          public void onComplete(List<HandleDifferWarnIndexDTO> o) {
            queryNeedHandleWarnIndex_result result = new queryNeedHandleWarnIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryNeedHandleWarnIndex_result result = new queryNeedHandleWarnIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryNeedHandleWarnIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnIndexDTO>> resultHandler) throws TException {
        iface.queryNeedHandleWarnIndex(args.handleDifferWarnIndexDTO,resultHandler);
      }
    }

    public static class getNeedHandleWarnIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNeedHandleWarnIndexTotal_args, Integer> {
      public getNeedHandleWarnIndexTotal() {
        super("getNeedHandleWarnIndexTotal");
      }

      public getNeedHandleWarnIndexTotal_args getEmptyArgsInstance() {
        return new getNeedHandleWarnIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getNeedHandleWarnIndexTotal_result result = new getNeedHandleWarnIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNeedHandleWarnIndexTotal_result result = new getNeedHandleWarnIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNeedHandleWarnIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getNeedHandleWarnIndexTotal(args.handleDifferWarnIndexDTO,resultHandler);
      }
    }

    public static class queryForeclosureIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureIndex_args, List<ForeclosureIndexDTO>> {
      public queryForeclosureIndex() {
        super("queryForeclosureIndex");
      }

      public queryForeclosureIndex_args getEmptyArgsInstance() {
        return new queryForeclosureIndex_args();
      }

      public AsyncMethodCallback<List<ForeclosureIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureIndexDTO>>() { 
          public void onComplete(List<ForeclosureIndexDTO> o) {
            queryForeclosureIndex_result result = new queryForeclosureIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureIndex_result result = new queryForeclosureIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureIndexDTO>> resultHandler) throws TException {
        iface.queryForeclosureIndex(args.foreclosureIndexDTO,resultHandler);
      }
    }

    public static class getForeclosureIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getForeclosureIndexTotal_args, Integer> {
      public getForeclosureIndexTotal() {
        super("getForeclosureIndexTotal");
      }

      public getForeclosureIndexTotal_args getEmptyArgsInstance() {
        return new getForeclosureIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getForeclosureIndexTotal_result result = new getForeclosureIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getForeclosureIndexTotal_result result = new getForeclosureIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getForeclosureIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getForeclosureIndexTotal(args.foreclosureIndexDTO,resultHandler);
      }
    }

    public static class foreclosure<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, foreclosure_args, Boolean> {
      public foreclosure() {
        super("foreclosure");
      }

      public foreclosure_args getEmptyArgsInstance() {
        return new foreclosure_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            foreclosure_result result = new foreclosure_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            foreclosure_result result = new foreclosure_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, foreclosure_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.foreclosure(args.houseBalanceDTO, args.handleInfoDTO, args.handleDynamicDTO, args.loginUserName,resultHandler);
      }
    }

    public static class queryOrgBizHandlePage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOrgBizHandlePage_args, List<OrgBizHandlePage>> {
      public queryOrgBizHandlePage() {
        super("queryOrgBizHandlePage");
      }

      public queryOrgBizHandlePage_args getEmptyArgsInstance() {
        return new queryOrgBizHandlePage_args();
      }

      public AsyncMethodCallback<List<OrgBizHandlePage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrgBizHandlePage>>() { 
          public void onComplete(List<OrgBizHandlePage> o) {
            queryOrgBizHandlePage_result result = new queryOrgBizHandlePage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOrgBizHandlePage_result result = new queryOrgBizHandlePage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOrgBizHandlePage_args args, org.apache.thrift.async.AsyncMethodCallback<List<OrgBizHandlePage>> resultHandler) throws TException {
        iface.queryOrgBizHandlePage(args.query,resultHandler);
      }
    }

    public static class getOrgBizHandlePageTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrgBizHandlePageTotal_args, Integer> {
      public getOrgBizHandlePageTotal() {
        super("getOrgBizHandlePageTotal");
      }

      public getOrgBizHandlePageTotal_args getEmptyArgsInstance() {
        return new getOrgBizHandlePageTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getOrgBizHandlePageTotal_result result = new getOrgBizHandlePageTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrgBizHandlePageTotal_result result = new getOrgBizHandlePageTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrgBizHandlePageTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getOrgBizHandlePageTotal(args.query,resultHandler);
      }
    }

    public static class getHandleDifferWarnList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDifferWarnList_args, List<HandleDifferWarnDTO>> {
      public getHandleDifferWarnList() {
        super("getHandleDifferWarnList");
      }

      public getHandleDifferWarnList_args getEmptyArgsInstance() {
        return new getHandleDifferWarnList_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnDTO>>() { 
          public void onComplete(List<HandleDifferWarnDTO> o) {
            getHandleDifferWarnList_result result = new getHandleDifferWarnList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDifferWarnList_result result = new getHandleDifferWarnList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDifferWarnList_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnDTO>> resultHandler) throws TException {
        iface.getHandleDifferWarnList(args.handleDifferWarnDTO,resultHandler);
      }
    }

    public static class findHandleDynamicFileByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findHandleDynamicFileByProjectId_args, List<HandleDynamicFileDTO>> {
      public findHandleDynamicFileByProjectId() {
        super("findHandleDynamicFileByProjectId");
      }

      public findHandleDynamicFileByProjectId_args getEmptyArgsInstance() {
        return new findHandleDynamicFileByProjectId_args();
      }

      public AsyncMethodCallback<List<HandleDynamicFileDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDynamicFileDTO>>() { 
          public void onComplete(List<HandleDynamicFileDTO> o) {
            findHandleDynamicFileByProjectId_result result = new findHandleDynamicFileByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findHandleDynamicFileByProjectId_result result = new findHandleDynamicFileByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findHandleDynamicFileByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDynamicFileDTO>> resultHandler) throws TException {
        iface.findHandleDynamicFileByProjectId(args.projectId,resultHandler);
      }
    }

  }

  public static class findAllApplyHandleIndex_args implements org.apache.thrift.TBase<findAllApplyHandleIndex_args, findAllApplyHandleIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyHandleIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyHandleIndex_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyHandleIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyHandleIndex_argsTupleSchemeFactory());
    }

    public ApplyHandleIndexDTO applyHandleIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INDEX_DTO((short)1, "applyHandleIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INDEX_DTO
            return APPLY_HANDLE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyHandleIndex_args.class, metaDataMap);
    }

    public findAllApplyHandleIndex_args() {
    }

    public findAllApplyHandleIndex_args(
      ApplyHandleIndexDTO applyHandleIndexDTO)
    {
      this();
      this.applyHandleIndexDTO = applyHandleIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyHandleIndex_args(findAllApplyHandleIndex_args other) {
      if (other.isSetApplyHandleIndexDTO()) {
        this.applyHandleIndexDTO = new ApplyHandleIndexDTO(other.applyHandleIndexDTO);
      }
    }

    public findAllApplyHandleIndex_args deepCopy() {
      return new findAllApplyHandleIndex_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleIndexDTO = null;
    }

    public ApplyHandleIndexDTO getApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO;
    }

    public findAllApplyHandleIndex_args setApplyHandleIndexDTO(ApplyHandleIndexDTO applyHandleIndexDTO) {
      this.applyHandleIndexDTO = applyHandleIndexDTO;
      return this;
    }

    public void unsetApplyHandleIndexDTO() {
      this.applyHandleIndexDTO = null;
    }

    /** Returns true if field applyHandleIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO != null;
    }

    public void setApplyHandleIndexDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        if (value == null) {
          unsetApplyHandleIndexDTO();
        } else {
          setApplyHandleIndexDTO((ApplyHandleIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return getApplyHandleIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return isSetApplyHandleIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyHandleIndex_args)
        return this.equals((findAllApplyHandleIndex_args)that);
      return false;
    }

    public boolean equals(findAllApplyHandleIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleIndexDTO = true && this.isSetApplyHandleIndexDTO();
      boolean that_present_applyHandleIndexDTO = true && that.isSetApplyHandleIndexDTO();
      if (this_present_applyHandleIndexDTO || that_present_applyHandleIndexDTO) {
        if (!(this_present_applyHandleIndexDTO && that_present_applyHandleIndexDTO))
          return false;
        if (!this.applyHandleIndexDTO.equals(that.applyHandleIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleIndexDTO = true && (isSetApplyHandleIndexDTO());
      list.add(present_applyHandleIndexDTO);
      if (present_applyHandleIndexDTO)
        list.add(applyHandleIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyHandleIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleIndexDTO()).compareTo(other.isSetApplyHandleIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleIndexDTO, other.applyHandleIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyHandleIndex_args(");
      boolean first = true;

      sb.append("applyHandleIndexDTO:");
      if (this.applyHandleIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleIndexDTO != null) {
        applyHandleIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyHandleIndex_argsStandardSchemeFactory implements SchemeFactory {
      public findAllApplyHandleIndex_argsStandardScheme getScheme() {
        return new findAllApplyHandleIndex_argsStandardScheme();
      }
    }

    private static class findAllApplyHandleIndex_argsStandardScheme extends StandardScheme<findAllApplyHandleIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyHandleIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
                struct.applyHandleIndexDTO.read(iprot);
                struct.setApplyHandleIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyHandleIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleIndexDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INDEX_DTO_FIELD_DESC);
          struct.applyHandleIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyHandleIndex_argsTupleSchemeFactory implements SchemeFactory {
      public findAllApplyHandleIndex_argsTupleScheme getScheme() {
        return new findAllApplyHandleIndex_argsTupleScheme();
      }
    }

    private static class findAllApplyHandleIndex_argsTupleScheme extends TupleScheme<findAllApplyHandleIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleIndexDTO()) {
          struct.applyHandleIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
          struct.applyHandleIndexDTO.read(iprot);
          struct.setApplyHandleIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllApplyHandleIndex_result implements org.apache.thrift.TBase<findAllApplyHandleIndex_result, findAllApplyHandleIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyHandleIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyHandleIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyHandleIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyHandleIndex_resultTupleSchemeFactory());
    }

    public List<ApplyHandleIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyHandleIndex_result.class, metaDataMap);
    }

    public findAllApplyHandleIndex_result() {
    }

    public findAllApplyHandleIndex_result(
      List<ApplyHandleIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyHandleIndex_result(findAllApplyHandleIndex_result other) {
      if (other.isSetSuccess()) {
        List<ApplyHandleIndexDTO> __this__success = new ArrayList<ApplyHandleIndexDTO>(other.success.size());
        for (ApplyHandleIndexDTO other_element : other.success) {
          __this__success.add(new ApplyHandleIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllApplyHandleIndex_result deepCopy() {
      return new findAllApplyHandleIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ApplyHandleIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ApplyHandleIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ApplyHandleIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<ApplyHandleIndexDTO> getSuccess() {
      return this.success;
    }

    public findAllApplyHandleIndex_result setSuccess(List<ApplyHandleIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ApplyHandleIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyHandleIndex_result)
        return this.equals((findAllApplyHandleIndex_result)that);
      return false;
    }

    public boolean equals(findAllApplyHandleIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyHandleIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyHandleIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyHandleIndex_resultStandardSchemeFactory implements SchemeFactory {
      public findAllApplyHandleIndex_resultStandardScheme getScheme() {
        return new findAllApplyHandleIndex_resultStandardScheme();
      }
    }

    private static class findAllApplyHandleIndex_resultStandardScheme extends StandardScheme<findAllApplyHandleIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyHandleIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                  struct.success = new ArrayList<ApplyHandleIndexDTO>(_list400.size);
                  ApplyHandleIndexDTO _elem401;
                  for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                  {
                    _elem401 = new ApplyHandleIndexDTO();
                    _elem401.read(iprot);
                    struct.success.add(_elem401);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyHandleIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ApplyHandleIndexDTO _iter403 : struct.success)
            {
              _iter403.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyHandleIndex_resultTupleSchemeFactory implements SchemeFactory {
      public findAllApplyHandleIndex_resultTupleScheme getScheme() {
        return new findAllApplyHandleIndex_resultTupleScheme();
      }
    }

    private static class findAllApplyHandleIndex_resultTupleScheme extends TupleScheme<findAllApplyHandleIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ApplyHandleIndexDTO _iter404 : struct.success)
            {
              _iter404.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ApplyHandleIndexDTO>(_list405.size);
            ApplyHandleIndexDTO _elem406;
            for (int _i407 = 0; _i407 < _list405.size; ++_i407)
            {
              _elem406 = new ApplyHandleIndexDTO();
              _elem406.read(iprot);
              struct.success.add(_elem406);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleIndexTotal_args implements org.apache.thrift.TBase<getApplyHandleIndexTotal_args, getApplyHandleIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleIndexTotal_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleIndexTotal_argsTupleSchemeFactory());
    }

    public ApplyHandleIndexDTO applyHandleIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INDEX_DTO((short)1, "applyHandleIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INDEX_DTO
            return APPLY_HANDLE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleIndexTotal_args.class, metaDataMap);
    }

    public getApplyHandleIndexTotal_args() {
    }

    public getApplyHandleIndexTotal_args(
      ApplyHandleIndexDTO applyHandleIndexDTO)
    {
      this();
      this.applyHandleIndexDTO = applyHandleIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleIndexTotal_args(getApplyHandleIndexTotal_args other) {
      if (other.isSetApplyHandleIndexDTO()) {
        this.applyHandleIndexDTO = new ApplyHandleIndexDTO(other.applyHandleIndexDTO);
      }
    }

    public getApplyHandleIndexTotal_args deepCopy() {
      return new getApplyHandleIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleIndexDTO = null;
    }

    public ApplyHandleIndexDTO getApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO;
    }

    public getApplyHandleIndexTotal_args setApplyHandleIndexDTO(ApplyHandleIndexDTO applyHandleIndexDTO) {
      this.applyHandleIndexDTO = applyHandleIndexDTO;
      return this;
    }

    public void unsetApplyHandleIndexDTO() {
      this.applyHandleIndexDTO = null;
    }

    /** Returns true if field applyHandleIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO != null;
    }

    public void setApplyHandleIndexDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        if (value == null) {
          unsetApplyHandleIndexDTO();
        } else {
          setApplyHandleIndexDTO((ApplyHandleIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return getApplyHandleIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return isSetApplyHandleIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleIndexTotal_args)
        return this.equals((getApplyHandleIndexTotal_args)that);
      return false;
    }

    public boolean equals(getApplyHandleIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleIndexDTO = true && this.isSetApplyHandleIndexDTO();
      boolean that_present_applyHandleIndexDTO = true && that.isSetApplyHandleIndexDTO();
      if (this_present_applyHandleIndexDTO || that_present_applyHandleIndexDTO) {
        if (!(this_present_applyHandleIndexDTO && that_present_applyHandleIndexDTO))
          return false;
        if (!this.applyHandleIndexDTO.equals(that.applyHandleIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleIndexDTO = true && (isSetApplyHandleIndexDTO());
      list.add(present_applyHandleIndexDTO);
      if (present_applyHandleIndexDTO)
        list.add(applyHandleIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleIndexDTO()).compareTo(other.isSetApplyHandleIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleIndexDTO, other.applyHandleIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleIndexTotal_args(");
      boolean first = true;

      sb.append("applyHandleIndexDTO:");
      if (this.applyHandleIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleIndexDTO != null) {
        applyHandleIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleIndexTotal_argsStandardScheme getScheme() {
        return new getApplyHandleIndexTotal_argsStandardScheme();
      }
    }

    private static class getApplyHandleIndexTotal_argsStandardScheme extends StandardScheme<getApplyHandleIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
                struct.applyHandleIndexDTO.read(iprot);
                struct.setApplyHandleIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleIndexDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INDEX_DTO_FIELD_DESC);
          struct.applyHandleIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleIndexTotal_argsTupleScheme getScheme() {
        return new getApplyHandleIndexTotal_argsTupleScheme();
      }
    }

    private static class getApplyHandleIndexTotal_argsTupleScheme extends TupleScheme<getApplyHandleIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleIndexDTO()) {
          struct.applyHandleIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
          struct.applyHandleIndexDTO.read(iprot);
          struct.setApplyHandleIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleIndexTotal_result implements org.apache.thrift.TBase<getApplyHandleIndexTotal_result, getApplyHandleIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleIndexTotal_result.class, metaDataMap);
    }

    public getApplyHandleIndexTotal_result() {
    }

    public getApplyHandleIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleIndexTotal_result(getApplyHandleIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getApplyHandleIndexTotal_result deepCopy() {
      return new getApplyHandleIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getApplyHandleIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleIndexTotal_result)
        return this.equals((getApplyHandleIndexTotal_result)that);
      return false;
    }

    public boolean equals(getApplyHandleIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleIndexTotal_resultStandardScheme getScheme() {
        return new getApplyHandleIndexTotal_resultStandardScheme();
      }
    }

    private static class getApplyHandleIndexTotal_resultStandardScheme extends StandardScheme<getApplyHandleIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleIndexTotal_resultTupleScheme getScheme() {
        return new getApplyHandleIndexTotal_resultTupleScheme();
      }
    }

    private static class getApplyHandleIndexTotal_resultTupleScheme extends TupleScheme<getApplyHandleIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class qeuryHandleDynamicCountMapList_args implements org.apache.thrift.TBase<qeuryHandleDynamicCountMapList_args, qeuryHandleDynamicCountMapList_args._Fields>, java.io.Serializable, Cloneable, Comparable<qeuryHandleDynamicCountMapList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("qeuryHandleDynamicCountMapList_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new qeuryHandleDynamicCountMapList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new qeuryHandleDynamicCountMapList_argsTupleSchemeFactory());
    }

    public ApplyHandleIndexDTO applyHandleIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INDEX_DTO((short)1, "applyHandleIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INDEX_DTO
            return APPLY_HANDLE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(qeuryHandleDynamicCountMapList_args.class, metaDataMap);
    }

    public qeuryHandleDynamicCountMapList_args() {
    }

    public qeuryHandleDynamicCountMapList_args(
      ApplyHandleIndexDTO applyHandleIndexDTO)
    {
      this();
      this.applyHandleIndexDTO = applyHandleIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public qeuryHandleDynamicCountMapList_args(qeuryHandleDynamicCountMapList_args other) {
      if (other.isSetApplyHandleIndexDTO()) {
        this.applyHandleIndexDTO = new ApplyHandleIndexDTO(other.applyHandleIndexDTO);
      }
    }

    public qeuryHandleDynamicCountMapList_args deepCopy() {
      return new qeuryHandleDynamicCountMapList_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleIndexDTO = null;
    }

    public ApplyHandleIndexDTO getApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO;
    }

    public qeuryHandleDynamicCountMapList_args setApplyHandleIndexDTO(ApplyHandleIndexDTO applyHandleIndexDTO) {
      this.applyHandleIndexDTO = applyHandleIndexDTO;
      return this;
    }

    public void unsetApplyHandleIndexDTO() {
      this.applyHandleIndexDTO = null;
    }

    /** Returns true if field applyHandleIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleIndexDTO() {
      return this.applyHandleIndexDTO != null;
    }

    public void setApplyHandleIndexDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        if (value == null) {
          unsetApplyHandleIndexDTO();
        } else {
          setApplyHandleIndexDTO((ApplyHandleIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return getApplyHandleIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INDEX_DTO:
        return isSetApplyHandleIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof qeuryHandleDynamicCountMapList_args)
        return this.equals((qeuryHandleDynamicCountMapList_args)that);
      return false;
    }

    public boolean equals(qeuryHandleDynamicCountMapList_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleIndexDTO = true && this.isSetApplyHandleIndexDTO();
      boolean that_present_applyHandleIndexDTO = true && that.isSetApplyHandleIndexDTO();
      if (this_present_applyHandleIndexDTO || that_present_applyHandleIndexDTO) {
        if (!(this_present_applyHandleIndexDTO && that_present_applyHandleIndexDTO))
          return false;
        if (!this.applyHandleIndexDTO.equals(that.applyHandleIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleIndexDTO = true && (isSetApplyHandleIndexDTO());
      list.add(present_applyHandleIndexDTO);
      if (present_applyHandleIndexDTO)
        list.add(applyHandleIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(qeuryHandleDynamicCountMapList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleIndexDTO()).compareTo(other.isSetApplyHandleIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleIndexDTO, other.applyHandleIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("qeuryHandleDynamicCountMapList_args(");
      boolean first = true;

      sb.append("applyHandleIndexDTO:");
      if (this.applyHandleIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleIndexDTO != null) {
        applyHandleIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class qeuryHandleDynamicCountMapList_argsStandardSchemeFactory implements SchemeFactory {
      public qeuryHandleDynamicCountMapList_argsStandardScheme getScheme() {
        return new qeuryHandleDynamicCountMapList_argsStandardScheme();
      }
    }

    private static class qeuryHandleDynamicCountMapList_argsStandardScheme extends StandardScheme<qeuryHandleDynamicCountMapList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, qeuryHandleDynamicCountMapList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
                struct.applyHandleIndexDTO.read(iprot);
                struct.setApplyHandleIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, qeuryHandleDynamicCountMapList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleIndexDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INDEX_DTO_FIELD_DESC);
          struct.applyHandleIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class qeuryHandleDynamicCountMapList_argsTupleSchemeFactory implements SchemeFactory {
      public qeuryHandleDynamicCountMapList_argsTupleScheme getScheme() {
        return new qeuryHandleDynamicCountMapList_argsTupleScheme();
      }
    }

    private static class qeuryHandleDynamicCountMapList_argsTupleScheme extends TupleScheme<qeuryHandleDynamicCountMapList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, qeuryHandleDynamicCountMapList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleIndexDTO()) {
          struct.applyHandleIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, qeuryHandleDynamicCountMapList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleIndexDTO = new ApplyHandleIndexDTO();
          struct.applyHandleIndexDTO.read(iprot);
          struct.setApplyHandleIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class qeuryHandleDynamicCountMapList_result implements org.apache.thrift.TBase<qeuryHandleDynamicCountMapList_result, qeuryHandleDynamicCountMapList_result._Fields>, java.io.Serializable, Cloneable, Comparable<qeuryHandleDynamicCountMapList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("qeuryHandleDynamicCountMapList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new qeuryHandleDynamicCountMapList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new qeuryHandleDynamicCountMapList_resultTupleSchemeFactory());
    }

    public List<HandleDynamicMap> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicMap.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(qeuryHandleDynamicCountMapList_result.class, metaDataMap);
    }

    public qeuryHandleDynamicCountMapList_result() {
    }

    public qeuryHandleDynamicCountMapList_result(
      List<HandleDynamicMap> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public qeuryHandleDynamicCountMapList_result(qeuryHandleDynamicCountMapList_result other) {
      if (other.isSetSuccess()) {
        List<HandleDynamicMap> __this__success = new ArrayList<HandleDynamicMap>(other.success.size());
        for (HandleDynamicMap other_element : other.success) {
          __this__success.add(new HandleDynamicMap(other_element));
        }
        this.success = __this__success;
      }
    }

    public qeuryHandleDynamicCountMapList_result deepCopy() {
      return new qeuryHandleDynamicCountMapList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDynamicMap> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDynamicMap elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDynamicMap>();
      }
      this.success.add(elem);
    }

    public List<HandleDynamicMap> getSuccess() {
      return this.success;
    }

    public qeuryHandleDynamicCountMapList_result setSuccess(List<HandleDynamicMap> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDynamicMap>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof qeuryHandleDynamicCountMapList_result)
        return this.equals((qeuryHandleDynamicCountMapList_result)that);
      return false;
    }

    public boolean equals(qeuryHandleDynamicCountMapList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(qeuryHandleDynamicCountMapList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("qeuryHandleDynamicCountMapList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class qeuryHandleDynamicCountMapList_resultStandardSchemeFactory implements SchemeFactory {
      public qeuryHandleDynamicCountMapList_resultStandardScheme getScheme() {
        return new qeuryHandleDynamicCountMapList_resultStandardScheme();
      }
    }

    private static class qeuryHandleDynamicCountMapList_resultStandardScheme extends StandardScheme<qeuryHandleDynamicCountMapList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, qeuryHandleDynamicCountMapList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list408 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDynamicMap>(_list408.size);
                  HandleDynamicMap _elem409;
                  for (int _i410 = 0; _i410 < _list408.size; ++_i410)
                  {
                    _elem409 = new HandleDynamicMap();
                    _elem409.read(iprot);
                    struct.success.add(_elem409);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, qeuryHandleDynamicCountMapList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDynamicMap _iter411 : struct.success)
            {
              _iter411.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class qeuryHandleDynamicCountMapList_resultTupleSchemeFactory implements SchemeFactory {
      public qeuryHandleDynamicCountMapList_resultTupleScheme getScheme() {
        return new qeuryHandleDynamicCountMapList_resultTupleScheme();
      }
    }

    private static class qeuryHandleDynamicCountMapList_resultTupleScheme extends TupleScheme<qeuryHandleDynamicCountMapList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, qeuryHandleDynamicCountMapList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDynamicMap _iter412 : struct.success)
            {
              _iter412.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, qeuryHandleDynamicCountMapList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list413 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDynamicMap>(_list413.size);
            HandleDynamicMap _elem414;
            for (int _i415 = 0; _i415 < _list413.size; ++_i415)
            {
              _elem414 = new HandleDynamicMap();
              _elem414.read(iprot);
              struct.success.add(_elem414);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleInfoDTO_args implements org.apache.thrift.TBase<findAllHandleInfoDTO_args, findAllHandleInfoDTO_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleInfoDTO_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleInfoDTO_args");

    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleInfoDTO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleInfoDTO_argsTupleSchemeFactory());
    }

    public HandleInfoDTO handleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_INFO_DTO((short)1, "handleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleInfoDTO_args.class, metaDataMap);
    }

    public findAllHandleInfoDTO_args() {
    }

    public findAllHandleInfoDTO_args(
      HandleInfoDTO handleInfoDTO)
    {
      this();
      this.handleInfoDTO = handleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleInfoDTO_args(findAllHandleInfoDTO_args other) {
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
    }

    public findAllHandleInfoDTO_args deepCopy() {
      return new findAllHandleInfoDTO_args(this);
    }

    @Override
    public void clear() {
      this.handleInfoDTO = null;
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public findAllHandleInfoDTO_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleInfoDTO_args)
        return this.equals((findAllHandleInfoDTO_args)that);
      return false;
    }

    public boolean equals(findAllHandleInfoDTO_args that) {
      if (that == null)
        return false;

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleInfoDTO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleInfoDTO_args(");
      boolean first = true;

      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleInfoDTO_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHandleInfoDTO_argsStandardScheme getScheme() {
        return new findAllHandleInfoDTO_argsStandardScheme();
      }
    }

    private static class findAllHandleInfoDTO_argsStandardScheme extends StandardScheme<findAllHandleInfoDTO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleInfoDTO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleInfoDTO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleInfoDTO_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHandleInfoDTO_argsTupleScheme getScheme() {
        return new findAllHandleInfoDTO_argsTupleScheme();
      }
    }

    private static class findAllHandleInfoDTO_argsTupleScheme extends TupleScheme<findAllHandleInfoDTO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleInfoDTO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleInfoDTO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleInfoDTO_result implements org.apache.thrift.TBase<findAllHandleInfoDTO_result, findAllHandleInfoDTO_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleInfoDTO_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleInfoDTO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleInfoDTO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleInfoDTO_resultTupleSchemeFactory());
    }

    public List<HandleInfoDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleInfoDTO_result.class, metaDataMap);
    }

    public findAllHandleInfoDTO_result() {
    }

    public findAllHandleInfoDTO_result(
      List<HandleInfoDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleInfoDTO_result(findAllHandleInfoDTO_result other) {
      if (other.isSetSuccess()) {
        List<HandleInfoDTO> __this__success = new ArrayList<HandleInfoDTO>(other.success.size());
        for (HandleInfoDTO other_element : other.success) {
          __this__success.add(new HandleInfoDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHandleInfoDTO_result deepCopy() {
      return new findAllHandleInfoDTO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleInfoDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleInfoDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleInfoDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleInfoDTO> getSuccess() {
      return this.success;
    }

    public findAllHandleInfoDTO_result setSuccess(List<HandleInfoDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleInfoDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleInfoDTO_result)
        return this.equals((findAllHandleInfoDTO_result)that);
      return false;
    }

    public boolean equals(findAllHandleInfoDTO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleInfoDTO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleInfoDTO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleInfoDTO_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHandleInfoDTO_resultStandardScheme getScheme() {
        return new findAllHandleInfoDTO_resultStandardScheme();
      }
    }

    private static class findAllHandleInfoDTO_resultStandardScheme extends StandardScheme<findAllHandleInfoDTO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleInfoDTO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list416 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleInfoDTO>(_list416.size);
                  HandleInfoDTO _elem417;
                  for (int _i418 = 0; _i418 < _list416.size; ++_i418)
                  {
                    _elem417 = new HandleInfoDTO();
                    _elem417.read(iprot);
                    struct.success.add(_elem417);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleInfoDTO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleInfoDTO _iter419 : struct.success)
            {
              _iter419.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleInfoDTO_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHandleInfoDTO_resultTupleScheme getScheme() {
        return new findAllHandleInfoDTO_resultTupleScheme();
      }
    }

    private static class findAllHandleInfoDTO_resultTupleScheme extends TupleScheme<findAllHandleInfoDTO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleInfoDTO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleInfoDTO _iter420 : struct.success)
            {
              _iter420.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleInfoDTO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list421 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleInfoDTO>(_list421.size);
            HandleInfoDTO _elem422;
            for (int _i423 = 0; _i423 < _list421.size; ++_i423)
            {
              _elem422 = new HandleInfoDTO();
              _elem422.read(iprot);
              struct.success.add(_elem422);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoDTOTotal_args implements org.apache.thrift.TBase<getHandleInfoDTOTotal_args, getHandleInfoDTOTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoDTOTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoDTOTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoDTOTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoDTOTotal_argsTupleSchemeFactory());
    }

    public HandleInfoDTO handleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_INFO_DTO((short)1, "handleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoDTOTotal_args.class, metaDataMap);
    }

    public getHandleInfoDTOTotal_args() {
    }

    public getHandleInfoDTOTotal_args(
      HandleInfoDTO handleInfoDTO)
    {
      this();
      this.handleInfoDTO = handleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoDTOTotal_args(getHandleInfoDTOTotal_args other) {
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
    }

    public getHandleInfoDTOTotal_args deepCopy() {
      return new getHandleInfoDTOTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleInfoDTO = null;
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public getHandleInfoDTOTotal_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoDTOTotal_args)
        return this.equals((getHandleInfoDTOTotal_args)that);
      return false;
    }

    public boolean equals(getHandleInfoDTOTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoDTOTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoDTOTotal_args(");
      boolean first = true;

      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoDTOTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoDTOTotal_argsStandardScheme getScheme() {
        return new getHandleInfoDTOTotal_argsStandardScheme();
      }
    }

    private static class getHandleInfoDTOTotal_argsStandardScheme extends StandardScheme<getHandleInfoDTOTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoDTOTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoDTOTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoDTOTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoDTOTotal_argsTupleScheme getScheme() {
        return new getHandleInfoDTOTotal_argsTupleScheme();
      }
    }

    private static class getHandleInfoDTOTotal_argsTupleScheme extends TupleScheme<getHandleInfoDTOTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoDTOTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoDTOTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoDTOTotal_result implements org.apache.thrift.TBase<getHandleInfoDTOTotal_result, getHandleInfoDTOTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoDTOTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoDTOTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoDTOTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoDTOTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoDTOTotal_result.class, metaDataMap);
    }

    public getHandleInfoDTOTotal_result() {
    }

    public getHandleInfoDTOTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoDTOTotal_result(getHandleInfoDTOTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleInfoDTOTotal_result deepCopy() {
      return new getHandleInfoDTOTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleInfoDTOTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoDTOTotal_result)
        return this.equals((getHandleInfoDTOTotal_result)that);
      return false;
    }

    public boolean equals(getHandleInfoDTOTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoDTOTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoDTOTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoDTOTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoDTOTotal_resultStandardScheme getScheme() {
        return new getHandleInfoDTOTotal_resultStandardScheme();
      }
    }

    private static class getHandleInfoDTOTotal_resultStandardScheme extends StandardScheme<getHandleInfoDTOTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoDTOTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoDTOTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoDTOTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoDTOTotal_resultTupleScheme getScheme() {
        return new getHandleInfoDTOTotal_resultTupleScheme();
      }
    }

    private static class getHandleInfoDTOTotal_resultTupleScheme extends TupleScheme<getHandleInfoDTOTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoDTOTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoDTOTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHandleInfo_args implements org.apache.thrift.TBase<addHandleInfo_args, addHandleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleInfo_args");

    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleInfo_argsTupleSchemeFactory());
    }

    public HandleInfoDTO handleInfoDTO; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_INFO_DTO((short)1, "handleInfoDTO"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleInfo_args.class, metaDataMap);
    }

    public addHandleInfo_args() {
    }

    public addHandleInfo_args(
      HandleInfoDTO handleInfoDTO,
      Map<String,String> paramMap)
    {
      this();
      this.handleInfoDTO = handleInfoDTO;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleInfo_args(addHandleInfo_args other) {
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public addHandleInfo_args deepCopy() {
      return new addHandleInfo_args(this);
    }

    @Override
    public void clear() {
      this.handleInfoDTO = null;
      this.paramMap = null;
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public addHandleInfo_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public addHandleInfo_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleInfo_args)
        return this.equals((addHandleInfo_args)that);
      return false;
    }

    public boolean equals(addHandleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      boolean present_paramMap = true && (isSetParamMap());
      list.add(present_paramMap);
      if (present_paramMap)
        list.add(paramMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleInfo_args(");
      boolean first = true;

      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addHandleInfo_argsStandardScheme getScheme() {
        return new addHandleInfo_argsStandardScheme();
      }
    }

    private static class addHandleInfo_argsStandardScheme extends StandardScheme<addHandleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map424 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map424.size);
                  String _key425;
                  String _val426;
                  for (int _i427 = 0; _i427 < _map424.size; ++_i427)
                  {
                    _key425 = iprot.readString();
                    _val426 = iprot.readString();
                    struct.paramMap.put(_key425, _val426);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter428 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter428.getKey());
              oprot.writeString(_iter428.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addHandleInfo_argsTupleScheme getScheme() {
        return new addHandleInfo_argsTupleScheme();
      }
    }

    private static class addHandleInfo_argsTupleScheme extends TupleScheme<addHandleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter429 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter429.getKey());
              oprot.writeString(_iter429.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map430 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map430.size);
            String _key431;
            String _val432;
            for (int _i433 = 0; _i433 < _map430.size; ++_i433)
            {
              _key431 = iprot.readString();
              _val432 = iprot.readString();
              struct.paramMap.put(_key431, _val432);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class addHandleInfo_result implements org.apache.thrift.TBase<addHandleInfo_result, addHandleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleInfo_result.class, metaDataMap);
    }

    public addHandleInfo_result() {
    }

    public addHandleInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleInfo_result(addHandleInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHandleInfo_result deepCopy() {
      return new addHandleInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHandleInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleInfo_result)
        return this.equals((addHandleInfo_result)that);
      return false;
    }

    public boolean equals(addHandleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addHandleInfo_resultStandardScheme getScheme() {
        return new addHandleInfo_resultStandardScheme();
      }
    }

    private static class addHandleInfo_resultStandardScheme extends StandardScheme<addHandleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addHandleInfo_resultTupleScheme getScheme() {
        return new addHandleInfo_resultTupleScheme();
      }
    }

    private static class addHandleInfo_resultTupleScheme extends TupleScheme<addHandleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoById_args implements org.apache.thrift.TBase<getHandleInfoById_args, getHandleInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoById_args.class, metaDataMap);
    }

    public getHandleInfoById_args() {
    }

    public getHandleInfoById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoById_args(getHandleInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getHandleInfoById_args deepCopy() {
      return new getHandleInfoById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getHandleInfoById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoById_args)
        return this.equals((getHandleInfoById_args)that);
      return false;
    }

    public boolean equals(getHandleInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoById_argsStandardScheme getScheme() {
        return new getHandleInfoById_argsStandardScheme();
      }
    }

    private static class getHandleInfoById_argsStandardScheme extends StandardScheme<getHandleInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoById_argsTupleScheme getScheme() {
        return new getHandleInfoById_argsTupleScheme();
      }
    }

    private static class getHandleInfoById_argsTupleScheme extends TupleScheme<getHandleInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoById_result implements org.apache.thrift.TBase<getHandleInfoById_result, getHandleInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoById_resultTupleSchemeFactory());
    }

    public HandleInfoDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoById_result.class, metaDataMap);
    }

    public getHandleInfoById_result() {
    }

    public getHandleInfoById_result(
      HandleInfoDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoById_result(getHandleInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new HandleInfoDTO(other.success);
      }
    }

    public getHandleInfoById_result deepCopy() {
      return new getHandleInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HandleInfoDTO getSuccess() {
      return this.success;
    }

    public getHandleInfoById_result setSuccess(HandleInfoDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoById_result)
        return this.equals((getHandleInfoById_result)that);
      return false;
    }

    public boolean equals(getHandleInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoById_resultStandardScheme getScheme() {
        return new getHandleInfoById_resultStandardScheme();
      }
    }

    private static class getHandleInfoById_resultStandardScheme extends StandardScheme<getHandleInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HandleInfoDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoById_resultTupleScheme getScheme() {
        return new getHandleInfoById_resultTupleScheme();
      }
    }

    private static class getHandleInfoById_resultTupleScheme extends TupleScheme<getHandleInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HandleInfoDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoByProjectId_args implements org.apache.thrift.TBase<getHandleInfoByProjectId_args, getHandleInfoByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoByProjectId_args.class, metaDataMap);
    }

    public getHandleInfoByProjectId_args() {
    }

    public getHandleInfoByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoByProjectId_args(getHandleInfoByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getHandleInfoByProjectId_args deepCopy() {
      return new getHandleInfoByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getHandleInfoByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoByProjectId_args)
        return this.equals((getHandleInfoByProjectId_args)that);
      return false;
    }

    public boolean equals(getHandleInfoByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoByProjectId_argsStandardScheme getScheme() {
        return new getHandleInfoByProjectId_argsStandardScheme();
      }
    }

    private static class getHandleInfoByProjectId_argsStandardScheme extends StandardScheme<getHandleInfoByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoByProjectId_argsTupleScheme getScheme() {
        return new getHandleInfoByProjectId_argsTupleScheme();
      }
    }

    private static class getHandleInfoByProjectId_argsTupleScheme extends TupleScheme<getHandleInfoByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getHandleInfoByProjectId_result implements org.apache.thrift.TBase<getHandleInfoByProjectId_result, getHandleInfoByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleInfoByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleInfoByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleInfoByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleInfoByProjectId_resultTupleSchemeFactory());
    }

    public HandleInfoDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleInfoByProjectId_result.class, metaDataMap);
    }

    public getHandleInfoByProjectId_result() {
    }

    public getHandleInfoByProjectId_result(
      HandleInfoDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleInfoByProjectId_result(getHandleInfoByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new HandleInfoDTO(other.success);
      }
    }

    public getHandleInfoByProjectId_result deepCopy() {
      return new getHandleInfoByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HandleInfoDTO getSuccess() {
      return this.success;
    }

    public getHandleInfoByProjectId_result setSuccess(HandleInfoDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleInfoByProjectId_result)
        return this.equals((getHandleInfoByProjectId_result)that);
      return false;
    }

    public boolean equals(getHandleInfoByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleInfoByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleInfoByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleInfoByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleInfoByProjectId_resultStandardScheme getScheme() {
        return new getHandleInfoByProjectId_resultStandardScheme();
      }
    }

    private static class getHandleInfoByProjectId_resultStandardScheme extends StandardScheme<getHandleInfoByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleInfoByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HandleInfoDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleInfoByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleInfoByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleInfoByProjectId_resultTupleScheme getScheme() {
        return new getHandleInfoByProjectId_resultTupleScheme();
      }
    }

    private static class getHandleInfoByProjectId_resultTupleScheme extends TupleScheme<getHandleInfoByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleInfoByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleInfoByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HandleInfoDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHandleInfo_args implements org.apache.thrift.TBase<updateHandleInfo_args, updateHandleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleInfo_args");

    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleInfo_argsTupleSchemeFactory());
    }

    public HandleInfoDTO handleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_INFO_DTO((short)1, "handleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleInfo_args.class, metaDataMap);
    }

    public updateHandleInfo_args() {
    }

    public updateHandleInfo_args(
      HandleInfoDTO handleInfoDTO)
    {
      this();
      this.handleInfoDTO = handleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleInfo_args(updateHandleInfo_args other) {
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
    }

    public updateHandleInfo_args deepCopy() {
      return new updateHandleInfo_args(this);
    }

    @Override
    public void clear() {
      this.handleInfoDTO = null;
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public updateHandleInfo_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleInfo_args)
        return this.equals((updateHandleInfo_args)that);
      return false;
    }

    public boolean equals(updateHandleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleInfo_args(");
      boolean first = true;

      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateHandleInfo_argsStandardScheme getScheme() {
        return new updateHandleInfo_argsStandardScheme();
      }
    }

    private static class updateHandleInfo_argsStandardScheme extends StandardScheme<updateHandleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateHandleInfo_argsTupleScheme getScheme() {
        return new updateHandleInfo_argsTupleScheme();
      }
    }

    private static class updateHandleInfo_argsTupleScheme extends TupleScheme<updateHandleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class updateHandleInfo_result implements org.apache.thrift.TBase<updateHandleInfo_result, updateHandleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleInfo_result.class, metaDataMap);
    }

    public updateHandleInfo_result() {
    }

    public updateHandleInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleInfo_result(updateHandleInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHandleInfo_result deepCopy() {
      return new updateHandleInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHandleInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleInfo_result)
        return this.equals((updateHandleInfo_result)that);
      return false;
    }

    public boolean equals(updateHandleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateHandleInfo_resultStandardScheme getScheme() {
        return new updateHandleInfo_resultStandardScheme();
      }
    }

    private static class updateHandleInfo_resultStandardScheme extends StandardScheme<updateHandleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateHandleInfo_resultTupleScheme getScheme() {
        return new updateHandleInfo_resultTupleScheme();
      }
    }

    private static class updateHandleInfo_resultTupleScheme extends TupleScheme<updateHandleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class foreclosureTurnDown_args implements org.apache.thrift.TBase<foreclosureTurnDown_args, foreclosureTurnDown_args._Fields>, java.io.Serializable, Cloneable, Comparable<foreclosureTurnDown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foreclosureTurnDown_args");

    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new foreclosureTurnDown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new foreclosureTurnDown_argsTupleSchemeFactory());
    }

    public HandleInfoDTO handleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_INFO_DTO((short)1, "handleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foreclosureTurnDown_args.class, metaDataMap);
    }

    public foreclosureTurnDown_args() {
    }

    public foreclosureTurnDown_args(
      HandleInfoDTO handleInfoDTO)
    {
      this();
      this.handleInfoDTO = handleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foreclosureTurnDown_args(foreclosureTurnDown_args other) {
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
    }

    public foreclosureTurnDown_args deepCopy() {
      return new foreclosureTurnDown_args(this);
    }

    @Override
    public void clear() {
      this.handleInfoDTO = null;
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public foreclosureTurnDown_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof foreclosureTurnDown_args)
        return this.equals((foreclosureTurnDown_args)that);
      return false;
    }

    public boolean equals(foreclosureTurnDown_args that) {
      if (that == null)
        return false;

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(foreclosureTurnDown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("foreclosureTurnDown_args(");
      boolean first = true;

      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foreclosureTurnDown_argsStandardSchemeFactory implements SchemeFactory {
      public foreclosureTurnDown_argsStandardScheme getScheme() {
        return new foreclosureTurnDown_argsStandardScheme();
      }
    }

    private static class foreclosureTurnDown_argsStandardScheme extends StandardScheme<foreclosureTurnDown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foreclosureTurnDown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foreclosureTurnDown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foreclosureTurnDown_argsTupleSchemeFactory implements SchemeFactory {
      public foreclosureTurnDown_argsTupleScheme getScheme() {
        return new foreclosureTurnDown_argsTupleScheme();
      }
    }

    private static class foreclosureTurnDown_argsTupleScheme extends TupleScheme<foreclosureTurnDown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foreclosureTurnDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foreclosureTurnDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class foreclosureTurnDown_result implements org.apache.thrift.TBase<foreclosureTurnDown_result, foreclosureTurnDown_result._Fields>, java.io.Serializable, Cloneable, Comparable<foreclosureTurnDown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foreclosureTurnDown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new foreclosureTurnDown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new foreclosureTurnDown_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foreclosureTurnDown_result.class, metaDataMap);
    }

    public foreclosureTurnDown_result() {
    }

    public foreclosureTurnDown_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foreclosureTurnDown_result(foreclosureTurnDown_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public foreclosureTurnDown_result deepCopy() {
      return new foreclosureTurnDown_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public foreclosureTurnDown_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof foreclosureTurnDown_result)
        return this.equals((foreclosureTurnDown_result)that);
      return false;
    }

    public boolean equals(foreclosureTurnDown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(foreclosureTurnDown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("foreclosureTurnDown_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foreclosureTurnDown_resultStandardSchemeFactory implements SchemeFactory {
      public foreclosureTurnDown_resultStandardScheme getScheme() {
        return new foreclosureTurnDown_resultStandardScheme();
      }
    }

    private static class foreclosureTurnDown_resultStandardScheme extends StandardScheme<foreclosureTurnDown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foreclosureTurnDown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foreclosureTurnDown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foreclosureTurnDown_resultTupleSchemeFactory implements SchemeFactory {
      public foreclosureTurnDown_resultTupleScheme getScheme() {
        return new foreclosureTurnDown_resultTupleScheme();
      }
    }

    private static class foreclosureTurnDown_resultTupleScheme extends TupleScheme<foreclosureTurnDown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foreclosureTurnDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foreclosureTurnDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isBalanceConfirm_args implements org.apache.thrift.TBase<isBalanceConfirm_args, isBalanceConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<isBalanceConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isBalanceConfirm_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isBalanceConfirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isBalanceConfirm_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public int handleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      HANDLE_ID((short)2, "handleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // HANDLE_ID
            return HANDLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __HANDLEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isBalanceConfirm_args.class, metaDataMap);
    }

    public isBalanceConfirm_args() {
    }

    public isBalanceConfirm_args(
      int projectId,
      int handleId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.handleId = handleId;
      setHandleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isBalanceConfirm_args(isBalanceConfirm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.handleId = other.handleId;
    }

    public isBalanceConfirm_args deepCopy() {
      return new isBalanceConfirm_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setHandleIdIsSet(false);
      this.handleId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public isBalanceConfirm_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getHandleId() {
      return this.handleId;
    }

    public isBalanceConfirm_args setHandleId(int handleId) {
      this.handleId = handleId;
      setHandleIdIsSet(true);
      return this;
    }

    public void unsetHandleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    public void setHandleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case HANDLE_ID:
        if (value == null) {
          unsetHandleId();
        } else {
          setHandleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case HANDLE_ID:
        return Integer.valueOf(getHandleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case HANDLE_ID:
        return isSetHandleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isBalanceConfirm_args)
        return this.equals((isBalanceConfirm_args)that);
      return false;
    }

    public boolean equals(isBalanceConfirm_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_handleId = true;
      boolean that_present_handleId = true;
      if (this_present_handleId || that_present_handleId) {
        if (!(this_present_handleId && that_present_handleId))
          return false;
        if (this.handleId != that.handleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_handleId = true;
      list.add(present_handleId);
      if (present_handleId)
        list.add(handleId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isBalanceConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isBalanceConfirm_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("handleId:");
      sb.append(this.handleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isBalanceConfirm_argsStandardSchemeFactory implements SchemeFactory {
      public isBalanceConfirm_argsStandardScheme getScheme() {
        return new isBalanceConfirm_argsStandardScheme();
      }
    }

    private static class isBalanceConfirm_argsStandardScheme extends StandardScheme<isBalanceConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isBalanceConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleId = iprot.readI32();
                struct.setHandleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isBalanceConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
        oprot.writeI32(struct.handleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isBalanceConfirm_argsTupleSchemeFactory implements SchemeFactory {
      public isBalanceConfirm_argsTupleScheme getScheme() {
        return new isBalanceConfirm_argsTupleScheme();
      }
    }

    private static class isBalanceConfirm_argsTupleScheme extends TupleScheme<isBalanceConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isBalanceConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetHandleId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetHandleId()) {
          oprot.writeI32(struct.handleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isBalanceConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handleId = iprot.readI32();
          struct.setHandleIdIsSet(true);
        }
      }
    }

  }

  public static class isBalanceConfirm_result implements org.apache.thrift.TBase<isBalanceConfirm_result, isBalanceConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<isBalanceConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isBalanceConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isBalanceConfirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isBalanceConfirm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isBalanceConfirm_result.class, metaDataMap);
    }

    public isBalanceConfirm_result() {
    }

    public isBalanceConfirm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isBalanceConfirm_result(isBalanceConfirm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isBalanceConfirm_result deepCopy() {
      return new isBalanceConfirm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isBalanceConfirm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isBalanceConfirm_result)
        return this.equals((isBalanceConfirm_result)that);
      return false;
    }

    public boolean equals(isBalanceConfirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isBalanceConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isBalanceConfirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isBalanceConfirm_resultStandardSchemeFactory implements SchemeFactory {
      public isBalanceConfirm_resultStandardScheme getScheme() {
        return new isBalanceConfirm_resultStandardScheme();
      }
    }

    private static class isBalanceConfirm_resultStandardScheme extends StandardScheme<isBalanceConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isBalanceConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isBalanceConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isBalanceConfirm_resultTupleSchemeFactory implements SchemeFactory {
      public isBalanceConfirm_resultTupleScheme getScheme() {
        return new isBalanceConfirm_resultTupleScheme();
      }
    }

    private static class isBalanceConfirm_resultTupleScheme extends TupleScheme<isBalanceConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isBalanceConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isBalanceConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllApplyHandleInfo_args implements org.apache.thrift.TBase<findAllApplyHandleInfo_args, findAllApplyHandleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyHandleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyHandleInfo_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyHandleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyHandleInfo_argsTupleSchemeFactory());
    }

    public ApplyHandleInfoDTO applyHandleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INFO_DTO((short)1, "applyHandleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INFO_DTO
            return APPLY_HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyHandleInfo_args.class, metaDataMap);
    }

    public findAllApplyHandleInfo_args() {
    }

    public findAllApplyHandleInfo_args(
      ApplyHandleInfoDTO applyHandleInfoDTO)
    {
      this();
      this.applyHandleInfoDTO = applyHandleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyHandleInfo_args(findAllApplyHandleInfo_args other) {
      if (other.isSetApplyHandleInfoDTO()) {
        this.applyHandleInfoDTO = new ApplyHandleInfoDTO(other.applyHandleInfoDTO);
      }
    }

    public findAllApplyHandleInfo_args deepCopy() {
      return new findAllApplyHandleInfo_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleInfoDTO = null;
    }

    public ApplyHandleInfoDTO getApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO;
    }

    public findAllApplyHandleInfo_args setApplyHandleInfoDTO(ApplyHandleInfoDTO applyHandleInfoDTO) {
      this.applyHandleInfoDTO = applyHandleInfoDTO;
      return this;
    }

    public void unsetApplyHandleInfoDTO() {
      this.applyHandleInfoDTO = null;
    }

    /** Returns true if field applyHandleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO != null;
    }

    public void setApplyHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        if (value == null) {
          unsetApplyHandleInfoDTO();
        } else {
          setApplyHandleInfoDTO((ApplyHandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return getApplyHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return isSetApplyHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyHandleInfo_args)
        return this.equals((findAllApplyHandleInfo_args)that);
      return false;
    }

    public boolean equals(findAllApplyHandleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleInfoDTO = true && this.isSetApplyHandleInfoDTO();
      boolean that_present_applyHandleInfoDTO = true && that.isSetApplyHandleInfoDTO();
      if (this_present_applyHandleInfoDTO || that_present_applyHandleInfoDTO) {
        if (!(this_present_applyHandleInfoDTO && that_present_applyHandleInfoDTO))
          return false;
        if (!this.applyHandleInfoDTO.equals(that.applyHandleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleInfoDTO = true && (isSetApplyHandleInfoDTO());
      list.add(present_applyHandleInfoDTO);
      if (present_applyHandleInfoDTO)
        list.add(applyHandleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyHandleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleInfoDTO()).compareTo(other.isSetApplyHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleInfoDTO, other.applyHandleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyHandleInfo_args(");
      boolean first = true;

      sb.append("applyHandleInfoDTO:");
      if (this.applyHandleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleInfoDTO != null) {
        applyHandleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyHandleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findAllApplyHandleInfo_argsStandardScheme getScheme() {
        return new findAllApplyHandleInfo_argsStandardScheme();
      }
    }

    private static class findAllApplyHandleInfo_argsStandardScheme extends StandardScheme<findAllApplyHandleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
                struct.applyHandleInfoDTO.read(iprot);
                struct.setApplyHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleInfoDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INFO_DTO_FIELD_DESC);
          struct.applyHandleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyHandleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findAllApplyHandleInfo_argsTupleScheme getScheme() {
        return new findAllApplyHandleInfo_argsTupleScheme();
      }
    }

    private static class findAllApplyHandleInfo_argsTupleScheme extends TupleScheme<findAllApplyHandleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleInfoDTO()) {
          struct.applyHandleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
          struct.applyHandleInfoDTO.read(iprot);
          struct.setApplyHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllApplyHandleInfo_result implements org.apache.thrift.TBase<findAllApplyHandleInfo_result, findAllApplyHandleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyHandleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyHandleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyHandleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyHandleInfo_resultTupleSchemeFactory());
    }

    public List<ApplyHandleInfoDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyHandleInfo_result.class, metaDataMap);
    }

    public findAllApplyHandleInfo_result() {
    }

    public findAllApplyHandleInfo_result(
      List<ApplyHandleInfoDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyHandleInfo_result(findAllApplyHandleInfo_result other) {
      if (other.isSetSuccess()) {
        List<ApplyHandleInfoDTO> __this__success = new ArrayList<ApplyHandleInfoDTO>(other.success.size());
        for (ApplyHandleInfoDTO other_element : other.success) {
          __this__success.add(new ApplyHandleInfoDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllApplyHandleInfo_result deepCopy() {
      return new findAllApplyHandleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ApplyHandleInfoDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ApplyHandleInfoDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ApplyHandleInfoDTO>();
      }
      this.success.add(elem);
    }

    public List<ApplyHandleInfoDTO> getSuccess() {
      return this.success;
    }

    public findAllApplyHandleInfo_result setSuccess(List<ApplyHandleInfoDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ApplyHandleInfoDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyHandleInfo_result)
        return this.equals((findAllApplyHandleInfo_result)that);
      return false;
    }

    public boolean equals(findAllApplyHandleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyHandleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyHandleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyHandleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findAllApplyHandleInfo_resultStandardScheme getScheme() {
        return new findAllApplyHandleInfo_resultStandardScheme();
      }
    }

    private static class findAllApplyHandleInfo_resultStandardScheme extends StandardScheme<findAllApplyHandleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list434 = iprot.readListBegin();
                  struct.success = new ArrayList<ApplyHandleInfoDTO>(_list434.size);
                  ApplyHandleInfoDTO _elem435;
                  for (int _i436 = 0; _i436 < _list434.size; ++_i436)
                  {
                    _elem435 = new ApplyHandleInfoDTO();
                    _elem435.read(iprot);
                    struct.success.add(_elem435);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ApplyHandleInfoDTO _iter437 : struct.success)
            {
              _iter437.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyHandleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findAllApplyHandleInfo_resultTupleScheme getScheme() {
        return new findAllApplyHandleInfo_resultTupleScheme();
      }
    }

    private static class findAllApplyHandleInfo_resultTupleScheme extends TupleScheme<findAllApplyHandleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ApplyHandleInfoDTO _iter438 : struct.success)
            {
              _iter438.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list439 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ApplyHandleInfoDTO>(_list439.size);
            ApplyHandleInfoDTO _elem440;
            for (int _i441 = 0; _i441 < _list439.size; ++_i441)
            {
              _elem440 = new ApplyHandleInfoDTO();
              _elem440.read(iprot);
              struct.success.add(_elem440);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleInfoTotal_args implements org.apache.thrift.TBase<getApplyHandleInfoTotal_args, getApplyHandleInfoTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleInfoTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleInfoTotal_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleInfoTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleInfoTotal_argsTupleSchemeFactory());
    }

    public ApplyHandleInfoDTO applyHandleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INFO_DTO((short)1, "applyHandleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INFO_DTO
            return APPLY_HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleInfoTotal_args.class, metaDataMap);
    }

    public getApplyHandleInfoTotal_args() {
    }

    public getApplyHandleInfoTotal_args(
      ApplyHandleInfoDTO applyHandleInfoDTO)
    {
      this();
      this.applyHandleInfoDTO = applyHandleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleInfoTotal_args(getApplyHandleInfoTotal_args other) {
      if (other.isSetApplyHandleInfoDTO()) {
        this.applyHandleInfoDTO = new ApplyHandleInfoDTO(other.applyHandleInfoDTO);
      }
    }

    public getApplyHandleInfoTotal_args deepCopy() {
      return new getApplyHandleInfoTotal_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleInfoDTO = null;
    }

    public ApplyHandleInfoDTO getApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO;
    }

    public getApplyHandleInfoTotal_args setApplyHandleInfoDTO(ApplyHandleInfoDTO applyHandleInfoDTO) {
      this.applyHandleInfoDTO = applyHandleInfoDTO;
      return this;
    }

    public void unsetApplyHandleInfoDTO() {
      this.applyHandleInfoDTO = null;
    }

    /** Returns true if field applyHandleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO != null;
    }

    public void setApplyHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        if (value == null) {
          unsetApplyHandleInfoDTO();
        } else {
          setApplyHandleInfoDTO((ApplyHandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return getApplyHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return isSetApplyHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleInfoTotal_args)
        return this.equals((getApplyHandleInfoTotal_args)that);
      return false;
    }

    public boolean equals(getApplyHandleInfoTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleInfoDTO = true && this.isSetApplyHandleInfoDTO();
      boolean that_present_applyHandleInfoDTO = true && that.isSetApplyHandleInfoDTO();
      if (this_present_applyHandleInfoDTO || that_present_applyHandleInfoDTO) {
        if (!(this_present_applyHandleInfoDTO && that_present_applyHandleInfoDTO))
          return false;
        if (!this.applyHandleInfoDTO.equals(that.applyHandleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleInfoDTO = true && (isSetApplyHandleInfoDTO());
      list.add(present_applyHandleInfoDTO);
      if (present_applyHandleInfoDTO)
        list.add(applyHandleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleInfoTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleInfoDTO()).compareTo(other.isSetApplyHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleInfoDTO, other.applyHandleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleInfoTotal_args(");
      boolean first = true;

      sb.append("applyHandleInfoDTO:");
      if (this.applyHandleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleInfoDTO != null) {
        applyHandleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleInfoTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoTotal_argsStandardScheme getScheme() {
        return new getApplyHandleInfoTotal_argsStandardScheme();
      }
    }

    private static class getApplyHandleInfoTotal_argsStandardScheme extends StandardScheme<getApplyHandleInfoTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleInfoTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
                struct.applyHandleInfoDTO.read(iprot);
                struct.setApplyHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleInfoTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleInfoDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INFO_DTO_FIELD_DESC);
          struct.applyHandleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleInfoTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoTotal_argsTupleScheme getScheme() {
        return new getApplyHandleInfoTotal_argsTupleScheme();
      }
    }

    private static class getApplyHandleInfoTotal_argsTupleScheme extends TupleScheme<getApplyHandleInfoTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleInfoDTO()) {
          struct.applyHandleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
          struct.applyHandleInfoDTO.read(iprot);
          struct.setApplyHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleInfoTotal_result implements org.apache.thrift.TBase<getApplyHandleInfoTotal_result, getApplyHandleInfoTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleInfoTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleInfoTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleInfoTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleInfoTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleInfoTotal_result.class, metaDataMap);
    }

    public getApplyHandleInfoTotal_result() {
    }

    public getApplyHandleInfoTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleInfoTotal_result(getApplyHandleInfoTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getApplyHandleInfoTotal_result deepCopy() {
      return new getApplyHandleInfoTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getApplyHandleInfoTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleInfoTotal_result)
        return this.equals((getApplyHandleInfoTotal_result)that);
      return false;
    }

    public boolean equals(getApplyHandleInfoTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleInfoTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleInfoTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleInfoTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoTotal_resultStandardScheme getScheme() {
        return new getApplyHandleInfoTotal_resultStandardScheme();
      }
    }

    private static class getApplyHandleInfoTotal_resultStandardScheme extends StandardScheme<getApplyHandleInfoTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleInfoTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleInfoTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleInfoTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoTotal_resultTupleScheme getScheme() {
        return new getApplyHandleInfoTotal_resultTupleScheme();
      }
    }

    private static class getApplyHandleInfoTotal_resultTupleScheme extends TupleScheme<getApplyHandleInfoTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addApplyHandleInfo_args implements org.apache.thrift.TBase<addApplyHandleInfo_args, addApplyHandleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplyHandleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplyHandleInfo_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplyHandleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplyHandleInfo_argsTupleSchemeFactory());
    }

    public ApplyHandleInfoDTO applyHandleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INFO_DTO((short)1, "applyHandleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INFO_DTO
            return APPLY_HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplyHandleInfo_args.class, metaDataMap);
    }

    public addApplyHandleInfo_args() {
    }

    public addApplyHandleInfo_args(
      ApplyHandleInfoDTO applyHandleInfoDTO)
    {
      this();
      this.applyHandleInfoDTO = applyHandleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplyHandleInfo_args(addApplyHandleInfo_args other) {
      if (other.isSetApplyHandleInfoDTO()) {
        this.applyHandleInfoDTO = new ApplyHandleInfoDTO(other.applyHandleInfoDTO);
      }
    }

    public addApplyHandleInfo_args deepCopy() {
      return new addApplyHandleInfo_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleInfoDTO = null;
    }

    public ApplyHandleInfoDTO getApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO;
    }

    public addApplyHandleInfo_args setApplyHandleInfoDTO(ApplyHandleInfoDTO applyHandleInfoDTO) {
      this.applyHandleInfoDTO = applyHandleInfoDTO;
      return this;
    }

    public void unsetApplyHandleInfoDTO() {
      this.applyHandleInfoDTO = null;
    }

    /** Returns true if field applyHandleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO != null;
    }

    public void setApplyHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        if (value == null) {
          unsetApplyHandleInfoDTO();
        } else {
          setApplyHandleInfoDTO((ApplyHandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return getApplyHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return isSetApplyHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplyHandleInfo_args)
        return this.equals((addApplyHandleInfo_args)that);
      return false;
    }

    public boolean equals(addApplyHandleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleInfoDTO = true && this.isSetApplyHandleInfoDTO();
      boolean that_present_applyHandleInfoDTO = true && that.isSetApplyHandleInfoDTO();
      if (this_present_applyHandleInfoDTO || that_present_applyHandleInfoDTO) {
        if (!(this_present_applyHandleInfoDTO && that_present_applyHandleInfoDTO))
          return false;
        if (!this.applyHandleInfoDTO.equals(that.applyHandleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleInfoDTO = true && (isSetApplyHandleInfoDTO());
      list.add(present_applyHandleInfoDTO);
      if (present_applyHandleInfoDTO)
        list.add(applyHandleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplyHandleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleInfoDTO()).compareTo(other.isSetApplyHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleInfoDTO, other.applyHandleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplyHandleInfo_args(");
      boolean first = true;

      sb.append("applyHandleInfoDTO:");
      if (this.applyHandleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleInfoDTO != null) {
        applyHandleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplyHandleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addApplyHandleInfo_argsStandardScheme getScheme() {
        return new addApplyHandleInfo_argsStandardScheme();
      }
    }

    private static class addApplyHandleInfo_argsStandardScheme extends StandardScheme<addApplyHandleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
                struct.applyHandleInfoDTO.read(iprot);
                struct.setApplyHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleInfoDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INFO_DTO_FIELD_DESC);
          struct.applyHandleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplyHandleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addApplyHandleInfo_argsTupleScheme getScheme() {
        return new addApplyHandleInfo_argsTupleScheme();
      }
    }

    private static class addApplyHandleInfo_argsTupleScheme extends TupleScheme<addApplyHandleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleInfoDTO()) {
          struct.applyHandleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
          struct.applyHandleInfoDTO.read(iprot);
          struct.setApplyHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class addApplyHandleInfo_result implements org.apache.thrift.TBase<addApplyHandleInfo_result, addApplyHandleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplyHandleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplyHandleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplyHandleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplyHandleInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplyHandleInfo_result.class, metaDataMap);
    }

    public addApplyHandleInfo_result() {
    }

    public addApplyHandleInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplyHandleInfo_result(addApplyHandleInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addApplyHandleInfo_result deepCopy() {
      return new addApplyHandleInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addApplyHandleInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplyHandleInfo_result)
        return this.equals((addApplyHandleInfo_result)that);
      return false;
    }

    public boolean equals(addApplyHandleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplyHandleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplyHandleInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplyHandleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addApplyHandleInfo_resultStandardScheme getScheme() {
        return new addApplyHandleInfo_resultStandardScheme();
      }
    }

    private static class addApplyHandleInfo_resultStandardScheme extends StandardScheme<addApplyHandleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplyHandleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addApplyHandleInfo_resultTupleScheme getScheme() {
        return new addApplyHandleInfo_resultTupleScheme();
      }
    }

    private static class addApplyHandleInfo_resultTupleScheme extends TupleScheme<addApplyHandleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleInfoById_args implements org.apache.thrift.TBase<getApplyHandleInfoById_args, getApplyHandleInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleInfoById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleInfoById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleInfoById_args.class, metaDataMap);
    }

    public getApplyHandleInfoById_args() {
    }

    public getApplyHandleInfoById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleInfoById_args(getApplyHandleInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getApplyHandleInfoById_args deepCopy() {
      return new getApplyHandleInfoById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getApplyHandleInfoById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleInfoById_args)
        return this.equals((getApplyHandleInfoById_args)that);
      return false;
    }

    public boolean equals(getApplyHandleInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleInfoById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoById_argsStandardScheme getScheme() {
        return new getApplyHandleInfoById_argsStandardScheme();
      }
    }

    private static class getApplyHandleInfoById_argsStandardScheme extends StandardScheme<getApplyHandleInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoById_argsTupleScheme getScheme() {
        return new getApplyHandleInfoById_argsTupleScheme();
      }
    }

    private static class getApplyHandleInfoById_argsTupleScheme extends TupleScheme<getApplyHandleInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getApplyHandleInfoById_result implements org.apache.thrift.TBase<getApplyHandleInfoById_result, getApplyHandleInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyHandleInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyHandleInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyHandleInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyHandleInfoById_resultTupleSchemeFactory());
    }

    public ApplyHandleInfoDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyHandleInfoById_result.class, metaDataMap);
    }

    public getApplyHandleInfoById_result() {
    }

    public getApplyHandleInfoById_result(
      ApplyHandleInfoDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyHandleInfoById_result(getApplyHandleInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplyHandleInfoDTO(other.success);
      }
    }

    public getApplyHandleInfoById_result deepCopy() {
      return new getApplyHandleInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApplyHandleInfoDTO getSuccess() {
      return this.success;
    }

    public getApplyHandleInfoById_result setSuccess(ApplyHandleInfoDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplyHandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyHandleInfoById_result)
        return this.equals((getApplyHandleInfoById_result)that);
      return false;
    }

    public boolean equals(getApplyHandleInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyHandleInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyHandleInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyHandleInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoById_resultStandardScheme getScheme() {
        return new getApplyHandleInfoById_resultStandardScheme();
      }
    }

    private static class getApplyHandleInfoById_resultStandardScheme extends StandardScheme<getApplyHandleInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyHandleInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplyHandleInfoDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyHandleInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyHandleInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyHandleInfoById_resultTupleScheme getScheme() {
        return new getApplyHandleInfoById_resultTupleScheme();
      }
    }

    private static class getApplyHandleInfoById_resultTupleScheme extends TupleScheme<getApplyHandleInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyHandleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApplyHandleInfoDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateApplyHandleInfo_args implements org.apache.thrift.TBase<updateApplyHandleInfo_args, updateApplyHandleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplyHandleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplyHandleInfo_args");

    private static final org.apache.thrift.protocol.TField APPLY_HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplyHandleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplyHandleInfo_argsTupleSchemeFactory());
    }

    public ApplyHandleInfoDTO applyHandleInfoDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_HANDLE_INFO_DTO((short)1, "applyHandleInfoDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_HANDLE_INFO_DTO
            return APPLY_HANDLE_INFO_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyHandleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyHandleInfoDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplyHandleInfo_args.class, metaDataMap);
    }

    public updateApplyHandleInfo_args() {
    }

    public updateApplyHandleInfo_args(
      ApplyHandleInfoDTO applyHandleInfoDTO)
    {
      this();
      this.applyHandleInfoDTO = applyHandleInfoDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplyHandleInfo_args(updateApplyHandleInfo_args other) {
      if (other.isSetApplyHandleInfoDTO()) {
        this.applyHandleInfoDTO = new ApplyHandleInfoDTO(other.applyHandleInfoDTO);
      }
    }

    public updateApplyHandleInfo_args deepCopy() {
      return new updateApplyHandleInfo_args(this);
    }

    @Override
    public void clear() {
      this.applyHandleInfoDTO = null;
    }

    public ApplyHandleInfoDTO getApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO;
    }

    public updateApplyHandleInfo_args setApplyHandleInfoDTO(ApplyHandleInfoDTO applyHandleInfoDTO) {
      this.applyHandleInfoDTO = applyHandleInfoDTO;
      return this;
    }

    public void unsetApplyHandleInfoDTO() {
      this.applyHandleInfoDTO = null;
    }

    /** Returns true if field applyHandleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyHandleInfoDTO() {
      return this.applyHandleInfoDTO != null;
    }

    public void setApplyHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.applyHandleInfoDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        if (value == null) {
          unsetApplyHandleInfoDTO();
        } else {
          setApplyHandleInfoDTO((ApplyHandleInfoDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return getApplyHandleInfoDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_HANDLE_INFO_DTO:
        return isSetApplyHandleInfoDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplyHandleInfo_args)
        return this.equals((updateApplyHandleInfo_args)that);
      return false;
    }

    public boolean equals(updateApplyHandleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_applyHandleInfoDTO = true && this.isSetApplyHandleInfoDTO();
      boolean that_present_applyHandleInfoDTO = true && that.isSetApplyHandleInfoDTO();
      if (this_present_applyHandleInfoDTO || that_present_applyHandleInfoDTO) {
        if (!(this_present_applyHandleInfoDTO && that_present_applyHandleInfoDTO))
          return false;
        if (!this.applyHandleInfoDTO.equals(that.applyHandleInfoDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyHandleInfoDTO = true && (isSetApplyHandleInfoDTO());
      list.add(present_applyHandleInfoDTO);
      if (present_applyHandleInfoDTO)
        list.add(applyHandleInfoDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplyHandleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyHandleInfoDTO()).compareTo(other.isSetApplyHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleInfoDTO, other.applyHandleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplyHandleInfo_args(");
      boolean first = true;

      sb.append("applyHandleInfoDTO:");
      if (this.applyHandleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyHandleInfoDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyHandleInfoDTO != null) {
        applyHandleInfoDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplyHandleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplyHandleInfo_argsStandardScheme getScheme() {
        return new updateApplyHandleInfo_argsStandardScheme();
      }
    }

    private static class updateApplyHandleInfo_argsStandardScheme extends StandardScheme<updateApplyHandleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
                struct.applyHandleInfoDTO.read(iprot);
                struct.setApplyHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyHandleInfoDTO != null) {
          oprot.writeFieldBegin(APPLY_HANDLE_INFO_DTO_FIELD_DESC);
          struct.applyHandleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplyHandleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplyHandleInfo_argsTupleScheme getScheme() {
        return new updateApplyHandleInfo_argsTupleScheme();
      }
    }

    private static class updateApplyHandleInfo_argsTupleScheme extends TupleScheme<updateApplyHandleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyHandleInfoDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyHandleInfoDTO()) {
          struct.applyHandleInfoDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplyHandleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyHandleInfoDTO = new ApplyHandleInfoDTO();
          struct.applyHandleInfoDTO.read(iprot);
          struct.setApplyHandleInfoDTOIsSet(true);
        }
      }
    }

  }

  public static class updateApplyHandleInfo_result implements org.apache.thrift.TBase<updateApplyHandleInfo_result, updateApplyHandleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplyHandleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplyHandleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplyHandleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplyHandleInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplyHandleInfo_result.class, metaDataMap);
    }

    public updateApplyHandleInfo_result() {
    }

    public updateApplyHandleInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplyHandleInfo_result(updateApplyHandleInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateApplyHandleInfo_result deepCopy() {
      return new updateApplyHandleInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateApplyHandleInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplyHandleInfo_result)
        return this.equals((updateApplyHandleInfo_result)that);
      return false;
    }

    public boolean equals(updateApplyHandleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplyHandleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplyHandleInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplyHandleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplyHandleInfo_resultStandardScheme getScheme() {
        return new updateApplyHandleInfo_resultStandardScheme();
      }
    }

    private static class updateApplyHandleInfo_resultStandardScheme extends StandardScheme<updateApplyHandleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplyHandleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplyHandleInfo_resultTupleScheme getScheme() {
        return new updateApplyHandleInfo_resultTupleScheme();
      }
    }

    private static class updateApplyHandleInfo_resultTupleScheme extends TupleScheme<updateApplyHandleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplyHandleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHouseBalance_args implements org.apache.thrift.TBase<findAllHouseBalance_args, findAllHouseBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHouseBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHouseBalance_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHouseBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHouseBalance_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHouseBalance_args.class, metaDataMap);
    }

    public findAllHouseBalance_args() {
    }

    public findAllHouseBalance_args(
      HouseBalanceDTO houseBalanceDTO)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHouseBalance_args(findAllHouseBalance_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
    }

    public findAllHouseBalance_args deepCopy() {
      return new findAllHouseBalance_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public findAllHouseBalance_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHouseBalance_args)
        return this.equals((findAllHouseBalance_args)that);
      return false;
    }

    public boolean equals(findAllHouseBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHouseBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHouseBalance_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHouseBalance_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHouseBalance_argsStandardScheme getScheme() {
        return new findAllHouseBalance_argsStandardScheme();
      }
    }

    private static class findAllHouseBalance_argsStandardScheme extends StandardScheme<findAllHouseBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHouseBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHouseBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHouseBalance_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHouseBalance_argsTupleScheme getScheme() {
        return new findAllHouseBalance_argsTupleScheme();
      }
    }

    private static class findAllHouseBalance_argsTupleScheme extends TupleScheme<findAllHouseBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHouseBalance_result implements org.apache.thrift.TBase<findAllHouseBalance_result, findAllHouseBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHouseBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHouseBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHouseBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHouseBalance_resultTupleSchemeFactory());
    }

    public List<HouseBalanceDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHouseBalance_result.class, metaDataMap);
    }

    public findAllHouseBalance_result() {
    }

    public findAllHouseBalance_result(
      List<HouseBalanceDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHouseBalance_result(findAllHouseBalance_result other) {
      if (other.isSetSuccess()) {
        List<HouseBalanceDTO> __this__success = new ArrayList<HouseBalanceDTO>(other.success.size());
        for (HouseBalanceDTO other_element : other.success) {
          __this__success.add(new HouseBalanceDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHouseBalance_result deepCopy() {
      return new findAllHouseBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HouseBalanceDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HouseBalanceDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HouseBalanceDTO>();
      }
      this.success.add(elem);
    }

    public List<HouseBalanceDTO> getSuccess() {
      return this.success;
    }

    public findAllHouseBalance_result setSuccess(List<HouseBalanceDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HouseBalanceDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHouseBalance_result)
        return this.equals((findAllHouseBalance_result)that);
      return false;
    }

    public boolean equals(findAllHouseBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHouseBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHouseBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHouseBalance_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHouseBalance_resultStandardScheme getScheme() {
        return new findAllHouseBalance_resultStandardScheme();
      }
    }

    private static class findAllHouseBalance_resultStandardScheme extends StandardScheme<findAllHouseBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHouseBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list442 = iprot.readListBegin();
                  struct.success = new ArrayList<HouseBalanceDTO>(_list442.size);
                  HouseBalanceDTO _elem443;
                  for (int _i444 = 0; _i444 < _list442.size; ++_i444)
                  {
                    _elem443 = new HouseBalanceDTO();
                    _elem443.read(iprot);
                    struct.success.add(_elem443);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHouseBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HouseBalanceDTO _iter445 : struct.success)
            {
              _iter445.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHouseBalance_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHouseBalance_resultTupleScheme getScheme() {
        return new findAllHouseBalance_resultTupleScheme();
      }
    }

    private static class findAllHouseBalance_resultTupleScheme extends TupleScheme<findAllHouseBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HouseBalanceDTO _iter446 : struct.success)
            {
              _iter446.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list447 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HouseBalanceDTO>(_list447.size);
            HouseBalanceDTO _elem448;
            for (int _i449 = 0; _i449 < _list447.size; ++_i449)
            {
              _elem448 = new HouseBalanceDTO();
              _elem448.read(iprot);
              struct.success.add(_elem448);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceTotal_args implements org.apache.thrift.TBase<getHouseBalanceTotal_args, getHouseBalanceTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceTotal_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceTotal_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceTotal_args.class, metaDataMap);
    }

    public getHouseBalanceTotal_args() {
    }

    public getHouseBalanceTotal_args(
      HouseBalanceDTO houseBalanceDTO)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceTotal_args(getHouseBalanceTotal_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
    }

    public getHouseBalanceTotal_args deepCopy() {
      return new getHouseBalanceTotal_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public getHouseBalanceTotal_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceTotal_args)
        return this.equals((getHouseBalanceTotal_args)that);
      return false;
    }

    public boolean equals(getHouseBalanceTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceTotal_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceTotal_argsStandardScheme getScheme() {
        return new getHouseBalanceTotal_argsStandardScheme();
      }
    }

    private static class getHouseBalanceTotal_argsStandardScheme extends StandardScheme<getHouseBalanceTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceTotal_argsTupleScheme getScheme() {
        return new getHouseBalanceTotal_argsTupleScheme();
      }
    }

    private static class getHouseBalanceTotal_argsTupleScheme extends TupleScheme<getHouseBalanceTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceTotal_result implements org.apache.thrift.TBase<getHouseBalanceTotal_result, getHouseBalanceTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceTotal_result.class, metaDataMap);
    }

    public getHouseBalanceTotal_result() {
    }

    public getHouseBalanceTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceTotal_result(getHouseBalanceTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHouseBalanceTotal_result deepCopy() {
      return new getHouseBalanceTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHouseBalanceTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceTotal_result)
        return this.equals((getHouseBalanceTotal_result)that);
      return false;
    }

    public boolean equals(getHouseBalanceTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceTotal_resultStandardScheme getScheme() {
        return new getHouseBalanceTotal_resultStandardScheme();
      }
    }

    private static class getHouseBalanceTotal_resultStandardScheme extends StandardScheme<getHouseBalanceTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceTotal_resultTupleScheme getScheme() {
        return new getHouseBalanceTotal_resultTupleScheme();
      }
    }

    private static class getHouseBalanceTotal_resultTupleScheme extends TupleScheme<getHouseBalanceTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceListByProjectId_args implements org.apache.thrift.TBase<getHouseBalanceListByProjectId_args, getHouseBalanceListByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceListByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceListByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceListByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceListByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceListByProjectId_args.class, metaDataMap);
    }

    public getHouseBalanceListByProjectId_args() {
    }

    public getHouseBalanceListByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceListByProjectId_args(getHouseBalanceListByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getHouseBalanceListByProjectId_args deepCopy() {
      return new getHouseBalanceListByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getHouseBalanceListByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceListByProjectId_args)
        return this.equals((getHouseBalanceListByProjectId_args)that);
      return false;
    }

    public boolean equals(getHouseBalanceListByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceListByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceListByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceListByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceListByProjectId_argsStandardScheme getScheme() {
        return new getHouseBalanceListByProjectId_argsStandardScheme();
      }
    }

    private static class getHouseBalanceListByProjectId_argsStandardScheme extends StandardScheme<getHouseBalanceListByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceListByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceListByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceListByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceListByProjectId_argsTupleScheme getScheme() {
        return new getHouseBalanceListByProjectId_argsTupleScheme();
      }
    }

    private static class getHouseBalanceListByProjectId_argsTupleScheme extends TupleScheme<getHouseBalanceListByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceListByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceListByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceListByProjectId_result implements org.apache.thrift.TBase<getHouseBalanceListByProjectId_result, getHouseBalanceListByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceListByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceListByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceListByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceListByProjectId_resultTupleSchemeFactory());
    }

    public List<HouseBalanceDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceListByProjectId_result.class, metaDataMap);
    }

    public getHouseBalanceListByProjectId_result() {
    }

    public getHouseBalanceListByProjectId_result(
      List<HouseBalanceDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceListByProjectId_result(getHouseBalanceListByProjectId_result other) {
      if (other.isSetSuccess()) {
        List<HouseBalanceDTO> __this__success = new ArrayList<HouseBalanceDTO>(other.success.size());
        for (HouseBalanceDTO other_element : other.success) {
          __this__success.add(new HouseBalanceDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHouseBalanceListByProjectId_result deepCopy() {
      return new getHouseBalanceListByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HouseBalanceDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HouseBalanceDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HouseBalanceDTO>();
      }
      this.success.add(elem);
    }

    public List<HouseBalanceDTO> getSuccess() {
      return this.success;
    }

    public getHouseBalanceListByProjectId_result setSuccess(List<HouseBalanceDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HouseBalanceDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceListByProjectId_result)
        return this.equals((getHouseBalanceListByProjectId_result)that);
      return false;
    }

    public boolean equals(getHouseBalanceListByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceListByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceListByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceListByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceListByProjectId_resultStandardScheme getScheme() {
        return new getHouseBalanceListByProjectId_resultStandardScheme();
      }
    }

    private static class getHouseBalanceListByProjectId_resultStandardScheme extends StandardScheme<getHouseBalanceListByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceListByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list450 = iprot.readListBegin();
                  struct.success = new ArrayList<HouseBalanceDTO>(_list450.size);
                  HouseBalanceDTO _elem451;
                  for (int _i452 = 0; _i452 < _list450.size; ++_i452)
                  {
                    _elem451 = new HouseBalanceDTO();
                    _elem451.read(iprot);
                    struct.success.add(_elem451);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceListByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HouseBalanceDTO _iter453 : struct.success)
            {
              _iter453.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceListByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceListByProjectId_resultTupleScheme getScheme() {
        return new getHouseBalanceListByProjectId_resultTupleScheme();
      }
    }

    private static class getHouseBalanceListByProjectId_resultTupleScheme extends TupleScheme<getHouseBalanceListByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceListByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HouseBalanceDTO _iter454 : struct.success)
            {
              _iter454.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceListByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list455 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HouseBalanceDTO>(_list455.size);
            HouseBalanceDTO _elem456;
            for (int _i457 = 0; _i457 < _list455.size; ++_i457)
            {
              _elem456 = new HouseBalanceDTO();
              _elem456.read(iprot);
              struct.success.add(_elem456);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureMoneyByProjectId_args implements org.apache.thrift.TBase<getForeclosureMoneyByProjectId_args, getForeclosureMoneyByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureMoneyByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureMoneyByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureMoneyByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureMoneyByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureMoneyByProjectId_args.class, metaDataMap);
    }

    public getForeclosureMoneyByProjectId_args() {
    }

    public getForeclosureMoneyByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureMoneyByProjectId_args(getForeclosureMoneyByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getForeclosureMoneyByProjectId_args deepCopy() {
      return new getForeclosureMoneyByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getForeclosureMoneyByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureMoneyByProjectId_args)
        return this.equals((getForeclosureMoneyByProjectId_args)that);
      return false;
    }

    public boolean equals(getForeclosureMoneyByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureMoneyByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureMoneyByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureMoneyByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getForeclosureMoneyByProjectId_argsStandardScheme getScheme() {
        return new getForeclosureMoneyByProjectId_argsStandardScheme();
      }
    }

    private static class getForeclosureMoneyByProjectId_argsStandardScheme extends StandardScheme<getForeclosureMoneyByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureMoneyByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureMoneyByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureMoneyByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getForeclosureMoneyByProjectId_argsTupleScheme getScheme() {
        return new getForeclosureMoneyByProjectId_argsTupleScheme();
      }
    }

    private static class getForeclosureMoneyByProjectId_argsTupleScheme extends TupleScheme<getForeclosureMoneyByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureMoneyByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureMoneyByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureMoneyByProjectId_result implements org.apache.thrift.TBase<getForeclosureMoneyByProjectId_result, getForeclosureMoneyByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureMoneyByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureMoneyByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureMoneyByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureMoneyByProjectId_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureMoneyByProjectId_result.class, metaDataMap);
    }

    public getForeclosureMoneyByProjectId_result() {
    }

    public getForeclosureMoneyByProjectId_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureMoneyByProjectId_result(getForeclosureMoneyByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getForeclosureMoneyByProjectId_result deepCopy() {
      return new getForeclosureMoneyByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getForeclosureMoneyByProjectId_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureMoneyByProjectId_result)
        return this.equals((getForeclosureMoneyByProjectId_result)that);
      return false;
    }

    public boolean equals(getForeclosureMoneyByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureMoneyByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureMoneyByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureMoneyByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getForeclosureMoneyByProjectId_resultStandardScheme getScheme() {
        return new getForeclosureMoneyByProjectId_resultStandardScheme();
      }
    }

    private static class getForeclosureMoneyByProjectId_resultStandardScheme extends StandardScheme<getForeclosureMoneyByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureMoneyByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureMoneyByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureMoneyByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getForeclosureMoneyByProjectId_resultTupleScheme getScheme() {
        return new getForeclosureMoneyByProjectId_resultTupleScheme();
      }
    }

    private static class getForeclosureMoneyByProjectId_resultTupleScheme extends TupleScheme<getForeclosureMoneyByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureMoneyByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureMoneyByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHouseBalance_args implements org.apache.thrift.TBase<addHouseBalance_args, addHouseBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHouseBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHouseBalance_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHouseBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHouseBalance_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHouseBalance_args.class, metaDataMap);
    }

    public addHouseBalance_args() {
    }

    public addHouseBalance_args(
      HouseBalanceDTO houseBalanceDTO)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHouseBalance_args(addHouseBalance_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
    }

    public addHouseBalance_args deepCopy() {
      return new addHouseBalance_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public addHouseBalance_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHouseBalance_args)
        return this.equals((addHouseBalance_args)that);
      return false;
    }

    public boolean equals(addHouseBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHouseBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHouseBalance_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHouseBalance_argsStandardSchemeFactory implements SchemeFactory {
      public addHouseBalance_argsStandardScheme getScheme() {
        return new addHouseBalance_argsStandardScheme();
      }
    }

    private static class addHouseBalance_argsStandardScheme extends StandardScheme<addHouseBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHouseBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHouseBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHouseBalance_argsTupleSchemeFactory implements SchemeFactory {
      public addHouseBalance_argsTupleScheme getScheme() {
        return new addHouseBalance_argsTupleScheme();
      }
    }

    private static class addHouseBalance_argsTupleScheme extends TupleScheme<addHouseBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class addHouseBalance_result implements org.apache.thrift.TBase<addHouseBalance_result, addHouseBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHouseBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHouseBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHouseBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHouseBalance_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHouseBalance_result.class, metaDataMap);
    }

    public addHouseBalance_result() {
    }

    public addHouseBalance_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHouseBalance_result(addHouseBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHouseBalance_result deepCopy() {
      return new addHouseBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHouseBalance_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHouseBalance_result)
        return this.equals((addHouseBalance_result)that);
      return false;
    }

    public boolean equals(addHouseBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHouseBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHouseBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHouseBalance_resultStandardSchemeFactory implements SchemeFactory {
      public addHouseBalance_resultStandardScheme getScheme() {
        return new addHouseBalance_resultStandardScheme();
      }
    }

    private static class addHouseBalance_resultStandardScheme extends StandardScheme<addHouseBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHouseBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHouseBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHouseBalance_resultTupleSchemeFactory implements SchemeFactory {
      public addHouseBalance_resultTupleScheme getScheme() {
        return new addHouseBalance_resultTupleScheme();
      }
    }

    private static class addHouseBalance_resultTupleScheme extends TupleScheme<addHouseBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceById_args implements org.apache.thrift.TBase<getHouseBalanceById_args, getHouseBalanceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceById_args.class, metaDataMap);
    }

    public getHouseBalanceById_args() {
    }

    public getHouseBalanceById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceById_args(getHouseBalanceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getHouseBalanceById_args deepCopy() {
      return new getHouseBalanceById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getHouseBalanceById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceById_args)
        return this.equals((getHouseBalanceById_args)that);
      return false;
    }

    public boolean equals(getHouseBalanceById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceById_argsStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceById_argsStandardScheme getScheme() {
        return new getHouseBalanceById_argsStandardScheme();
      }
    }

    private static class getHouseBalanceById_argsStandardScheme extends StandardScheme<getHouseBalanceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceById_argsTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceById_argsTupleScheme getScheme() {
        return new getHouseBalanceById_argsTupleScheme();
      }
    }

    private static class getHouseBalanceById_argsTupleScheme extends TupleScheme<getHouseBalanceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getHouseBalanceById_result implements org.apache.thrift.TBase<getHouseBalanceById_result, getHouseBalanceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHouseBalanceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHouseBalanceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHouseBalanceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHouseBalanceById_resultTupleSchemeFactory());
    }

    public HouseBalanceDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHouseBalanceById_result.class, metaDataMap);
    }

    public getHouseBalanceById_result() {
    }

    public getHouseBalanceById_result(
      HouseBalanceDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHouseBalanceById_result(getHouseBalanceById_result other) {
      if (other.isSetSuccess()) {
        this.success = new HouseBalanceDTO(other.success);
      }
    }

    public getHouseBalanceById_result deepCopy() {
      return new getHouseBalanceById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HouseBalanceDTO getSuccess() {
      return this.success;
    }

    public getHouseBalanceById_result setSuccess(HouseBalanceDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHouseBalanceById_result)
        return this.equals((getHouseBalanceById_result)that);
      return false;
    }

    public boolean equals(getHouseBalanceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHouseBalanceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHouseBalanceById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHouseBalanceById_resultStandardSchemeFactory implements SchemeFactory {
      public getHouseBalanceById_resultStandardScheme getScheme() {
        return new getHouseBalanceById_resultStandardScheme();
      }
    }

    private static class getHouseBalanceById_resultStandardScheme extends StandardScheme<getHouseBalanceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHouseBalanceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HouseBalanceDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHouseBalanceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHouseBalanceById_resultTupleSchemeFactory implements SchemeFactory {
      public getHouseBalanceById_resultTupleScheme getScheme() {
        return new getHouseBalanceById_resultTupleScheme();
      }
    }

    private static class getHouseBalanceById_resultTupleScheme extends TupleScheme<getHouseBalanceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHouseBalanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HouseBalanceDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHouseBalance_args implements org.apache.thrift.TBase<updateHouseBalance_args, updateHouseBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHouseBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHouseBalance_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHouseBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHouseBalance_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHouseBalance_args.class, metaDataMap);
    }

    public updateHouseBalance_args() {
    }

    public updateHouseBalance_args(
      HouseBalanceDTO houseBalanceDTO)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHouseBalance_args(updateHouseBalance_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
    }

    public updateHouseBalance_args deepCopy() {
      return new updateHouseBalance_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public updateHouseBalance_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHouseBalance_args)
        return this.equals((updateHouseBalance_args)that);
      return false;
    }

    public boolean equals(updateHouseBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHouseBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHouseBalance_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHouseBalance_argsStandardSchemeFactory implements SchemeFactory {
      public updateHouseBalance_argsStandardScheme getScheme() {
        return new updateHouseBalance_argsStandardScheme();
      }
    }

    private static class updateHouseBalance_argsStandardScheme extends StandardScheme<updateHouseBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHouseBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHouseBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHouseBalance_argsTupleSchemeFactory implements SchemeFactory {
      public updateHouseBalance_argsTupleScheme getScheme() {
        return new updateHouseBalance_argsTupleScheme();
      }
    }

    private static class updateHouseBalance_argsTupleScheme extends TupleScheme<updateHouseBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHouseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class updateHouseBalance_result implements org.apache.thrift.TBase<updateHouseBalance_result, updateHouseBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHouseBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHouseBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHouseBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHouseBalance_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHouseBalance_result.class, metaDataMap);
    }

    public updateHouseBalance_result() {
    }

    public updateHouseBalance_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHouseBalance_result(updateHouseBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHouseBalance_result deepCopy() {
      return new updateHouseBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHouseBalance_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHouseBalance_result)
        return this.equals((updateHouseBalance_result)that);
      return false;
    }

    public boolean equals(updateHouseBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHouseBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHouseBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHouseBalance_resultStandardSchemeFactory implements SchemeFactory {
      public updateHouseBalance_resultStandardScheme getScheme() {
        return new updateHouseBalance_resultStandardScheme();
      }
    }

    private static class updateHouseBalance_resultStandardScheme extends StandardScheme<updateHouseBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHouseBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHouseBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHouseBalance_resultTupleSchemeFactory implements SchemeFactory {
      public updateHouseBalance_resultTupleScheme getScheme() {
        return new updateHouseBalance_resultTupleScheme();
      }
    }

    private static class updateHouseBalance_resultTupleScheme extends TupleScheme<updateHouseBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHouseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class balanceConfirm_args implements org.apache.thrift.TBase<balanceConfirm_args, balanceConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<balanceConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("balanceConfirm_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new balanceConfirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new balanceConfirm_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(balanceConfirm_args.class, metaDataMap);
    }

    public balanceConfirm_args() {
    }

    public balanceConfirm_args(
      HouseBalanceDTO houseBalanceDTO)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public balanceConfirm_args(balanceConfirm_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
    }

    public balanceConfirm_args deepCopy() {
      return new balanceConfirm_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public balanceConfirm_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof balanceConfirm_args)
        return this.equals((balanceConfirm_args)that);
      return false;
    }

    public boolean equals(balanceConfirm_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(balanceConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("balanceConfirm_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class balanceConfirm_argsStandardSchemeFactory implements SchemeFactory {
      public balanceConfirm_argsStandardScheme getScheme() {
        return new balanceConfirm_argsStandardScheme();
      }
    }

    private static class balanceConfirm_argsStandardScheme extends StandardScheme<balanceConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, balanceConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, balanceConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class balanceConfirm_argsTupleSchemeFactory implements SchemeFactory {
      public balanceConfirm_argsTupleScheme getScheme() {
        return new balanceConfirm_argsTupleScheme();
      }
    }

    private static class balanceConfirm_argsTupleScheme extends TupleScheme<balanceConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, balanceConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, balanceConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class balanceConfirm_result implements org.apache.thrift.TBase<balanceConfirm_result, balanceConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<balanceConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("balanceConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new balanceConfirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new balanceConfirm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(balanceConfirm_result.class, metaDataMap);
    }

    public balanceConfirm_result() {
    }

    public balanceConfirm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public balanceConfirm_result(balanceConfirm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public balanceConfirm_result deepCopy() {
      return new balanceConfirm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public balanceConfirm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof balanceConfirm_result)
        return this.equals((balanceConfirm_result)that);
      return false;
    }

    public boolean equals(balanceConfirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(balanceConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("balanceConfirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class balanceConfirm_resultStandardSchemeFactory implements SchemeFactory {
      public balanceConfirm_resultStandardScheme getScheme() {
        return new balanceConfirm_resultStandardScheme();
      }
    }

    private static class balanceConfirm_resultStandardScheme extends StandardScheme<balanceConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, balanceConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, balanceConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class balanceConfirm_resultTupleSchemeFactory implements SchemeFactory {
      public balanceConfirm_resultTupleScheme getScheme() {
        return new balanceConfirm_resultTupleScheme();
      }
    }

    private static class balanceConfirm_resultTupleScheme extends TupleScheme<balanceConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, balanceConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, balanceConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleUser_args implements org.apache.thrift.TBase<getHandleUser_args, getHandleUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleUser_args");

    private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLE_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleUser_argsTupleSchemeFactory());
    }

    public int handleId; // required
    public int handleFlowId; // required
    public String loginUserName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_ID((short)1, "handleId"),
      HANDLE_FLOW_ID((short)2, "handleFlowId"),
      LOGIN_USER_NAME((short)3, "loginUserName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_ID
            return HANDLE_ID;
          case 2: // HANDLE_FLOW_ID
            return HANDLE_FLOW_ID;
          case 3: // LOGIN_USER_NAME
            return LOGIN_USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLEID_ISSET_ID = 0;
    private static final int __HANDLEFLOWID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HANDLE_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("handleFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleUser_args.class, metaDataMap);
    }

    public getHandleUser_args() {
    }

    public getHandleUser_args(
      int handleId,
      int handleFlowId,
      String loginUserName)
    {
      this();
      this.handleId = handleId;
      setHandleIdIsSet(true);
      this.handleFlowId = handleFlowId;
      setHandleFlowIdIsSet(true);
      this.loginUserName = loginUserName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleUser_args(getHandleUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.handleId = other.handleId;
      this.handleFlowId = other.handleFlowId;
      if (other.isSetLoginUserName()) {
        this.loginUserName = other.loginUserName;
      }
    }

    public getHandleUser_args deepCopy() {
      return new getHandleUser_args(this);
    }

    @Override
    public void clear() {
      setHandleIdIsSet(false);
      this.handleId = 0;
      setHandleFlowIdIsSet(false);
      this.handleFlowId = 0;
      this.loginUserName = null;
    }

    public int getHandleId() {
      return this.handleId;
    }

    public getHandleUser_args setHandleId(int handleId) {
      this.handleId = handleId;
      setHandleIdIsSet(true);
      return this;
    }

    public void unsetHandleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    public void setHandleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
    }

    public int getHandleFlowId() {
      return this.handleFlowId;
    }

    public getHandleUser_args setHandleFlowId(int handleFlowId) {
      this.handleFlowId = handleFlowId;
      setHandleFlowIdIsSet(true);
      return this;
    }

    public void unsetHandleFlowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
    }

    /** Returns true if field handleFlowId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleFlowId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
    }

    public void setHandleFlowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID, value);
    }

    public String getLoginUserName() {
      return this.loginUserName;
    }

    public getHandleUser_args setLoginUserName(String loginUserName) {
      this.loginUserName = loginUserName;
      return this;
    }

    public void unsetLoginUserName() {
      this.loginUserName = null;
    }

    /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginUserName() {
      return this.loginUserName != null;
    }

    public void setLoginUserNameIsSet(boolean value) {
      if (!value) {
        this.loginUserName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_ID:
        if (value == null) {
          unsetHandleId();
        } else {
          setHandleId((Integer)value);
        }
        break;

      case HANDLE_FLOW_ID:
        if (value == null) {
          unsetHandleFlowId();
        } else {
          setHandleFlowId((Integer)value);
        }
        break;

      case LOGIN_USER_NAME:
        if (value == null) {
          unsetLoginUserName();
        } else {
          setLoginUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_ID:
        return Integer.valueOf(getHandleId());

      case HANDLE_FLOW_ID:
        return Integer.valueOf(getHandleFlowId());

      case LOGIN_USER_NAME:
        return getLoginUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_ID:
        return isSetHandleId();
      case HANDLE_FLOW_ID:
        return isSetHandleFlowId();
      case LOGIN_USER_NAME:
        return isSetLoginUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleUser_args)
        return this.equals((getHandleUser_args)that);
      return false;
    }

    public boolean equals(getHandleUser_args that) {
      if (that == null)
        return false;

      boolean this_present_handleId = true;
      boolean that_present_handleId = true;
      if (this_present_handleId || that_present_handleId) {
        if (!(this_present_handleId && that_present_handleId))
          return false;
        if (this.handleId != that.handleId)
          return false;
      }

      boolean this_present_handleFlowId = true;
      boolean that_present_handleFlowId = true;
      if (this_present_handleFlowId || that_present_handleFlowId) {
        if (!(this_present_handleFlowId && that_present_handleFlowId))
          return false;
        if (this.handleFlowId != that.handleFlowId)
          return false;
      }

      boolean this_present_loginUserName = true && this.isSetLoginUserName();
      boolean that_present_loginUserName = true && that.isSetLoginUserName();
      if (this_present_loginUserName || that_present_loginUserName) {
        if (!(this_present_loginUserName && that_present_loginUserName))
          return false;
        if (!this.loginUserName.equals(that.loginUserName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleId = true;
      list.add(present_handleId);
      if (present_handleId)
        list.add(handleId);

      boolean present_handleFlowId = true;
      list.add(present_handleFlowId);
      if (present_handleFlowId)
        list.add(handleFlowId);

      boolean present_loginUserName = true && (isSetLoginUserName());
      list.add(present_loginUserName);
      if (present_loginUserName)
        list.add(loginUserName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandleFlowId()).compareTo(other.isSetHandleFlowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleFlowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowId, other.handleFlowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleUser_args(");
      boolean first = true;

      sb.append("handleId:");
      sb.append(this.handleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("handleFlowId:");
      sb.append(this.handleFlowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleUser_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleUser_argsStandardScheme getScheme() {
        return new getHandleUser_argsStandardScheme();
      }
    }

    private static class getHandleUser_argsStandardScheme extends StandardScheme<getHandleUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleId = iprot.readI32();
                struct.setHandleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLE_FLOW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleFlowId = iprot.readI32();
                struct.setHandleFlowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOGIN_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginUserName = iprot.readString();
                struct.setLoginUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
        oprot.writeI32(struct.handleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HANDLE_FLOW_ID_FIELD_DESC);
        oprot.writeI32(struct.handleFlowId);
        oprot.writeFieldEnd();
        if (struct.loginUserName != null) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleUser_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleUser_argsTupleScheme getScheme() {
        return new getHandleUser_argsTupleScheme();
      }
    }

    private static class getHandleUser_argsTupleScheme extends TupleScheme<getHandleUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleId()) {
          optionals.set(0);
        }
        if (struct.isSetHandleFlowId()) {
          optionals.set(1);
        }
        if (struct.isSetLoginUserName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHandleId()) {
          oprot.writeI32(struct.handleId);
        }
        if (struct.isSetHandleFlowId()) {
          oprot.writeI32(struct.handleFlowId);
        }
        if (struct.isSetLoginUserName()) {
          oprot.writeString(struct.loginUserName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.handleId = iprot.readI32();
          struct.setHandleIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handleFlowId = iprot.readI32();
          struct.setHandleFlowIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.loginUserName = iprot.readString();
          struct.setLoginUserNameIsSet(true);
        }
      }
    }

  }

  public static class getHandleUser_result implements org.apache.thrift.TBase<getHandleUser_result, getHandleUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleUser_resultTupleSchemeFactory());
    }

    public Set<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleUser_result.class, metaDataMap);
    }

    public getHandleUser_result() {
    }

    public getHandleUser_result(
      Set<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleUser_result(getHandleUser_result other) {
      if (other.isSetSuccess()) {
        Set<Map<String,String>> __this__success = new HashSet<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getHandleUser_result deepCopy() {
      return new getHandleUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new HashSet<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public Set<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getHandleUser_result setSuccess(Set<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleUser_result)
        return this.equals((getHandleUser_result)that);
      return false;
    }

    public boolean equals(getHandleUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleUser_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleUser_resultStandardScheme getScheme() {
        return new getHandleUser_resultStandardScheme();
      }
    }

    private static class getHandleUser_resultStandardScheme extends StandardScheme<getHandleUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set458 = iprot.readSetBegin();
                  struct.success = new HashSet<Map<String,String>>(2*_set458.size);
                  Map<String,String> _elem459;
                  for (int _i460 = 0; _i460 < _set458.size; ++_i460)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map461 = iprot.readMapBegin();
                      _elem459 = new HashMap<String,String>(2*_map461.size);
                      String _key462;
                      String _val463;
                      for (int _i464 = 0; _i464 < _map461.size; ++_i464)
                      {
                        _key462 = iprot.readString();
                        _val463 = iprot.readString();
                        _elem459.put(_key462, _val463);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem459);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter465 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter465.size()));
                for (Map.Entry<String, String> _iter466 : _iter465.entrySet())
                {
                  oprot.writeString(_iter466.getKey());
                  oprot.writeString(_iter466.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleUser_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleUser_resultTupleScheme getScheme() {
        return new getHandleUser_resultTupleScheme();
      }
    }

    private static class getHandleUser_resultTupleScheme extends TupleScheme<getHandleUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter467 : struct.success)
            {
              {
                oprot.writeI32(_iter467.size());
                for (Map.Entry<String, String> _iter468 : _iter467.entrySet())
                {
                  oprot.writeString(_iter468.getKey());
                  oprot.writeString(_iter468.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set469 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashSet<Map<String,String>>(2*_set469.size);
            Map<String,String> _elem470;
            for (int _i471 = 0; _i471 < _set469.size; ++_i471)
            {
              {
                org.apache.thrift.protocol.TMap _map472 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem470 = new HashMap<String,String>(2*_map472.size);
                String _key473;
                String _val474;
                for (int _i475 = 0; _i475 < _map472.size; ++_i475)
                {
                  _key473 = iprot.readString();
                  _val474 = iprot.readString();
                  _elem470.put(_key473, _val474);
                }
              }
              struct.success.add(_elem470);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProjectIdByHandleId_args implements org.apache.thrift.TBase<getProjectIdByHandleId_args, getProjectIdByHandleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectIdByHandleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectIdByHandleId_args");

    private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectIdByHandleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectIdByHandleId_argsTupleSchemeFactory());
    }

    public int handleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_ID((short)1, "handleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_ID
            return HANDLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectIdByHandleId_args.class, metaDataMap);
    }

    public getProjectIdByHandleId_args() {
    }

    public getProjectIdByHandleId_args(
      int handleId)
    {
      this();
      this.handleId = handleId;
      setHandleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectIdByHandleId_args(getProjectIdByHandleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.handleId = other.handleId;
    }

    public getProjectIdByHandleId_args deepCopy() {
      return new getProjectIdByHandleId_args(this);
    }

    @Override
    public void clear() {
      setHandleIdIsSet(false);
      this.handleId = 0;
    }

    public int getHandleId() {
      return this.handleId;
    }

    public getProjectIdByHandleId_args setHandleId(int handleId) {
      this.handleId = handleId;
      setHandleIdIsSet(true);
      return this;
    }

    public void unsetHandleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    public void setHandleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_ID:
        if (value == null) {
          unsetHandleId();
        } else {
          setHandleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_ID:
        return Integer.valueOf(getHandleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_ID:
        return isSetHandleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectIdByHandleId_args)
        return this.equals((getProjectIdByHandleId_args)that);
      return false;
    }

    public boolean equals(getProjectIdByHandleId_args that) {
      if (that == null)
        return false;

      boolean this_present_handleId = true;
      boolean that_present_handleId = true;
      if (this_present_handleId || that_present_handleId) {
        if (!(this_present_handleId && that_present_handleId))
          return false;
        if (this.handleId != that.handleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleId = true;
      list.add(present_handleId);
      if (present_handleId)
        list.add(handleId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectIdByHandleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectIdByHandleId_args(");
      boolean first = true;

      sb.append("handleId:");
      sb.append(this.handleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectIdByHandleId_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectIdByHandleId_argsStandardScheme getScheme() {
        return new getProjectIdByHandleId_argsStandardScheme();
      }
    }

    private static class getProjectIdByHandleId_argsStandardScheme extends StandardScheme<getProjectIdByHandleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectIdByHandleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleId = iprot.readI32();
                struct.setHandleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectIdByHandleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
        oprot.writeI32(struct.handleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectIdByHandleId_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectIdByHandleId_argsTupleScheme getScheme() {
        return new getProjectIdByHandleId_argsTupleScheme();
      }
    }

    private static class getProjectIdByHandleId_argsTupleScheme extends TupleScheme<getProjectIdByHandleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectIdByHandleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleId()) {
          oprot.writeI32(struct.handleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectIdByHandleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleId = iprot.readI32();
          struct.setHandleIdIsSet(true);
        }
      }
    }

  }

  public static class getProjectIdByHandleId_result implements org.apache.thrift.TBase<getProjectIdByHandleId_result, getProjectIdByHandleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectIdByHandleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectIdByHandleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectIdByHandleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectIdByHandleId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectIdByHandleId_result.class, metaDataMap);
    }

    public getProjectIdByHandleId_result() {
    }

    public getProjectIdByHandleId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectIdByHandleId_result(getProjectIdByHandleId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getProjectIdByHandleId_result deepCopy() {
      return new getProjectIdByHandleId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getProjectIdByHandleId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectIdByHandleId_result)
        return this.equals((getProjectIdByHandleId_result)that);
      return false;
    }

    public boolean equals(getProjectIdByHandleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectIdByHandleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectIdByHandleId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectIdByHandleId_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectIdByHandleId_resultStandardScheme getScheme() {
        return new getProjectIdByHandleId_resultStandardScheme();
      }
    }

    private static class getProjectIdByHandleId_resultStandardScheme extends StandardScheme<getProjectIdByHandleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectIdByHandleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectIdByHandleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectIdByHandleId_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectIdByHandleId_resultTupleScheme getScheme() {
        return new getProjectIdByHandleId_resultTupleScheme();
      }
    }

    private static class getProjectIdByHandleId_resultTupleScheme extends TupleScheme<getProjectIdByHandleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectIdByHandleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectIdByHandleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllRefundDetails_args implements org.apache.thrift.TBase<findAllRefundDetails_args, findAllRefundDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundDetails_args");

    private static final org.apache.thrift.protocol.TField REFUND_DETAILS_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDetailsDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundDetails_argsTupleSchemeFactory());
    }

    public RefundDetailsDTO refundDetailsDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_DETAILS_DTO((short)1, "refundDetailsDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_DETAILS_DTO
            return REFUND_DETAILS_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_DETAILS_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundDetailsDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundDetails_args.class, metaDataMap);
    }

    public findAllRefundDetails_args() {
    }

    public findAllRefundDetails_args(
      RefundDetailsDTO refundDetailsDTO)
    {
      this();
      this.refundDetailsDTO = refundDetailsDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundDetails_args(findAllRefundDetails_args other) {
      if (other.isSetRefundDetailsDTO()) {
        this.refundDetailsDTO = new RefundDetailsDTO(other.refundDetailsDTO);
      }
    }

    public findAllRefundDetails_args deepCopy() {
      return new findAllRefundDetails_args(this);
    }

    @Override
    public void clear() {
      this.refundDetailsDTO = null;
    }

    public RefundDetailsDTO getRefundDetailsDTO() {
      return this.refundDetailsDTO;
    }

    public findAllRefundDetails_args setRefundDetailsDTO(RefundDetailsDTO refundDetailsDTO) {
      this.refundDetailsDTO = refundDetailsDTO;
      return this;
    }

    public void unsetRefundDetailsDTO() {
      this.refundDetailsDTO = null;
    }

    /** Returns true if field refundDetailsDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundDetailsDTO() {
      return this.refundDetailsDTO != null;
    }

    public void setRefundDetailsDTOIsSet(boolean value) {
      if (!value) {
        this.refundDetailsDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        if (value == null) {
          unsetRefundDetailsDTO();
        } else {
          setRefundDetailsDTO((RefundDetailsDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        return getRefundDetailsDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_DETAILS_DTO:
        return isSetRefundDetailsDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundDetails_args)
        return this.equals((findAllRefundDetails_args)that);
      return false;
    }

    public boolean equals(findAllRefundDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_refundDetailsDTO = true && this.isSetRefundDetailsDTO();
      boolean that_present_refundDetailsDTO = true && that.isSetRefundDetailsDTO();
      if (this_present_refundDetailsDTO || that_present_refundDetailsDTO) {
        if (!(this_present_refundDetailsDTO && that_present_refundDetailsDTO))
          return false;
        if (!this.refundDetailsDTO.equals(that.refundDetailsDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundDetailsDTO = true && (isSetRefundDetailsDTO());
      list.add(present_refundDetailsDTO);
      if (present_refundDetailsDTO)
        list.add(refundDetailsDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundDetailsDTO()).compareTo(other.isSetRefundDetailsDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundDetailsDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDetailsDTO, other.refundDetailsDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundDetails_args(");
      boolean first = true;

      sb.append("refundDetailsDTO:");
      if (this.refundDetailsDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundDetailsDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundDetailsDTO != null) {
        refundDetailsDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundDetails_argsStandardSchemeFactory implements SchemeFactory {
      public findAllRefundDetails_argsStandardScheme getScheme() {
        return new findAllRefundDetails_argsStandardScheme();
      }
    }

    private static class findAllRefundDetails_argsStandardScheme extends StandardScheme<findAllRefundDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_DETAILS_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundDetailsDTO = new RefundDetailsDTO();
                struct.refundDetailsDTO.read(iprot);
                struct.setRefundDetailsDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundDetailsDTO != null) {
          oprot.writeFieldBegin(REFUND_DETAILS_DTO_FIELD_DESC);
          struct.refundDetailsDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundDetails_argsTupleSchemeFactory implements SchemeFactory {
      public findAllRefundDetails_argsTupleScheme getScheme() {
        return new findAllRefundDetails_argsTupleScheme();
      }
    }

    private static class findAllRefundDetails_argsTupleScheme extends TupleScheme<findAllRefundDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundDetailsDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundDetailsDTO()) {
          struct.refundDetailsDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundDetailsDTO = new RefundDetailsDTO();
          struct.refundDetailsDTO.read(iprot);
          struct.setRefundDetailsDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllRefundDetails_result implements org.apache.thrift.TBase<findAllRefundDetails_result, findAllRefundDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundDetails_resultTupleSchemeFactory());
    }

    public List<RefundDetailsDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundDetails_result.class, metaDataMap);
    }

    public findAllRefundDetails_result() {
    }

    public findAllRefundDetails_result(
      List<RefundDetailsDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundDetails_result(findAllRefundDetails_result other) {
      if (other.isSetSuccess()) {
        List<RefundDetailsDTO> __this__success = new ArrayList<RefundDetailsDTO>(other.success.size());
        for (RefundDetailsDTO other_element : other.success) {
          __this__success.add(new RefundDetailsDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllRefundDetails_result deepCopy() {
      return new findAllRefundDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundDetailsDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundDetailsDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundDetailsDTO>();
      }
      this.success.add(elem);
    }

    public List<RefundDetailsDTO> getSuccess() {
      return this.success;
    }

    public findAllRefundDetails_result setSuccess(List<RefundDetailsDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundDetailsDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundDetails_result)
        return this.equals((findAllRefundDetails_result)that);
      return false;
    }

    public boolean equals(findAllRefundDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundDetails_resultStandardSchemeFactory implements SchemeFactory {
      public findAllRefundDetails_resultStandardScheme getScheme() {
        return new findAllRefundDetails_resultStandardScheme();
      }
    }

    private static class findAllRefundDetails_resultStandardScheme extends StandardScheme<findAllRefundDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list476 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundDetailsDTO>(_list476.size);
                  RefundDetailsDTO _elem477;
                  for (int _i478 = 0; _i478 < _list476.size; ++_i478)
                  {
                    _elem477 = new RefundDetailsDTO();
                    _elem477.read(iprot);
                    struct.success.add(_elem477);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundDetailsDTO _iter479 : struct.success)
            {
              _iter479.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundDetails_resultTupleSchemeFactory implements SchemeFactory {
      public findAllRefundDetails_resultTupleScheme getScheme() {
        return new findAllRefundDetails_resultTupleScheme();
      }
    }

    private static class findAllRefundDetails_resultTupleScheme extends TupleScheme<findAllRefundDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundDetailsDTO _iter480 : struct.success)
            {
              _iter480.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list481 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundDetailsDTO>(_list481.size);
            RefundDetailsDTO _elem482;
            for (int _i483 = 0; _i483 < _list481.size; ++_i483)
            {
              _elem482 = new RefundDetailsDTO();
              _elem482.read(iprot);
              struct.success.add(_elem482);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsTotal_args implements org.apache.thrift.TBase<getRefundDetailsTotal_args, getRefundDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField REFUND_DETAILS_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDetailsDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsTotal_argsTupleSchemeFactory());
    }

    public RefundDetailsDTO refundDetailsDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_DETAILS_DTO((short)1, "refundDetailsDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_DETAILS_DTO
            return REFUND_DETAILS_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_DETAILS_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundDetailsDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsTotal_args.class, metaDataMap);
    }

    public getRefundDetailsTotal_args() {
    }

    public getRefundDetailsTotal_args(
      RefundDetailsDTO refundDetailsDTO)
    {
      this();
      this.refundDetailsDTO = refundDetailsDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsTotal_args(getRefundDetailsTotal_args other) {
      if (other.isSetRefundDetailsDTO()) {
        this.refundDetailsDTO = new RefundDetailsDTO(other.refundDetailsDTO);
      }
    }

    public getRefundDetailsTotal_args deepCopy() {
      return new getRefundDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.refundDetailsDTO = null;
    }

    public RefundDetailsDTO getRefundDetailsDTO() {
      return this.refundDetailsDTO;
    }

    public getRefundDetailsTotal_args setRefundDetailsDTO(RefundDetailsDTO refundDetailsDTO) {
      this.refundDetailsDTO = refundDetailsDTO;
      return this;
    }

    public void unsetRefundDetailsDTO() {
      this.refundDetailsDTO = null;
    }

    /** Returns true if field refundDetailsDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundDetailsDTO() {
      return this.refundDetailsDTO != null;
    }

    public void setRefundDetailsDTOIsSet(boolean value) {
      if (!value) {
        this.refundDetailsDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        if (value == null) {
          unsetRefundDetailsDTO();
        } else {
          setRefundDetailsDTO((RefundDetailsDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        return getRefundDetailsDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_DETAILS_DTO:
        return isSetRefundDetailsDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsTotal_args)
        return this.equals((getRefundDetailsTotal_args)that);
      return false;
    }

    public boolean equals(getRefundDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_refundDetailsDTO = true && this.isSetRefundDetailsDTO();
      boolean that_present_refundDetailsDTO = true && that.isSetRefundDetailsDTO();
      if (this_present_refundDetailsDTO || that_present_refundDetailsDTO) {
        if (!(this_present_refundDetailsDTO && that_present_refundDetailsDTO))
          return false;
        if (!this.refundDetailsDTO.equals(that.refundDetailsDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundDetailsDTO = true && (isSetRefundDetailsDTO());
      list.add(present_refundDetailsDTO);
      if (present_refundDetailsDTO)
        list.add(refundDetailsDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundDetailsDTO()).compareTo(other.isSetRefundDetailsDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundDetailsDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDetailsDTO, other.refundDetailsDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsTotal_args(");
      boolean first = true;

      sb.append("refundDetailsDTO:");
      if (this.refundDetailsDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundDetailsDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundDetailsDTO != null) {
        refundDetailsDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsTotal_argsStandardScheme getScheme() {
        return new getRefundDetailsTotal_argsStandardScheme();
      }
    }

    private static class getRefundDetailsTotal_argsStandardScheme extends StandardScheme<getRefundDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_DETAILS_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundDetailsDTO = new RefundDetailsDTO();
                struct.refundDetailsDTO.read(iprot);
                struct.setRefundDetailsDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundDetailsDTO != null) {
          oprot.writeFieldBegin(REFUND_DETAILS_DTO_FIELD_DESC);
          struct.refundDetailsDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsTotal_argsTupleScheme getScheme() {
        return new getRefundDetailsTotal_argsTupleScheme();
      }
    }

    private static class getRefundDetailsTotal_argsTupleScheme extends TupleScheme<getRefundDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundDetailsDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundDetailsDTO()) {
          struct.refundDetailsDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundDetailsDTO = new RefundDetailsDTO();
          struct.refundDetailsDTO.read(iprot);
          struct.setRefundDetailsDTOIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsTotal_result implements org.apache.thrift.TBase<getRefundDetailsTotal_result, getRefundDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsTotal_result.class, metaDataMap);
    }

    public getRefundDetailsTotal_result() {
    }

    public getRefundDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsTotal_result(getRefundDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRefundDetailsTotal_result deepCopy() {
      return new getRefundDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRefundDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsTotal_result)
        return this.equals((getRefundDetailsTotal_result)that);
      return false;
    }

    public boolean equals(getRefundDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsTotal_resultStandardScheme getScheme() {
        return new getRefundDetailsTotal_resultStandardScheme();
      }
    }

    private static class getRefundDetailsTotal_resultStandardScheme extends StandardScheme<getRefundDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsTotal_resultTupleScheme getScheme() {
        return new getRefundDetailsTotal_resultTupleScheme();
      }
    }

    private static class getRefundDetailsTotal_resultTupleScheme extends TupleScheme<getRefundDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsListByProjectId_args implements org.apache.thrift.TBase<getRefundDetailsListByProjectId_args, getRefundDetailsListByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsListByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsListByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REFUND_PROS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPros", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsListByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsListByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public List<Integer> refundPros; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      REFUND_PROS((short)2, "refundPros");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // REFUND_PROS
            return REFUND_PROS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REFUND_PROS, new org.apache.thrift.meta_data.FieldMetaData("refundPros", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsListByProjectId_args.class, metaDataMap);
    }

    public getRefundDetailsListByProjectId_args() {
    }

    public getRefundDetailsListByProjectId_args(
      int projectId,
      List<Integer> refundPros)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.refundPros = refundPros;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsListByProjectId_args(getRefundDetailsListByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetRefundPros()) {
        List<Integer> __this__refundPros = new ArrayList<Integer>(other.refundPros);
        this.refundPros = __this__refundPros;
      }
    }

    public getRefundDetailsListByProjectId_args deepCopy() {
      return new getRefundDetailsListByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.refundPros = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getRefundDetailsListByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getRefundProsSize() {
      return (this.refundPros == null) ? 0 : this.refundPros.size();
    }

    public java.util.Iterator<Integer> getRefundProsIterator() {
      return (this.refundPros == null) ? null : this.refundPros.iterator();
    }

    public void addToRefundPros(int elem) {
      if (this.refundPros == null) {
        this.refundPros = new ArrayList<Integer>();
      }
      this.refundPros.add(elem);
    }

    public List<Integer> getRefundPros() {
      return this.refundPros;
    }

    public getRefundDetailsListByProjectId_args setRefundPros(List<Integer> refundPros) {
      this.refundPros = refundPros;
      return this;
    }

    public void unsetRefundPros() {
      this.refundPros = null;
    }

    /** Returns true if field refundPros is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundPros() {
      return this.refundPros != null;
    }

    public void setRefundProsIsSet(boolean value) {
      if (!value) {
        this.refundPros = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case REFUND_PROS:
        if (value == null) {
          unsetRefundPros();
        } else {
          setRefundPros((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case REFUND_PROS:
        return getRefundPros();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case REFUND_PROS:
        return isSetRefundPros();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsListByProjectId_args)
        return this.equals((getRefundDetailsListByProjectId_args)that);
      return false;
    }

    public boolean equals(getRefundDetailsListByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_refundPros = true && this.isSetRefundPros();
      boolean that_present_refundPros = true && that.isSetRefundPros();
      if (this_present_refundPros || that_present_refundPros) {
        if (!(this_present_refundPros && that_present_refundPros))
          return false;
        if (!this.refundPros.equals(that.refundPros))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_refundPros = true && (isSetRefundPros());
      list.add(present_refundPros);
      if (present_refundPros)
        list.add(refundPros);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsListByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefundPros()).compareTo(other.isSetRefundPros());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundPros()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPros, other.refundPros);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsListByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("refundPros:");
      if (this.refundPros == null) {
        sb.append("null");
      } else {
        sb.append(this.refundPros);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsListByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsListByProjectId_argsStandardScheme getScheme() {
        return new getRefundDetailsListByProjectId_argsStandardScheme();
      }
    }

    private static class getRefundDetailsListByProjectId_argsStandardScheme extends StandardScheme<getRefundDetailsListByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsListByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REFUND_PROS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list484 = iprot.readListBegin();
                  struct.refundPros = new ArrayList<Integer>(_list484.size);
                  int _elem485;
                  for (int _i486 = 0; _i486 < _list484.size; ++_i486)
                  {
                    _elem485 = iprot.readI32();
                    struct.refundPros.add(_elem485);
                  }
                  iprot.readListEnd();
                }
                struct.setRefundProsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsListByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.refundPros != null) {
          oprot.writeFieldBegin(REFUND_PROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.refundPros.size()));
            for (int _iter487 : struct.refundPros)
            {
              oprot.writeI32(_iter487);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsListByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsListByProjectId_argsTupleScheme getScheme() {
        return new getRefundDetailsListByProjectId_argsTupleScheme();
      }
    }

    private static class getRefundDetailsListByProjectId_argsTupleScheme extends TupleScheme<getRefundDetailsListByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsListByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetRefundPros()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetRefundPros()) {
          {
            oprot.writeI32(struct.refundPros.size());
            for (int _iter488 : struct.refundPros)
            {
              oprot.writeI32(_iter488);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsListByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list489 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.refundPros = new ArrayList<Integer>(_list489.size);
            int _elem490;
            for (int _i491 = 0; _i491 < _list489.size; ++_i491)
            {
              _elem490 = iprot.readI32();
              struct.refundPros.add(_elem490);
            }
          }
          struct.setRefundProsIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsListByProjectId_result implements org.apache.thrift.TBase<getRefundDetailsListByProjectId_result, getRefundDetailsListByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsListByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsListByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsListByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsListByProjectId_resultTupleSchemeFactory());
    }

    public List<RefundDetailsDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsListByProjectId_result.class, metaDataMap);
    }

    public getRefundDetailsListByProjectId_result() {
    }

    public getRefundDetailsListByProjectId_result(
      List<RefundDetailsDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsListByProjectId_result(getRefundDetailsListByProjectId_result other) {
      if (other.isSetSuccess()) {
        List<RefundDetailsDTO> __this__success = new ArrayList<RefundDetailsDTO>(other.success.size());
        for (RefundDetailsDTO other_element : other.success) {
          __this__success.add(new RefundDetailsDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRefundDetailsListByProjectId_result deepCopy() {
      return new getRefundDetailsListByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundDetailsDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundDetailsDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundDetailsDTO>();
      }
      this.success.add(elem);
    }

    public List<RefundDetailsDTO> getSuccess() {
      return this.success;
    }

    public getRefundDetailsListByProjectId_result setSuccess(List<RefundDetailsDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundDetailsDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsListByProjectId_result)
        return this.equals((getRefundDetailsListByProjectId_result)that);
      return false;
    }

    public boolean equals(getRefundDetailsListByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsListByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsListByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsListByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsListByProjectId_resultStandardScheme getScheme() {
        return new getRefundDetailsListByProjectId_resultStandardScheme();
      }
    }

    private static class getRefundDetailsListByProjectId_resultStandardScheme extends StandardScheme<getRefundDetailsListByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsListByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list492 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundDetailsDTO>(_list492.size);
                  RefundDetailsDTO _elem493;
                  for (int _i494 = 0; _i494 < _list492.size; ++_i494)
                  {
                    _elem493 = new RefundDetailsDTO();
                    _elem493.read(iprot);
                    struct.success.add(_elem493);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsListByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundDetailsDTO _iter495 : struct.success)
            {
              _iter495.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsListByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsListByProjectId_resultTupleScheme getScheme() {
        return new getRefundDetailsListByProjectId_resultTupleScheme();
      }
    }

    private static class getRefundDetailsListByProjectId_resultTupleScheme extends TupleScheme<getRefundDetailsListByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsListByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundDetailsDTO _iter496 : struct.success)
            {
              _iter496.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsListByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list497 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundDetailsDTO>(_list497.size);
            RefundDetailsDTO _elem498;
            for (int _i499 = 0; _i499 < _list497.size; ++_i499)
            {
              _elem498 = new RefundDetailsDTO();
              _elem498.read(iprot);
              struct.success.add(_elem498);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRefundDetails_args implements org.apache.thrift.TBase<addRefundDetails_args, addRefundDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundDetails_args");

    private static final org.apache.thrift.protocol.TField REFUND_DETAILS_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDetailsDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundDetails_argsTupleSchemeFactory());
    }

    public RefundDetailsDTO refundDetailsDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_DETAILS_DTO((short)1, "refundDetailsDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_DETAILS_DTO
            return REFUND_DETAILS_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_DETAILS_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundDetailsDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundDetails_args.class, metaDataMap);
    }

    public addRefundDetails_args() {
    }

    public addRefundDetails_args(
      RefundDetailsDTO refundDetailsDTO)
    {
      this();
      this.refundDetailsDTO = refundDetailsDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundDetails_args(addRefundDetails_args other) {
      if (other.isSetRefundDetailsDTO()) {
        this.refundDetailsDTO = new RefundDetailsDTO(other.refundDetailsDTO);
      }
    }

    public addRefundDetails_args deepCopy() {
      return new addRefundDetails_args(this);
    }

    @Override
    public void clear() {
      this.refundDetailsDTO = null;
    }

    public RefundDetailsDTO getRefundDetailsDTO() {
      return this.refundDetailsDTO;
    }

    public addRefundDetails_args setRefundDetailsDTO(RefundDetailsDTO refundDetailsDTO) {
      this.refundDetailsDTO = refundDetailsDTO;
      return this;
    }

    public void unsetRefundDetailsDTO() {
      this.refundDetailsDTO = null;
    }

    /** Returns true if field refundDetailsDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundDetailsDTO() {
      return this.refundDetailsDTO != null;
    }

    public void setRefundDetailsDTOIsSet(boolean value) {
      if (!value) {
        this.refundDetailsDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        if (value == null) {
          unsetRefundDetailsDTO();
        } else {
          setRefundDetailsDTO((RefundDetailsDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        return getRefundDetailsDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_DETAILS_DTO:
        return isSetRefundDetailsDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundDetails_args)
        return this.equals((addRefundDetails_args)that);
      return false;
    }

    public boolean equals(addRefundDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_refundDetailsDTO = true && this.isSetRefundDetailsDTO();
      boolean that_present_refundDetailsDTO = true && that.isSetRefundDetailsDTO();
      if (this_present_refundDetailsDTO || that_present_refundDetailsDTO) {
        if (!(this_present_refundDetailsDTO && that_present_refundDetailsDTO))
          return false;
        if (!this.refundDetailsDTO.equals(that.refundDetailsDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundDetailsDTO = true && (isSetRefundDetailsDTO());
      list.add(present_refundDetailsDTO);
      if (present_refundDetailsDTO)
        list.add(refundDetailsDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundDetailsDTO()).compareTo(other.isSetRefundDetailsDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundDetailsDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDetailsDTO, other.refundDetailsDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundDetails_args(");
      boolean first = true;

      sb.append("refundDetailsDTO:");
      if (this.refundDetailsDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundDetailsDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundDetailsDTO != null) {
        refundDetailsDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addRefundDetails_argsStandardScheme getScheme() {
        return new addRefundDetails_argsStandardScheme();
      }
    }

    private static class addRefundDetails_argsStandardScheme extends StandardScheme<addRefundDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_DETAILS_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundDetailsDTO = new RefundDetailsDTO();
                struct.refundDetailsDTO.read(iprot);
                struct.setRefundDetailsDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundDetailsDTO != null) {
          oprot.writeFieldBegin(REFUND_DETAILS_DTO_FIELD_DESC);
          struct.refundDetailsDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addRefundDetails_argsTupleScheme getScheme() {
        return new addRefundDetails_argsTupleScheme();
      }
    }

    private static class addRefundDetails_argsTupleScheme extends TupleScheme<addRefundDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundDetailsDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundDetailsDTO()) {
          struct.refundDetailsDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundDetailsDTO = new RefundDetailsDTO();
          struct.refundDetailsDTO.read(iprot);
          struct.setRefundDetailsDTOIsSet(true);
        }
      }
    }

  }

  public static class addRefundDetails_result implements org.apache.thrift.TBase<addRefundDetails_result, addRefundDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundDetails_result.class, metaDataMap);
    }

    public addRefundDetails_result() {
    }

    public addRefundDetails_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundDetails_result(addRefundDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRefundDetails_result deepCopy() {
      return new addRefundDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addRefundDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundDetails_result)
        return this.equals((addRefundDetails_result)that);
      return false;
    }

    public boolean equals(addRefundDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addRefundDetails_resultStandardScheme getScheme() {
        return new addRefundDetails_resultStandardScheme();
      }
    }

    private static class addRefundDetails_resultStandardScheme extends StandardScheme<addRefundDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addRefundDetails_resultTupleScheme getScheme() {
        return new addRefundDetails_resultTupleScheme();
      }
    }

    private static class addRefundDetails_resultTupleScheme extends TupleScheme<addRefundDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsById_args implements org.apache.thrift.TBase<getRefundDetailsById_args, getRefundDetailsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsById_args.class, metaDataMap);
    }

    public getRefundDetailsById_args() {
    }

    public getRefundDetailsById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsById_args(getRefundDetailsById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getRefundDetailsById_args deepCopy() {
      return new getRefundDetailsById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getRefundDetailsById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsById_args)
        return this.equals((getRefundDetailsById_args)that);
      return false;
    }

    public boolean equals(getRefundDetailsById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsById_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsById_argsStandardScheme getScheme() {
        return new getRefundDetailsById_argsStandardScheme();
      }
    }

    private static class getRefundDetailsById_argsStandardScheme extends StandardScheme<getRefundDetailsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsById_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsById_argsTupleScheme getScheme() {
        return new getRefundDetailsById_argsTupleScheme();
      }
    }

    private static class getRefundDetailsById_argsTupleScheme extends TupleScheme<getRefundDetailsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getRefundDetailsById_result implements org.apache.thrift.TBase<getRefundDetailsById_result, getRefundDetailsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundDetailsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundDetailsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundDetailsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundDetailsById_resultTupleSchemeFactory());
    }

    public RefundDetailsDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundDetailsById_result.class, metaDataMap);
    }

    public getRefundDetailsById_result() {
    }

    public getRefundDetailsById_result(
      RefundDetailsDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundDetailsById_result(getRefundDetailsById_result other) {
      if (other.isSetSuccess()) {
        this.success = new RefundDetailsDTO(other.success);
      }
    }

    public getRefundDetailsById_result deepCopy() {
      return new getRefundDetailsById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RefundDetailsDTO getSuccess() {
      return this.success;
    }

    public getRefundDetailsById_result setSuccess(RefundDetailsDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RefundDetailsDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundDetailsById_result)
        return this.equals((getRefundDetailsById_result)that);
      return false;
    }

    public boolean equals(getRefundDetailsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundDetailsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundDetailsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundDetailsById_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundDetailsById_resultStandardScheme getScheme() {
        return new getRefundDetailsById_resultStandardScheme();
      }
    }

    private static class getRefundDetailsById_resultStandardScheme extends StandardScheme<getRefundDetailsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundDetailsById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RefundDetailsDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundDetailsById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundDetailsById_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundDetailsById_resultTupleScheme getScheme() {
        return new getRefundDetailsById_resultTupleScheme();
      }
    }

    private static class getRefundDetailsById_resultTupleScheme extends TupleScheme<getRefundDetailsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundDetailsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RefundDetailsDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRefundDetails_args implements org.apache.thrift.TBase<updateRefundDetails_args, updateRefundDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundDetails_args");

    private static final org.apache.thrift.protocol.TField REFUND_DETAILS_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDetailsDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundDetails_argsTupleSchemeFactory());
    }

    public RefundDetailsDTO refundDetailsDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_DETAILS_DTO((short)1, "refundDetailsDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_DETAILS_DTO
            return REFUND_DETAILS_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_DETAILS_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundDetailsDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetailsDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundDetails_args.class, metaDataMap);
    }

    public updateRefundDetails_args() {
    }

    public updateRefundDetails_args(
      RefundDetailsDTO refundDetailsDTO)
    {
      this();
      this.refundDetailsDTO = refundDetailsDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundDetails_args(updateRefundDetails_args other) {
      if (other.isSetRefundDetailsDTO()) {
        this.refundDetailsDTO = new RefundDetailsDTO(other.refundDetailsDTO);
      }
    }

    public updateRefundDetails_args deepCopy() {
      return new updateRefundDetails_args(this);
    }

    @Override
    public void clear() {
      this.refundDetailsDTO = null;
    }

    public RefundDetailsDTO getRefundDetailsDTO() {
      return this.refundDetailsDTO;
    }

    public updateRefundDetails_args setRefundDetailsDTO(RefundDetailsDTO refundDetailsDTO) {
      this.refundDetailsDTO = refundDetailsDTO;
      return this;
    }

    public void unsetRefundDetailsDTO() {
      this.refundDetailsDTO = null;
    }

    /** Returns true if field refundDetailsDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundDetailsDTO() {
      return this.refundDetailsDTO != null;
    }

    public void setRefundDetailsDTOIsSet(boolean value) {
      if (!value) {
        this.refundDetailsDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        if (value == null) {
          unsetRefundDetailsDTO();
        } else {
          setRefundDetailsDTO((RefundDetailsDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_DETAILS_DTO:
        return getRefundDetailsDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_DETAILS_DTO:
        return isSetRefundDetailsDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundDetails_args)
        return this.equals((updateRefundDetails_args)that);
      return false;
    }

    public boolean equals(updateRefundDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_refundDetailsDTO = true && this.isSetRefundDetailsDTO();
      boolean that_present_refundDetailsDTO = true && that.isSetRefundDetailsDTO();
      if (this_present_refundDetailsDTO || that_present_refundDetailsDTO) {
        if (!(this_present_refundDetailsDTO && that_present_refundDetailsDTO))
          return false;
        if (!this.refundDetailsDTO.equals(that.refundDetailsDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundDetailsDTO = true && (isSetRefundDetailsDTO());
      list.add(present_refundDetailsDTO);
      if (present_refundDetailsDTO)
        list.add(refundDetailsDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundDetailsDTO()).compareTo(other.isSetRefundDetailsDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundDetailsDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDetailsDTO, other.refundDetailsDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundDetails_args(");
      boolean first = true;

      sb.append("refundDetailsDTO:");
      if (this.refundDetailsDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundDetailsDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundDetailsDTO != null) {
        refundDetailsDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateRefundDetails_argsStandardScheme getScheme() {
        return new updateRefundDetails_argsStandardScheme();
      }
    }

    private static class updateRefundDetails_argsStandardScheme extends StandardScheme<updateRefundDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_DETAILS_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundDetailsDTO = new RefundDetailsDTO();
                struct.refundDetailsDTO.read(iprot);
                struct.setRefundDetailsDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundDetailsDTO != null) {
          oprot.writeFieldBegin(REFUND_DETAILS_DTO_FIELD_DESC);
          struct.refundDetailsDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateRefundDetails_argsTupleScheme getScheme() {
        return new updateRefundDetails_argsTupleScheme();
      }
    }

    private static class updateRefundDetails_argsTupleScheme extends TupleScheme<updateRefundDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundDetailsDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundDetailsDTO()) {
          struct.refundDetailsDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundDetailsDTO = new RefundDetailsDTO();
          struct.refundDetailsDTO.read(iprot);
          struct.setRefundDetailsDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRefundDetails_result implements org.apache.thrift.TBase<updateRefundDetails_result, updateRefundDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundDetails_result.class, metaDataMap);
    }

    public updateRefundDetails_result() {
    }

    public updateRefundDetails_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundDetails_result(updateRefundDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateRefundDetails_result deepCopy() {
      return new updateRefundDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRefundDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundDetails_result)
        return this.equals((updateRefundDetails_result)that);
      return false;
    }

    public boolean equals(updateRefundDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateRefundDetails_resultStandardScheme getScheme() {
        return new updateRefundDetails_resultStandardScheme();
      }
    }

    private static class updateRefundDetails_resultStandardScheme extends StandardScheme<updateRefundDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateRefundDetails_resultTupleScheme getScheme() {
        return new updateRefundDetails_resultTupleScheme();
      }
    }

    private static class updateRefundDetails_resultTupleScheme extends TupleScheme<updateRefundDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleFlow_args implements org.apache.thrift.TBase<findAllHandleFlow_args, findAllHandleFlow_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleFlow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleFlow_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FLOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleFlow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleFlow_argsTupleSchemeFactory());
    }

    public HandleFlowDTO handleFlowDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_FLOW_DTO((short)1, "handleFlowDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_FLOW_DTO
            return HANDLE_FLOW_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_FLOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleFlowDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleFlowDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleFlow_args.class, metaDataMap);
    }

    public findAllHandleFlow_args() {
    }

    public findAllHandleFlow_args(
      HandleFlowDTO handleFlowDTO)
    {
      this();
      this.handleFlowDTO = handleFlowDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleFlow_args(findAllHandleFlow_args other) {
      if (other.isSetHandleFlowDTO()) {
        this.handleFlowDTO = new HandleFlowDTO(other.handleFlowDTO);
      }
    }

    public findAllHandleFlow_args deepCopy() {
      return new findAllHandleFlow_args(this);
    }

    @Override
    public void clear() {
      this.handleFlowDTO = null;
    }

    public HandleFlowDTO getHandleFlowDTO() {
      return this.handleFlowDTO;
    }

    public findAllHandleFlow_args setHandleFlowDTO(HandleFlowDTO handleFlowDTO) {
      this.handleFlowDTO = handleFlowDTO;
      return this;
    }

    public void unsetHandleFlowDTO() {
      this.handleFlowDTO = null;
    }

    /** Returns true if field handleFlowDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleFlowDTO() {
      return this.handleFlowDTO != null;
    }

    public void setHandleFlowDTOIsSet(boolean value) {
      if (!value) {
        this.handleFlowDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_FLOW_DTO:
        if (value == null) {
          unsetHandleFlowDTO();
        } else {
          setHandleFlowDTO((HandleFlowDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_FLOW_DTO:
        return getHandleFlowDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_FLOW_DTO:
        return isSetHandleFlowDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleFlow_args)
        return this.equals((findAllHandleFlow_args)that);
      return false;
    }

    public boolean equals(findAllHandleFlow_args that) {
      if (that == null)
        return false;

      boolean this_present_handleFlowDTO = true && this.isSetHandleFlowDTO();
      boolean that_present_handleFlowDTO = true && that.isSetHandleFlowDTO();
      if (this_present_handleFlowDTO || that_present_handleFlowDTO) {
        if (!(this_present_handleFlowDTO && that_present_handleFlowDTO))
          return false;
        if (!this.handleFlowDTO.equals(that.handleFlowDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleFlowDTO = true && (isSetHandleFlowDTO());
      list.add(present_handleFlowDTO);
      if (present_handleFlowDTO)
        list.add(handleFlowDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleFlow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleFlowDTO()).compareTo(other.isSetHandleFlowDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleFlowDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowDTO, other.handleFlowDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleFlow_args(");
      boolean first = true;

      sb.append("handleFlowDTO:");
      if (this.handleFlowDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleFlowDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleFlowDTO != null) {
        handleFlowDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleFlow_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHandleFlow_argsStandardScheme getScheme() {
        return new findAllHandleFlow_argsStandardScheme();
      }
    }

    private static class findAllHandleFlow_argsStandardScheme extends StandardScheme<findAllHandleFlow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleFlow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_FLOW_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleFlowDTO = new HandleFlowDTO();
                struct.handleFlowDTO.read(iprot);
                struct.setHandleFlowDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleFlow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleFlowDTO != null) {
          oprot.writeFieldBegin(HANDLE_FLOW_DTO_FIELD_DESC);
          struct.handleFlowDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleFlow_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHandleFlow_argsTupleScheme getScheme() {
        return new findAllHandleFlow_argsTupleScheme();
      }
    }

    private static class findAllHandleFlow_argsTupleScheme extends TupleScheme<findAllHandleFlow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleFlowDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleFlowDTO()) {
          struct.handleFlowDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleFlow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleFlowDTO = new HandleFlowDTO();
          struct.handleFlowDTO.read(iprot);
          struct.setHandleFlowDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleFlow_result implements org.apache.thrift.TBase<findAllHandleFlow_result, findAllHandleFlow_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleFlow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleFlow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleFlow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleFlow_resultTupleSchemeFactory());
    }

    public List<HandleFlowDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleFlowDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleFlow_result.class, metaDataMap);
    }

    public findAllHandleFlow_result() {
    }

    public findAllHandleFlow_result(
      List<HandleFlowDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleFlow_result(findAllHandleFlow_result other) {
      if (other.isSetSuccess()) {
        List<HandleFlowDTO> __this__success = new ArrayList<HandleFlowDTO>(other.success.size());
        for (HandleFlowDTO other_element : other.success) {
          __this__success.add(new HandleFlowDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHandleFlow_result deepCopy() {
      return new findAllHandleFlow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleFlowDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleFlowDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleFlowDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleFlowDTO> getSuccess() {
      return this.success;
    }

    public findAllHandleFlow_result setSuccess(List<HandleFlowDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleFlowDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleFlow_result)
        return this.equals((findAllHandleFlow_result)that);
      return false;
    }

    public boolean equals(findAllHandleFlow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleFlow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleFlow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleFlow_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHandleFlow_resultStandardScheme getScheme() {
        return new findAllHandleFlow_resultStandardScheme();
      }
    }

    private static class findAllHandleFlow_resultStandardScheme extends StandardScheme<findAllHandleFlow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleFlow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleFlowDTO>(_list500.size);
                  HandleFlowDTO _elem501;
                  for (int _i502 = 0; _i502 < _list500.size; ++_i502)
                  {
                    _elem501 = new HandleFlowDTO();
                    _elem501.read(iprot);
                    struct.success.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleFlow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleFlowDTO _iter503 : struct.success)
            {
              _iter503.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleFlow_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHandleFlow_resultTupleScheme getScheme() {
        return new findAllHandleFlow_resultTupleScheme();
      }
    }

    private static class findAllHandleFlow_resultTupleScheme extends TupleScheme<findAllHandleFlow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleFlowDTO _iter504 : struct.success)
            {
              _iter504.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleFlow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleFlowDTO>(_list505.size);
            HandleFlowDTO _elem506;
            for (int _i507 = 0; _i507 < _list505.size; ++_i507)
            {
              _elem506 = new HandleFlowDTO();
              _elem506.read(iprot);
              struct.success.add(_elem506);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleFlowTotal_args implements org.apache.thrift.TBase<getHandleFlowTotal_args, getHandleFlowTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleFlowTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleFlowTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_FLOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleFlowTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleFlowTotal_argsTupleSchemeFactory());
    }

    public HandleFlowDTO handleFlowDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_FLOW_DTO((short)1, "handleFlowDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_FLOW_DTO
            return HANDLE_FLOW_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_FLOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleFlowDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleFlowDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleFlowTotal_args.class, metaDataMap);
    }

    public getHandleFlowTotal_args() {
    }

    public getHandleFlowTotal_args(
      HandleFlowDTO handleFlowDTO)
    {
      this();
      this.handleFlowDTO = handleFlowDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleFlowTotal_args(getHandleFlowTotal_args other) {
      if (other.isSetHandleFlowDTO()) {
        this.handleFlowDTO = new HandleFlowDTO(other.handleFlowDTO);
      }
    }

    public getHandleFlowTotal_args deepCopy() {
      return new getHandleFlowTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleFlowDTO = null;
    }

    public HandleFlowDTO getHandleFlowDTO() {
      return this.handleFlowDTO;
    }

    public getHandleFlowTotal_args setHandleFlowDTO(HandleFlowDTO handleFlowDTO) {
      this.handleFlowDTO = handleFlowDTO;
      return this;
    }

    public void unsetHandleFlowDTO() {
      this.handleFlowDTO = null;
    }

    /** Returns true if field handleFlowDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleFlowDTO() {
      return this.handleFlowDTO != null;
    }

    public void setHandleFlowDTOIsSet(boolean value) {
      if (!value) {
        this.handleFlowDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_FLOW_DTO:
        if (value == null) {
          unsetHandleFlowDTO();
        } else {
          setHandleFlowDTO((HandleFlowDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_FLOW_DTO:
        return getHandleFlowDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_FLOW_DTO:
        return isSetHandleFlowDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleFlowTotal_args)
        return this.equals((getHandleFlowTotal_args)that);
      return false;
    }

    public boolean equals(getHandleFlowTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleFlowDTO = true && this.isSetHandleFlowDTO();
      boolean that_present_handleFlowDTO = true && that.isSetHandleFlowDTO();
      if (this_present_handleFlowDTO || that_present_handleFlowDTO) {
        if (!(this_present_handleFlowDTO && that_present_handleFlowDTO))
          return false;
        if (!this.handleFlowDTO.equals(that.handleFlowDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleFlowDTO = true && (isSetHandleFlowDTO());
      list.add(present_handleFlowDTO);
      if (present_handleFlowDTO)
        list.add(handleFlowDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleFlowTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleFlowDTO()).compareTo(other.isSetHandleFlowDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleFlowDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowDTO, other.handleFlowDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleFlowTotal_args(");
      boolean first = true;

      sb.append("handleFlowDTO:");
      if (this.handleFlowDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleFlowDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleFlowDTO != null) {
        handleFlowDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleFlowTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleFlowTotal_argsStandardScheme getScheme() {
        return new getHandleFlowTotal_argsStandardScheme();
      }
    }

    private static class getHandleFlowTotal_argsStandardScheme extends StandardScheme<getHandleFlowTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleFlowTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_FLOW_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleFlowDTO = new HandleFlowDTO();
                struct.handleFlowDTO.read(iprot);
                struct.setHandleFlowDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleFlowTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleFlowDTO != null) {
          oprot.writeFieldBegin(HANDLE_FLOW_DTO_FIELD_DESC);
          struct.handleFlowDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleFlowTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleFlowTotal_argsTupleScheme getScheme() {
        return new getHandleFlowTotal_argsTupleScheme();
      }
    }

    private static class getHandleFlowTotal_argsTupleScheme extends TupleScheme<getHandleFlowTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleFlowTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleFlowDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleFlowDTO()) {
          struct.handleFlowDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleFlowTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleFlowDTO = new HandleFlowDTO();
          struct.handleFlowDTO.read(iprot);
          struct.setHandleFlowDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleFlowTotal_result implements org.apache.thrift.TBase<getHandleFlowTotal_result, getHandleFlowTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleFlowTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleFlowTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleFlowTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleFlowTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleFlowTotal_result.class, metaDataMap);
    }

    public getHandleFlowTotal_result() {
    }

    public getHandleFlowTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleFlowTotal_result(getHandleFlowTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleFlowTotal_result deepCopy() {
      return new getHandleFlowTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleFlowTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleFlowTotal_result)
        return this.equals((getHandleFlowTotal_result)that);
      return false;
    }

    public boolean equals(getHandleFlowTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleFlowTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleFlowTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleFlowTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleFlowTotal_resultStandardScheme getScheme() {
        return new getHandleFlowTotal_resultStandardScheme();
      }
    }

    private static class getHandleFlowTotal_resultStandardScheme extends StandardScheme<getHandleFlowTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleFlowTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleFlowTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleFlowTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleFlowTotal_resultTupleScheme getScheme() {
        return new getHandleFlowTotal_resultTupleScheme();
      }
    }

    private static class getHandleFlowTotal_resultTupleScheme extends TupleScheme<getHandleFlowTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleFlowTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleFlowTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDynamic_args implements org.apache.thrift.TBase<findAllHandleDynamic_args, findAllHandleDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDynamic_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDynamic_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDynamic_args.class, metaDataMap);
    }

    public findAllHandleDynamic_args() {
    }

    public findAllHandleDynamic_args(
      HandleDynamicDTO handleDynamicDTO)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDynamic_args(findAllHandleDynamic_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
    }

    public findAllHandleDynamic_args deepCopy() {
      return new findAllHandleDynamic_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public findAllHandleDynamic_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDynamic_args)
        return this.equals((findAllHandleDynamic_args)that);
      return false;
    }

    public boolean equals(findAllHandleDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDynamic_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDynamic_argsStandardScheme getScheme() {
        return new findAllHandleDynamic_argsStandardScheme();
      }
    }

    private static class findAllHandleDynamic_argsStandardScheme extends StandardScheme<findAllHandleDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDynamic_argsTupleScheme getScheme() {
        return new findAllHandleDynamic_argsTupleScheme();
      }
    }

    private static class findAllHandleDynamic_argsTupleScheme extends TupleScheme<findAllHandleDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDynamic_result implements org.apache.thrift.TBase<findAllHandleDynamic_result, findAllHandleDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDynamic_resultTupleSchemeFactory());
    }

    public List<HandleDynamicDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDynamic_result.class, metaDataMap);
    }

    public findAllHandleDynamic_result() {
    }

    public findAllHandleDynamic_result(
      List<HandleDynamicDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDynamic_result(findAllHandleDynamic_result other) {
      if (other.isSetSuccess()) {
        List<HandleDynamicDTO> __this__success = new ArrayList<HandleDynamicDTO>(other.success.size());
        for (HandleDynamicDTO other_element : other.success) {
          __this__success.add(new HandleDynamicDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHandleDynamic_result deepCopy() {
      return new findAllHandleDynamic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDynamicDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDynamicDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDynamicDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDynamicDTO> getSuccess() {
      return this.success;
    }

    public findAllHandleDynamic_result setSuccess(List<HandleDynamicDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDynamicDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDynamic_result)
        return this.equals((findAllHandleDynamic_result)that);
      return false;
    }

    public boolean equals(findAllHandleDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDynamic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDynamic_resultStandardScheme getScheme() {
        return new findAllHandleDynamic_resultStandardScheme();
      }
    }

    private static class findAllHandleDynamic_resultStandardScheme extends StandardScheme<findAllHandleDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list508 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDynamicDTO>(_list508.size);
                  HandleDynamicDTO _elem509;
                  for (int _i510 = 0; _i510 < _list508.size; ++_i510)
                  {
                    _elem509 = new HandleDynamicDTO();
                    _elem509.read(iprot);
                    struct.success.add(_elem509);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDynamicDTO _iter511 : struct.success)
            {
              _iter511.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDynamic_resultTupleScheme getScheme() {
        return new findAllHandleDynamic_resultTupleScheme();
      }
    }

    private static class findAllHandleDynamic_resultTupleScheme extends TupleScheme<findAllHandleDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDynamicDTO _iter512 : struct.success)
            {
              _iter512.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDynamicDTO>(_list513.size);
            HandleDynamicDTO _elem514;
            for (int _i515 = 0; _i515 < _list513.size; ++_i515)
            {
              _elem514 = new HandleDynamicDTO();
              _elem514.read(iprot);
              struct.success.add(_elem514);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicTotal_args implements org.apache.thrift.TBase<getHandleDynamicTotal_args, getHandleDynamicTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicTotal_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicTotal_args.class, metaDataMap);
    }

    public getHandleDynamicTotal_args() {
    }

    public getHandleDynamicTotal_args(
      HandleDynamicDTO handleDynamicDTO)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicTotal_args(getHandleDynamicTotal_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
    }

    public getHandleDynamicTotal_args deepCopy() {
      return new getHandleDynamicTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public getHandleDynamicTotal_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicTotal_args)
        return this.equals((getHandleDynamicTotal_args)that);
      return false;
    }

    public boolean equals(getHandleDynamicTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicTotal_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicTotal_argsStandardScheme getScheme() {
        return new getHandleDynamicTotal_argsStandardScheme();
      }
    }

    private static class getHandleDynamicTotal_argsStandardScheme extends StandardScheme<getHandleDynamicTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicTotal_argsTupleScheme getScheme() {
        return new getHandleDynamicTotal_argsTupleScheme();
      }
    }

    private static class getHandleDynamicTotal_argsTupleScheme extends TupleScheme<getHandleDynamicTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicTotal_result implements org.apache.thrift.TBase<getHandleDynamicTotal_result, getHandleDynamicTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicTotal_result.class, metaDataMap);
    }

    public getHandleDynamicTotal_result() {
    }

    public getHandleDynamicTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicTotal_result(getHandleDynamicTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleDynamicTotal_result deepCopy() {
      return new getHandleDynamicTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleDynamicTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicTotal_result)
        return this.equals((getHandleDynamicTotal_result)that);
      return false;
    }

    public boolean equals(getHandleDynamicTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicTotal_resultStandardScheme getScheme() {
        return new getHandleDynamicTotal_resultStandardScheme();
      }
    }

    private static class getHandleDynamicTotal_resultStandardScheme extends StandardScheme<getHandleDynamicTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicTotal_resultTupleScheme getScheme() {
        return new getHandleDynamicTotal_resultTupleScheme();
      }
    }

    private static class getHandleDynamicTotal_resultTupleScheme extends TupleScheme<getHandleDynamicTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gethandleDaysByProjectId_args implements org.apache.thrift.TBase<gethandleDaysByProjectId_args, gethandleDaysByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<gethandleDaysByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gethandleDaysByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gethandleDaysByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gethandleDaysByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gethandleDaysByProjectId_args.class, metaDataMap);
    }

    public gethandleDaysByProjectId_args() {
    }

    public gethandleDaysByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gethandleDaysByProjectId_args(gethandleDaysByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public gethandleDaysByProjectId_args deepCopy() {
      return new gethandleDaysByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public gethandleDaysByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gethandleDaysByProjectId_args)
        return this.equals((gethandleDaysByProjectId_args)that);
      return false;
    }

    public boolean equals(gethandleDaysByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(gethandleDaysByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gethandleDaysByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gethandleDaysByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public gethandleDaysByProjectId_argsStandardScheme getScheme() {
        return new gethandleDaysByProjectId_argsStandardScheme();
      }
    }

    private static class gethandleDaysByProjectId_argsStandardScheme extends StandardScheme<gethandleDaysByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gethandleDaysByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gethandleDaysByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gethandleDaysByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public gethandleDaysByProjectId_argsTupleScheme getScheme() {
        return new gethandleDaysByProjectId_argsTupleScheme();
      }
    }

    private static class gethandleDaysByProjectId_argsTupleScheme extends TupleScheme<gethandleDaysByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gethandleDaysByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gethandleDaysByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class gethandleDaysByProjectId_result implements org.apache.thrift.TBase<gethandleDaysByProjectId_result, gethandleDaysByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<gethandleDaysByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gethandleDaysByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gethandleDaysByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gethandleDaysByProjectId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gethandleDaysByProjectId_result.class, metaDataMap);
    }

    public gethandleDaysByProjectId_result() {
    }

    public gethandleDaysByProjectId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gethandleDaysByProjectId_result(gethandleDaysByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public gethandleDaysByProjectId_result deepCopy() {
      return new gethandleDaysByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public gethandleDaysByProjectId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gethandleDaysByProjectId_result)
        return this.equals((gethandleDaysByProjectId_result)that);
      return false;
    }

    public boolean equals(gethandleDaysByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gethandleDaysByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gethandleDaysByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gethandleDaysByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public gethandleDaysByProjectId_resultStandardScheme getScheme() {
        return new gethandleDaysByProjectId_resultStandardScheme();
      }
    }

    private static class gethandleDaysByProjectId_resultStandardScheme extends StandardScheme<gethandleDaysByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gethandleDaysByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gethandleDaysByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gethandleDaysByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public gethandleDaysByProjectId_resultTupleScheme getScheme() {
        return new gethandleDaysByProjectId_resultTupleScheme();
      }
    }

    private static class gethandleDaysByProjectId_resultTupleScheme extends TupleScheme<gethandleDaysByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gethandleDaysByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gethandleDaysByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamic_args implements org.apache.thrift.TBase<addHandleDynamic_args, addHandleDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamic_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamic_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamic_args.class, metaDataMap);
    }

    public addHandleDynamic_args() {
    }

    public addHandleDynamic_args(
      HandleDynamicDTO handleDynamicDTO)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamic_args(addHandleDynamic_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
    }

    public addHandleDynamic_args deepCopy() {
      return new addHandleDynamic_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public addHandleDynamic_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamic_args)
        return this.equals((addHandleDynamic_args)that);
      return false;
    }

    public boolean equals(addHandleDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamic_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamic_argsStandardScheme getScheme() {
        return new addHandleDynamic_argsStandardScheme();
      }
    }

    private static class addHandleDynamic_argsStandardScheme extends StandardScheme<addHandleDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamic_argsTupleScheme getScheme() {
        return new addHandleDynamic_argsTupleScheme();
      }
    }

    private static class addHandleDynamic_argsTupleScheme extends TupleScheme<addHandleDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamic_result implements org.apache.thrift.TBase<addHandleDynamic_result, addHandleDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamic_result.class, metaDataMap);
    }

    public addHandleDynamic_result() {
    }

    public addHandleDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamic_result(addHandleDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHandleDynamic_result deepCopy() {
      return new addHandleDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHandleDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamic_result)
        return this.equals((addHandleDynamic_result)that);
      return false;
    }

    public boolean equals(addHandleDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamic_resultStandardScheme getScheme() {
        return new addHandleDynamic_resultStandardScheme();
      }
    }

    private static class addHandleDynamic_resultStandardScheme extends StandardScheme<addHandleDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamic_resultTupleScheme getScheme() {
        return new addHandleDynamic_resultTupleScheme();
      }
    }

    private static class addHandleDynamic_resultTupleScheme extends TupleScheme<addHandleDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicById_args implements org.apache.thrift.TBase<getHandleDynamicById_args, getHandleDynamicById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicById_args.class, metaDataMap);
    }

    public getHandleDynamicById_args() {
    }

    public getHandleDynamicById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicById_args(getHandleDynamicById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getHandleDynamicById_args deepCopy() {
      return new getHandleDynamicById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getHandleDynamicById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicById_args)
        return this.equals((getHandleDynamicById_args)that);
      return false;
    }

    public boolean equals(getHandleDynamicById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicById_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicById_argsStandardScheme getScheme() {
        return new getHandleDynamicById_argsStandardScheme();
      }
    }

    private static class getHandleDynamicById_argsStandardScheme extends StandardScheme<getHandleDynamicById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicById_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicById_argsTupleScheme getScheme() {
        return new getHandleDynamicById_argsTupleScheme();
      }
    }

    private static class getHandleDynamicById_argsTupleScheme extends TupleScheme<getHandleDynamicById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicById_result implements org.apache.thrift.TBase<getHandleDynamicById_result, getHandleDynamicById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicById_resultTupleSchemeFactory());
    }

    public HandleDynamicDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicById_result.class, metaDataMap);
    }

    public getHandleDynamicById_result() {
    }

    public getHandleDynamicById_result(
      HandleDynamicDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicById_result(getHandleDynamicById_result other) {
      if (other.isSetSuccess()) {
        this.success = new HandleDynamicDTO(other.success);
      }
    }

    public getHandleDynamicById_result deepCopy() {
      return new getHandleDynamicById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HandleDynamicDTO getSuccess() {
      return this.success;
    }

    public getHandleDynamicById_result setSuccess(HandleDynamicDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HandleDynamicDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicById_result)
        return this.equals((getHandleDynamicById_result)that);
      return false;
    }

    public boolean equals(getHandleDynamicById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicById_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicById_resultStandardScheme getScheme() {
        return new getHandleDynamicById_resultStandardScheme();
      }
    }

    private static class getHandleDynamicById_resultStandardScheme extends StandardScheme<getHandleDynamicById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HandleDynamicDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicById_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicById_resultTupleScheme getScheme() {
        return new getHandleDynamicById_resultTupleScheme();
      }
    }

    private static class getHandleDynamicById_resultTupleScheme extends TupleScheme<getHandleDynamicById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HandleDynamicDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamic_args implements org.apache.thrift.TBase<updateHandleDynamic_args, updateHandleDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamic_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamic_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamic_args.class, metaDataMap);
    }

    public updateHandleDynamic_args() {
    }

    public updateHandleDynamic_args(
      HandleDynamicDTO handleDynamicDTO)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamic_args(updateHandleDynamic_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
    }

    public updateHandleDynamic_args deepCopy() {
      return new updateHandleDynamic_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public updateHandleDynamic_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamic_args)
        return this.equals((updateHandleDynamic_args)that);
      return false;
    }

    public boolean equals(updateHandleDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamic_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamic_argsStandardScheme getScheme() {
        return new updateHandleDynamic_argsStandardScheme();
      }
    }

    private static class updateHandleDynamic_argsStandardScheme extends StandardScheme<updateHandleDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamic_argsTupleScheme getScheme() {
        return new updateHandleDynamic_argsTupleScheme();
      }
    }

    private static class updateHandleDynamic_argsTupleScheme extends TupleScheme<updateHandleDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamic_result implements org.apache.thrift.TBase<updateHandleDynamic_result, updateHandleDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamic_result.class, metaDataMap);
    }

    public updateHandleDynamic_result() {
    }

    public updateHandleDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamic_result(updateHandleDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHandleDynamic_result deepCopy() {
      return new updateHandleDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHandleDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamic_result)
        return this.equals((updateHandleDynamic_result)that);
      return false;
    }

    public boolean equals(updateHandleDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamic_resultStandardScheme getScheme() {
        return new updateHandleDynamic_resultStandardScheme();
      }
    }

    private static class updateHandleDynamic_resultStandardScheme extends StandardScheme<updateHandleDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamic_resultTupleScheme getScheme() {
        return new updateHandleDynamic_resultTupleScheme();
      }
    }

    private static class updateHandleDynamic_resultTupleScheme extends TupleScheme<updateHandleDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamicAndFinishTask_args implements org.apache.thrift.TBase<updateHandleDynamicAndFinishTask_args, updateHandleDynamicAndFinishTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamicAndFinishTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamicAndFinishTask_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamicAndFinishTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamicAndFinishTask_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required
    public String loginUserName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO"),
      LOGIN_USER_NAME((short)2, "loginUserName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          case 2: // LOGIN_USER_NAME
            return LOGIN_USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamicAndFinishTask_args.class, metaDataMap);
    }

    public updateHandleDynamicAndFinishTask_args() {
    }

    public updateHandleDynamicAndFinishTask_args(
      HandleDynamicDTO handleDynamicDTO,
      String loginUserName)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
      this.loginUserName = loginUserName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamicAndFinishTask_args(updateHandleDynamicAndFinishTask_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
      if (other.isSetLoginUserName()) {
        this.loginUserName = other.loginUserName;
      }
    }

    public updateHandleDynamicAndFinishTask_args deepCopy() {
      return new updateHandleDynamicAndFinishTask_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
      this.loginUserName = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public updateHandleDynamicAndFinishTask_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public String getLoginUserName() {
      return this.loginUserName;
    }

    public updateHandleDynamicAndFinishTask_args setLoginUserName(String loginUserName) {
      this.loginUserName = loginUserName;
      return this;
    }

    public void unsetLoginUserName() {
      this.loginUserName = null;
    }

    /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginUserName() {
      return this.loginUserName != null;
    }

    public void setLoginUserNameIsSet(boolean value) {
      if (!value) {
        this.loginUserName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      case LOGIN_USER_NAME:
        if (value == null) {
          unsetLoginUserName();
        } else {
          setLoginUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      case LOGIN_USER_NAME:
        return getLoginUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      case LOGIN_USER_NAME:
        return isSetLoginUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamicAndFinishTask_args)
        return this.equals((updateHandleDynamicAndFinishTask_args)that);
      return false;
    }

    public boolean equals(updateHandleDynamicAndFinishTask_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      boolean this_present_loginUserName = true && this.isSetLoginUserName();
      boolean that_present_loginUserName = true && that.isSetLoginUserName();
      if (this_present_loginUserName || that_present_loginUserName) {
        if (!(this_present_loginUserName && that_present_loginUserName))
          return false;
        if (!this.loginUserName.equals(that.loginUserName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      boolean present_loginUserName = true && (isSetLoginUserName());
      list.add(present_loginUserName);
      if (present_loginUserName)
        list.add(loginUserName);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamicAndFinishTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamicAndFinishTask_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamicAndFinishTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamicAndFinishTask_argsStandardScheme getScheme() {
        return new updateHandleDynamicAndFinishTask_argsStandardScheme();
      }
    }

    private static class updateHandleDynamicAndFinishTask_argsStandardScheme extends StandardScheme<updateHandleDynamicAndFinishTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamicAndFinishTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginUserName = iprot.readString();
                struct.setLoginUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamicAndFinishTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginUserName != null) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamicAndFinishTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamicAndFinishTask_argsTupleScheme getScheme() {
        return new updateHandleDynamicAndFinishTask_argsTupleScheme();
      }
    }

    private static class updateHandleDynamicAndFinishTask_argsTupleScheme extends TupleScheme<updateHandleDynamicAndFinishTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicAndFinishTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        if (struct.isSetLoginUserName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
        if (struct.isSetLoginUserName()) {
          oprot.writeString(struct.loginUserName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicAndFinishTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginUserName = iprot.readString();
          struct.setLoginUserNameIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamicAndFinishTask_result implements org.apache.thrift.TBase<updateHandleDynamicAndFinishTask_result, updateHandleDynamicAndFinishTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamicAndFinishTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamicAndFinishTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamicAndFinishTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamicAndFinishTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamicAndFinishTask_result.class, metaDataMap);
    }

    public updateHandleDynamicAndFinishTask_result() {
    }

    public updateHandleDynamicAndFinishTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamicAndFinishTask_result(updateHandleDynamicAndFinishTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHandleDynamicAndFinishTask_result deepCopy() {
      return new updateHandleDynamicAndFinishTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHandleDynamicAndFinishTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamicAndFinishTask_result)
        return this.equals((updateHandleDynamicAndFinishTask_result)that);
      return false;
    }

    public boolean equals(updateHandleDynamicAndFinishTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamicAndFinishTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamicAndFinishTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamicAndFinishTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamicAndFinishTask_resultStandardScheme getScheme() {
        return new updateHandleDynamicAndFinishTask_resultStandardScheme();
      }
    }

    private static class updateHandleDynamicAndFinishTask_resultStandardScheme extends StandardScheme<updateHandleDynamicAndFinishTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamicAndFinishTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamicAndFinishTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamicAndFinishTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamicAndFinishTask_resultTupleScheme getScheme() {
        return new updateHandleDynamicAndFinishTask_resultTupleScheme();
      }
    }

    private static class updateHandleDynamicAndFinishTask_resultTupleScheme extends TupleScheme<updateHandleDynamicAndFinishTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicAndFinishTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicAndFinishTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class finishHandleDynamicTask_args implements org.apache.thrift.TBase<finishHandleDynamicTask_args, finishHandleDynamicTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<finishHandleDynamicTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishHandleDynamicTask_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishHandleDynamicTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishHandleDynamicTask_argsTupleSchemeFactory());
    }

    public HandleDynamicDTO handleDynamicDTO; // required
    public String loginUserName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_DTO((short)1, "handleDynamicDTO"),
      LOGIN_USER_NAME((short)2, "loginUserName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          case 2: // LOGIN_USER_NAME
            return LOGIN_USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishHandleDynamicTask_args.class, metaDataMap);
    }

    public finishHandleDynamicTask_args() {
    }

    public finishHandleDynamicTask_args(
      HandleDynamicDTO handleDynamicDTO,
      String loginUserName)
    {
      this();
      this.handleDynamicDTO = handleDynamicDTO;
      this.loginUserName = loginUserName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishHandleDynamicTask_args(finishHandleDynamicTask_args other) {
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
      if (other.isSetLoginUserName()) {
        this.loginUserName = other.loginUserName;
      }
    }

    public finishHandleDynamicTask_args deepCopy() {
      return new finishHandleDynamicTask_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicDTO = null;
      this.loginUserName = null;
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public finishHandleDynamicTask_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public String getLoginUserName() {
      return this.loginUserName;
    }

    public finishHandleDynamicTask_args setLoginUserName(String loginUserName) {
      this.loginUserName = loginUserName;
      return this;
    }

    public void unsetLoginUserName() {
      this.loginUserName = null;
    }

    /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginUserName() {
      return this.loginUserName != null;
    }

    public void setLoginUserNameIsSet(boolean value) {
      if (!value) {
        this.loginUserName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      case LOGIN_USER_NAME:
        if (value == null) {
          unsetLoginUserName();
        } else {
          setLoginUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      case LOGIN_USER_NAME:
        return getLoginUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      case LOGIN_USER_NAME:
        return isSetLoginUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishHandleDynamicTask_args)
        return this.equals((finishHandleDynamicTask_args)that);
      return false;
    }

    public boolean equals(finishHandleDynamicTask_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      boolean this_present_loginUserName = true && this.isSetLoginUserName();
      boolean that_present_loginUserName = true && that.isSetLoginUserName();
      if (this_present_loginUserName || that_present_loginUserName) {
        if (!(this_present_loginUserName && that_present_loginUserName))
          return false;
        if (!this.loginUserName.equals(that.loginUserName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      boolean present_loginUserName = true && (isSetLoginUserName());
      list.add(present_loginUserName);
      if (present_loginUserName)
        list.add(loginUserName);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishHandleDynamicTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishHandleDynamicTask_args(");
      boolean first = true;

      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishHandleDynamicTask_argsStandardSchemeFactory implements SchemeFactory {
      public finishHandleDynamicTask_argsStandardScheme getScheme() {
        return new finishHandleDynamicTask_argsStandardScheme();
      }
    }

    private static class finishHandleDynamicTask_argsStandardScheme extends StandardScheme<finishHandleDynamicTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginUserName = iprot.readString();
                struct.setLoginUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginUserName != null) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishHandleDynamicTask_argsTupleSchemeFactory implements SchemeFactory {
      public finishHandleDynamicTask_argsTupleScheme getScheme() {
        return new finishHandleDynamicTask_argsTupleScheme();
      }
    }

    private static class finishHandleDynamicTask_argsTupleScheme extends TupleScheme<finishHandleDynamicTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(0);
        }
        if (struct.isSetLoginUserName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
        if (struct.isSetLoginUserName()) {
          oprot.writeString(struct.loginUserName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginUserName = iprot.readString();
          struct.setLoginUserNameIsSet(true);
        }
      }
    }

  }

  public static class finishHandleDynamicTask_result implements org.apache.thrift.TBase<finishHandleDynamicTask_result, finishHandleDynamicTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<finishHandleDynamicTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishHandleDynamicTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishHandleDynamicTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishHandleDynamicTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishHandleDynamicTask_result.class, metaDataMap);
    }

    public finishHandleDynamicTask_result() {
    }

    public finishHandleDynamicTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishHandleDynamicTask_result(finishHandleDynamicTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public finishHandleDynamicTask_result deepCopy() {
      return new finishHandleDynamicTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public finishHandleDynamicTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishHandleDynamicTask_result)
        return this.equals((finishHandleDynamicTask_result)that);
      return false;
    }

    public boolean equals(finishHandleDynamicTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishHandleDynamicTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishHandleDynamicTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishHandleDynamicTask_resultStandardSchemeFactory implements SchemeFactory {
      public finishHandleDynamicTask_resultStandardScheme getScheme() {
        return new finishHandleDynamicTask_resultStandardScheme();
      }
    }

    private static class finishHandleDynamicTask_resultStandardScheme extends StandardScheme<finishHandleDynamicTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishHandleDynamicTask_resultTupleSchemeFactory implements SchemeFactory {
      public finishHandleDynamicTask_resultTupleScheme getScheme() {
        return new finishHandleDynamicTask_resultTupleScheme();
      }
    }

    private static class finishHandleDynamicTask_resultTupleScheme extends TupleScheme<finishHandleDynamicTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class finishAllHandleDynamicTask_args implements org.apache.thrift.TBase<finishAllHandleDynamicTask_args, finishAllHandleDynamicTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<finishAllHandleDynamicTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishAllHandleDynamicTask_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishAllHandleDynamicTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishAllHandleDynamicTask_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public String loginUserName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      LOGIN_USER_NAME((short)2, "loginUserName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // LOGIN_USER_NAME
            return LOGIN_USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishAllHandleDynamicTask_args.class, metaDataMap);
    }

    public finishAllHandleDynamicTask_args() {
    }

    public finishAllHandleDynamicTask_args(
      int projectId,
      String loginUserName)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.loginUserName = loginUserName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishAllHandleDynamicTask_args(finishAllHandleDynamicTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetLoginUserName()) {
        this.loginUserName = other.loginUserName;
      }
    }

    public finishAllHandleDynamicTask_args deepCopy() {
      return new finishAllHandleDynamicTask_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.loginUserName = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public finishAllHandleDynamicTask_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public String getLoginUserName() {
      return this.loginUserName;
    }

    public finishAllHandleDynamicTask_args setLoginUserName(String loginUserName) {
      this.loginUserName = loginUserName;
      return this;
    }

    public void unsetLoginUserName() {
      this.loginUserName = null;
    }

    /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginUserName() {
      return this.loginUserName != null;
    }

    public void setLoginUserNameIsSet(boolean value) {
      if (!value) {
        this.loginUserName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case LOGIN_USER_NAME:
        if (value == null) {
          unsetLoginUserName();
        } else {
          setLoginUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case LOGIN_USER_NAME:
        return getLoginUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case LOGIN_USER_NAME:
        return isSetLoginUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishAllHandleDynamicTask_args)
        return this.equals((finishAllHandleDynamicTask_args)that);
      return false;
    }

    public boolean equals(finishAllHandleDynamicTask_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_loginUserName = true && this.isSetLoginUserName();
      boolean that_present_loginUserName = true && that.isSetLoginUserName();
      if (this_present_loginUserName || that_present_loginUserName) {
        if (!(this_present_loginUserName && that_present_loginUserName))
          return false;
        if (!this.loginUserName.equals(that.loginUserName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_loginUserName = true && (isSetLoginUserName());
      list.add(present_loginUserName);
      if (present_loginUserName)
        list.add(loginUserName);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishAllHandleDynamicTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishAllHandleDynamicTask_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishAllHandleDynamicTask_argsStandardSchemeFactory implements SchemeFactory {
      public finishAllHandleDynamicTask_argsStandardScheme getScheme() {
        return new finishAllHandleDynamicTask_argsStandardScheme();
      }
    }

    private static class finishAllHandleDynamicTask_argsStandardScheme extends StandardScheme<finishAllHandleDynamicTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishAllHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginUserName = iprot.readString();
                struct.setLoginUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishAllHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.loginUserName != null) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishAllHandleDynamicTask_argsTupleSchemeFactory implements SchemeFactory {
      public finishAllHandleDynamicTask_argsTupleScheme getScheme() {
        return new finishAllHandleDynamicTask_argsTupleScheme();
      }
    }

    private static class finishAllHandleDynamicTask_argsTupleScheme extends TupleScheme<finishAllHandleDynamicTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishAllHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginUserName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetLoginUserName()) {
          oprot.writeString(struct.loginUserName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishAllHandleDynamicTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginUserName = iprot.readString();
          struct.setLoginUserNameIsSet(true);
        }
      }
    }

  }

  public static class finishAllHandleDynamicTask_result implements org.apache.thrift.TBase<finishAllHandleDynamicTask_result, finishAllHandleDynamicTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<finishAllHandleDynamicTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishAllHandleDynamicTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishAllHandleDynamicTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishAllHandleDynamicTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishAllHandleDynamicTask_result.class, metaDataMap);
    }

    public finishAllHandleDynamicTask_result() {
    }

    public finishAllHandleDynamicTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishAllHandleDynamicTask_result(finishAllHandleDynamicTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public finishAllHandleDynamicTask_result deepCopy() {
      return new finishAllHandleDynamicTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public finishAllHandleDynamicTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishAllHandleDynamicTask_result)
        return this.equals((finishAllHandleDynamicTask_result)that);
      return false;
    }

    public boolean equals(finishAllHandleDynamicTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishAllHandleDynamicTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishAllHandleDynamicTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishAllHandleDynamicTask_resultStandardSchemeFactory implements SchemeFactory {
      public finishAllHandleDynamicTask_resultStandardScheme getScheme() {
        return new finishAllHandleDynamicTask_resultStandardScheme();
      }
    }

    private static class finishAllHandleDynamicTask_resultStandardScheme extends StandardScheme<finishAllHandleDynamicTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishAllHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishAllHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishAllHandleDynamicTask_resultTupleSchemeFactory implements SchemeFactory {
      public finishAllHandleDynamicTask_resultTupleScheme getScheme() {
        return new finishAllHandleDynamicTask_resultTupleScheme();
      }
    }

    private static class finishAllHandleDynamicTask_resultTupleScheme extends TupleScheme<finishAllHandleDynamicTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishAllHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishAllHandleDynamicTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllBizHandleWorkflow_args implements org.apache.thrift.TBase<findAllBizHandleWorkflow_args, findAllBizHandleWorkflow_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllBizHandleWorkflow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllBizHandleWorkflow_args");

    private static final org.apache.thrift.protocol.TField BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleWorkflowDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllBizHandleWorkflow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllBizHandleWorkflow_argsTupleSchemeFactory());
    }

    public BizHandleWorkflowDTO bizHandleWorkflowDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_HANDLE_WORKFLOW_DTO((short)1, "bizHandleWorkflowDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_HANDLE_WORKFLOW_DTO
            return BIZ_HANDLE_WORKFLOW_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_HANDLE_WORKFLOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("bizHandleWorkflowDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizHandleWorkflowDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllBizHandleWorkflow_args.class, metaDataMap);
    }

    public findAllBizHandleWorkflow_args() {
    }

    public findAllBizHandleWorkflow_args(
      BizHandleWorkflowDTO bizHandleWorkflowDto)
    {
      this();
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllBizHandleWorkflow_args(findAllBizHandleWorkflow_args other) {
      if (other.isSetBizHandleWorkflowDto()) {
        this.bizHandleWorkflowDto = new BizHandleWorkflowDTO(other.bizHandleWorkflowDto);
      }
    }

    public findAllBizHandleWorkflow_args deepCopy() {
      return new findAllBizHandleWorkflow_args(this);
    }

    @Override
    public void clear() {
      this.bizHandleWorkflowDto = null;
    }

    public BizHandleWorkflowDTO getBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto;
    }

    public findAllBizHandleWorkflow_args setBizHandleWorkflowDto(BizHandleWorkflowDTO bizHandleWorkflowDto) {
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      return this;
    }

    public void unsetBizHandleWorkflowDto() {
      this.bizHandleWorkflowDto = null;
    }

    /** Returns true if field bizHandleWorkflowDto is set (has been assigned a value) and false otherwise */
    public boolean isSetBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto != null;
    }

    public void setBizHandleWorkflowDtoIsSet(boolean value) {
      if (!value) {
        this.bizHandleWorkflowDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        if (value == null) {
          unsetBizHandleWorkflowDto();
        } else {
          setBizHandleWorkflowDto((BizHandleWorkflowDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return getBizHandleWorkflowDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return isSetBizHandleWorkflowDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllBizHandleWorkflow_args)
        return this.equals((findAllBizHandleWorkflow_args)that);
      return false;
    }

    public boolean equals(findAllBizHandleWorkflow_args that) {
      if (that == null)
        return false;

      boolean this_present_bizHandleWorkflowDto = true && this.isSetBizHandleWorkflowDto();
      boolean that_present_bizHandleWorkflowDto = true && that.isSetBizHandleWorkflowDto();
      if (this_present_bizHandleWorkflowDto || that_present_bizHandleWorkflowDto) {
        if (!(this_present_bizHandleWorkflowDto && that_present_bizHandleWorkflowDto))
          return false;
        if (!this.bizHandleWorkflowDto.equals(that.bizHandleWorkflowDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizHandleWorkflowDto = true && (isSetBizHandleWorkflowDto());
      list.add(present_bizHandleWorkflowDto);
      if (present_bizHandleWorkflowDto)
        list.add(bizHandleWorkflowDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllBizHandleWorkflow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizHandleWorkflowDto()).compareTo(other.isSetBizHandleWorkflowDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizHandleWorkflowDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleWorkflowDto, other.bizHandleWorkflowDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllBizHandleWorkflow_args(");
      boolean first = true;

      sb.append("bizHandleWorkflowDto:");
      if (this.bizHandleWorkflowDto == null) {
        sb.append("null");
      } else {
        sb.append(this.bizHandleWorkflowDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizHandleWorkflowDto != null) {
        bizHandleWorkflowDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllBizHandleWorkflow_argsStandardSchemeFactory implements SchemeFactory {
      public findAllBizHandleWorkflow_argsStandardScheme getScheme() {
        return new findAllBizHandleWorkflow_argsStandardScheme();
      }
    }

    private static class findAllBizHandleWorkflow_argsStandardScheme extends StandardScheme<findAllBizHandleWorkflow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_HANDLE_WORKFLOW_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
                struct.bizHandleWorkflowDto.read(iprot);
                struct.setBizHandleWorkflowDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizHandleWorkflowDto != null) {
          oprot.writeFieldBegin(BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC);
          struct.bizHandleWorkflowDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllBizHandleWorkflow_argsTupleSchemeFactory implements SchemeFactory {
      public findAllBizHandleWorkflow_argsTupleScheme getScheme() {
        return new findAllBizHandleWorkflow_argsTupleScheme();
      }
    }

    private static class findAllBizHandleWorkflow_argsTupleScheme extends TupleScheme<findAllBizHandleWorkflow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizHandleWorkflowDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizHandleWorkflowDto()) {
          struct.bizHandleWorkflowDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
          struct.bizHandleWorkflowDto.read(iprot);
          struct.setBizHandleWorkflowDtoIsSet(true);
        }
      }
    }

  }

  public static class findAllBizHandleWorkflow_result implements org.apache.thrift.TBase<findAllBizHandleWorkflow_result, findAllBizHandleWorkflow_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllBizHandleWorkflow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllBizHandleWorkflow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllBizHandleWorkflow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllBizHandleWorkflow_resultTupleSchemeFactory());
    }

    public List<BizHandleWorkflowDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizHandleWorkflowDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllBizHandleWorkflow_result.class, metaDataMap);
    }

    public findAllBizHandleWorkflow_result() {
    }

    public findAllBizHandleWorkflow_result(
      List<BizHandleWorkflowDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllBizHandleWorkflow_result(findAllBizHandleWorkflow_result other) {
      if (other.isSetSuccess()) {
        List<BizHandleWorkflowDTO> __this__success = new ArrayList<BizHandleWorkflowDTO>(other.success.size());
        for (BizHandleWorkflowDTO other_element : other.success) {
          __this__success.add(new BizHandleWorkflowDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllBizHandleWorkflow_result deepCopy() {
      return new findAllBizHandleWorkflow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BizHandleWorkflowDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BizHandleWorkflowDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<BizHandleWorkflowDTO>();
      }
      this.success.add(elem);
    }

    public List<BizHandleWorkflowDTO> getSuccess() {
      return this.success;
    }

    public findAllBizHandleWorkflow_result setSuccess(List<BizHandleWorkflowDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BizHandleWorkflowDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllBizHandleWorkflow_result)
        return this.equals((findAllBizHandleWorkflow_result)that);
      return false;
    }

    public boolean equals(findAllBizHandleWorkflow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllBizHandleWorkflow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllBizHandleWorkflow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllBizHandleWorkflow_resultStandardSchemeFactory implements SchemeFactory {
      public findAllBizHandleWorkflow_resultStandardScheme getScheme() {
        return new findAllBizHandleWorkflow_resultStandardScheme();
      }
    }

    private static class findAllBizHandleWorkflow_resultStandardScheme extends StandardScheme<findAllBizHandleWorkflow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
                  struct.success = new ArrayList<BizHandleWorkflowDTO>(_list516.size);
                  BizHandleWorkflowDTO _elem517;
                  for (int _i518 = 0; _i518 < _list516.size; ++_i518)
                  {
                    _elem517 = new BizHandleWorkflowDTO();
                    _elem517.read(iprot);
                    struct.success.add(_elem517);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BizHandleWorkflowDTO _iter519 : struct.success)
            {
              _iter519.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllBizHandleWorkflow_resultTupleSchemeFactory implements SchemeFactory {
      public findAllBizHandleWorkflow_resultTupleScheme getScheme() {
        return new findAllBizHandleWorkflow_resultTupleScheme();
      }
    }

    private static class findAllBizHandleWorkflow_resultTupleScheme extends TupleScheme<findAllBizHandleWorkflow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BizHandleWorkflowDTO _iter520 : struct.success)
            {
              _iter520.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list521 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BizHandleWorkflowDTO>(_list521.size);
            BizHandleWorkflowDTO _elem522;
            for (int _i523 = 0; _i523 < _list521.size; ++_i523)
            {
              _elem522 = new BizHandleWorkflowDTO();
              _elem522.read(iprot);
              struct.success.add(_elem522);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBizHandleWorkflow_args implements org.apache.thrift.TBase<addBizHandleWorkflow_args, addBizHandleWorkflow_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBizHandleWorkflow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizHandleWorkflow_args");

    private static final org.apache.thrift.protocol.TField BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleWorkflowDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizHandleWorkflow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizHandleWorkflow_argsTupleSchemeFactory());
    }

    public BizHandleWorkflowDTO bizHandleWorkflowDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_HANDLE_WORKFLOW_DTO((short)1, "bizHandleWorkflowDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_HANDLE_WORKFLOW_DTO
            return BIZ_HANDLE_WORKFLOW_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_HANDLE_WORKFLOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("bizHandleWorkflowDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizHandleWorkflowDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizHandleWorkflow_args.class, metaDataMap);
    }

    public addBizHandleWorkflow_args() {
    }

    public addBizHandleWorkflow_args(
      BizHandleWorkflowDTO bizHandleWorkflowDto)
    {
      this();
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizHandleWorkflow_args(addBizHandleWorkflow_args other) {
      if (other.isSetBizHandleWorkflowDto()) {
        this.bizHandleWorkflowDto = new BizHandleWorkflowDTO(other.bizHandleWorkflowDto);
      }
    }

    public addBizHandleWorkflow_args deepCopy() {
      return new addBizHandleWorkflow_args(this);
    }

    @Override
    public void clear() {
      this.bizHandleWorkflowDto = null;
    }

    public BizHandleWorkflowDTO getBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto;
    }

    public addBizHandleWorkflow_args setBizHandleWorkflowDto(BizHandleWorkflowDTO bizHandleWorkflowDto) {
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      return this;
    }

    public void unsetBizHandleWorkflowDto() {
      this.bizHandleWorkflowDto = null;
    }

    /** Returns true if field bizHandleWorkflowDto is set (has been assigned a value) and false otherwise */
    public boolean isSetBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto != null;
    }

    public void setBizHandleWorkflowDtoIsSet(boolean value) {
      if (!value) {
        this.bizHandleWorkflowDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        if (value == null) {
          unsetBizHandleWorkflowDto();
        } else {
          setBizHandleWorkflowDto((BizHandleWorkflowDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return getBizHandleWorkflowDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return isSetBizHandleWorkflowDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizHandleWorkflow_args)
        return this.equals((addBizHandleWorkflow_args)that);
      return false;
    }

    public boolean equals(addBizHandleWorkflow_args that) {
      if (that == null)
        return false;

      boolean this_present_bizHandleWorkflowDto = true && this.isSetBizHandleWorkflowDto();
      boolean that_present_bizHandleWorkflowDto = true && that.isSetBizHandleWorkflowDto();
      if (this_present_bizHandleWorkflowDto || that_present_bizHandleWorkflowDto) {
        if (!(this_present_bizHandleWorkflowDto && that_present_bizHandleWorkflowDto))
          return false;
        if (!this.bizHandleWorkflowDto.equals(that.bizHandleWorkflowDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizHandleWorkflowDto = true && (isSetBizHandleWorkflowDto());
      list.add(present_bizHandleWorkflowDto);
      if (present_bizHandleWorkflowDto)
        list.add(bizHandleWorkflowDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizHandleWorkflow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizHandleWorkflowDto()).compareTo(other.isSetBizHandleWorkflowDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizHandleWorkflowDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleWorkflowDto, other.bizHandleWorkflowDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizHandleWorkflow_args(");
      boolean first = true;

      sb.append("bizHandleWorkflowDto:");
      if (this.bizHandleWorkflowDto == null) {
        sb.append("null");
      } else {
        sb.append(this.bizHandleWorkflowDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizHandleWorkflowDto != null) {
        bizHandleWorkflowDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizHandleWorkflow_argsStandardSchemeFactory implements SchemeFactory {
      public addBizHandleWorkflow_argsStandardScheme getScheme() {
        return new addBizHandleWorkflow_argsStandardScheme();
      }
    }

    private static class addBizHandleWorkflow_argsStandardScheme extends StandardScheme<addBizHandleWorkflow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_HANDLE_WORKFLOW_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
                struct.bizHandleWorkflowDto.read(iprot);
                struct.setBizHandleWorkflowDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizHandleWorkflowDto != null) {
          oprot.writeFieldBegin(BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC);
          struct.bizHandleWorkflowDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizHandleWorkflow_argsTupleSchemeFactory implements SchemeFactory {
      public addBizHandleWorkflow_argsTupleScheme getScheme() {
        return new addBizHandleWorkflow_argsTupleScheme();
      }
    }

    private static class addBizHandleWorkflow_argsTupleScheme extends TupleScheme<addBizHandleWorkflow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizHandleWorkflowDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizHandleWorkflowDto()) {
          struct.bizHandleWorkflowDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
          struct.bizHandleWorkflowDto.read(iprot);
          struct.setBizHandleWorkflowDtoIsSet(true);
        }
      }
    }

  }

  public static class addBizHandleWorkflow_result implements org.apache.thrift.TBase<addBizHandleWorkflow_result, addBizHandleWorkflow_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBizHandleWorkflow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizHandleWorkflow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizHandleWorkflow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizHandleWorkflow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizHandleWorkflow_result.class, metaDataMap);
    }

    public addBizHandleWorkflow_result() {
    }

    public addBizHandleWorkflow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizHandleWorkflow_result(addBizHandleWorkflow_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addBizHandleWorkflow_result deepCopy() {
      return new addBizHandleWorkflow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addBizHandleWorkflow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizHandleWorkflow_result)
        return this.equals((addBizHandleWorkflow_result)that);
      return false;
    }

    public boolean equals(addBizHandleWorkflow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizHandleWorkflow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizHandleWorkflow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizHandleWorkflow_resultStandardSchemeFactory implements SchemeFactory {
      public addBizHandleWorkflow_resultStandardScheme getScheme() {
        return new addBizHandleWorkflow_resultStandardScheme();
      }
    }

    private static class addBizHandleWorkflow_resultStandardScheme extends StandardScheme<addBizHandleWorkflow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizHandleWorkflow_resultTupleSchemeFactory implements SchemeFactory {
      public addBizHandleWorkflow_resultTupleScheme getScheme() {
        return new addBizHandleWorkflow_resultTupleScheme();
      }
    }

    private static class addBizHandleWorkflow_resultTupleScheme extends TupleScheme<addBizHandleWorkflow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBizHandleWorkflow_args implements org.apache.thrift.TBase<updateBizHandleWorkflow_args, updateBizHandleWorkflow_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizHandleWorkflow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizHandleWorkflow_args");

    private static final org.apache.thrift.protocol.TField BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleWorkflowDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizHandleWorkflow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizHandleWorkflow_argsTupleSchemeFactory());
    }

    public BizHandleWorkflowDTO bizHandleWorkflowDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_HANDLE_WORKFLOW_DTO((short)1, "bizHandleWorkflowDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_HANDLE_WORKFLOW_DTO
            return BIZ_HANDLE_WORKFLOW_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_HANDLE_WORKFLOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("bizHandleWorkflowDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizHandleWorkflowDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizHandleWorkflow_args.class, metaDataMap);
    }

    public updateBizHandleWorkflow_args() {
    }

    public updateBizHandleWorkflow_args(
      BizHandleWorkflowDTO bizHandleWorkflowDto)
    {
      this();
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizHandleWorkflow_args(updateBizHandleWorkflow_args other) {
      if (other.isSetBizHandleWorkflowDto()) {
        this.bizHandleWorkflowDto = new BizHandleWorkflowDTO(other.bizHandleWorkflowDto);
      }
    }

    public updateBizHandleWorkflow_args deepCopy() {
      return new updateBizHandleWorkflow_args(this);
    }

    @Override
    public void clear() {
      this.bizHandleWorkflowDto = null;
    }

    public BizHandleWorkflowDTO getBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto;
    }

    public updateBizHandleWorkflow_args setBizHandleWorkflowDto(BizHandleWorkflowDTO bizHandleWorkflowDto) {
      this.bizHandleWorkflowDto = bizHandleWorkflowDto;
      return this;
    }

    public void unsetBizHandleWorkflowDto() {
      this.bizHandleWorkflowDto = null;
    }

    /** Returns true if field bizHandleWorkflowDto is set (has been assigned a value) and false otherwise */
    public boolean isSetBizHandleWorkflowDto() {
      return this.bizHandleWorkflowDto != null;
    }

    public void setBizHandleWorkflowDtoIsSet(boolean value) {
      if (!value) {
        this.bizHandleWorkflowDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        if (value == null) {
          unsetBizHandleWorkflowDto();
        } else {
          setBizHandleWorkflowDto((BizHandleWorkflowDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return getBizHandleWorkflowDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_HANDLE_WORKFLOW_DTO:
        return isSetBizHandleWorkflowDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizHandleWorkflow_args)
        return this.equals((updateBizHandleWorkflow_args)that);
      return false;
    }

    public boolean equals(updateBizHandleWorkflow_args that) {
      if (that == null)
        return false;

      boolean this_present_bizHandleWorkflowDto = true && this.isSetBizHandleWorkflowDto();
      boolean that_present_bizHandleWorkflowDto = true && that.isSetBizHandleWorkflowDto();
      if (this_present_bizHandleWorkflowDto || that_present_bizHandleWorkflowDto) {
        if (!(this_present_bizHandleWorkflowDto && that_present_bizHandleWorkflowDto))
          return false;
        if (!this.bizHandleWorkflowDto.equals(that.bizHandleWorkflowDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizHandleWorkflowDto = true && (isSetBizHandleWorkflowDto());
      list.add(present_bizHandleWorkflowDto);
      if (present_bizHandleWorkflowDto)
        list.add(bizHandleWorkflowDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizHandleWorkflow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizHandleWorkflowDto()).compareTo(other.isSetBizHandleWorkflowDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizHandleWorkflowDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleWorkflowDto, other.bizHandleWorkflowDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizHandleWorkflow_args(");
      boolean first = true;

      sb.append("bizHandleWorkflowDto:");
      if (this.bizHandleWorkflowDto == null) {
        sb.append("null");
      } else {
        sb.append(this.bizHandleWorkflowDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizHandleWorkflowDto != null) {
        bizHandleWorkflowDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizHandleWorkflow_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizHandleWorkflow_argsStandardScheme getScheme() {
        return new updateBizHandleWorkflow_argsStandardScheme();
      }
    }

    private static class updateBizHandleWorkflow_argsStandardScheme extends StandardScheme<updateBizHandleWorkflow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_HANDLE_WORKFLOW_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
                struct.bizHandleWorkflowDto.read(iprot);
                struct.setBizHandleWorkflowDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizHandleWorkflowDto != null) {
          oprot.writeFieldBegin(BIZ_HANDLE_WORKFLOW_DTO_FIELD_DESC);
          struct.bizHandleWorkflowDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizHandleWorkflow_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizHandleWorkflow_argsTupleScheme getScheme() {
        return new updateBizHandleWorkflow_argsTupleScheme();
      }
    }

    private static class updateBizHandleWorkflow_argsTupleScheme extends TupleScheme<updateBizHandleWorkflow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizHandleWorkflowDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizHandleWorkflowDto()) {
          struct.bizHandleWorkflowDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizHandleWorkflow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizHandleWorkflowDto = new BizHandleWorkflowDTO();
          struct.bizHandleWorkflowDto.read(iprot);
          struct.setBizHandleWorkflowDtoIsSet(true);
        }
      }
    }

  }

  public static class updateBizHandleWorkflow_result implements org.apache.thrift.TBase<updateBizHandleWorkflow_result, updateBizHandleWorkflow_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizHandleWorkflow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizHandleWorkflow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizHandleWorkflow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizHandleWorkflow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizHandleWorkflow_result.class, metaDataMap);
    }

    public updateBizHandleWorkflow_result() {
    }

    public updateBizHandleWorkflow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizHandleWorkflow_result(updateBizHandleWorkflow_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateBizHandleWorkflow_result deepCopy() {
      return new updateBizHandleWorkflow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateBizHandleWorkflow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizHandleWorkflow_result)
        return this.equals((updateBizHandleWorkflow_result)that);
      return false;
    }

    public boolean equals(updateBizHandleWorkflow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizHandleWorkflow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizHandleWorkflow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizHandleWorkflow_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizHandleWorkflow_resultStandardScheme getScheme() {
        return new updateBizHandleWorkflow_resultStandardScheme();
      }
    }

    private static class updateBizHandleWorkflow_resultStandardScheme extends StandardScheme<updateBizHandleWorkflow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizHandleWorkflow_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizHandleWorkflow_resultTupleScheme getScheme() {
        return new updateBizHandleWorkflow_resultTupleScheme();
      }
    }

    private static class updateBizHandleWorkflow_resultTupleScheme extends TupleScheme<updateBizHandleWorkflow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizHandleWorkflow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDifferWarn_args implements org.apache.thrift.TBase<findAllHandleDifferWarn_args, findAllHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDifferWarn_args.class, metaDataMap);
    }

    public findAllHandleDifferWarn_args() {
    }

    public findAllHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDifferWarn_args(findAllHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public findAllHandleDifferWarn_args deepCopy() {
      return new findAllHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public findAllHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDifferWarn_args)
        return this.equals((findAllHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(findAllHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDifferWarn_argsStandardScheme getScheme() {
        return new findAllHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class findAllHandleDifferWarn_argsStandardScheme extends StandardScheme<findAllHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDifferWarn_argsTupleScheme getScheme() {
        return new findAllHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class findAllHandleDifferWarn_argsTupleScheme extends TupleScheme<findAllHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDifferWarn_result implements org.apache.thrift.TBase<findAllHandleDifferWarn_result, findAllHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDifferWarn_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDifferWarn_result.class, metaDataMap);
    }

    public findAllHandleDifferWarn_result() {
    }

    public findAllHandleDifferWarn_result(
      List<HandleDifferWarnDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDifferWarn_result(findAllHandleDifferWarn_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnDTO> __this__success = new ArrayList<HandleDifferWarnDTO>(other.success.size());
        for (HandleDifferWarnDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHandleDifferWarn_result deepCopy() {
      return new findAllHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnDTO> getSuccess() {
      return this.success;
    }

    public findAllHandleDifferWarn_result setSuccess(List<HandleDifferWarnDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDifferWarn_result)
        return this.equals((findAllHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(findAllHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDifferWarn_resultStandardScheme getScheme() {
        return new findAllHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class findAllHandleDifferWarn_resultStandardScheme extends StandardScheme<findAllHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list524 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnDTO>(_list524.size);
                  HandleDifferWarnDTO _elem525;
                  for (int _i526 = 0; _i526 < _list524.size; ++_i526)
                  {
                    _elem525 = new HandleDifferWarnDTO();
                    _elem525.read(iprot);
                    struct.success.add(_elem525);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnDTO _iter527 : struct.success)
            {
              _iter527.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDifferWarn_resultTupleScheme getScheme() {
        return new findAllHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class findAllHandleDifferWarn_resultTupleScheme extends TupleScheme<findAllHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnDTO _iter528 : struct.success)
            {
              _iter528.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnDTO>(_list529.size);
            HandleDifferWarnDTO _elem530;
            for (int _i531 = 0; _i531 < _list529.size; ++_i531)
            {
              _elem530 = new HandleDifferWarnDTO();
              _elem530.read(iprot);
              struct.success.add(_elem530);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnTotal_args implements org.apache.thrift.TBase<getHandleDifferWarnTotal_args, getHandleDifferWarnTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnTotal_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnTotal_args.class, metaDataMap);
    }

    public getHandleDifferWarnTotal_args() {
    }

    public getHandleDifferWarnTotal_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnTotal_args(getHandleDifferWarnTotal_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public getHandleDifferWarnTotal_args deepCopy() {
      return new getHandleDifferWarnTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public getHandleDifferWarnTotal_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnTotal_args)
        return this.equals((getHandleDifferWarnTotal_args)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnTotal_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnTotal_argsStandardScheme getScheme() {
        return new getHandleDifferWarnTotal_argsStandardScheme();
      }
    }

    private static class getHandleDifferWarnTotal_argsStandardScheme extends StandardScheme<getHandleDifferWarnTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnTotal_argsTupleScheme getScheme() {
        return new getHandleDifferWarnTotal_argsTupleScheme();
      }
    }

    private static class getHandleDifferWarnTotal_argsTupleScheme extends TupleScheme<getHandleDifferWarnTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnTotal_result implements org.apache.thrift.TBase<getHandleDifferWarnTotal_result, getHandleDifferWarnTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnTotal_result.class, metaDataMap);
    }

    public getHandleDifferWarnTotal_result() {
    }

    public getHandleDifferWarnTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnTotal_result(getHandleDifferWarnTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleDifferWarnTotal_result deepCopy() {
      return new getHandleDifferWarnTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleDifferWarnTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnTotal_result)
        return this.equals((getHandleDifferWarnTotal_result)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnTotal_resultStandardScheme getScheme() {
        return new getHandleDifferWarnTotal_resultStandardScheme();
      }
    }

    private static class getHandleDifferWarnTotal_resultStandardScheme extends StandardScheme<getHandleDifferWarnTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnTotal_resultTupleScheme getScheme() {
        return new getHandleDifferWarnTotal_resultTupleScheme();
      }
    }

    private static class getHandleDifferWarnTotal_resultTupleScheme extends TupleScheme<getHandleDifferWarnTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHisHandleDifferWarnCount_args implements org.apache.thrift.TBase<getHisHandleDifferWarnCount_args, getHisHandleDifferWarnCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHisHandleDifferWarnCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHisHandleDifferWarnCount_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHisHandleDifferWarnCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHisHandleDifferWarnCount_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHisHandleDifferWarnCount_args.class, metaDataMap);
    }

    public getHisHandleDifferWarnCount_args() {
    }

    public getHisHandleDifferWarnCount_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHisHandleDifferWarnCount_args(getHisHandleDifferWarnCount_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public getHisHandleDifferWarnCount_args deepCopy() {
      return new getHisHandleDifferWarnCount_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public getHisHandleDifferWarnCount_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHisHandleDifferWarnCount_args)
        return this.equals((getHisHandleDifferWarnCount_args)that);
      return false;
    }

    public boolean equals(getHisHandleDifferWarnCount_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHisHandleDifferWarnCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHisHandleDifferWarnCount_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHisHandleDifferWarnCount_argsStandardSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnCount_argsStandardScheme getScheme() {
        return new getHisHandleDifferWarnCount_argsStandardScheme();
      }
    }

    private static class getHisHandleDifferWarnCount_argsStandardScheme extends StandardScheme<getHisHandleDifferWarnCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHisHandleDifferWarnCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHisHandleDifferWarnCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHisHandleDifferWarnCount_argsTupleSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnCount_argsTupleScheme getScheme() {
        return new getHisHandleDifferWarnCount_argsTupleScheme();
      }
    }

    private static class getHisHandleDifferWarnCount_argsTupleScheme extends TupleScheme<getHisHandleDifferWarnCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class getHisHandleDifferWarnCount_result implements org.apache.thrift.TBase<getHisHandleDifferWarnCount_result, getHisHandleDifferWarnCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHisHandleDifferWarnCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHisHandleDifferWarnCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHisHandleDifferWarnCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHisHandleDifferWarnCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHisHandleDifferWarnCount_result.class, metaDataMap);
    }

    public getHisHandleDifferWarnCount_result() {
    }

    public getHisHandleDifferWarnCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHisHandleDifferWarnCount_result(getHisHandleDifferWarnCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHisHandleDifferWarnCount_result deepCopy() {
      return new getHisHandleDifferWarnCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHisHandleDifferWarnCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHisHandleDifferWarnCount_result)
        return this.equals((getHisHandleDifferWarnCount_result)that);
      return false;
    }

    public boolean equals(getHisHandleDifferWarnCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHisHandleDifferWarnCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHisHandleDifferWarnCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHisHandleDifferWarnCount_resultStandardSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnCount_resultStandardScheme getScheme() {
        return new getHisHandleDifferWarnCount_resultStandardScheme();
      }
    }

    private static class getHisHandleDifferWarnCount_resultStandardScheme extends StandardScheme<getHisHandleDifferWarnCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHisHandleDifferWarnCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHisHandleDifferWarnCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHisHandleDifferWarnCount_resultTupleSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnCount_resultTupleScheme getScheme() {
        return new getHisHandleDifferWarnCount_resultTupleScheme();
      }
    }

    private static class getHisHandleDifferWarnCount_resultTupleScheme extends TupleScheme<getHisHandleDifferWarnCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findIndexHandleDifferWarn_args implements org.apache.thrift.TBase<findIndexHandleDifferWarn_args, findIndexHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findIndexHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findIndexHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findIndexHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findIndexHandleDifferWarn_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findIndexHandleDifferWarn_args.class, metaDataMap);
    }

    public findIndexHandleDifferWarn_args() {
    }

    public findIndexHandleDifferWarn_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findIndexHandleDifferWarn_args(findIndexHandleDifferWarn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public findIndexHandleDifferWarn_args deepCopy() {
      return new findIndexHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findIndexHandleDifferWarn_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findIndexHandleDifferWarn_args)
        return this.equals((findIndexHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(findIndexHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findIndexHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findIndexHandleDifferWarn_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findIndexHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public findIndexHandleDifferWarn_argsStandardScheme getScheme() {
        return new findIndexHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class findIndexHandleDifferWarn_argsStandardScheme extends StandardScheme<findIndexHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findIndexHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findIndexHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findIndexHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public findIndexHandleDifferWarn_argsTupleScheme getScheme() {
        return new findIndexHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class findIndexHandleDifferWarn_argsTupleScheme extends TupleScheme<findIndexHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findIndexHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findIndexHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class findIndexHandleDifferWarn_result implements org.apache.thrift.TBase<findIndexHandleDifferWarn_result, findIndexHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findIndexHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findIndexHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findIndexHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findIndexHandleDifferWarn_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findIndexHandleDifferWarn_result.class, metaDataMap);
    }

    public findIndexHandleDifferWarn_result() {
    }

    public findIndexHandleDifferWarn_result(
      List<HandleDifferWarnDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findIndexHandleDifferWarn_result(findIndexHandleDifferWarn_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnDTO> __this__success = new ArrayList<HandleDifferWarnDTO>(other.success.size());
        for (HandleDifferWarnDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findIndexHandleDifferWarn_result deepCopy() {
      return new findIndexHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnDTO> getSuccess() {
      return this.success;
    }

    public findIndexHandleDifferWarn_result setSuccess(List<HandleDifferWarnDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findIndexHandleDifferWarn_result)
        return this.equals((findIndexHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(findIndexHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findIndexHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findIndexHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findIndexHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public findIndexHandleDifferWarn_resultStandardScheme getScheme() {
        return new findIndexHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class findIndexHandleDifferWarn_resultStandardScheme extends StandardScheme<findIndexHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findIndexHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list532 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnDTO>(_list532.size);
                  HandleDifferWarnDTO _elem533;
                  for (int _i534 = 0; _i534 < _list532.size; ++_i534)
                  {
                    _elem533 = new HandleDifferWarnDTO();
                    _elem533.read(iprot);
                    struct.success.add(_elem533);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findIndexHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnDTO _iter535 : struct.success)
            {
              _iter535.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findIndexHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public findIndexHandleDifferWarn_resultTupleScheme getScheme() {
        return new findIndexHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class findIndexHandleDifferWarn_resultTupleScheme extends TupleScheme<findIndexHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findIndexHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnDTO _iter536 : struct.success)
            {
              _iter536.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findIndexHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list537 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnDTO>(_list537.size);
            HandleDifferWarnDTO _elem538;
            for (int _i539 = 0; _i539 < _list537.size; ++_i539)
            {
              _elem538 = new HandleDifferWarnDTO();
              _elem538.read(iprot);
              struct.success.add(_elem538);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIndexHandleDifferWarnTotal_args implements org.apache.thrift.TBase<getIndexHandleDifferWarnTotal_args, getIndexHandleDifferWarnTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexHandleDifferWarnTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexHandleDifferWarnTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexHandleDifferWarnTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexHandleDifferWarnTotal_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexHandleDifferWarnTotal_args.class, metaDataMap);
    }

    public getIndexHandleDifferWarnTotal_args() {
    }

    public getIndexHandleDifferWarnTotal_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexHandleDifferWarnTotal_args(getIndexHandleDifferWarnTotal_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public getIndexHandleDifferWarnTotal_args deepCopy() {
      return new getIndexHandleDifferWarnTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public getIndexHandleDifferWarnTotal_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexHandleDifferWarnTotal_args)
        return this.equals((getIndexHandleDifferWarnTotal_args)that);
      return false;
    }

    public boolean equals(getIndexHandleDifferWarnTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIndexHandleDifferWarnTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexHandleDifferWarnTotal_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexHandleDifferWarnTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getIndexHandleDifferWarnTotal_argsStandardScheme getScheme() {
        return new getIndexHandleDifferWarnTotal_argsStandardScheme();
      }
    }

    private static class getIndexHandleDifferWarnTotal_argsStandardScheme extends StandardScheme<getIndexHandleDifferWarnTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexHandleDifferWarnTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getIndexHandleDifferWarnTotal_argsTupleScheme getScheme() {
        return new getIndexHandleDifferWarnTotal_argsTupleScheme();
      }
    }

    private static class getIndexHandleDifferWarnTotal_argsTupleScheme extends TupleScheme<getIndexHandleDifferWarnTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class getIndexHandleDifferWarnTotal_result implements org.apache.thrift.TBase<getIndexHandleDifferWarnTotal_result, getIndexHandleDifferWarnTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexHandleDifferWarnTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexHandleDifferWarnTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexHandleDifferWarnTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexHandleDifferWarnTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexHandleDifferWarnTotal_result.class, metaDataMap);
    }

    public getIndexHandleDifferWarnTotal_result() {
    }

    public getIndexHandleDifferWarnTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexHandleDifferWarnTotal_result(getIndexHandleDifferWarnTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getIndexHandleDifferWarnTotal_result deepCopy() {
      return new getIndexHandleDifferWarnTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getIndexHandleDifferWarnTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexHandleDifferWarnTotal_result)
        return this.equals((getIndexHandleDifferWarnTotal_result)that);
      return false;
    }

    public boolean equals(getIndexHandleDifferWarnTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIndexHandleDifferWarnTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexHandleDifferWarnTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexHandleDifferWarnTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getIndexHandleDifferWarnTotal_resultStandardScheme getScheme() {
        return new getIndexHandleDifferWarnTotal_resultStandardScheme();
      }
    }

    private static class getIndexHandleDifferWarnTotal_resultStandardScheme extends StandardScheme<getIndexHandleDifferWarnTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexHandleDifferWarnTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getIndexHandleDifferWarnTotal_resultTupleScheme getScheme() {
        return new getIndexHandleDifferWarnTotal_resultTupleScheme();
      }
    }

    private static class getIndexHandleDifferWarnTotal_resultTupleScheme extends TupleScheme<getIndexHandleDifferWarnTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHandleDifferWarn_args implements org.apache.thrift.TBase<addHandleDifferWarn_args, addHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDifferWarn_args.class, metaDataMap);
    }

    public addHandleDifferWarn_args() {
    }

    public addHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDifferWarn_args(addHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public addHandleDifferWarn_args deepCopy() {
      return new addHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public addHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDifferWarn_args)
        return this.equals((addHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(addHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public addHandleDifferWarn_argsStandardScheme getScheme() {
        return new addHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class addHandleDifferWarn_argsStandardScheme extends StandardScheme<addHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public addHandleDifferWarn_argsTupleScheme getScheme() {
        return new addHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class addHandleDifferWarn_argsTupleScheme extends TupleScheme<addHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class addHandleDifferWarn_result implements org.apache.thrift.TBase<addHandleDifferWarn_result, addHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDifferWarn_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDifferWarn_result.class, metaDataMap);
    }

    public addHandleDifferWarn_result() {
    }

    public addHandleDifferWarn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDifferWarn_result(addHandleDifferWarn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHandleDifferWarn_result deepCopy() {
      return new addHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHandleDifferWarn_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDifferWarn_result)
        return this.equals((addHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(addHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public addHandleDifferWarn_resultStandardScheme getScheme() {
        return new addHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class addHandleDifferWarn_resultStandardScheme extends StandardScheme<addHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public addHandleDifferWarn_resultTupleScheme getScheme() {
        return new addHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class addHandleDifferWarn_resultTupleScheme extends TupleScheme<addHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delHandleDifferWarn_args implements org.apache.thrift.TBase<delHandleDifferWarn_args, delHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<delHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delHandleDifferWarn_args.class, metaDataMap);
    }

    public delHandleDifferWarn_args() {
    }

    public delHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delHandleDifferWarn_args(delHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public delHandleDifferWarn_args deepCopy() {
      return new delHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public delHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delHandleDifferWarn_args)
        return this.equals((delHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(delHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(delHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public delHandleDifferWarn_argsStandardScheme getScheme() {
        return new delHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class delHandleDifferWarn_argsStandardScheme extends StandardScheme<delHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public delHandleDifferWarn_argsTupleScheme getScheme() {
        return new delHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class delHandleDifferWarn_argsTupleScheme extends TupleScheme<delHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class delHandleDifferWarn_result implements org.apache.thrift.TBase<delHandleDifferWarn_result, delHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<delHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delHandleDifferWarn_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delHandleDifferWarn_result.class, metaDataMap);
    }

    public delHandleDifferWarn_result() {
    }

    public delHandleDifferWarn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delHandleDifferWarn_result(delHandleDifferWarn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delHandleDifferWarn_result deepCopy() {
      return new delHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delHandleDifferWarn_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delHandleDifferWarn_result)
        return this.equals((delHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(delHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public delHandleDifferWarn_resultStandardScheme getScheme() {
        return new delHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class delHandleDifferWarn_resultStandardScheme extends StandardScheme<delHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public delHandleDifferWarn_resultTupleScheme getScheme() {
        return new delHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class delHandleDifferWarn_resultTupleScheme extends TupleScheme<delHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnById_args implements org.apache.thrift.TBase<getHandleDifferWarnById_args, getHandleDifferWarnById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnById_args.class, metaDataMap);
    }

    public getHandleDifferWarnById_args() {
    }

    public getHandleDifferWarnById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnById_args(getHandleDifferWarnById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getHandleDifferWarnById_args deepCopy() {
      return new getHandleDifferWarnById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getHandleDifferWarnById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnById_args)
        return this.equals((getHandleDifferWarnById_args)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnById_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnById_argsStandardScheme getScheme() {
        return new getHandleDifferWarnById_argsStandardScheme();
      }
    }

    private static class getHandleDifferWarnById_argsStandardScheme extends StandardScheme<getHandleDifferWarnById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnById_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnById_argsTupleScheme getScheme() {
        return new getHandleDifferWarnById_argsTupleScheme();
      }
    }

    private static class getHandleDifferWarnById_argsTupleScheme extends TupleScheme<getHandleDifferWarnById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnById_result implements org.apache.thrift.TBase<getHandleDifferWarnById_result, getHandleDifferWarnById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnById_resultTupleSchemeFactory());
    }

    public HandleDifferWarnDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnById_result.class, metaDataMap);
    }

    public getHandleDifferWarnById_result() {
    }

    public getHandleDifferWarnById_result(
      HandleDifferWarnDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnById_result(getHandleDifferWarnById_result other) {
      if (other.isSetSuccess()) {
        this.success = new HandleDifferWarnDTO(other.success);
      }
    }

    public getHandleDifferWarnById_result deepCopy() {
      return new getHandleDifferWarnById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HandleDifferWarnDTO getSuccess() {
      return this.success;
    }

    public getHandleDifferWarnById_result setSuccess(HandleDifferWarnDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnById_result)
        return this.equals((getHandleDifferWarnById_result)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnById_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnById_resultStandardScheme getScheme() {
        return new getHandleDifferWarnById_resultStandardScheme();
      }
    }

    private static class getHandleDifferWarnById_resultStandardScheme extends StandardScheme<getHandleDifferWarnById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HandleDifferWarnDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnById_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnById_resultTupleScheme getScheme() {
        return new getHandleDifferWarnById_resultTupleScheme();
      }
    }

    private static class getHandleDifferWarnById_resultTupleScheme extends TupleScheme<getHandleDifferWarnById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HandleDifferWarnDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDifferWarn_args implements org.apache.thrift.TBase<updateHandleDifferWarn_args, updateHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDifferWarn_args.class, metaDataMap);
    }

    public updateHandleDifferWarn_args() {
    }

    public updateHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDifferWarn_args(updateHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public updateHandleDifferWarn_args deepCopy() {
      return new updateHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public updateHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDifferWarn_args)
        return this.equals((updateHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(updateHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public updateHandleDifferWarn_argsStandardScheme getScheme() {
        return new updateHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class updateHandleDifferWarn_argsStandardScheme extends StandardScheme<updateHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public updateHandleDifferWarn_argsTupleScheme getScheme() {
        return new updateHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class updateHandleDifferWarn_argsTupleScheme extends TupleScheme<updateHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDifferWarn_result implements org.apache.thrift.TBase<updateHandleDifferWarn_result, updateHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDifferWarn_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDifferWarn_result.class, metaDataMap);
    }

    public updateHandleDifferWarn_result() {
    }

    public updateHandleDifferWarn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDifferWarn_result(updateHandleDifferWarn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHandleDifferWarn_result deepCopy() {
      return new updateHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHandleDifferWarn_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDifferWarn_result)
        return this.equals((updateHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(updateHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public updateHandleDifferWarn_resultStandardScheme getScheme() {
        return new updateHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class updateHandleDifferWarn_resultStandardScheme extends StandardScheme<updateHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public updateHandleDifferWarn_resultTupleScheme getScheme() {
        return new updateHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class updateHandleDifferWarn_resultTupleScheme extends TupleScheme<updateHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHisHandleDifferWarn_args implements org.apache.thrift.TBase<addHisHandleDifferWarn_args, addHisHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHisHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHisHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHisHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHisHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHisHandleDifferWarn_args.class, metaDataMap);
    }

    public addHisHandleDifferWarn_args() {
    }

    public addHisHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHisHandleDifferWarn_args(addHisHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public addHisHandleDifferWarn_args deepCopy() {
      return new addHisHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public addHisHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHisHandleDifferWarn_args)
        return this.equals((addHisHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(addHisHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHisHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHisHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHisHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public addHisHandleDifferWarn_argsStandardScheme getScheme() {
        return new addHisHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class addHisHandleDifferWarn_argsStandardScheme extends StandardScheme<addHisHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHisHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public addHisHandleDifferWarn_argsTupleScheme getScheme() {
        return new addHisHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class addHisHandleDifferWarn_argsTupleScheme extends TupleScheme<addHisHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class addHisHandleDifferWarn_result implements org.apache.thrift.TBase<addHisHandleDifferWarn_result, addHisHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHisHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHisHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHisHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHisHandleDifferWarn_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHisHandleDifferWarn_result.class, metaDataMap);
    }

    public addHisHandleDifferWarn_result() {
    }

    public addHisHandleDifferWarn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHisHandleDifferWarn_result(addHisHandleDifferWarn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHisHandleDifferWarn_result deepCopy() {
      return new addHisHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHisHandleDifferWarn_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHisHandleDifferWarn_result)
        return this.equals((addHisHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(addHisHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHisHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHisHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHisHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public addHisHandleDifferWarn_resultStandardScheme getScheme() {
        return new addHisHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class addHisHandleDifferWarn_resultStandardScheme extends StandardScheme<addHisHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHisHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public addHisHandleDifferWarn_resultTupleScheme getScheme() {
        return new addHisHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class addHisHandleDifferWarn_resultTupleScheme extends TupleScheme<addHisHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHisHandleDifferWarn_args implements org.apache.thrift.TBase<findAllHisHandleDifferWarn_args, findAllHisHandleDifferWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHisHandleDifferWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHisHandleDifferWarn_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHisHandleDifferWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHisHandleDifferWarn_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHisHandleDifferWarn_args.class, metaDataMap);
    }

    public findAllHisHandleDifferWarn_args() {
    }

    public findAllHisHandleDifferWarn_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHisHandleDifferWarn_args(findAllHisHandleDifferWarn_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public findAllHisHandleDifferWarn_args deepCopy() {
      return new findAllHisHandleDifferWarn_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public findAllHisHandleDifferWarn_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHisHandleDifferWarn_args)
        return this.equals((findAllHisHandleDifferWarn_args)that);
      return false;
    }

    public boolean equals(findAllHisHandleDifferWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHisHandleDifferWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHisHandleDifferWarn_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHisHandleDifferWarn_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHisHandleDifferWarn_argsStandardScheme getScheme() {
        return new findAllHisHandleDifferWarn_argsStandardScheme();
      }
    }

    private static class findAllHisHandleDifferWarn_argsStandardScheme extends StandardScheme<findAllHisHandleDifferWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHisHandleDifferWarn_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHisHandleDifferWarn_argsTupleScheme getScheme() {
        return new findAllHisHandleDifferWarn_argsTupleScheme();
      }
    }

    private static class findAllHisHandleDifferWarn_argsTupleScheme extends TupleScheme<findAllHisHandleDifferWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHisHandleDifferWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHisHandleDifferWarn_result implements org.apache.thrift.TBase<findAllHisHandleDifferWarn_result, findAllHisHandleDifferWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHisHandleDifferWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHisHandleDifferWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHisHandleDifferWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHisHandleDifferWarn_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHisHandleDifferWarn_result.class, metaDataMap);
    }

    public findAllHisHandleDifferWarn_result() {
    }

    public findAllHisHandleDifferWarn_result(
      List<HandleDifferWarnDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHisHandleDifferWarn_result(findAllHisHandleDifferWarn_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnDTO> __this__success = new ArrayList<HandleDifferWarnDTO>(other.success.size());
        for (HandleDifferWarnDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHisHandleDifferWarn_result deepCopy() {
      return new findAllHisHandleDifferWarn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnDTO> getSuccess() {
      return this.success;
    }

    public findAllHisHandleDifferWarn_result setSuccess(List<HandleDifferWarnDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHisHandleDifferWarn_result)
        return this.equals((findAllHisHandleDifferWarn_result)that);
      return false;
    }

    public boolean equals(findAllHisHandleDifferWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHisHandleDifferWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHisHandleDifferWarn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHisHandleDifferWarn_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHisHandleDifferWarn_resultStandardScheme getScheme() {
        return new findAllHisHandleDifferWarn_resultStandardScheme();
      }
    }

    private static class findAllHisHandleDifferWarn_resultStandardScheme extends StandardScheme<findAllHisHandleDifferWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list540 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnDTO>(_list540.size);
                  HandleDifferWarnDTO _elem541;
                  for (int _i542 = 0; _i542 < _list540.size; ++_i542)
                  {
                    _elem541 = new HandleDifferWarnDTO();
                    _elem541.read(iprot);
                    struct.success.add(_elem541);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnDTO _iter543 : struct.success)
            {
              _iter543.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHisHandleDifferWarn_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHisHandleDifferWarn_resultTupleScheme getScheme() {
        return new findAllHisHandleDifferWarn_resultTupleScheme();
      }
    }

    private static class findAllHisHandleDifferWarn_resultTupleScheme extends TupleScheme<findAllHisHandleDifferWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnDTO _iter544 : struct.success)
            {
              _iter544.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHisHandleDifferWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list545 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnDTO>(_list545.size);
            HandleDifferWarnDTO _elem546;
            for (int _i547 = 0; _i547 < _list545.size; ++_i547)
            {
              _elem546 = new HandleDifferWarnDTO();
              _elem546.read(iprot);
              struct.success.add(_elem546);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHisHandleDifferWarnTotal_args implements org.apache.thrift.TBase<getHisHandleDifferWarnTotal_args, getHisHandleDifferWarnTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHisHandleDifferWarnTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHisHandleDifferWarnTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHisHandleDifferWarnTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHisHandleDifferWarnTotal_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHisHandleDifferWarnTotal_args.class, metaDataMap);
    }

    public getHisHandleDifferWarnTotal_args() {
    }

    public getHisHandleDifferWarnTotal_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHisHandleDifferWarnTotal_args(getHisHandleDifferWarnTotal_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public getHisHandleDifferWarnTotal_args deepCopy() {
      return new getHisHandleDifferWarnTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public getHisHandleDifferWarnTotal_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHisHandleDifferWarnTotal_args)
        return this.equals((getHisHandleDifferWarnTotal_args)that);
      return false;
    }

    public boolean equals(getHisHandleDifferWarnTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHisHandleDifferWarnTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHisHandleDifferWarnTotal_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHisHandleDifferWarnTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnTotal_argsStandardScheme getScheme() {
        return new getHisHandleDifferWarnTotal_argsStandardScheme();
      }
    }

    private static class getHisHandleDifferWarnTotal_argsStandardScheme extends StandardScheme<getHisHandleDifferWarnTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHisHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHisHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHisHandleDifferWarnTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnTotal_argsTupleScheme getScheme() {
        return new getHisHandleDifferWarnTotal_argsTupleScheme();
      }
    }

    private static class getHisHandleDifferWarnTotal_argsTupleScheme extends TupleScheme<getHisHandleDifferWarnTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class getHisHandleDifferWarnTotal_result implements org.apache.thrift.TBase<getHisHandleDifferWarnTotal_result, getHisHandleDifferWarnTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHisHandleDifferWarnTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHisHandleDifferWarnTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHisHandleDifferWarnTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHisHandleDifferWarnTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHisHandleDifferWarnTotal_result.class, metaDataMap);
    }

    public getHisHandleDifferWarnTotal_result() {
    }

    public getHisHandleDifferWarnTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHisHandleDifferWarnTotal_result(getHisHandleDifferWarnTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHisHandleDifferWarnTotal_result deepCopy() {
      return new getHisHandleDifferWarnTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHisHandleDifferWarnTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHisHandleDifferWarnTotal_result)
        return this.equals((getHisHandleDifferWarnTotal_result)that);
      return false;
    }

    public boolean equals(getHisHandleDifferWarnTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHisHandleDifferWarnTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHisHandleDifferWarnTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHisHandleDifferWarnTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnTotal_resultStandardScheme getScheme() {
        return new getHisHandleDifferWarnTotal_resultStandardScheme();
      }
    }

    private static class getHisHandleDifferWarnTotal_resultStandardScheme extends StandardScheme<getHisHandleDifferWarnTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHisHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHisHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHisHandleDifferWarnTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHisHandleDifferWarnTotal_resultTupleScheme getScheme() {
        return new getHisHandleDifferWarnTotal_resultTupleScheme();
      }
    }

    private static class getHisHandleDifferWarnTotal_resultTupleScheme extends TupleScheme<getHisHandleDifferWarnTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHisHandleDifferWarnTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDynamicFile_args implements org.apache.thrift.TBase<findAllHandleDynamicFile_args, findAllHandleDynamicFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDynamicFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDynamicFile_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicFileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDynamicFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDynamicFile_argsTupleSchemeFactory());
    }

    public HandleDynamicFileDTO handleDynamicFileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_FILE_DTO((short)1, "handleDynamicFileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_FILE_DTO
            return HANDLE_DYNAMIC_FILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_FILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicFileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDynamicFile_args.class, metaDataMap);
    }

    public findAllHandleDynamicFile_args() {
    }

    public findAllHandleDynamicFile_args(
      HandleDynamicFileDTO handleDynamicFileDTO)
    {
      this();
      this.handleDynamicFileDTO = handleDynamicFileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDynamicFile_args(findAllHandleDynamicFile_args other) {
      if (other.isSetHandleDynamicFileDTO()) {
        this.handleDynamicFileDTO = new HandleDynamicFileDTO(other.handleDynamicFileDTO);
      }
    }

    public findAllHandleDynamicFile_args deepCopy() {
      return new findAllHandleDynamicFile_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicFileDTO = null;
    }

    public HandleDynamicFileDTO getHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO;
    }

    public findAllHandleDynamicFile_args setHandleDynamicFileDTO(HandleDynamicFileDTO handleDynamicFileDTO) {
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      return this;
    }

    public void unsetHandleDynamicFileDTO() {
      this.handleDynamicFileDTO = null;
    }

    /** Returns true if field handleDynamicFileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO != null;
    }

    public void setHandleDynamicFileDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicFileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        if (value == null) {
          unsetHandleDynamicFileDTO();
        } else {
          setHandleDynamicFileDTO((HandleDynamicFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return getHandleDynamicFileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return isSetHandleDynamicFileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDynamicFile_args)
        return this.equals((findAllHandleDynamicFile_args)that);
      return false;
    }

    public boolean equals(findAllHandleDynamicFile_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicFileDTO = true && this.isSetHandleDynamicFileDTO();
      boolean that_present_handleDynamicFileDTO = true && that.isSetHandleDynamicFileDTO();
      if (this_present_handleDynamicFileDTO || that_present_handleDynamicFileDTO) {
        if (!(this_present_handleDynamicFileDTO && that_present_handleDynamicFileDTO))
          return false;
        if (!this.handleDynamicFileDTO.equals(that.handleDynamicFileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicFileDTO = true && (isSetHandleDynamicFileDTO());
      list.add(present_handleDynamicFileDTO);
      if (present_handleDynamicFileDTO)
        list.add(handleDynamicFileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDynamicFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicFileDTO()).compareTo(other.isSetHandleDynamicFileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicFileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicFileDTO, other.handleDynamicFileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDynamicFile_args(");
      boolean first = true;

      sb.append("handleDynamicFileDTO:");
      if (this.handleDynamicFileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicFileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicFileDTO != null) {
        handleDynamicFileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDynamicFile_argsStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDynamicFile_argsStandardScheme getScheme() {
        return new findAllHandleDynamicFile_argsStandardScheme();
      }
    }

    private static class findAllHandleDynamicFile_argsStandardScheme extends StandardScheme<findAllHandleDynamicFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_FILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
                struct.handleDynamicFileDTO.read(iprot);
                struct.setHandleDynamicFileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicFileDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC);
          struct.handleDynamicFileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDynamicFile_argsTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDynamicFile_argsTupleScheme getScheme() {
        return new findAllHandleDynamicFile_argsTupleScheme();
      }
    }

    private static class findAllHandleDynamicFile_argsTupleScheme extends TupleScheme<findAllHandleDynamicFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicFileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicFileDTO()) {
          struct.handleDynamicFileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
          struct.handleDynamicFileDTO.read(iprot);
          struct.setHandleDynamicFileDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllHandleDynamicFile_result implements org.apache.thrift.TBase<findAllHandleDynamicFile_result, findAllHandleDynamicFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllHandleDynamicFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHandleDynamicFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllHandleDynamicFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllHandleDynamicFile_resultTupleSchemeFactory());
    }

    public List<HandleDynamicFileDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHandleDynamicFile_result.class, metaDataMap);
    }

    public findAllHandleDynamicFile_result() {
    }

    public findAllHandleDynamicFile_result(
      List<HandleDynamicFileDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHandleDynamicFile_result(findAllHandleDynamicFile_result other) {
      if (other.isSetSuccess()) {
        List<HandleDynamicFileDTO> __this__success = new ArrayList<HandleDynamicFileDTO>(other.success.size());
        for (HandleDynamicFileDTO other_element : other.success) {
          __this__success.add(new HandleDynamicFileDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHandleDynamicFile_result deepCopy() {
      return new findAllHandleDynamicFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDynamicFileDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDynamicFileDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDynamicFileDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDynamicFileDTO> getSuccess() {
      return this.success;
    }

    public findAllHandleDynamicFile_result setSuccess(List<HandleDynamicFileDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDynamicFileDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHandleDynamicFile_result)
        return this.equals((findAllHandleDynamicFile_result)that);
      return false;
    }

    public boolean equals(findAllHandleDynamicFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllHandleDynamicFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHandleDynamicFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllHandleDynamicFile_resultStandardSchemeFactory implements SchemeFactory {
      public findAllHandleDynamicFile_resultStandardScheme getScheme() {
        return new findAllHandleDynamicFile_resultStandardScheme();
      }
    }

    private static class findAllHandleDynamicFile_resultStandardScheme extends StandardScheme<findAllHandleDynamicFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list548 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDynamicFileDTO>(_list548.size);
                  HandleDynamicFileDTO _elem549;
                  for (int _i550 = 0; _i550 < _list548.size; ++_i550)
                  {
                    _elem549 = new HandleDynamicFileDTO();
                    _elem549.read(iprot);
                    struct.success.add(_elem549);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDynamicFileDTO _iter551 : struct.success)
            {
              _iter551.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllHandleDynamicFile_resultTupleSchemeFactory implements SchemeFactory {
      public findAllHandleDynamicFile_resultTupleScheme getScheme() {
        return new findAllHandleDynamicFile_resultTupleScheme();
      }
    }

    private static class findAllHandleDynamicFile_resultTupleScheme extends TupleScheme<findAllHandleDynamicFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDynamicFileDTO _iter552 : struct.success)
            {
              _iter552.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list553 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDynamicFileDTO>(_list553.size);
            HandleDynamicFileDTO _elem554;
            for (int _i555 = 0; _i555 < _list553.size; ++_i555)
            {
              _elem554 = new HandleDynamicFileDTO();
              _elem554.read(iprot);
              struct.success.add(_elem554);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicFileTotal_args implements org.apache.thrift.TBase<getHandleDynamicFileTotal_args, getHandleDynamicFileTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicFileTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicFileTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicFileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicFileTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicFileTotal_argsTupleSchemeFactory());
    }

    public HandleDynamicFileDTO handleDynamicFileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_FILE_DTO((short)1, "handleDynamicFileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_FILE_DTO
            return HANDLE_DYNAMIC_FILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_FILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicFileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicFileTotal_args.class, metaDataMap);
    }

    public getHandleDynamicFileTotal_args() {
    }

    public getHandleDynamicFileTotal_args(
      HandleDynamicFileDTO handleDynamicFileDTO)
    {
      this();
      this.handleDynamicFileDTO = handleDynamicFileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicFileTotal_args(getHandleDynamicFileTotal_args other) {
      if (other.isSetHandleDynamicFileDTO()) {
        this.handleDynamicFileDTO = new HandleDynamicFileDTO(other.handleDynamicFileDTO);
      }
    }

    public getHandleDynamicFileTotal_args deepCopy() {
      return new getHandleDynamicFileTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicFileDTO = null;
    }

    public HandleDynamicFileDTO getHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO;
    }

    public getHandleDynamicFileTotal_args setHandleDynamicFileDTO(HandleDynamicFileDTO handleDynamicFileDTO) {
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      return this;
    }

    public void unsetHandleDynamicFileDTO() {
      this.handleDynamicFileDTO = null;
    }

    /** Returns true if field handleDynamicFileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO != null;
    }

    public void setHandleDynamicFileDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicFileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        if (value == null) {
          unsetHandleDynamicFileDTO();
        } else {
          setHandleDynamicFileDTO((HandleDynamicFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return getHandleDynamicFileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return isSetHandleDynamicFileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicFileTotal_args)
        return this.equals((getHandleDynamicFileTotal_args)that);
      return false;
    }

    public boolean equals(getHandleDynamicFileTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicFileDTO = true && this.isSetHandleDynamicFileDTO();
      boolean that_present_handleDynamicFileDTO = true && that.isSetHandleDynamicFileDTO();
      if (this_present_handleDynamicFileDTO || that_present_handleDynamicFileDTO) {
        if (!(this_present_handleDynamicFileDTO && that_present_handleDynamicFileDTO))
          return false;
        if (!this.handleDynamicFileDTO.equals(that.handleDynamicFileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicFileDTO = true && (isSetHandleDynamicFileDTO());
      list.add(present_handleDynamicFileDTO);
      if (present_handleDynamicFileDTO)
        list.add(handleDynamicFileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicFileTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicFileDTO()).compareTo(other.isSetHandleDynamicFileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicFileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicFileDTO, other.handleDynamicFileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicFileTotal_args(");
      boolean first = true;

      sb.append("handleDynamicFileDTO:");
      if (this.handleDynamicFileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicFileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicFileDTO != null) {
        handleDynamicFileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicFileTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileTotal_argsStandardScheme getScheme() {
        return new getHandleDynamicFileTotal_argsStandardScheme();
      }
    }

    private static class getHandleDynamicFileTotal_argsStandardScheme extends StandardScheme<getHandleDynamicFileTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicFileTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_FILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
                struct.handleDynamicFileDTO.read(iprot);
                struct.setHandleDynamicFileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicFileTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicFileDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC);
          struct.handleDynamicFileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicFileTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileTotal_argsTupleScheme getScheme() {
        return new getHandleDynamicFileTotal_argsTupleScheme();
      }
    }

    private static class getHandleDynamicFileTotal_argsTupleScheme extends TupleScheme<getHandleDynamicFileTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicFileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicFileDTO()) {
          struct.handleDynamicFileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
          struct.handleDynamicFileDTO.read(iprot);
          struct.setHandleDynamicFileDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicFileTotal_result implements org.apache.thrift.TBase<getHandleDynamicFileTotal_result, getHandleDynamicFileTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicFileTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicFileTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicFileTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicFileTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicFileTotal_result.class, metaDataMap);
    }

    public getHandleDynamicFileTotal_result() {
    }

    public getHandleDynamicFileTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicFileTotal_result(getHandleDynamicFileTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleDynamicFileTotal_result deepCopy() {
      return new getHandleDynamicFileTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleDynamicFileTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicFileTotal_result)
        return this.equals((getHandleDynamicFileTotal_result)that);
      return false;
    }

    public boolean equals(getHandleDynamicFileTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicFileTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicFileTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicFileTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileTotal_resultStandardScheme getScheme() {
        return new getHandleDynamicFileTotal_resultStandardScheme();
      }
    }

    private static class getHandleDynamicFileTotal_resultStandardScheme extends StandardScheme<getHandleDynamicFileTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicFileTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicFileTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicFileTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileTotal_resultTupleScheme getScheme() {
        return new getHandleDynamicFileTotal_resultTupleScheme();
      }
    }

    private static class getHandleDynamicFileTotal_resultTupleScheme extends TupleScheme<getHandleDynamicFileTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamicFile_args implements org.apache.thrift.TBase<addHandleDynamicFile_args, addHandleDynamicFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamicFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamicFile_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicFileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizFile", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamicFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamicFile_argsTupleSchemeFactory());
    }

    public HandleDynamicFileDTO handleDynamicFileDTO; // required
    public com.xlkfinance.bms.rpc.system.BizFile bizFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_FILE_DTO((short)1, "handleDynamicFileDTO"),
      BIZ_FILE((short)2, "bizFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_FILE_DTO
            return HANDLE_DYNAMIC_FILE_DTO;
          case 2: // BIZ_FILE
            return BIZ_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_FILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicFileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      tmpMap.put(_Fields.BIZ_FILE, new org.apache.thrift.meta_data.FieldMetaData("bizFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.system.BizFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamicFile_args.class, metaDataMap);
    }

    public addHandleDynamicFile_args() {
    }

    public addHandleDynamicFile_args(
      HandleDynamicFileDTO handleDynamicFileDTO,
      com.xlkfinance.bms.rpc.system.BizFile bizFile)
    {
      this();
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      this.bizFile = bizFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamicFile_args(addHandleDynamicFile_args other) {
      if (other.isSetHandleDynamicFileDTO()) {
        this.handleDynamicFileDTO = new HandleDynamicFileDTO(other.handleDynamicFileDTO);
      }
      if (other.isSetBizFile()) {
        this.bizFile = new com.xlkfinance.bms.rpc.system.BizFile(other.bizFile);
      }
    }

    public addHandleDynamicFile_args deepCopy() {
      return new addHandleDynamicFile_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicFileDTO = null;
      this.bizFile = null;
    }

    public HandleDynamicFileDTO getHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO;
    }

    public addHandleDynamicFile_args setHandleDynamicFileDTO(HandleDynamicFileDTO handleDynamicFileDTO) {
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      return this;
    }

    public void unsetHandleDynamicFileDTO() {
      this.handleDynamicFileDTO = null;
    }

    /** Returns true if field handleDynamicFileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO != null;
    }

    public void setHandleDynamicFileDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicFileDTO = null;
      }
    }

    public com.xlkfinance.bms.rpc.system.BizFile getBizFile() {
      return this.bizFile;
    }

    public addHandleDynamicFile_args setBizFile(com.xlkfinance.bms.rpc.system.BizFile bizFile) {
      this.bizFile = bizFile;
      return this;
    }

    public void unsetBizFile() {
      this.bizFile = null;
    }

    /** Returns true if field bizFile is set (has been assigned a value) and false otherwise */
    public boolean isSetBizFile() {
      return this.bizFile != null;
    }

    public void setBizFileIsSet(boolean value) {
      if (!value) {
        this.bizFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        if (value == null) {
          unsetHandleDynamicFileDTO();
        } else {
          setHandleDynamicFileDTO((HandleDynamicFileDTO)value);
        }
        break;

      case BIZ_FILE:
        if (value == null) {
          unsetBizFile();
        } else {
          setBizFile((com.xlkfinance.bms.rpc.system.BizFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return getHandleDynamicFileDTO();

      case BIZ_FILE:
        return getBizFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return isSetHandleDynamicFileDTO();
      case BIZ_FILE:
        return isSetBizFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamicFile_args)
        return this.equals((addHandleDynamicFile_args)that);
      return false;
    }

    public boolean equals(addHandleDynamicFile_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicFileDTO = true && this.isSetHandleDynamicFileDTO();
      boolean that_present_handleDynamicFileDTO = true && that.isSetHandleDynamicFileDTO();
      if (this_present_handleDynamicFileDTO || that_present_handleDynamicFileDTO) {
        if (!(this_present_handleDynamicFileDTO && that_present_handleDynamicFileDTO))
          return false;
        if (!this.handleDynamicFileDTO.equals(that.handleDynamicFileDTO))
          return false;
      }

      boolean this_present_bizFile = true && this.isSetBizFile();
      boolean that_present_bizFile = true && that.isSetBizFile();
      if (this_present_bizFile || that_present_bizFile) {
        if (!(this_present_bizFile && that_present_bizFile))
          return false;
        if (!this.bizFile.equals(that.bizFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicFileDTO = true && (isSetHandleDynamicFileDTO());
      list.add(present_handleDynamicFileDTO);
      if (present_handleDynamicFileDTO)
        list.add(handleDynamicFileDTO);

      boolean present_bizFile = true && (isSetBizFile());
      list.add(present_bizFile);
      if (present_bizFile)
        list.add(bizFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamicFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicFileDTO()).compareTo(other.isSetHandleDynamicFileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicFileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicFileDTO, other.handleDynamicFileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizFile()).compareTo(other.isSetBizFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizFile, other.bizFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamicFile_args(");
      boolean first = true;

      sb.append("handleDynamicFileDTO:");
      if (this.handleDynamicFileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicFileDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizFile:");
      if (this.bizFile == null) {
        sb.append("null");
      } else {
        sb.append(this.bizFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicFileDTO != null) {
        handleDynamicFileDTO.validate();
      }
      if (bizFile != null) {
        bizFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamicFile_argsStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamicFile_argsStandardScheme getScheme() {
        return new addHandleDynamicFile_argsStandardScheme();
      }
    }

    private static class addHandleDynamicFile_argsStandardScheme extends StandardScheme<addHandleDynamicFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_FILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
                struct.handleDynamicFileDTO.read(iprot);
                struct.setHandleDynamicFileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizFile = new com.xlkfinance.bms.rpc.system.BizFile();
                struct.bizFile.read(iprot);
                struct.setBizFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicFileDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC);
          struct.handleDynamicFileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizFile != null) {
          oprot.writeFieldBegin(BIZ_FILE_FIELD_DESC);
          struct.bizFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamicFile_argsTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamicFile_argsTupleScheme getScheme() {
        return new addHandleDynamicFile_argsTupleScheme();
      }
    }

    private static class addHandleDynamicFile_argsTupleScheme extends TupleScheme<addHandleDynamicFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicFileDTO()) {
          optionals.set(0);
        }
        if (struct.isSetBizFile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandleDynamicFileDTO()) {
          struct.handleDynamicFileDTO.write(oprot);
        }
        if (struct.isSetBizFile()) {
          struct.bizFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
          struct.handleDynamicFileDTO.read(iprot);
          struct.setHandleDynamicFileDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizFile = new com.xlkfinance.bms.rpc.system.BizFile();
          struct.bizFile.read(iprot);
          struct.setBizFileIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamicFile_result implements org.apache.thrift.TBase<addHandleDynamicFile_result, addHandleDynamicFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamicFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamicFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamicFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamicFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamicFile_result.class, metaDataMap);
    }

    public addHandleDynamicFile_result() {
    }

    public addHandleDynamicFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamicFile_result(addHandleDynamicFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHandleDynamicFile_result deepCopy() {
      return new addHandleDynamicFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHandleDynamicFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamicFile_result)
        return this.equals((addHandleDynamicFile_result)that);
      return false;
    }

    public boolean equals(addHandleDynamicFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamicFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamicFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamicFile_resultStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamicFile_resultStandardScheme getScheme() {
        return new addHandleDynamicFile_resultStandardScheme();
      }
    }

    private static class addHandleDynamicFile_resultStandardScheme extends StandardScheme<addHandleDynamicFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamicFile_resultTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamicFile_resultTupleScheme getScheme() {
        return new addHandleDynamicFile_resultTupleScheme();
      }
    }

    private static class addHandleDynamicFile_resultTupleScheme extends TupleScheme<addHandleDynamicFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamicFileOfComm_args implements org.apache.thrift.TBase<addHandleDynamicFileOfComm_args, addHandleDynamicFileOfComm_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamicFileOfComm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamicFileOfComm_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicFileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamicFileOfComm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamicFileOfComm_argsTupleSchemeFactory());
    }

    public HandleDynamicFileDTO handleDynamicFileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_FILE_DTO((short)1, "handleDynamicFileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_FILE_DTO
            return HANDLE_DYNAMIC_FILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_FILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicFileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamicFileOfComm_args.class, metaDataMap);
    }

    public addHandleDynamicFileOfComm_args() {
    }

    public addHandleDynamicFileOfComm_args(
      HandleDynamicFileDTO handleDynamicFileDTO)
    {
      this();
      this.handleDynamicFileDTO = handleDynamicFileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamicFileOfComm_args(addHandleDynamicFileOfComm_args other) {
      if (other.isSetHandleDynamicFileDTO()) {
        this.handleDynamicFileDTO = new HandleDynamicFileDTO(other.handleDynamicFileDTO);
      }
    }

    public addHandleDynamicFileOfComm_args deepCopy() {
      return new addHandleDynamicFileOfComm_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicFileDTO = null;
    }

    public HandleDynamicFileDTO getHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO;
    }

    public addHandleDynamicFileOfComm_args setHandleDynamicFileDTO(HandleDynamicFileDTO handleDynamicFileDTO) {
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      return this;
    }

    public void unsetHandleDynamicFileDTO() {
      this.handleDynamicFileDTO = null;
    }

    /** Returns true if field handleDynamicFileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO != null;
    }

    public void setHandleDynamicFileDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicFileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        if (value == null) {
          unsetHandleDynamicFileDTO();
        } else {
          setHandleDynamicFileDTO((HandleDynamicFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return getHandleDynamicFileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return isSetHandleDynamicFileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamicFileOfComm_args)
        return this.equals((addHandleDynamicFileOfComm_args)that);
      return false;
    }

    public boolean equals(addHandleDynamicFileOfComm_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicFileDTO = true && this.isSetHandleDynamicFileDTO();
      boolean that_present_handleDynamicFileDTO = true && that.isSetHandleDynamicFileDTO();
      if (this_present_handleDynamicFileDTO || that_present_handleDynamicFileDTO) {
        if (!(this_present_handleDynamicFileDTO && that_present_handleDynamicFileDTO))
          return false;
        if (!this.handleDynamicFileDTO.equals(that.handleDynamicFileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicFileDTO = true && (isSetHandleDynamicFileDTO());
      list.add(present_handleDynamicFileDTO);
      if (present_handleDynamicFileDTO)
        list.add(handleDynamicFileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamicFileOfComm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicFileDTO()).compareTo(other.isSetHandleDynamicFileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicFileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicFileDTO, other.handleDynamicFileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamicFileOfComm_args(");
      boolean first = true;

      sb.append("handleDynamicFileDTO:");
      if (this.handleDynamicFileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicFileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicFileDTO != null) {
        handleDynamicFileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamicFileOfComm_argsStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamicFileOfComm_argsStandardScheme getScheme() {
        return new addHandleDynamicFileOfComm_argsStandardScheme();
      }
    }

    private static class addHandleDynamicFileOfComm_argsStandardScheme extends StandardScheme<addHandleDynamicFileOfComm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamicFileOfComm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_FILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
                struct.handleDynamicFileDTO.read(iprot);
                struct.setHandleDynamicFileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamicFileOfComm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicFileDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC);
          struct.handleDynamicFileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamicFileOfComm_argsTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamicFileOfComm_argsTupleScheme getScheme() {
        return new addHandleDynamicFileOfComm_argsTupleScheme();
      }
    }

    private static class addHandleDynamicFileOfComm_argsTupleScheme extends TupleScheme<addHandleDynamicFileOfComm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFileOfComm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicFileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicFileDTO()) {
          struct.handleDynamicFileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFileOfComm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
          struct.handleDynamicFileDTO.read(iprot);
          struct.setHandleDynamicFileDTOIsSet(true);
        }
      }
    }

  }

  public static class addHandleDynamicFileOfComm_result implements org.apache.thrift.TBase<addHandleDynamicFileOfComm_result, addHandleDynamicFileOfComm_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHandleDynamicFileOfComm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHandleDynamicFileOfComm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHandleDynamicFileOfComm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHandleDynamicFileOfComm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHandleDynamicFileOfComm_result.class, metaDataMap);
    }

    public addHandleDynamicFileOfComm_result() {
    }

    public addHandleDynamicFileOfComm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHandleDynamicFileOfComm_result(addHandleDynamicFileOfComm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHandleDynamicFileOfComm_result deepCopy() {
      return new addHandleDynamicFileOfComm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addHandleDynamicFileOfComm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHandleDynamicFileOfComm_result)
        return this.equals((addHandleDynamicFileOfComm_result)that);
      return false;
    }

    public boolean equals(addHandleDynamicFileOfComm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHandleDynamicFileOfComm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHandleDynamicFileOfComm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHandleDynamicFileOfComm_resultStandardSchemeFactory implements SchemeFactory {
      public addHandleDynamicFileOfComm_resultStandardScheme getScheme() {
        return new addHandleDynamicFileOfComm_resultStandardScheme();
      }
    }

    private static class addHandleDynamicFileOfComm_resultStandardScheme extends StandardScheme<addHandleDynamicFileOfComm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHandleDynamicFileOfComm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHandleDynamicFileOfComm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHandleDynamicFileOfComm_resultTupleSchemeFactory implements SchemeFactory {
      public addHandleDynamicFileOfComm_resultTupleScheme getScheme() {
        return new addHandleDynamicFileOfComm_resultTupleScheme();
      }
    }

    private static class addHandleDynamicFileOfComm_resultTupleScheme extends TupleScheme<addHandleDynamicFileOfComm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFileOfComm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHandleDynamicFileOfComm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicFileById_args implements org.apache.thrift.TBase<getHandleDynamicFileById_args, getHandleDynamicFileById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicFileById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicFileById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicFileById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicFileById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicFileById_args.class, metaDataMap);
    }

    public getHandleDynamicFileById_args() {
    }

    public getHandleDynamicFileById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicFileById_args(getHandleDynamicFileById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getHandleDynamicFileById_args deepCopy() {
      return new getHandleDynamicFileById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getHandleDynamicFileById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicFileById_args)
        return this.equals((getHandleDynamicFileById_args)that);
      return false;
    }

    public boolean equals(getHandleDynamicFileById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicFileById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicFileById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicFileById_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileById_argsStandardScheme getScheme() {
        return new getHandleDynamicFileById_argsStandardScheme();
      }
    }

    private static class getHandleDynamicFileById_argsStandardScheme extends StandardScheme<getHandleDynamicFileById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicFileById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicFileById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicFileById_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileById_argsTupleScheme getScheme() {
        return new getHandleDynamicFileById_argsTupleScheme();
      }
    }

    private static class getHandleDynamicFileById_argsTupleScheme extends TupleScheme<getHandleDynamicFileById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getHandleDynamicFileById_result implements org.apache.thrift.TBase<getHandleDynamicFileById_result, getHandleDynamicFileById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDynamicFileById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDynamicFileById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDynamicFileById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDynamicFileById_resultTupleSchemeFactory());
    }

    public HandleDynamicFileDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDynamicFileById_result.class, metaDataMap);
    }

    public getHandleDynamicFileById_result() {
    }

    public getHandleDynamicFileById_result(
      HandleDynamicFileDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDynamicFileById_result(getHandleDynamicFileById_result other) {
      if (other.isSetSuccess()) {
        this.success = new HandleDynamicFileDTO(other.success);
      }
    }

    public getHandleDynamicFileById_result deepCopy() {
      return new getHandleDynamicFileById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HandleDynamicFileDTO getSuccess() {
      return this.success;
    }

    public getHandleDynamicFileById_result setSuccess(HandleDynamicFileDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HandleDynamicFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDynamicFileById_result)
        return this.equals((getHandleDynamicFileById_result)that);
      return false;
    }

    public boolean equals(getHandleDynamicFileById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDynamicFileById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDynamicFileById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDynamicFileById_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileById_resultStandardScheme getScheme() {
        return new getHandleDynamicFileById_resultStandardScheme();
      }
    }

    private static class getHandleDynamicFileById_resultStandardScheme extends StandardScheme<getHandleDynamicFileById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDynamicFileById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HandleDynamicFileDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDynamicFileById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDynamicFileById_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDynamicFileById_resultTupleScheme getScheme() {
        return new getHandleDynamicFileById_resultTupleScheme();
      }
    }

    private static class getHandleDynamicFileById_resultTupleScheme extends TupleScheme<getHandleDynamicFileById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDynamicFileById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HandleDynamicFileDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamicFile_args implements org.apache.thrift.TBase<updateHandleDynamicFile_args, updateHandleDynamicFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamicFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamicFile_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicFileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamicFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamicFile_argsTupleSchemeFactory());
    }

    public HandleDynamicFileDTO handleDynamicFileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_FILE_DTO((short)1, "handleDynamicFileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_FILE_DTO
            return HANDLE_DYNAMIC_FILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_FILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicFileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamicFile_args.class, metaDataMap);
    }

    public updateHandleDynamicFile_args() {
    }

    public updateHandleDynamicFile_args(
      HandleDynamicFileDTO handleDynamicFileDTO)
    {
      this();
      this.handleDynamicFileDTO = handleDynamicFileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamicFile_args(updateHandleDynamicFile_args other) {
      if (other.isSetHandleDynamicFileDTO()) {
        this.handleDynamicFileDTO = new HandleDynamicFileDTO(other.handleDynamicFileDTO);
      }
    }

    public updateHandleDynamicFile_args deepCopy() {
      return new updateHandleDynamicFile_args(this);
    }

    @Override
    public void clear() {
      this.handleDynamicFileDTO = null;
    }

    public HandleDynamicFileDTO getHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO;
    }

    public updateHandleDynamicFile_args setHandleDynamicFileDTO(HandleDynamicFileDTO handleDynamicFileDTO) {
      this.handleDynamicFileDTO = handleDynamicFileDTO;
      return this;
    }

    public void unsetHandleDynamicFileDTO() {
      this.handleDynamicFileDTO = null;
    }

    /** Returns true if field handleDynamicFileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicFileDTO() {
      return this.handleDynamicFileDTO != null;
    }

    public void setHandleDynamicFileDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicFileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        if (value == null) {
          unsetHandleDynamicFileDTO();
        } else {
          setHandleDynamicFileDTO((HandleDynamicFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return getHandleDynamicFileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_FILE_DTO:
        return isSetHandleDynamicFileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamicFile_args)
        return this.equals((updateHandleDynamicFile_args)that);
      return false;
    }

    public boolean equals(updateHandleDynamicFile_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicFileDTO = true && this.isSetHandleDynamicFileDTO();
      boolean that_present_handleDynamicFileDTO = true && that.isSetHandleDynamicFileDTO();
      if (this_present_handleDynamicFileDTO || that_present_handleDynamicFileDTO) {
        if (!(this_present_handleDynamicFileDTO && that_present_handleDynamicFileDTO))
          return false;
        if (!this.handleDynamicFileDTO.equals(that.handleDynamicFileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicFileDTO = true && (isSetHandleDynamicFileDTO());
      list.add(present_handleDynamicFileDTO);
      if (present_handleDynamicFileDTO)
        list.add(handleDynamicFileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamicFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicFileDTO()).compareTo(other.isSetHandleDynamicFileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicFileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicFileDTO, other.handleDynamicFileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamicFile_args(");
      boolean first = true;

      sb.append("handleDynamicFileDTO:");
      if (this.handleDynamicFileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicFileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDynamicFileDTO != null) {
        handleDynamicFileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamicFile_argsStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamicFile_argsStandardScheme getScheme() {
        return new updateHandleDynamicFile_argsStandardScheme();
      }
    }

    private static class updateHandleDynamicFile_argsStandardScheme extends StandardScheme<updateHandleDynamicFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_FILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
                struct.handleDynamicFileDTO.read(iprot);
                struct.setHandleDynamicFileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDynamicFileDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_FILE_DTO_FIELD_DESC);
          struct.handleDynamicFileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamicFile_argsTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamicFile_argsTupleScheme getScheme() {
        return new updateHandleDynamicFile_argsTupleScheme();
      }
    }

    private static class updateHandleDynamicFile_argsTupleScheme extends TupleScheme<updateHandleDynamicFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicFileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicFileDTO()) {
          struct.handleDynamicFileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicFileDTO = new HandleDynamicFileDTO();
          struct.handleDynamicFileDTO.read(iprot);
          struct.setHandleDynamicFileDTOIsSet(true);
        }
      }
    }

  }

  public static class updateHandleDynamicFile_result implements org.apache.thrift.TBase<updateHandleDynamicFile_result, updateHandleDynamicFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHandleDynamicFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHandleDynamicFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHandleDynamicFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHandleDynamicFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHandleDynamicFile_result.class, metaDataMap);
    }

    public updateHandleDynamicFile_result() {
    }

    public updateHandleDynamicFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHandleDynamicFile_result(updateHandleDynamicFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHandleDynamicFile_result deepCopy() {
      return new updateHandleDynamicFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHandleDynamicFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHandleDynamicFile_result)
        return this.equals((updateHandleDynamicFile_result)that);
      return false;
    }

    public boolean equals(updateHandleDynamicFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHandleDynamicFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHandleDynamicFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHandleDynamicFile_resultStandardSchemeFactory implements SchemeFactory {
      public updateHandleDynamicFile_resultStandardScheme getScheme() {
        return new updateHandleDynamicFile_resultStandardScheme();
      }
    }

    private static class updateHandleDynamicFile_resultStandardScheme extends StandardScheme<updateHandleDynamicFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHandleDynamicFile_resultTupleSchemeFactory implements SchemeFactory {
      public updateHandleDynamicFile_resultTupleScheme getScheme() {
        return new updateHandleDynamicFile_resultTupleScheme();
      }
    }

    private static class updateHandleDynamicFile_resultTupleScheme extends TupleScheme<updateHandleDynamicFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHandleDynamicFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCanHandleFlowByHandleId_args implements org.apache.thrift.TBase<getCanHandleFlowByHandleId_args, getCanHandleFlowByHandleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCanHandleFlowByHandleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCanHandleFlowByHandleId_args");

    private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCanHandleFlowByHandleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCanHandleFlowByHandleId_argsTupleSchemeFactory());
    }

    public int handleId; // required
    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_ID((short)1, "handleId"),
      USER_NAME((short)2, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_ID
            return HANDLE_ID;
          case 2: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCanHandleFlowByHandleId_args.class, metaDataMap);
    }

    public getCanHandleFlowByHandleId_args() {
    }

    public getCanHandleFlowByHandleId_args(
      int handleId,
      String userName)
    {
      this();
      this.handleId = handleId;
      setHandleIdIsSet(true);
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCanHandleFlowByHandleId_args(getCanHandleFlowByHandleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.handleId = other.handleId;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getCanHandleFlowByHandleId_args deepCopy() {
      return new getCanHandleFlowByHandleId_args(this);
    }

    @Override
    public void clear() {
      setHandleIdIsSet(false);
      this.handleId = 0;
      this.userName = null;
    }

    public int getHandleId() {
      return this.handleId;
    }

    public getCanHandleFlowByHandleId_args setHandleId(int handleId) {
      this.handleId = handleId;
      setHandleIdIsSet(true);
      return this;
    }

    public void unsetHandleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
    }

    public void setHandleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
    }

    public String getUserName() {
      return this.userName;
    }

    public getCanHandleFlowByHandleId_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_ID:
        if (value == null) {
          unsetHandleId();
        } else {
          setHandleId((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_ID:
        return Integer.valueOf(getHandleId());

      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_ID:
        return isSetHandleId();
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCanHandleFlowByHandleId_args)
        return this.equals((getCanHandleFlowByHandleId_args)that);
      return false;
    }

    public boolean equals(getCanHandleFlowByHandleId_args that) {
      if (that == null)
        return false;

      boolean this_present_handleId = true;
      boolean that_present_handleId = true;
      if (this_present_handleId || that_present_handleId) {
        if (!(this_present_handleId && that_present_handleId))
          return false;
        if (this.handleId != that.handleId)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleId = true;
      list.add(present_handleId);
      if (present_handleId)
        list.add(handleId);

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCanHandleFlowByHandleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCanHandleFlowByHandleId_args(");
      boolean first = true;

      sb.append("handleId:");
      sb.append(this.handleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCanHandleFlowByHandleId_argsStandardSchemeFactory implements SchemeFactory {
      public getCanHandleFlowByHandleId_argsStandardScheme getScheme() {
        return new getCanHandleFlowByHandleId_argsStandardScheme();
      }
    }

    private static class getCanHandleFlowByHandleId_argsStandardScheme extends StandardScheme<getCanHandleFlowByHandleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCanHandleFlowByHandleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleId = iprot.readI32();
                struct.setHandleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCanHandleFlowByHandleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
        oprot.writeI32(struct.handleId);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCanHandleFlowByHandleId_argsTupleSchemeFactory implements SchemeFactory {
      public getCanHandleFlowByHandleId_argsTupleScheme getScheme() {
        return new getCanHandleFlowByHandleId_argsTupleScheme();
      }
    }

    private static class getCanHandleFlowByHandleId_argsTupleScheme extends TupleScheme<getCanHandleFlowByHandleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCanHandleFlowByHandleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleId()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHandleId()) {
          oprot.writeI32(struct.handleId);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCanHandleFlowByHandleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.handleId = iprot.readI32();
          struct.setHandleIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class getCanHandleFlowByHandleId_result implements org.apache.thrift.TBase<getCanHandleFlowByHandleId_result, getCanHandleFlowByHandleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCanHandleFlowByHandleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCanHandleFlowByHandleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCanHandleFlowByHandleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCanHandleFlowByHandleId_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCanHandleFlowByHandleId_result.class, metaDataMap);
    }

    public getCanHandleFlowByHandleId_result() {
    }

    public getCanHandleFlowByHandleId_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCanHandleFlowByHandleId_result(getCanHandleFlowByHandleId_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getCanHandleFlowByHandleId_result deepCopy() {
      return new getCanHandleFlowByHandleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getCanHandleFlowByHandleId_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCanHandleFlowByHandleId_result)
        return this.equals((getCanHandleFlowByHandleId_result)that);
      return false;
    }

    public boolean equals(getCanHandleFlowByHandleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCanHandleFlowByHandleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCanHandleFlowByHandleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCanHandleFlowByHandleId_resultStandardSchemeFactory implements SchemeFactory {
      public getCanHandleFlowByHandleId_resultStandardScheme getScheme() {
        return new getCanHandleFlowByHandleId_resultStandardScheme();
      }
    }

    private static class getCanHandleFlowByHandleId_resultStandardScheme extends StandardScheme<getCanHandleFlowByHandleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCanHandleFlowByHandleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list556.size);
                  int _elem557;
                  for (int _i558 = 0; _i558 < _list556.size; ++_i558)
                  {
                    _elem557 = iprot.readI32();
                    struct.success.add(_elem557);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCanHandleFlowByHandleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter559 : struct.success)
            {
              oprot.writeI32(_iter559);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCanHandleFlowByHandleId_resultTupleSchemeFactory implements SchemeFactory {
      public getCanHandleFlowByHandleId_resultTupleScheme getScheme() {
        return new getCanHandleFlowByHandleId_resultTupleScheme();
      }
    }

    private static class getCanHandleFlowByHandleId_resultTupleScheme extends TupleScheme<getCanHandleFlowByHandleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCanHandleFlowByHandleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter560 : struct.success)
            {
              oprot.writeI32(_iter560);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCanHandleFlowByHandleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list561 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list561.size);
            int _elem562;
            for (int _i563 = 0; _i563 < _list561.size; ++_i563)
            {
              _elem562 = iprot.readI32();
              struct.success.add(_elem562);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCanHandleDynamicIds_args implements org.apache.thrift.TBase<getCanHandleDynamicIds_args, getCanHandleDynamicIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCanHandleDynamicIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCanHandleDynamicIds_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCanHandleDynamicIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCanHandleDynamicIds_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCanHandleDynamicIds_args.class, metaDataMap);
    }

    public getCanHandleDynamicIds_args() {
    }

    public getCanHandleDynamicIds_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCanHandleDynamicIds_args(getCanHandleDynamicIds_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getCanHandleDynamicIds_args deepCopy() {
      return new getCanHandleDynamicIds_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public getCanHandleDynamicIds_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCanHandleDynamicIds_args)
        return this.equals((getCanHandleDynamicIds_args)that);
      return false;
    }

    public boolean equals(getCanHandleDynamicIds_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCanHandleDynamicIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCanHandleDynamicIds_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCanHandleDynamicIds_argsStandardSchemeFactory implements SchemeFactory {
      public getCanHandleDynamicIds_argsStandardScheme getScheme() {
        return new getCanHandleDynamicIds_argsStandardScheme();
      }
    }

    private static class getCanHandleDynamicIds_argsStandardScheme extends StandardScheme<getCanHandleDynamicIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCanHandleDynamicIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCanHandleDynamicIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCanHandleDynamicIds_argsTupleSchemeFactory implements SchemeFactory {
      public getCanHandleDynamicIds_argsTupleScheme getScheme() {
        return new getCanHandleDynamicIds_argsTupleScheme();
      }
    }

    private static class getCanHandleDynamicIds_argsTupleScheme extends TupleScheme<getCanHandleDynamicIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCanHandleDynamicIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCanHandleDynamicIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class getCanHandleDynamicIds_result implements org.apache.thrift.TBase<getCanHandleDynamicIds_result, getCanHandleDynamicIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCanHandleDynamicIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCanHandleDynamicIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCanHandleDynamicIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCanHandleDynamicIds_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCanHandleDynamicIds_result.class, metaDataMap);
    }

    public getCanHandleDynamicIds_result() {
    }

    public getCanHandleDynamicIds_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCanHandleDynamicIds_result(getCanHandleDynamicIds_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getCanHandleDynamicIds_result deepCopy() {
      return new getCanHandleDynamicIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getCanHandleDynamicIds_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCanHandleDynamicIds_result)
        return this.equals((getCanHandleDynamicIds_result)that);
      return false;
    }

    public boolean equals(getCanHandleDynamicIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCanHandleDynamicIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCanHandleDynamicIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCanHandleDynamicIds_resultStandardSchemeFactory implements SchemeFactory {
      public getCanHandleDynamicIds_resultStandardScheme getScheme() {
        return new getCanHandleDynamicIds_resultStandardScheme();
      }
    }

    private static class getCanHandleDynamicIds_resultStandardScheme extends StandardScheme<getCanHandleDynamicIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCanHandleDynamicIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list564 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list564.size);
                  int _elem565;
                  for (int _i566 = 0; _i566 < _list564.size; ++_i566)
                  {
                    _elem565 = iprot.readI32();
                    struct.success.add(_elem565);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCanHandleDynamicIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter567 : struct.success)
            {
              oprot.writeI32(_iter567);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCanHandleDynamicIds_resultTupleSchemeFactory implements SchemeFactory {
      public getCanHandleDynamicIds_resultTupleScheme getScheme() {
        return new getCanHandleDynamicIds_resultTupleScheme();
      }
    }

    private static class getCanHandleDynamicIds_resultTupleScheme extends TupleScheme<getCanHandleDynamicIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCanHandleDynamicIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter568 : struct.success)
            {
              oprot.writeI32(_iter568);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCanHandleDynamicIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list569 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list569.size);
            int _elem570;
            for (int _i571 = 0; _i571 < _list569.size; ++_i571)
            {
              _elem570 = iprot.readI32();
              struct.success.add(_elem570);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNeedHandleWarn_args implements org.apache.thrift.TBase<getNeedHandleWarn_args, getNeedHandleWarn_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNeedHandleWarn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeedHandleWarn_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNeedHandleWarn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNeedHandleWarn_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeedHandleWarn_args.class, metaDataMap);
    }

    public getNeedHandleWarn_args() {
    }

    public getNeedHandleWarn_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeedHandleWarn_args(getNeedHandleWarn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getNeedHandleWarn_args deepCopy() {
      return new getNeedHandleWarn_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getNeedHandleWarn_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeedHandleWarn_args)
        return this.equals((getNeedHandleWarn_args)that);
      return false;
    }

    public boolean equals(getNeedHandleWarn_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNeedHandleWarn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNeedHandleWarn_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeedHandleWarn_argsStandardSchemeFactory implements SchemeFactory {
      public getNeedHandleWarn_argsStandardScheme getScheme() {
        return new getNeedHandleWarn_argsStandardScheme();
      }
    }

    private static class getNeedHandleWarn_argsStandardScheme extends StandardScheme<getNeedHandleWarn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeedHandleWarn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeedHandleWarn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeedHandleWarn_argsTupleSchemeFactory implements SchemeFactory {
      public getNeedHandleWarn_argsTupleScheme getScheme() {
        return new getNeedHandleWarn_argsTupleScheme();
      }
    }

    private static class getNeedHandleWarn_argsTupleScheme extends TupleScheme<getNeedHandleWarn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getNeedHandleWarn_result implements org.apache.thrift.TBase<getNeedHandleWarn_result, getNeedHandleWarn_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNeedHandleWarn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeedHandleWarn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNeedHandleWarn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNeedHandleWarn_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeedHandleWarn_result.class, metaDataMap);
    }

    public getNeedHandleWarn_result() {
    }

    public getNeedHandleWarn_result(
      List<HandleDifferWarnDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeedHandleWarn_result(getNeedHandleWarn_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnDTO> __this__success = new ArrayList<HandleDifferWarnDTO>(other.success.size());
        for (HandleDifferWarnDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public getNeedHandleWarn_result deepCopy() {
      return new getNeedHandleWarn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnDTO> getSuccess() {
      return this.success;
    }

    public getNeedHandleWarn_result setSuccess(List<HandleDifferWarnDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeedHandleWarn_result)
        return this.equals((getNeedHandleWarn_result)that);
      return false;
    }

    public boolean equals(getNeedHandleWarn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNeedHandleWarn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNeedHandleWarn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeedHandleWarn_resultStandardSchemeFactory implements SchemeFactory {
      public getNeedHandleWarn_resultStandardScheme getScheme() {
        return new getNeedHandleWarn_resultStandardScheme();
      }
    }

    private static class getNeedHandleWarn_resultStandardScheme extends StandardScheme<getNeedHandleWarn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeedHandleWarn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list572 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnDTO>(_list572.size);
                  HandleDifferWarnDTO _elem573;
                  for (int _i574 = 0; _i574 < _list572.size; ++_i574)
                  {
                    _elem573 = new HandleDifferWarnDTO();
                    _elem573.read(iprot);
                    struct.success.add(_elem573);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeedHandleWarn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnDTO _iter575 : struct.success)
            {
              _iter575.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeedHandleWarn_resultTupleSchemeFactory implements SchemeFactory {
      public getNeedHandleWarn_resultTupleScheme getScheme() {
        return new getNeedHandleWarn_resultTupleScheme();
      }
    }

    private static class getNeedHandleWarn_resultTupleScheme extends TupleScheme<getNeedHandleWarn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnDTO _iter576 : struct.success)
            {
              _iter576.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list577 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnDTO>(_list577.size);
            HandleDifferWarnDTO _elem578;
            for (int _i579 = 0; _i579 < _list577.size; ++_i579)
            {
              _elem578 = new HandleDifferWarnDTO();
              _elem578.read(iprot);
              struct.success.add(_elem578);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryNeedHandleWarnIndex_args implements org.apache.thrift.TBase<queryNeedHandleWarnIndex_args, queryNeedHandleWarnIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryNeedHandleWarnIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNeedHandleWarnIndex_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNeedHandleWarnIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNeedHandleWarnIndex_argsTupleSchemeFactory());
    }

    public HandleDifferWarnIndexDTO handleDifferWarnIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_INDEX_DTO((short)1, "handleDifferWarnIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_INDEX_DTO
            return HANDLE_DIFFER_WARN_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNeedHandleWarnIndex_args.class, metaDataMap);
    }

    public queryNeedHandleWarnIndex_args() {
    }

    public queryNeedHandleWarnIndex_args(
      HandleDifferWarnIndexDTO handleDifferWarnIndexDTO)
    {
      this();
      this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNeedHandleWarnIndex_args(queryNeedHandleWarnIndex_args other) {
      if (other.isSetHandleDifferWarnIndexDTO()) {
        this.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO(other.handleDifferWarnIndexDTO);
      }
    }

    public queryNeedHandleWarnIndex_args deepCopy() {
      return new queryNeedHandleWarnIndex_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnIndexDTO = null;
    }

    public HandleDifferWarnIndexDTO getHandleDifferWarnIndexDTO() {
      return this.handleDifferWarnIndexDTO;
    }

    public queryNeedHandleWarnIndex_args setHandleDifferWarnIndexDTO(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) {
      this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
      return this;
    }

    public void unsetHandleDifferWarnIndexDTO() {
      this.handleDifferWarnIndexDTO = null;
    }

    /** Returns true if field handleDifferWarnIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnIndexDTO() {
      return this.handleDifferWarnIndexDTO != null;
    }

    public void setHandleDifferWarnIndexDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        if (value == null) {
          unsetHandleDifferWarnIndexDTO();
        } else {
          setHandleDifferWarnIndexDTO((HandleDifferWarnIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        return getHandleDifferWarnIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        return isSetHandleDifferWarnIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNeedHandleWarnIndex_args)
        return this.equals((queryNeedHandleWarnIndex_args)that);
      return false;
    }

    public boolean equals(queryNeedHandleWarnIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnIndexDTO = true && this.isSetHandleDifferWarnIndexDTO();
      boolean that_present_handleDifferWarnIndexDTO = true && that.isSetHandleDifferWarnIndexDTO();
      if (this_present_handleDifferWarnIndexDTO || that_present_handleDifferWarnIndexDTO) {
        if (!(this_present_handleDifferWarnIndexDTO && that_present_handleDifferWarnIndexDTO))
          return false;
        if (!this.handleDifferWarnIndexDTO.equals(that.handleDifferWarnIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnIndexDTO = true && (isSetHandleDifferWarnIndexDTO());
      list.add(present_handleDifferWarnIndexDTO);
      if (present_handleDifferWarnIndexDTO)
        list.add(handleDifferWarnIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNeedHandleWarnIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnIndexDTO()).compareTo(other.isSetHandleDifferWarnIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnIndexDTO, other.handleDifferWarnIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNeedHandleWarnIndex_args(");
      boolean first = true;

      sb.append("handleDifferWarnIndexDTO:");
      if (this.handleDifferWarnIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnIndexDTO != null) {
        handleDifferWarnIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNeedHandleWarnIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryNeedHandleWarnIndex_argsStandardScheme getScheme() {
        return new queryNeedHandleWarnIndex_argsStandardScheme();
      }
    }

    private static class queryNeedHandleWarnIndex_argsStandardScheme extends StandardScheme<queryNeedHandleWarnIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNeedHandleWarnIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO();
                struct.handleDifferWarnIndexDTO.read(iprot);
                struct.setHandleDifferWarnIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNeedHandleWarnIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnIndexDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_INDEX_DTO_FIELD_DESC);
          struct.handleDifferWarnIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNeedHandleWarnIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryNeedHandleWarnIndex_argsTupleScheme getScheme() {
        return new queryNeedHandleWarnIndex_argsTupleScheme();
      }
    }

    private static class queryNeedHandleWarnIndex_argsTupleScheme extends TupleScheme<queryNeedHandleWarnIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNeedHandleWarnIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnIndexDTO()) {
          struct.handleDifferWarnIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNeedHandleWarnIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO();
          struct.handleDifferWarnIndexDTO.read(iprot);
          struct.setHandleDifferWarnIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryNeedHandleWarnIndex_result implements org.apache.thrift.TBase<queryNeedHandleWarnIndex_result, queryNeedHandleWarnIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryNeedHandleWarnIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNeedHandleWarnIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNeedHandleWarnIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNeedHandleWarnIndex_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNeedHandleWarnIndex_result.class, metaDataMap);
    }

    public queryNeedHandleWarnIndex_result() {
    }

    public queryNeedHandleWarnIndex_result(
      List<HandleDifferWarnIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNeedHandleWarnIndex_result(queryNeedHandleWarnIndex_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnIndexDTO> __this__success = new ArrayList<HandleDifferWarnIndexDTO>(other.success.size());
        for (HandleDifferWarnIndexDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryNeedHandleWarnIndex_result deepCopy() {
      return new queryNeedHandleWarnIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnIndexDTO> getSuccess() {
      return this.success;
    }

    public queryNeedHandleWarnIndex_result setSuccess(List<HandleDifferWarnIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNeedHandleWarnIndex_result)
        return this.equals((queryNeedHandleWarnIndex_result)that);
      return false;
    }

    public boolean equals(queryNeedHandleWarnIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNeedHandleWarnIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNeedHandleWarnIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNeedHandleWarnIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryNeedHandleWarnIndex_resultStandardScheme getScheme() {
        return new queryNeedHandleWarnIndex_resultStandardScheme();
      }
    }

    private static class queryNeedHandleWarnIndex_resultStandardScheme extends StandardScheme<queryNeedHandleWarnIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNeedHandleWarnIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list580 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnIndexDTO>(_list580.size);
                  HandleDifferWarnIndexDTO _elem581;
                  for (int _i582 = 0; _i582 < _list580.size; ++_i582)
                  {
                    _elem581 = new HandleDifferWarnIndexDTO();
                    _elem581.read(iprot);
                    struct.success.add(_elem581);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNeedHandleWarnIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnIndexDTO _iter583 : struct.success)
            {
              _iter583.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNeedHandleWarnIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryNeedHandleWarnIndex_resultTupleScheme getScheme() {
        return new queryNeedHandleWarnIndex_resultTupleScheme();
      }
    }

    private static class queryNeedHandleWarnIndex_resultTupleScheme extends TupleScheme<queryNeedHandleWarnIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNeedHandleWarnIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnIndexDTO _iter584 : struct.success)
            {
              _iter584.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNeedHandleWarnIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list585 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnIndexDTO>(_list585.size);
            HandleDifferWarnIndexDTO _elem586;
            for (int _i587 = 0; _i587 < _list585.size; ++_i587)
            {
              _elem586 = new HandleDifferWarnIndexDTO();
              _elem586.read(iprot);
              struct.success.add(_elem586);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNeedHandleWarnIndexTotal_args implements org.apache.thrift.TBase<getNeedHandleWarnIndexTotal_args, getNeedHandleWarnIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNeedHandleWarnIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeedHandleWarnIndexTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNeedHandleWarnIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNeedHandleWarnIndexTotal_argsTupleSchemeFactory());
    }

    public HandleDifferWarnIndexDTO handleDifferWarnIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_INDEX_DTO((short)1, "handleDifferWarnIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_INDEX_DTO
            return HANDLE_DIFFER_WARN_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeedHandleWarnIndexTotal_args.class, metaDataMap);
    }

    public getNeedHandleWarnIndexTotal_args() {
    }

    public getNeedHandleWarnIndexTotal_args(
      HandleDifferWarnIndexDTO handleDifferWarnIndexDTO)
    {
      this();
      this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeedHandleWarnIndexTotal_args(getNeedHandleWarnIndexTotal_args other) {
      if (other.isSetHandleDifferWarnIndexDTO()) {
        this.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO(other.handleDifferWarnIndexDTO);
      }
    }

    public getNeedHandleWarnIndexTotal_args deepCopy() {
      return new getNeedHandleWarnIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnIndexDTO = null;
    }

    public HandleDifferWarnIndexDTO getHandleDifferWarnIndexDTO() {
      return this.handleDifferWarnIndexDTO;
    }

    public getNeedHandleWarnIndexTotal_args setHandleDifferWarnIndexDTO(HandleDifferWarnIndexDTO handleDifferWarnIndexDTO) {
      this.handleDifferWarnIndexDTO = handleDifferWarnIndexDTO;
      return this;
    }

    public void unsetHandleDifferWarnIndexDTO() {
      this.handleDifferWarnIndexDTO = null;
    }

    /** Returns true if field handleDifferWarnIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnIndexDTO() {
      return this.handleDifferWarnIndexDTO != null;
    }

    public void setHandleDifferWarnIndexDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        if (value == null) {
          unsetHandleDifferWarnIndexDTO();
        } else {
          setHandleDifferWarnIndexDTO((HandleDifferWarnIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        return getHandleDifferWarnIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_INDEX_DTO:
        return isSetHandleDifferWarnIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeedHandleWarnIndexTotal_args)
        return this.equals((getNeedHandleWarnIndexTotal_args)that);
      return false;
    }

    public boolean equals(getNeedHandleWarnIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnIndexDTO = true && this.isSetHandleDifferWarnIndexDTO();
      boolean that_present_handleDifferWarnIndexDTO = true && that.isSetHandleDifferWarnIndexDTO();
      if (this_present_handleDifferWarnIndexDTO || that_present_handleDifferWarnIndexDTO) {
        if (!(this_present_handleDifferWarnIndexDTO && that_present_handleDifferWarnIndexDTO))
          return false;
        if (!this.handleDifferWarnIndexDTO.equals(that.handleDifferWarnIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnIndexDTO = true && (isSetHandleDifferWarnIndexDTO());
      list.add(present_handleDifferWarnIndexDTO);
      if (present_handleDifferWarnIndexDTO)
        list.add(handleDifferWarnIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNeedHandleWarnIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnIndexDTO()).compareTo(other.isSetHandleDifferWarnIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnIndexDTO, other.handleDifferWarnIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNeedHandleWarnIndexTotal_args(");
      boolean first = true;

      sb.append("handleDifferWarnIndexDTO:");
      if (this.handleDifferWarnIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnIndexDTO != null) {
        handleDifferWarnIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeedHandleWarnIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getNeedHandleWarnIndexTotal_argsStandardScheme getScheme() {
        return new getNeedHandleWarnIndexTotal_argsStandardScheme();
      }
    }

    private static class getNeedHandleWarnIndexTotal_argsStandardScheme extends StandardScheme<getNeedHandleWarnIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeedHandleWarnIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO();
                struct.handleDifferWarnIndexDTO.read(iprot);
                struct.setHandleDifferWarnIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeedHandleWarnIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnIndexDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_INDEX_DTO_FIELD_DESC);
          struct.handleDifferWarnIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeedHandleWarnIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getNeedHandleWarnIndexTotal_argsTupleScheme getScheme() {
        return new getNeedHandleWarnIndexTotal_argsTupleScheme();
      }
    }

    private static class getNeedHandleWarnIndexTotal_argsTupleScheme extends TupleScheme<getNeedHandleWarnIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarnIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnIndexDTO()) {
          struct.handleDifferWarnIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarnIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnIndexDTO = new HandleDifferWarnIndexDTO();
          struct.handleDifferWarnIndexDTO.read(iprot);
          struct.setHandleDifferWarnIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getNeedHandleWarnIndexTotal_result implements org.apache.thrift.TBase<getNeedHandleWarnIndexTotal_result, getNeedHandleWarnIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNeedHandleWarnIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeedHandleWarnIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNeedHandleWarnIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNeedHandleWarnIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeedHandleWarnIndexTotal_result.class, metaDataMap);
    }

    public getNeedHandleWarnIndexTotal_result() {
    }

    public getNeedHandleWarnIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeedHandleWarnIndexTotal_result(getNeedHandleWarnIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNeedHandleWarnIndexTotal_result deepCopy() {
      return new getNeedHandleWarnIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getNeedHandleWarnIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeedHandleWarnIndexTotal_result)
        return this.equals((getNeedHandleWarnIndexTotal_result)that);
      return false;
    }

    public boolean equals(getNeedHandleWarnIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNeedHandleWarnIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNeedHandleWarnIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeedHandleWarnIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getNeedHandleWarnIndexTotal_resultStandardScheme getScheme() {
        return new getNeedHandleWarnIndexTotal_resultStandardScheme();
      }
    }

    private static class getNeedHandleWarnIndexTotal_resultStandardScheme extends StandardScheme<getNeedHandleWarnIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeedHandleWarnIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeedHandleWarnIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeedHandleWarnIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getNeedHandleWarnIndexTotal_resultTupleScheme getScheme() {
        return new getNeedHandleWarnIndexTotal_resultTupleScheme();
      }
    }

    private static class getNeedHandleWarnIndexTotal_resultTupleScheme extends TupleScheme<getNeedHandleWarnIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarnIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeedHandleWarnIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureIndex_args implements org.apache.thrift.TBase<queryForeclosureIndex_args, queryForeclosureIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureIndex_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureIndex_argsTupleSchemeFactory());
    }

    public ForeclosureIndexDTO foreclosureIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_INDEX_DTO((short)1, "foreclosureIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_INDEX_DTO
            return FORECLOSURE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("foreclosureIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureIndex_args.class, metaDataMap);
    }

    public queryForeclosureIndex_args() {
    }

    public queryForeclosureIndex_args(
      ForeclosureIndexDTO foreclosureIndexDTO)
    {
      this();
      this.foreclosureIndexDTO = foreclosureIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureIndex_args(queryForeclosureIndex_args other) {
      if (other.isSetForeclosureIndexDTO()) {
        this.foreclosureIndexDTO = new ForeclosureIndexDTO(other.foreclosureIndexDTO);
      }
    }

    public queryForeclosureIndex_args deepCopy() {
      return new queryForeclosureIndex_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureIndexDTO = null;
    }

    public ForeclosureIndexDTO getForeclosureIndexDTO() {
      return this.foreclosureIndexDTO;
    }

    public queryForeclosureIndex_args setForeclosureIndexDTO(ForeclosureIndexDTO foreclosureIndexDTO) {
      this.foreclosureIndexDTO = foreclosureIndexDTO;
      return this;
    }

    public void unsetForeclosureIndexDTO() {
      this.foreclosureIndexDTO = null;
    }

    /** Returns true if field foreclosureIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureIndexDTO() {
      return this.foreclosureIndexDTO != null;
    }

    public void setForeclosureIndexDTOIsSet(boolean value) {
      if (!value) {
        this.foreclosureIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        if (value == null) {
          unsetForeclosureIndexDTO();
        } else {
          setForeclosureIndexDTO((ForeclosureIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        return getForeclosureIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        return isSetForeclosureIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureIndex_args)
        return this.equals((queryForeclosureIndex_args)that);
      return false;
    }

    public boolean equals(queryForeclosureIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureIndexDTO = true && this.isSetForeclosureIndexDTO();
      boolean that_present_foreclosureIndexDTO = true && that.isSetForeclosureIndexDTO();
      if (this_present_foreclosureIndexDTO || that_present_foreclosureIndexDTO) {
        if (!(this_present_foreclosureIndexDTO && that_present_foreclosureIndexDTO))
          return false;
        if (!this.foreclosureIndexDTO.equals(that.foreclosureIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureIndexDTO = true && (isSetForeclosureIndexDTO());
      list.add(present_foreclosureIndexDTO);
      if (present_foreclosureIndexDTO)
        list.add(foreclosureIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureIndexDTO()).compareTo(other.isSetForeclosureIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureIndexDTO, other.foreclosureIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureIndex_args(");
      boolean first = true;

      sb.append("foreclosureIndexDTO:");
      if (this.foreclosureIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureIndexDTO != null) {
        foreclosureIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureIndex_argsStandardScheme getScheme() {
        return new queryForeclosureIndex_argsStandardScheme();
      }
    }

    private static class queryForeclosureIndex_argsStandardScheme extends StandardScheme<queryForeclosureIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureIndexDTO = new ForeclosureIndexDTO();
                struct.foreclosureIndexDTO.read(iprot);
                struct.setForeclosureIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureIndexDTO != null) {
          oprot.writeFieldBegin(FORECLOSURE_INDEX_DTO_FIELD_DESC);
          struct.foreclosureIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureIndex_argsTupleScheme getScheme() {
        return new queryForeclosureIndex_argsTupleScheme();
      }
    }

    private static class queryForeclosureIndex_argsTupleScheme extends TupleScheme<queryForeclosureIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureIndexDTO()) {
          struct.foreclosureIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureIndexDTO = new ForeclosureIndexDTO();
          struct.foreclosureIndexDTO.read(iprot);
          struct.setForeclosureIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureIndex_result implements org.apache.thrift.TBase<queryForeclosureIndex_result, queryForeclosureIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureIndex_resultTupleSchemeFactory());
    }

    public List<ForeclosureIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureIndex_result.class, metaDataMap);
    }

    public queryForeclosureIndex_result() {
    }

    public queryForeclosureIndex_result(
      List<ForeclosureIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureIndex_result(queryForeclosureIndex_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureIndexDTO> __this__success = new ArrayList<ForeclosureIndexDTO>(other.success.size());
        for (ForeclosureIndexDTO other_element : other.success) {
          __this__success.add(new ForeclosureIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureIndex_result deepCopy() {
      return new queryForeclosureIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureIndexDTO> getSuccess() {
      return this.success;
    }

    public queryForeclosureIndex_result setSuccess(List<ForeclosureIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureIndex_result)
        return this.equals((queryForeclosureIndex_result)that);
      return false;
    }

    public boolean equals(queryForeclosureIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureIndex_resultStandardScheme getScheme() {
        return new queryForeclosureIndex_resultStandardScheme();
      }
    }

    private static class queryForeclosureIndex_resultStandardScheme extends StandardScheme<queryForeclosureIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list588 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureIndexDTO>(_list588.size);
                  ForeclosureIndexDTO _elem589;
                  for (int _i590 = 0; _i590 < _list588.size; ++_i590)
                  {
                    _elem589 = new ForeclosureIndexDTO();
                    _elem589.read(iprot);
                    struct.success.add(_elem589);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureIndexDTO _iter591 : struct.success)
            {
              _iter591.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureIndex_resultTupleScheme getScheme() {
        return new queryForeclosureIndex_resultTupleScheme();
      }
    }

    private static class queryForeclosureIndex_resultTupleScheme extends TupleScheme<queryForeclosureIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureIndexDTO _iter592 : struct.success)
            {
              _iter592.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list593 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureIndexDTO>(_list593.size);
            ForeclosureIndexDTO _elem594;
            for (int _i595 = 0; _i595 < _list593.size; ++_i595)
            {
              _elem594 = new ForeclosureIndexDTO();
              _elem594.read(iprot);
              struct.success.add(_elem594);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureIndexTotal_args implements org.apache.thrift.TBase<getForeclosureIndexTotal_args, getForeclosureIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureIndexTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureIndexTotal_argsTupleSchemeFactory());
    }

    public ForeclosureIndexDTO foreclosureIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_INDEX_DTO((short)1, "foreclosureIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_INDEX_DTO
            return FORECLOSURE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("foreclosureIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureIndexTotal_args.class, metaDataMap);
    }

    public getForeclosureIndexTotal_args() {
    }

    public getForeclosureIndexTotal_args(
      ForeclosureIndexDTO foreclosureIndexDTO)
    {
      this();
      this.foreclosureIndexDTO = foreclosureIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureIndexTotal_args(getForeclosureIndexTotal_args other) {
      if (other.isSetForeclosureIndexDTO()) {
        this.foreclosureIndexDTO = new ForeclosureIndexDTO(other.foreclosureIndexDTO);
      }
    }

    public getForeclosureIndexTotal_args deepCopy() {
      return new getForeclosureIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureIndexDTO = null;
    }

    public ForeclosureIndexDTO getForeclosureIndexDTO() {
      return this.foreclosureIndexDTO;
    }

    public getForeclosureIndexTotal_args setForeclosureIndexDTO(ForeclosureIndexDTO foreclosureIndexDTO) {
      this.foreclosureIndexDTO = foreclosureIndexDTO;
      return this;
    }

    public void unsetForeclosureIndexDTO() {
      this.foreclosureIndexDTO = null;
    }

    /** Returns true if field foreclosureIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureIndexDTO() {
      return this.foreclosureIndexDTO != null;
    }

    public void setForeclosureIndexDTOIsSet(boolean value) {
      if (!value) {
        this.foreclosureIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        if (value == null) {
          unsetForeclosureIndexDTO();
        } else {
          setForeclosureIndexDTO((ForeclosureIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        return getForeclosureIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_INDEX_DTO:
        return isSetForeclosureIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureIndexTotal_args)
        return this.equals((getForeclosureIndexTotal_args)that);
      return false;
    }

    public boolean equals(getForeclosureIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureIndexDTO = true && this.isSetForeclosureIndexDTO();
      boolean that_present_foreclosureIndexDTO = true && that.isSetForeclosureIndexDTO();
      if (this_present_foreclosureIndexDTO || that_present_foreclosureIndexDTO) {
        if (!(this_present_foreclosureIndexDTO && that_present_foreclosureIndexDTO))
          return false;
        if (!this.foreclosureIndexDTO.equals(that.foreclosureIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureIndexDTO = true && (isSetForeclosureIndexDTO());
      list.add(present_foreclosureIndexDTO);
      if (present_foreclosureIndexDTO)
        list.add(foreclosureIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureIndexDTO()).compareTo(other.isSetForeclosureIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureIndexDTO, other.foreclosureIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureIndexTotal_args(");
      boolean first = true;

      sb.append("foreclosureIndexDTO:");
      if (this.foreclosureIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureIndexDTO != null) {
        foreclosureIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getForeclosureIndexTotal_argsStandardScheme getScheme() {
        return new getForeclosureIndexTotal_argsStandardScheme();
      }
    }

    private static class getForeclosureIndexTotal_argsStandardScheme extends StandardScheme<getForeclosureIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureIndexDTO = new ForeclosureIndexDTO();
                struct.foreclosureIndexDTO.read(iprot);
                struct.setForeclosureIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureIndexDTO != null) {
          oprot.writeFieldBegin(FORECLOSURE_INDEX_DTO_FIELD_DESC);
          struct.foreclosureIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getForeclosureIndexTotal_argsTupleScheme getScheme() {
        return new getForeclosureIndexTotal_argsTupleScheme();
      }
    }

    private static class getForeclosureIndexTotal_argsTupleScheme extends TupleScheme<getForeclosureIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureIndexDTO()) {
          struct.foreclosureIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureIndexDTO = new ForeclosureIndexDTO();
          struct.foreclosureIndexDTO.read(iprot);
          struct.setForeclosureIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureIndexTotal_result implements org.apache.thrift.TBase<getForeclosureIndexTotal_result, getForeclosureIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureIndexTotal_result.class, metaDataMap);
    }

    public getForeclosureIndexTotal_result() {
    }

    public getForeclosureIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureIndexTotal_result(getForeclosureIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getForeclosureIndexTotal_result deepCopy() {
      return new getForeclosureIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getForeclosureIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureIndexTotal_result)
        return this.equals((getForeclosureIndexTotal_result)that);
      return false;
    }

    public boolean equals(getForeclosureIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getForeclosureIndexTotal_resultStandardScheme getScheme() {
        return new getForeclosureIndexTotal_resultStandardScheme();
      }
    }

    private static class getForeclosureIndexTotal_resultStandardScheme extends StandardScheme<getForeclosureIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getForeclosureIndexTotal_resultTupleScheme getScheme() {
        return new getForeclosureIndexTotal_resultTupleScheme();
      }
    }

    private static class getForeclosureIndexTotal_resultTupleScheme extends TupleScheme<getForeclosureIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class foreclosure_args implements org.apache.thrift.TBase<foreclosure_args, foreclosure_args._Fields>, java.io.Serializable, Cloneable, Comparable<foreclosure_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foreclosure_args");

    private static final org.apache.thrift.protocol.TField HOUSE_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLE_INFO_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleInfoDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicDTO", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new foreclosure_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new foreclosure_argsTupleSchemeFactory());
    }

    public HouseBalanceDTO houseBalanceDTO; // required
    public HandleInfoDTO handleInfoDTO; // required
    public HandleDynamicDTO handleDynamicDTO; // required
    public String loginUserName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOUSE_BALANCE_DTO((short)1, "houseBalanceDTO"),
      HANDLE_INFO_DTO((short)2, "handleInfoDTO"),
      HANDLE_DYNAMIC_DTO((short)3, "handleDynamicDTO"),
      LOGIN_USER_NAME((short)4, "loginUserName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOUSE_BALANCE_DTO
            return HOUSE_BALANCE_DTO;
          case 2: // HANDLE_INFO_DTO
            return HANDLE_INFO_DTO;
          case 3: // HANDLE_DYNAMIC_DTO
            return HANDLE_DYNAMIC_DTO;
          case 4: // LOGIN_USER_NAME
            return LOGIN_USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOUSE_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("houseBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HouseBalanceDTO.class)));
      tmpMap.put(_Fields.HANDLE_INFO_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleInfoDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleInfoDTO.class)));
      tmpMap.put(_Fields.HANDLE_DYNAMIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicDTO.class)));
      tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foreclosure_args.class, metaDataMap);
    }

    public foreclosure_args() {
    }

    public foreclosure_args(
      HouseBalanceDTO houseBalanceDTO,
      HandleInfoDTO handleInfoDTO,
      HandleDynamicDTO handleDynamicDTO,
      String loginUserName)
    {
      this();
      this.houseBalanceDTO = houseBalanceDTO;
      this.handleInfoDTO = handleInfoDTO;
      this.handleDynamicDTO = handleDynamicDTO;
      this.loginUserName = loginUserName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foreclosure_args(foreclosure_args other) {
      if (other.isSetHouseBalanceDTO()) {
        this.houseBalanceDTO = new HouseBalanceDTO(other.houseBalanceDTO);
      }
      if (other.isSetHandleInfoDTO()) {
        this.handleInfoDTO = new HandleInfoDTO(other.handleInfoDTO);
      }
      if (other.isSetHandleDynamicDTO()) {
        this.handleDynamicDTO = new HandleDynamicDTO(other.handleDynamicDTO);
      }
      if (other.isSetLoginUserName()) {
        this.loginUserName = other.loginUserName;
      }
    }

    public foreclosure_args deepCopy() {
      return new foreclosure_args(this);
    }

    @Override
    public void clear() {
      this.houseBalanceDTO = null;
      this.handleInfoDTO = null;
      this.handleDynamicDTO = null;
      this.loginUserName = null;
    }

    public HouseBalanceDTO getHouseBalanceDTO() {
      return this.houseBalanceDTO;
    }

    public foreclosure_args setHouseBalanceDTO(HouseBalanceDTO houseBalanceDTO) {
      this.houseBalanceDTO = houseBalanceDTO;
      return this;
    }

    public void unsetHouseBalanceDTO() {
      this.houseBalanceDTO = null;
    }

    /** Returns true if field houseBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseBalanceDTO() {
      return this.houseBalanceDTO != null;
    }

    public void setHouseBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.houseBalanceDTO = null;
      }
    }

    public HandleInfoDTO getHandleInfoDTO() {
      return this.handleInfoDTO;
    }

    public foreclosure_args setHandleInfoDTO(HandleInfoDTO handleInfoDTO) {
      this.handleInfoDTO = handleInfoDTO;
      return this;
    }

    public void unsetHandleInfoDTO() {
      this.handleInfoDTO = null;
    }

    /** Returns true if field handleInfoDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleInfoDTO() {
      return this.handleInfoDTO != null;
    }

    public void setHandleInfoDTOIsSet(boolean value) {
      if (!value) {
        this.handleInfoDTO = null;
      }
    }

    public HandleDynamicDTO getHandleDynamicDTO() {
      return this.handleDynamicDTO;
    }

    public foreclosure_args setHandleDynamicDTO(HandleDynamicDTO handleDynamicDTO) {
      this.handleDynamicDTO = handleDynamicDTO;
      return this;
    }

    public void unsetHandleDynamicDTO() {
      this.handleDynamicDTO = null;
    }

    /** Returns true if field handleDynamicDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicDTO() {
      return this.handleDynamicDTO != null;
    }

    public void setHandleDynamicDTOIsSet(boolean value) {
      if (!value) {
        this.handleDynamicDTO = null;
      }
    }

    public String getLoginUserName() {
      return this.loginUserName;
    }

    public foreclosure_args setLoginUserName(String loginUserName) {
      this.loginUserName = loginUserName;
      return this;
    }

    public void unsetLoginUserName() {
      this.loginUserName = null;
    }

    /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginUserName() {
      return this.loginUserName != null;
    }

    public void setLoginUserNameIsSet(boolean value) {
      if (!value) {
        this.loginUserName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        if (value == null) {
          unsetHouseBalanceDTO();
        } else {
          setHouseBalanceDTO((HouseBalanceDTO)value);
        }
        break;

      case HANDLE_INFO_DTO:
        if (value == null) {
          unsetHandleInfoDTO();
        } else {
          setHandleInfoDTO((HandleInfoDTO)value);
        }
        break;

      case HANDLE_DYNAMIC_DTO:
        if (value == null) {
          unsetHandleDynamicDTO();
        } else {
          setHandleDynamicDTO((HandleDynamicDTO)value);
        }
        break;

      case LOGIN_USER_NAME:
        if (value == null) {
          unsetLoginUserName();
        } else {
          setLoginUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOUSE_BALANCE_DTO:
        return getHouseBalanceDTO();

      case HANDLE_INFO_DTO:
        return getHandleInfoDTO();

      case HANDLE_DYNAMIC_DTO:
        return getHandleDynamicDTO();

      case LOGIN_USER_NAME:
        return getLoginUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOUSE_BALANCE_DTO:
        return isSetHouseBalanceDTO();
      case HANDLE_INFO_DTO:
        return isSetHandleInfoDTO();
      case HANDLE_DYNAMIC_DTO:
        return isSetHandleDynamicDTO();
      case LOGIN_USER_NAME:
        return isSetLoginUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof foreclosure_args)
        return this.equals((foreclosure_args)that);
      return false;
    }

    public boolean equals(foreclosure_args that) {
      if (that == null)
        return false;

      boolean this_present_houseBalanceDTO = true && this.isSetHouseBalanceDTO();
      boolean that_present_houseBalanceDTO = true && that.isSetHouseBalanceDTO();
      if (this_present_houseBalanceDTO || that_present_houseBalanceDTO) {
        if (!(this_present_houseBalanceDTO && that_present_houseBalanceDTO))
          return false;
        if (!this.houseBalanceDTO.equals(that.houseBalanceDTO))
          return false;
      }

      boolean this_present_handleInfoDTO = true && this.isSetHandleInfoDTO();
      boolean that_present_handleInfoDTO = true && that.isSetHandleInfoDTO();
      if (this_present_handleInfoDTO || that_present_handleInfoDTO) {
        if (!(this_present_handleInfoDTO && that_present_handleInfoDTO))
          return false;
        if (!this.handleInfoDTO.equals(that.handleInfoDTO))
          return false;
      }

      boolean this_present_handleDynamicDTO = true && this.isSetHandleDynamicDTO();
      boolean that_present_handleDynamicDTO = true && that.isSetHandleDynamicDTO();
      if (this_present_handleDynamicDTO || that_present_handleDynamicDTO) {
        if (!(this_present_handleDynamicDTO && that_present_handleDynamicDTO))
          return false;
        if (!this.handleDynamicDTO.equals(that.handleDynamicDTO))
          return false;
      }

      boolean this_present_loginUserName = true && this.isSetLoginUserName();
      boolean that_present_loginUserName = true && that.isSetLoginUserName();
      if (this_present_loginUserName || that_present_loginUserName) {
        if (!(this_present_loginUserName && that_present_loginUserName))
          return false;
        if (!this.loginUserName.equals(that.loginUserName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_houseBalanceDTO = true && (isSetHouseBalanceDTO());
      list.add(present_houseBalanceDTO);
      if (present_houseBalanceDTO)
        list.add(houseBalanceDTO);

      boolean present_handleInfoDTO = true && (isSetHandleInfoDTO());
      list.add(present_handleInfoDTO);
      if (present_handleInfoDTO)
        list.add(handleInfoDTO);

      boolean present_handleDynamicDTO = true && (isSetHandleDynamicDTO());
      list.add(present_handleDynamicDTO);
      if (present_handleDynamicDTO)
        list.add(handleDynamicDTO);

      boolean present_loginUserName = true && (isSetLoginUserName());
      list.add(present_loginUserName);
      if (present_loginUserName)
        list.add(loginUserName);

      return list.hashCode();
    }

    @Override
    public int compareTo(foreclosure_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHouseBalanceDTO()).compareTo(other.isSetHouseBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBalanceDTO, other.houseBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandleInfoDTO()).compareTo(other.isSetHandleInfoDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleInfoDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleInfoDTO, other.handleInfoDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandleDynamicDTO()).compareTo(other.isSetHandleDynamicDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicDTO, other.handleDynamicDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("foreclosure_args(");
      boolean first = true;

      sb.append("houseBalanceDTO:");
      if (this.houseBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.houseBalanceDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handleInfoDTO:");
      if (this.handleInfoDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleInfoDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handleDynamicDTO:");
      if (this.handleDynamicDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDynamicDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (houseBalanceDTO != null) {
        houseBalanceDTO.validate();
      }
      if (handleInfoDTO != null) {
        handleInfoDTO.validate();
      }
      if (handleDynamicDTO != null) {
        handleDynamicDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foreclosure_argsStandardSchemeFactory implements SchemeFactory {
      public foreclosure_argsStandardScheme getScheme() {
        return new foreclosure_argsStandardScheme();
      }
    }

    private static class foreclosure_argsStandardScheme extends StandardScheme<foreclosure_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foreclosure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOUSE_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.houseBalanceDTO = new HouseBalanceDTO();
                struct.houseBalanceDTO.read(iprot);
                struct.setHouseBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLE_INFO_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleInfoDTO = new HandleInfoDTO();
                struct.handleInfoDTO.read(iprot);
                struct.setHandleInfoDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HANDLE_DYNAMIC_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDynamicDTO = new HandleDynamicDTO();
                struct.handleDynamicDTO.read(iprot);
                struct.setHandleDynamicDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGIN_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginUserName = iprot.readString();
                struct.setLoginUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foreclosure_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.houseBalanceDTO != null) {
          oprot.writeFieldBegin(HOUSE_BALANCE_DTO_FIELD_DESC);
          struct.houseBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handleInfoDTO != null) {
          oprot.writeFieldBegin(HANDLE_INFO_DTO_FIELD_DESC);
          struct.handleInfoDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handleDynamicDTO != null) {
          oprot.writeFieldBegin(HANDLE_DYNAMIC_DTO_FIELD_DESC);
          struct.handleDynamicDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginUserName != null) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foreclosure_argsTupleSchemeFactory implements SchemeFactory {
      public foreclosure_argsTupleScheme getScheme() {
        return new foreclosure_argsTupleScheme();
      }
    }

    private static class foreclosure_argsTupleScheme extends TupleScheme<foreclosure_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foreclosure_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHouseBalanceDTO()) {
          optionals.set(0);
        }
        if (struct.isSetHandleInfoDTO()) {
          optionals.set(1);
        }
        if (struct.isSetHandleDynamicDTO()) {
          optionals.set(2);
        }
        if (struct.isSetLoginUserName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHouseBalanceDTO()) {
          struct.houseBalanceDTO.write(oprot);
        }
        if (struct.isSetHandleInfoDTO()) {
          struct.handleInfoDTO.write(oprot);
        }
        if (struct.isSetHandleDynamicDTO()) {
          struct.handleDynamicDTO.write(oprot);
        }
        if (struct.isSetLoginUserName()) {
          oprot.writeString(struct.loginUserName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foreclosure_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.houseBalanceDTO = new HouseBalanceDTO();
          struct.houseBalanceDTO.read(iprot);
          struct.setHouseBalanceDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handleInfoDTO = new HandleInfoDTO();
          struct.handleInfoDTO.read(iprot);
          struct.setHandleInfoDTOIsSet(true);
        }
        if (incoming.get(2)) {
          struct.handleDynamicDTO = new HandleDynamicDTO();
          struct.handleDynamicDTO.read(iprot);
          struct.setHandleDynamicDTOIsSet(true);
        }
        if (incoming.get(3)) {
          struct.loginUserName = iprot.readString();
          struct.setLoginUserNameIsSet(true);
        }
      }
    }

  }

  public static class foreclosure_result implements org.apache.thrift.TBase<foreclosure_result, foreclosure_result._Fields>, java.io.Serializable, Cloneable, Comparable<foreclosure_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foreclosure_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new foreclosure_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new foreclosure_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foreclosure_result.class, metaDataMap);
    }

    public foreclosure_result() {
    }

    public foreclosure_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foreclosure_result(foreclosure_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public foreclosure_result deepCopy() {
      return new foreclosure_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public foreclosure_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof foreclosure_result)
        return this.equals((foreclosure_result)that);
      return false;
    }

    public boolean equals(foreclosure_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(foreclosure_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("foreclosure_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foreclosure_resultStandardSchemeFactory implements SchemeFactory {
      public foreclosure_resultStandardScheme getScheme() {
        return new foreclosure_resultStandardScheme();
      }
    }

    private static class foreclosure_resultStandardScheme extends StandardScheme<foreclosure_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foreclosure_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foreclosure_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foreclosure_resultTupleSchemeFactory implements SchemeFactory {
      public foreclosure_resultTupleScheme getScheme() {
        return new foreclosure_resultTupleScheme();
      }
    }

    private static class foreclosure_resultTupleScheme extends TupleScheme<foreclosure_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foreclosure_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foreclosure_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOrgBizHandlePage_args implements org.apache.thrift.TBase<queryOrgBizHandlePage_args, queryOrgBizHandlePage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOrgBizHandlePage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOrgBizHandlePage_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOrgBizHandlePage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOrgBizHandlePage_argsTupleSchemeFactory());
    }

    public OrgBizHandlePage query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgBizHandlePage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrgBizHandlePage_args.class, metaDataMap);
    }

    public queryOrgBizHandlePage_args() {
    }

    public queryOrgBizHandlePage_args(
      OrgBizHandlePage query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOrgBizHandlePage_args(queryOrgBizHandlePage_args other) {
      if (other.isSetQuery()) {
        this.query = new OrgBizHandlePage(other.query);
      }
    }

    public queryOrgBizHandlePage_args deepCopy() {
      return new queryOrgBizHandlePage_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public OrgBizHandlePage getQuery() {
      return this.query;
    }

    public queryOrgBizHandlePage_args setQuery(OrgBizHandlePage query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((OrgBizHandlePage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOrgBizHandlePage_args)
        return this.equals((queryOrgBizHandlePage_args)that);
      return false;
    }

    public boolean equals(queryOrgBizHandlePage_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOrgBizHandlePage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOrgBizHandlePage_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOrgBizHandlePage_argsStandardSchemeFactory implements SchemeFactory {
      public queryOrgBizHandlePage_argsStandardScheme getScheme() {
        return new queryOrgBizHandlePage_argsStandardScheme();
      }
    }

    private static class queryOrgBizHandlePage_argsStandardScheme extends StandardScheme<queryOrgBizHandlePage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrgBizHandlePage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new OrgBizHandlePage();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrgBizHandlePage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOrgBizHandlePage_argsTupleSchemeFactory implements SchemeFactory {
      public queryOrgBizHandlePage_argsTupleScheme getScheme() {
        return new queryOrgBizHandlePage_argsTupleScheme();
      }
    }

    private static class queryOrgBizHandlePage_argsTupleScheme extends TupleScheme<queryOrgBizHandlePage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOrgBizHandlePage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOrgBizHandlePage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new OrgBizHandlePage();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryOrgBizHandlePage_result implements org.apache.thrift.TBase<queryOrgBizHandlePage_result, queryOrgBizHandlePage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOrgBizHandlePage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOrgBizHandlePage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOrgBizHandlePage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOrgBizHandlePage_resultTupleSchemeFactory());
    }

    public List<OrgBizHandlePage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgBizHandlePage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOrgBizHandlePage_result.class, metaDataMap);
    }

    public queryOrgBizHandlePage_result() {
    }

    public queryOrgBizHandlePage_result(
      List<OrgBizHandlePage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOrgBizHandlePage_result(queryOrgBizHandlePage_result other) {
      if (other.isSetSuccess()) {
        List<OrgBizHandlePage> __this__success = new ArrayList<OrgBizHandlePage>(other.success.size());
        for (OrgBizHandlePage other_element : other.success) {
          __this__success.add(new OrgBizHandlePage(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryOrgBizHandlePage_result deepCopy() {
      return new queryOrgBizHandlePage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrgBizHandlePage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrgBizHandlePage elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrgBizHandlePage>();
      }
      this.success.add(elem);
    }

    public List<OrgBizHandlePage> getSuccess() {
      return this.success;
    }

    public queryOrgBizHandlePage_result setSuccess(List<OrgBizHandlePage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrgBizHandlePage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOrgBizHandlePage_result)
        return this.equals((queryOrgBizHandlePage_result)that);
      return false;
    }

    public boolean equals(queryOrgBizHandlePage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOrgBizHandlePage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOrgBizHandlePage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOrgBizHandlePage_resultStandardSchemeFactory implements SchemeFactory {
      public queryOrgBizHandlePage_resultStandardScheme getScheme() {
        return new queryOrgBizHandlePage_resultStandardScheme();
      }
    }

    private static class queryOrgBizHandlePage_resultStandardScheme extends StandardScheme<queryOrgBizHandlePage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOrgBizHandlePage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                  struct.success = new ArrayList<OrgBizHandlePage>(_list596.size);
                  OrgBizHandlePage _elem597;
                  for (int _i598 = 0; _i598 < _list596.size; ++_i598)
                  {
                    _elem597 = new OrgBizHandlePage();
                    _elem597.read(iprot);
                    struct.success.add(_elem597);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOrgBizHandlePage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrgBizHandlePage _iter599 : struct.success)
            {
              _iter599.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOrgBizHandlePage_resultTupleSchemeFactory implements SchemeFactory {
      public queryOrgBizHandlePage_resultTupleScheme getScheme() {
        return new queryOrgBizHandlePage_resultTupleScheme();
      }
    }

    private static class queryOrgBizHandlePage_resultTupleScheme extends TupleScheme<queryOrgBizHandlePage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOrgBizHandlePage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrgBizHandlePage _iter600 : struct.success)
            {
              _iter600.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOrgBizHandlePage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list601 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrgBizHandlePage>(_list601.size);
            OrgBizHandlePage _elem602;
            for (int _i603 = 0; _i603 < _list601.size; ++_i603)
            {
              _elem602 = new OrgBizHandlePage();
              _elem602.read(iprot);
              struct.success.add(_elem602);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrgBizHandlePageTotal_args implements org.apache.thrift.TBase<getOrgBizHandlePageTotal_args, getOrgBizHandlePageTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgBizHandlePageTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgBizHandlePageTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgBizHandlePageTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgBizHandlePageTotal_argsTupleSchemeFactory());
    }

    public OrgBizHandlePage query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrgBizHandlePage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgBizHandlePageTotal_args.class, metaDataMap);
    }

    public getOrgBizHandlePageTotal_args() {
    }

    public getOrgBizHandlePageTotal_args(
      OrgBizHandlePage query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgBizHandlePageTotal_args(getOrgBizHandlePageTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new OrgBizHandlePage(other.query);
      }
    }

    public getOrgBizHandlePageTotal_args deepCopy() {
      return new getOrgBizHandlePageTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public OrgBizHandlePage getQuery() {
      return this.query;
    }

    public getOrgBizHandlePageTotal_args setQuery(OrgBizHandlePage query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((OrgBizHandlePage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgBizHandlePageTotal_args)
        return this.equals((getOrgBizHandlePageTotal_args)that);
      return false;
    }

    public boolean equals(getOrgBizHandlePageTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgBizHandlePageTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgBizHandlePageTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgBizHandlePageTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgBizHandlePageTotal_argsStandardScheme getScheme() {
        return new getOrgBizHandlePageTotal_argsStandardScheme();
      }
    }

    private static class getOrgBizHandlePageTotal_argsStandardScheme extends StandardScheme<getOrgBizHandlePageTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgBizHandlePageTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new OrgBizHandlePage();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgBizHandlePageTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgBizHandlePageTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgBizHandlePageTotal_argsTupleScheme getScheme() {
        return new getOrgBizHandlePageTotal_argsTupleScheme();
      }
    }

    private static class getOrgBizHandlePageTotal_argsTupleScheme extends TupleScheme<getOrgBizHandlePageTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgBizHandlePageTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgBizHandlePageTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new OrgBizHandlePage();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getOrgBizHandlePageTotal_result implements org.apache.thrift.TBase<getOrgBizHandlePageTotal_result, getOrgBizHandlePageTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrgBizHandlePageTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgBizHandlePageTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgBizHandlePageTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgBizHandlePageTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgBizHandlePageTotal_result.class, metaDataMap);
    }

    public getOrgBizHandlePageTotal_result() {
    }

    public getOrgBizHandlePageTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgBizHandlePageTotal_result(getOrgBizHandlePageTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOrgBizHandlePageTotal_result deepCopy() {
      return new getOrgBizHandlePageTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getOrgBizHandlePageTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgBizHandlePageTotal_result)
        return this.equals((getOrgBizHandlePageTotal_result)that);
      return false;
    }

    public boolean equals(getOrgBizHandlePageTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrgBizHandlePageTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgBizHandlePageTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgBizHandlePageTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgBizHandlePageTotal_resultStandardScheme getScheme() {
        return new getOrgBizHandlePageTotal_resultStandardScheme();
      }
    }

    private static class getOrgBizHandlePageTotal_resultStandardScheme extends StandardScheme<getOrgBizHandlePageTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgBizHandlePageTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgBizHandlePageTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgBizHandlePageTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgBizHandlePageTotal_resultTupleScheme getScheme() {
        return new getOrgBizHandlePageTotal_resultTupleScheme();
      }
    }

    private static class getOrgBizHandlePageTotal_resultTupleScheme extends TupleScheme<getOrgBizHandlePageTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgBizHandlePageTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgBizHandlePageTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnList_args implements org.apache.thrift.TBase<getHandleDifferWarnList_args, getHandleDifferWarnList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnList_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnList_argsTupleSchemeFactory());
    }

    public HandleDifferWarnDTO handleDifferWarnDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_DTO((short)1, "handleDifferWarnDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_DTO
            return HANDLE_DIFFER_WARN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_DTO, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnList_args.class, metaDataMap);
    }

    public getHandleDifferWarnList_args() {
    }

    public getHandleDifferWarnList_args(
      HandleDifferWarnDTO handleDifferWarnDTO)
    {
      this();
      this.handleDifferWarnDTO = handleDifferWarnDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnList_args(getHandleDifferWarnList_args other) {
      if (other.isSetHandleDifferWarnDTO()) {
        this.handleDifferWarnDTO = new HandleDifferWarnDTO(other.handleDifferWarnDTO);
      }
    }

    public getHandleDifferWarnList_args deepCopy() {
      return new getHandleDifferWarnList_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnDTO = null;
    }

    public HandleDifferWarnDTO getHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO;
    }

    public getHandleDifferWarnList_args setHandleDifferWarnDTO(HandleDifferWarnDTO handleDifferWarnDTO) {
      this.handleDifferWarnDTO = handleDifferWarnDTO;
      return this;
    }

    public void unsetHandleDifferWarnDTO() {
      this.handleDifferWarnDTO = null;
    }

    /** Returns true if field handleDifferWarnDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnDTO() {
      return this.handleDifferWarnDTO != null;
    }

    public void setHandleDifferWarnDTOIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        if (value == null) {
          unsetHandleDifferWarnDTO();
        } else {
          setHandleDifferWarnDTO((HandleDifferWarnDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return getHandleDifferWarnDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_DTO:
        return isSetHandleDifferWarnDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnList_args)
        return this.equals((getHandleDifferWarnList_args)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnList_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnDTO = true && this.isSetHandleDifferWarnDTO();
      boolean that_present_handleDifferWarnDTO = true && that.isSetHandleDifferWarnDTO();
      if (this_present_handleDifferWarnDTO || that_present_handleDifferWarnDTO) {
        if (!(this_present_handleDifferWarnDTO && that_present_handleDifferWarnDTO))
          return false;
        if (!this.handleDifferWarnDTO.equals(that.handleDifferWarnDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnDTO = true && (isSetHandleDifferWarnDTO());
      list.add(present_handleDifferWarnDTO);
      if (present_handleDifferWarnDTO)
        list.add(handleDifferWarnDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnDTO()).compareTo(other.isSetHandleDifferWarnDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnDTO, other.handleDifferWarnDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnList_args(");
      boolean first = true;

      sb.append("handleDifferWarnDTO:");
      if (this.handleDifferWarnDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnDTO != null) {
        handleDifferWarnDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnList_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnList_argsStandardScheme getScheme() {
        return new getHandleDifferWarnList_argsStandardScheme();
      }
    }

    private static class getHandleDifferWarnList_argsStandardScheme extends StandardScheme<getHandleDifferWarnList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
                struct.handleDifferWarnDTO.read(iprot);
                struct.setHandleDifferWarnDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnDTO != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_DTO_FIELD_DESC);
          struct.handleDifferWarnDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnList_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnList_argsTupleScheme getScheme() {
        return new getHandleDifferWarnList_argsTupleScheme();
      }
    }

    private static class getHandleDifferWarnList_argsTupleScheme extends TupleScheme<getHandleDifferWarnList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnDTO()) {
          struct.handleDifferWarnDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnDTO = new HandleDifferWarnDTO();
          struct.handleDifferWarnDTO.read(iprot);
          struct.setHandleDifferWarnDTOIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnList_result implements org.apache.thrift.TBase<getHandleDifferWarnList_result, getHandleDifferWarnList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnList_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnList_result.class, metaDataMap);
    }

    public getHandleDifferWarnList_result() {
    }

    public getHandleDifferWarnList_result(
      List<HandleDifferWarnDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnList_result(getHandleDifferWarnList_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnDTO> __this__success = new ArrayList<HandleDifferWarnDTO>(other.success.size());
        for (HandleDifferWarnDTO other_element : other.success) {
          __this__success.add(new HandleDifferWarnDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHandleDifferWarnList_result deepCopy() {
      return new getHandleDifferWarnList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnDTO> getSuccess() {
      return this.success;
    }

    public getHandleDifferWarnList_result setSuccess(List<HandleDifferWarnDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnList_result)
        return this.equals((getHandleDifferWarnList_result)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnList_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnList_resultStandardScheme getScheme() {
        return new getHandleDifferWarnList_resultStandardScheme();
      }
    }

    private static class getHandleDifferWarnList_resultStandardScheme extends StandardScheme<getHandleDifferWarnList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list604 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnDTO>(_list604.size);
                  HandleDifferWarnDTO _elem605;
                  for (int _i606 = 0; _i606 < _list604.size; ++_i606)
                  {
                    _elem605 = new HandleDifferWarnDTO();
                    _elem605.read(iprot);
                    struct.success.add(_elem605);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnDTO _iter607 : struct.success)
            {
              _iter607.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnList_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnList_resultTupleScheme getScheme() {
        return new getHandleDifferWarnList_resultTupleScheme();
      }
    }

    private static class getHandleDifferWarnList_resultTupleScheme extends TupleScheme<getHandleDifferWarnList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnDTO _iter608 : struct.success)
            {
              _iter608.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list609 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnDTO>(_list609.size);
            HandleDifferWarnDTO _elem610;
            for (int _i611 = 0; _i611 < _list609.size; ++_i611)
            {
              _elem610 = new HandleDifferWarnDTO();
              _elem610.read(iprot);
              struct.success.add(_elem610);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findHandleDynamicFileByProjectId_args implements org.apache.thrift.TBase<findHandleDynamicFileByProjectId_args, findHandleDynamicFileByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findHandleDynamicFileByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHandleDynamicFileByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findHandleDynamicFileByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findHandleDynamicFileByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHandleDynamicFileByProjectId_args.class, metaDataMap);
    }

    public findHandleDynamicFileByProjectId_args() {
    }

    public findHandleDynamicFileByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHandleDynamicFileByProjectId_args(findHandleDynamicFileByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public findHandleDynamicFileByProjectId_args deepCopy() {
      return new findHandleDynamicFileByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public findHandleDynamicFileByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHandleDynamicFileByProjectId_args)
        return this.equals((findHandleDynamicFileByProjectId_args)that);
      return false;
    }

    public boolean equals(findHandleDynamicFileByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findHandleDynamicFileByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHandleDynamicFileByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHandleDynamicFileByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public findHandleDynamicFileByProjectId_argsStandardScheme getScheme() {
        return new findHandleDynamicFileByProjectId_argsStandardScheme();
      }
    }

    private static class findHandleDynamicFileByProjectId_argsStandardScheme extends StandardScheme<findHandleDynamicFileByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHandleDynamicFileByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHandleDynamicFileByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHandleDynamicFileByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public findHandleDynamicFileByProjectId_argsTupleScheme getScheme() {
        return new findHandleDynamicFileByProjectId_argsTupleScheme();
      }
    }

    private static class findHandleDynamicFileByProjectId_argsTupleScheme extends TupleScheme<findHandleDynamicFileByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHandleDynamicFileByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHandleDynamicFileByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class findHandleDynamicFileByProjectId_result implements org.apache.thrift.TBase<findHandleDynamicFileByProjectId_result, findHandleDynamicFileByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findHandleDynamicFileByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHandleDynamicFileByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findHandleDynamicFileByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findHandleDynamicFileByProjectId_resultTupleSchemeFactory());
    }

    public List<HandleDynamicFileDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDynamicFileDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHandleDynamicFileByProjectId_result.class, metaDataMap);
    }

    public findHandleDynamicFileByProjectId_result() {
    }

    public findHandleDynamicFileByProjectId_result(
      List<HandleDynamicFileDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHandleDynamicFileByProjectId_result(findHandleDynamicFileByProjectId_result other) {
      if (other.isSetSuccess()) {
        List<HandleDynamicFileDTO> __this__success = new ArrayList<HandleDynamicFileDTO>(other.success.size());
        for (HandleDynamicFileDTO other_element : other.success) {
          __this__success.add(new HandleDynamicFileDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findHandleDynamicFileByProjectId_result deepCopy() {
      return new findHandleDynamicFileByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDynamicFileDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDynamicFileDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDynamicFileDTO>();
      }
      this.success.add(elem);
    }

    public List<HandleDynamicFileDTO> getSuccess() {
      return this.success;
    }

    public findHandleDynamicFileByProjectId_result setSuccess(List<HandleDynamicFileDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDynamicFileDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHandleDynamicFileByProjectId_result)
        return this.equals((findHandleDynamicFileByProjectId_result)that);
      return false;
    }

    public boolean equals(findHandleDynamicFileByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findHandleDynamicFileByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHandleDynamicFileByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHandleDynamicFileByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public findHandleDynamicFileByProjectId_resultStandardScheme getScheme() {
        return new findHandleDynamicFileByProjectId_resultStandardScheme();
      }
    }

    private static class findHandleDynamicFileByProjectId_resultStandardScheme extends StandardScheme<findHandleDynamicFileByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHandleDynamicFileByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list612 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDynamicFileDTO>(_list612.size);
                  HandleDynamicFileDTO _elem613;
                  for (int _i614 = 0; _i614 < _list612.size; ++_i614)
                  {
                    _elem613 = new HandleDynamicFileDTO();
                    _elem613.read(iprot);
                    struct.success.add(_elem613);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHandleDynamicFileByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDynamicFileDTO _iter615 : struct.success)
            {
              _iter615.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHandleDynamicFileByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public findHandleDynamicFileByProjectId_resultTupleScheme getScheme() {
        return new findHandleDynamicFileByProjectId_resultTupleScheme();
      }
    }

    private static class findHandleDynamicFileByProjectId_resultTupleScheme extends TupleScheme<findHandleDynamicFileByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHandleDynamicFileByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDynamicFileDTO _iter616 : struct.success)
            {
              _iter616.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHandleDynamicFileByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list617 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDynamicFileDTO>(_list617.size);
            HandleDynamicFileDTO _elem618;
            for (int _i619 = 0; _i619 < _list617.size; ++_i619)
            {
              _elem618 = new HandleDynamicFileDTO();
              _elem618.read(iprot);
              struct.success.add(_elem618);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

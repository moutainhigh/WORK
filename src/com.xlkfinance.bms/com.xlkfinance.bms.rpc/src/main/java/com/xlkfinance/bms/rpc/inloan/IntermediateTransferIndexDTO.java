/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 中途划转首页列表
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class IntermediateTransferIndexDTO implements org.apache.thrift.TBase<IntermediateTransferIndexDTO, IntermediateTransferIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<IntermediateTransferIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IntermediateTransferIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BIZ_APPLY_HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bizApplyHandleStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField APPLY_HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OLD_HOME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldHome", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_PASS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectPassDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recDate", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TRANSFER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("transferMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField TRANSFER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAccount", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TRANSFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferDate", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntermediateTransferIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntermediateTransferIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int bizApplyHandleStatus; // required
  public int recStatus; // required
  public int applyHandleStatus; // required
  public String cancelGuaranteeDate; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String customerName; // required
  public String oldHome; // required
  public String projectPassDate; // required
  public double loanMoney; // required
  public int productType; // required
  public int productId; // required
  public String productName; // required
  public String requestDate; // required
  public double realLoan; // required
  public int type; // required
  public double recMoney; // required
  public String recAccount; // required
  public String recDate; // required
  public double transferMoney; // required
  public String transferAccount; // required
  public String transferDate; // required
  public int specialType; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int isChechan; // required
  public int pmUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    BIZ_APPLY_HANDLE_STATUS((short)5, "bizApplyHandleStatus"),
    REC_STATUS((short)6, "recStatus"),
    APPLY_HANDLE_STATUS((short)7, "applyHandleStatus"),
    CANCEL_GUARANTEE_DATE((short)8, "cancelGuaranteeDate"),
    USER_IDS((short)9, "userIds"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    CUSTOMER_NAME((short)12, "customerName"),
    OLD_HOME((short)13, "oldHome"),
    PROJECT_PASS_DATE((short)14, "projectPassDate"),
    LOAN_MONEY((short)15, "loanMoney"),
    PRODUCT_TYPE((short)16, "productType"),
    PRODUCT_ID((short)17, "productId"),
    PRODUCT_NAME((short)18, "productName"),
    REQUEST_DATE((short)19, "requestDate"),
    REAL_LOAN((short)20, "realLoan"),
    TYPE((short)21, "type"),
    REC_MONEY((short)22, "recMoney"),
    REC_ACCOUNT((short)23, "recAccount"),
    REC_DATE((short)24, "recDate"),
    TRANSFER_MONEY((short)25, "transferMoney"),
    TRANSFER_ACCOUNT((short)26, "transferAccount"),
    TRANSFER_DATE((short)27, "transferDate"),
    SPECIAL_TYPE((short)28, "specialType"),
    HOUSE_NAME((short)29, "houseName"),
    BUYER_NAME((short)30, "buyerName"),
    SELLER_NAME((short)31, "sellerName"),
    IS_CHECHAN((short)32, "isChechan"),
    PM_USER_ID((short)33, "pmUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // BIZ_APPLY_HANDLE_STATUS
          return BIZ_APPLY_HANDLE_STATUS;
        case 6: // REC_STATUS
          return REC_STATUS;
        case 7: // APPLY_HANDLE_STATUS
          return APPLY_HANDLE_STATUS;
        case 8: // CANCEL_GUARANTEE_DATE
          return CANCEL_GUARANTEE_DATE;
        case 9: // USER_IDS
          return USER_IDS;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 13: // OLD_HOME
          return OLD_HOME;
        case 14: // PROJECT_PASS_DATE
          return PROJECT_PASS_DATE;
        case 15: // LOAN_MONEY
          return LOAN_MONEY;
        case 16: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 17: // PRODUCT_ID
          return PRODUCT_ID;
        case 18: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 19: // REQUEST_DATE
          return REQUEST_DATE;
        case 20: // REAL_LOAN
          return REAL_LOAN;
        case 21: // TYPE
          return TYPE;
        case 22: // REC_MONEY
          return REC_MONEY;
        case 23: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 24: // REC_DATE
          return REC_DATE;
        case 25: // TRANSFER_MONEY
          return TRANSFER_MONEY;
        case 26: // TRANSFER_ACCOUNT
          return TRANSFER_ACCOUNT;
        case 27: // TRANSFER_DATE
          return TRANSFER_DATE;
        case 28: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 29: // HOUSE_NAME
          return HOUSE_NAME;
        case 30: // BUYER_NAME
          return BUYER_NAME;
        case 31: // SELLER_NAME
          return SELLER_NAME;
        case 32: // IS_CHECHAN
          return IS_CHECHAN;
        case 33: // PM_USER_ID
          return PM_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __BIZAPPLYHANDLESTATUS_ISSET_ID = 2;
  private static final int __RECSTATUS_ISSET_ID = 3;
  private static final int __APPLYHANDLESTATUS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __LOANMONEY_ISSET_ID = 7;
  private static final int __PRODUCTTYPE_ISSET_ID = 8;
  private static final int __PRODUCTID_ISSET_ID = 9;
  private static final int __REALLOAN_ISSET_ID = 10;
  private static final int __TYPE_ISSET_ID = 11;
  private static final int __RECMONEY_ISSET_ID = 12;
  private static final int __TRANSFERMONEY_ISSET_ID = 13;
  private static final int __SPECIALTYPE_ISSET_ID = 14;
  private static final int __ISCHECHAN_ISSET_ID = 15;
  private static final int __PMUSERID_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_APPLY_HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("bizApplyHandleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyHandleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_HOME, new org.apache.thrift.meta_data.FieldMetaData("oldHome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_PASS_DATE, new org.apache.thrift.meta_data.FieldMetaData("projectPassDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("requestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("realLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("recDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("transferMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANSFER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IntermediateTransferIndexDTO.class, metaDataMap);
  }

  public IntermediateTransferIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public IntermediateTransferIndexDTO(
    int pid,
    int projectId,
    String projectNumber,
    String projectName,
    int bizApplyHandleStatus,
    int recStatus,
    int applyHandleStatus,
    String cancelGuaranteeDate,
    List<Integer> userIds,
    int page,
    int rows,
    String customerName,
    String oldHome,
    String projectPassDate,
    double loanMoney,
    int productType,
    int productId,
    String productName,
    String requestDate,
    double realLoan,
    int type,
    double recMoney,
    String recAccount,
    String recDate,
    double transferMoney,
    String transferAccount,
    String transferDate,
    int specialType,
    String houseName,
    String buyerName,
    String sellerName,
    int isChechan,
    int pmUserId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.bizApplyHandleStatus = bizApplyHandleStatus;
    setBizApplyHandleStatusIsSet(true);
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    this.applyHandleStatus = applyHandleStatus;
    setApplyHandleStatusIsSet(true);
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.customerName = customerName;
    this.oldHome = oldHome;
    this.projectPassDate = projectPassDate;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.productName = productName;
    this.requestDate = requestDate;
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.recAccount = recAccount;
    this.recDate = recDate;
    this.transferMoney = transferMoney;
    setTransferMoneyIsSet(true);
    this.transferAccount = transferAccount;
    this.transferDate = transferDate;
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IntermediateTransferIndexDTO(IntermediateTransferIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.bizApplyHandleStatus = other.bizApplyHandleStatus;
    this.recStatus = other.recStatus;
    this.applyHandleStatus = other.applyHandleStatus;
    if (other.isSetCancelGuaranteeDate()) {
      this.cancelGuaranteeDate = other.cancelGuaranteeDate;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetOldHome()) {
      this.oldHome = other.oldHome;
    }
    if (other.isSetProjectPassDate()) {
      this.projectPassDate = other.projectPassDate;
    }
    this.loanMoney = other.loanMoney;
    this.productType = other.productType;
    this.productId = other.productId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    this.realLoan = other.realLoan;
    this.type = other.type;
    this.recMoney = other.recMoney;
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    if (other.isSetRecDate()) {
      this.recDate = other.recDate;
    }
    this.transferMoney = other.transferMoney;
    if (other.isSetTransferAccount()) {
      this.transferAccount = other.transferAccount;
    }
    if (other.isSetTransferDate()) {
      this.transferDate = other.transferDate;
    }
    this.specialType = other.specialType;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.isChechan = other.isChechan;
    this.pmUserId = other.pmUserId;
  }

  public IntermediateTransferIndexDTO deepCopy() {
    return new IntermediateTransferIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setBizApplyHandleStatusIsSet(false);
    this.bizApplyHandleStatus = 0;
    setRecStatusIsSet(false);
    this.recStatus = 0;
    setApplyHandleStatusIsSet(false);
    this.applyHandleStatus = 0;
    this.cancelGuaranteeDate = null;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.customerName = null;
    this.oldHome = null;
    this.projectPassDate = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setProductTypeIsSet(false);
    this.productType = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.productName = null;
    this.requestDate = null;
    setRealLoanIsSet(false);
    this.realLoan = 0.0;
    setTypeIsSet(false);
    this.type = 0;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    this.recAccount = null;
    this.recDate = null;
    setTransferMoneyIsSet(false);
    this.transferMoney = 0.0;
    this.transferAccount = null;
    this.transferDate = null;
    setSpecialTypeIsSet(false);
    this.specialType = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public IntermediateTransferIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public IntermediateTransferIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public IntermediateTransferIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public IntermediateTransferIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getBizApplyHandleStatus() {
    return this.bizApplyHandleStatus;
  }

  public IntermediateTransferIndexDTO setBizApplyHandleStatus(int bizApplyHandleStatus) {
    this.bizApplyHandleStatus = bizApplyHandleStatus;
    setBizApplyHandleStatusIsSet(true);
    return this;
  }

  public void unsetBizApplyHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field bizApplyHandleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBizApplyHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID);
  }

  public void setBizApplyHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID, value);
  }

  public int getRecStatus() {
    return this.recStatus;
  }

  public IntermediateTransferIndexDTO setRecStatus(int recStatus) {
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    return this;
  }

  public void unsetRecStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  /** Returns true if field recStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  public void setRecStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECSTATUS_ISSET_ID, value);
  }

  public int getApplyHandleStatus() {
    return this.applyHandleStatus;
  }

  public IntermediateTransferIndexDTO setApplyHandleStatus(int applyHandleStatus) {
    this.applyHandleStatus = applyHandleStatus;
    setApplyHandleStatusIsSet(true);
    return this;
  }

  public void unsetApplyHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field applyHandleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID);
  }

  public void setApplyHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID, value);
  }

  public String getCancelGuaranteeDate() {
    return this.cancelGuaranteeDate;
  }

  public IntermediateTransferIndexDTO setCancelGuaranteeDate(String cancelGuaranteeDate) {
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    return this;
  }

  public void unsetCancelGuaranteeDate() {
    this.cancelGuaranteeDate = null;
  }

  /** Returns true if field cancelGuaranteeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeDate() {
    return this.cancelGuaranteeDate != null;
  }

  public void setCancelGuaranteeDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeDate = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public IntermediateTransferIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public IntermediateTransferIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public IntermediateTransferIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public IntermediateTransferIndexDTO setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getOldHome() {
    return this.oldHome;
  }

  public IntermediateTransferIndexDTO setOldHome(String oldHome) {
    this.oldHome = oldHome;
    return this;
  }

  public void unsetOldHome() {
    this.oldHome = null;
  }

  /** Returns true if field oldHome is set (has been assigned a value) and false otherwise */
  public boolean isSetOldHome() {
    return this.oldHome != null;
  }

  public void setOldHomeIsSet(boolean value) {
    if (!value) {
      this.oldHome = null;
    }
  }

  public String getProjectPassDate() {
    return this.projectPassDate;
  }

  public IntermediateTransferIndexDTO setProjectPassDate(String projectPassDate) {
    this.projectPassDate = projectPassDate;
    return this;
  }

  public void unsetProjectPassDate() {
    this.projectPassDate = null;
  }

  /** Returns true if field projectPassDate is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectPassDate() {
    return this.projectPassDate != null;
  }

  public void setProjectPassDateIsSet(boolean value) {
    if (!value) {
      this.projectPassDate = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public IntermediateTransferIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public IntermediateTransferIndexDTO setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public IntermediateTransferIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public IntermediateTransferIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public IntermediateTransferIndexDTO setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public double getRealLoan() {
    return this.realLoan;
  }

  public IntermediateTransferIndexDTO setRealLoan(double realLoan) {
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    return this;
  }

  public void unsetRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  /** Returns true if field realLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  public void setRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOAN_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public IntermediateTransferIndexDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public IntermediateTransferIndexDTO setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public IntermediateTransferIndexDTO setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public String getRecDate() {
    return this.recDate;
  }

  public IntermediateTransferIndexDTO setRecDate(String recDate) {
    this.recDate = recDate;
    return this;
  }

  public void unsetRecDate() {
    this.recDate = null;
  }

  /** Returns true if field recDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecDate() {
    return this.recDate != null;
  }

  public void setRecDateIsSet(boolean value) {
    if (!value) {
      this.recDate = null;
    }
  }

  public double getTransferMoney() {
    return this.transferMoney;
  }

  public IntermediateTransferIndexDTO setTransferMoney(double transferMoney) {
    this.transferMoney = transferMoney;
    setTransferMoneyIsSet(true);
    return this;
  }

  public void unsetTransferMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID);
  }

  /** Returns true if field transferMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID);
  }

  public void setTransferMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFERMONEY_ISSET_ID, value);
  }

  public String getTransferAccount() {
    return this.transferAccount;
  }

  public IntermediateTransferIndexDTO setTransferAccount(String transferAccount) {
    this.transferAccount = transferAccount;
    return this;
  }

  public void unsetTransferAccount() {
    this.transferAccount = null;
  }

  /** Returns true if field transferAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferAccount() {
    return this.transferAccount != null;
  }

  public void setTransferAccountIsSet(boolean value) {
    if (!value) {
      this.transferAccount = null;
    }
  }

  public String getTransferDate() {
    return this.transferDate;
  }

  public IntermediateTransferIndexDTO setTransferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  public void unsetTransferDate() {
    this.transferDate = null;
  }

  /** Returns true if field transferDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferDate() {
    return this.transferDate != null;
  }

  public void setTransferDateIsSet(boolean value) {
    if (!value) {
      this.transferDate = null;
    }
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public IntermediateTransferIndexDTO setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public IntermediateTransferIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public IntermediateTransferIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public IntermediateTransferIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public IntermediateTransferIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public IntermediateTransferIndexDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case BIZ_APPLY_HANDLE_STATUS:
      if (value == null) {
        unsetBizApplyHandleStatus();
      } else {
        setBizApplyHandleStatus((Integer)value);
      }
      break;

    case REC_STATUS:
      if (value == null) {
        unsetRecStatus();
      } else {
        setRecStatus((Integer)value);
      }
      break;

    case APPLY_HANDLE_STATUS:
      if (value == null) {
        unsetApplyHandleStatus();
      } else {
        setApplyHandleStatus((Integer)value);
      }
      break;

    case CANCEL_GUARANTEE_DATE:
      if (value == null) {
        unsetCancelGuaranteeDate();
      } else {
        setCancelGuaranteeDate((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case OLD_HOME:
      if (value == null) {
        unsetOldHome();
      } else {
        setOldHome((String)value);
      }
      break;

    case PROJECT_PASS_DATE:
      if (value == null) {
        unsetProjectPassDate();
      } else {
        setProjectPassDate((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;

    case REAL_LOAN:
      if (value == null) {
        unsetRealLoan();
      } else {
        setRealLoan((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case REC_DATE:
      if (value == null) {
        unsetRecDate();
      } else {
        setRecDate((String)value);
      }
      break;

    case TRANSFER_MONEY:
      if (value == null) {
        unsetTransferMoney();
      } else {
        setTransferMoney((Double)value);
      }
      break;

    case TRANSFER_ACCOUNT:
      if (value == null) {
        unsetTransferAccount();
      } else {
        setTransferAccount((String)value);
      }
      break;

    case TRANSFER_DATE:
      if (value == null) {
        unsetTransferDate();
      } else {
        setTransferDate((String)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case BIZ_APPLY_HANDLE_STATUS:
      return Integer.valueOf(getBizApplyHandleStatus());

    case REC_STATUS:
      return Integer.valueOf(getRecStatus());

    case APPLY_HANDLE_STATUS:
      return Integer.valueOf(getApplyHandleStatus());

    case CANCEL_GUARANTEE_DATE:
      return getCancelGuaranteeDate();

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CUSTOMER_NAME:
      return getCustomerName();

    case OLD_HOME:
      return getOldHome();

    case PROJECT_PASS_DATE:
      return getProjectPassDate();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_NAME:
      return getProductName();

    case REQUEST_DATE:
      return getRequestDate();

    case REAL_LOAN:
      return Double.valueOf(getRealLoan());

    case TYPE:
      return Integer.valueOf(getType());

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case REC_ACCOUNT:
      return getRecAccount();

    case REC_DATE:
      return getRecDate();

    case TRANSFER_MONEY:
      return Double.valueOf(getTransferMoney());

    case TRANSFER_ACCOUNT:
      return getTransferAccount();

    case TRANSFER_DATE:
      return getTransferDate();

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case BIZ_APPLY_HANDLE_STATUS:
      return isSetBizApplyHandleStatus();
    case REC_STATUS:
      return isSetRecStatus();
    case APPLY_HANDLE_STATUS:
      return isSetApplyHandleStatus();
    case CANCEL_GUARANTEE_DATE:
      return isSetCancelGuaranteeDate();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case OLD_HOME:
      return isSetOldHome();
    case PROJECT_PASS_DATE:
      return isSetProjectPassDate();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case PRODUCT_TYPE:
      return isSetProductType();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case REQUEST_DATE:
      return isSetRequestDate();
    case REAL_LOAN:
      return isSetRealLoan();
    case TYPE:
      return isSetType();
    case REC_MONEY:
      return isSetRecMoney();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case REC_DATE:
      return isSetRecDate();
    case TRANSFER_MONEY:
      return isSetTransferMoney();
    case TRANSFER_ACCOUNT:
      return isSetTransferAccount();
    case TRANSFER_DATE:
      return isSetTransferDate();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case IS_CHECHAN:
      return isSetIsChechan();
    case PM_USER_ID:
      return isSetPmUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IntermediateTransferIndexDTO)
      return this.equals((IntermediateTransferIndexDTO)that);
    return false;
  }

  public boolean equals(IntermediateTransferIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_bizApplyHandleStatus = true;
    boolean that_present_bizApplyHandleStatus = true;
    if (this_present_bizApplyHandleStatus || that_present_bizApplyHandleStatus) {
      if (!(this_present_bizApplyHandleStatus && that_present_bizApplyHandleStatus))
        return false;
      if (this.bizApplyHandleStatus != that.bizApplyHandleStatus)
        return false;
    }

    boolean this_present_recStatus = true;
    boolean that_present_recStatus = true;
    if (this_present_recStatus || that_present_recStatus) {
      if (!(this_present_recStatus && that_present_recStatus))
        return false;
      if (this.recStatus != that.recStatus)
        return false;
    }

    boolean this_present_applyHandleStatus = true;
    boolean that_present_applyHandleStatus = true;
    if (this_present_applyHandleStatus || that_present_applyHandleStatus) {
      if (!(this_present_applyHandleStatus && that_present_applyHandleStatus))
        return false;
      if (this.applyHandleStatus != that.applyHandleStatus)
        return false;
    }

    boolean this_present_cancelGuaranteeDate = true && this.isSetCancelGuaranteeDate();
    boolean that_present_cancelGuaranteeDate = true && that.isSetCancelGuaranteeDate();
    if (this_present_cancelGuaranteeDate || that_present_cancelGuaranteeDate) {
      if (!(this_present_cancelGuaranteeDate && that_present_cancelGuaranteeDate))
        return false;
      if (!this.cancelGuaranteeDate.equals(that.cancelGuaranteeDate))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_oldHome = true && this.isSetOldHome();
    boolean that_present_oldHome = true && that.isSetOldHome();
    if (this_present_oldHome || that_present_oldHome) {
      if (!(this_present_oldHome && that_present_oldHome))
        return false;
      if (!this.oldHome.equals(that.oldHome))
        return false;
    }

    boolean this_present_projectPassDate = true && this.isSetProjectPassDate();
    boolean that_present_projectPassDate = true && that.isSetProjectPassDate();
    if (this_present_projectPassDate || that_present_projectPassDate) {
      if (!(this_present_projectPassDate && that_present_projectPassDate))
        return false;
      if (!this.projectPassDate.equals(that.projectPassDate))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }

    boolean this_present_realLoan = true;
    boolean that_present_realLoan = true;
    if (this_present_realLoan || that_present_realLoan) {
      if (!(this_present_realLoan && that_present_realLoan))
        return false;
      if (this.realLoan != that.realLoan)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_recDate = true && this.isSetRecDate();
    boolean that_present_recDate = true && that.isSetRecDate();
    if (this_present_recDate || that_present_recDate) {
      if (!(this_present_recDate && that_present_recDate))
        return false;
      if (!this.recDate.equals(that.recDate))
        return false;
    }

    boolean this_present_transferMoney = true;
    boolean that_present_transferMoney = true;
    if (this_present_transferMoney || that_present_transferMoney) {
      if (!(this_present_transferMoney && that_present_transferMoney))
        return false;
      if (this.transferMoney != that.transferMoney)
        return false;
    }

    boolean this_present_transferAccount = true && this.isSetTransferAccount();
    boolean that_present_transferAccount = true && that.isSetTransferAccount();
    if (this_present_transferAccount || that_present_transferAccount) {
      if (!(this_present_transferAccount && that_present_transferAccount))
        return false;
      if (!this.transferAccount.equals(that.transferAccount))
        return false;
    }

    boolean this_present_transferDate = true && this.isSetTransferDate();
    boolean that_present_transferDate = true && that.isSetTransferDate();
    if (this_present_transferDate || that_present_transferDate) {
      if (!(this_present_transferDate && that_present_transferDate))
        return false;
      if (!this.transferDate.equals(that.transferDate))
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_bizApplyHandleStatus = true;
    list.add(present_bizApplyHandleStatus);
    if (present_bizApplyHandleStatus)
      list.add(bizApplyHandleStatus);

    boolean present_recStatus = true;
    list.add(present_recStatus);
    if (present_recStatus)
      list.add(recStatus);

    boolean present_applyHandleStatus = true;
    list.add(present_applyHandleStatus);
    if (present_applyHandleStatus)
      list.add(applyHandleStatus);

    boolean present_cancelGuaranteeDate = true && (isSetCancelGuaranteeDate());
    list.add(present_cancelGuaranteeDate);
    if (present_cancelGuaranteeDate)
      list.add(cancelGuaranteeDate);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_oldHome = true && (isSetOldHome());
    list.add(present_oldHome);
    if (present_oldHome)
      list.add(oldHome);

    boolean present_projectPassDate = true && (isSetProjectPassDate());
    list.add(present_projectPassDate);
    if (present_projectPassDate)
      list.add(projectPassDate);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_requestDate = true && (isSetRequestDate());
    list.add(present_requestDate);
    if (present_requestDate)
      list.add(requestDate);

    boolean present_realLoan = true;
    list.add(present_realLoan);
    if (present_realLoan)
      list.add(realLoan);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_recDate = true && (isSetRecDate());
    list.add(present_recDate);
    if (present_recDate)
      list.add(recDate);

    boolean present_transferMoney = true;
    list.add(present_transferMoney);
    if (present_transferMoney)
      list.add(transferMoney);

    boolean present_transferAccount = true && (isSetTransferAccount());
    list.add(present_transferAccount);
    if (present_transferAccount)
      list.add(transferAccount);

    boolean present_transferDate = true && (isSetTransferDate());
    list.add(present_transferDate);
    if (present_transferDate)
      list.add(transferDate);

    boolean present_specialType = true;
    list.add(present_specialType);
    if (present_specialType)
      list.add(specialType);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(IntermediateTransferIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizApplyHandleStatus()).compareTo(other.isSetBizApplyHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizApplyHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizApplyHandleStatus, other.bizApplyHandleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecStatus()).compareTo(other.isSetRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recStatus, other.recStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyHandleStatus()).compareTo(other.isSetApplyHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleStatus, other.applyHandleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeDate()).compareTo(other.isSetCancelGuaranteeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeDate, other.cancelGuaranteeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldHome()).compareTo(other.isSetOldHome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldHome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldHome, other.oldHome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectPassDate()).compareTo(other.isSetProjectPassDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectPassDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectPassDate, other.projectPassDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(other.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDate, other.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoan()).compareTo(other.isSetRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoan, other.realLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecDate()).compareTo(other.isSetRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recDate, other.recDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferMoney()).compareTo(other.isSetTransferMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferMoney, other.transferMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferAccount()).compareTo(other.isSetTransferAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAccount, other.transferAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferDate()).compareTo(other.isSetTransferDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferDate, other.transferDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(other.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, other.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IntermediateTransferIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizApplyHandleStatus:");
    sb.append(this.bizApplyHandleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recStatus:");
    sb.append(this.recStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyHandleStatus:");
    sb.append(this.applyHandleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeDate:");
    if (this.cancelGuaranteeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldHome:");
    if (this.oldHome == null) {
      sb.append("null");
    } else {
      sb.append(this.oldHome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectPassDate:");
    if (this.projectPassDate == null) {
      sb.append("null");
    } else {
      sb.append(this.projectPassDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoan:");
    sb.append(this.realLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recDate:");
    if (this.recDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferMoney:");
    sb.append(this.transferMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferAccount:");
    if (this.transferAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.transferAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferDate:");
    if (this.transferDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntermediateTransferIndexDTOStandardSchemeFactory implements SchemeFactory {
    public IntermediateTransferIndexDTOStandardScheme getScheme() {
      return new IntermediateTransferIndexDTOStandardScheme();
    }
  }

  private static class IntermediateTransferIndexDTOStandardScheme extends StandardScheme<IntermediateTransferIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IntermediateTransferIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIZ_APPLY_HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizApplyHandleStatus = iprot.readI32();
              struct.setBizApplyHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recStatus = iprot.readI32();
              struct.setRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPLY_HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyHandleStatus = iprot.readI32();
              struct.setApplyHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CANCEL_GUARANTEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeDate = iprot.readString();
              struct.setCancelGuaranteeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list288.size);
                int _elem289;
                for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                {
                  _elem289 = iprot.readI32();
                  struct.userIds.add(_elem289);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OLD_HOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldHome = iprot.readString();
              struct.setOldHomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_PASS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectPassDate = iprot.readString();
              struct.setProjectPassDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDate = iprot.readString();
              struct.setRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoan = iprot.readDouble();
              struct.setRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recDate = iprot.readString();
              struct.setRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRANSFER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.transferMoney = iprot.readDouble();
              struct.setTransferMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TRANSFER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferAccount = iprot.readString();
              struct.setTransferAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TRANSFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferDate = iprot.readString();
              struct.setTransferDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IntermediateTransferIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZ_APPLY_HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.bizApplyHandleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyHandleStatus);
      oprot.writeFieldEnd();
      if (struct.cancelGuaranteeDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeDate);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter291 : struct.userIds)
          {
            oprot.writeI32(_iter291);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.oldHome != null) {
        oprot.writeFieldBegin(OLD_HOME_FIELD_DESC);
        oprot.writeString(struct.oldHome);
        oprot.writeFieldEnd();
      }
      if (struct.projectPassDate != null) {
        oprot.writeFieldBegin(PROJECT_PASS_DATE_FIELD_DESC);
        oprot.writeString(struct.projectPassDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.requestDate != null) {
        oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.requestDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.realLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      if (struct.recDate != null) {
        oprot.writeFieldBegin(REC_DATE_FIELD_DESC);
        oprot.writeString(struct.recDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSFER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.transferMoney);
      oprot.writeFieldEnd();
      if (struct.transferAccount != null) {
        oprot.writeFieldBegin(TRANSFER_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.transferAccount);
        oprot.writeFieldEnd();
      }
      if (struct.transferDate != null) {
        oprot.writeFieldBegin(TRANSFER_DATE_FIELD_DESC);
        oprot.writeString(struct.transferDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntermediateTransferIndexDTOTupleSchemeFactory implements SchemeFactory {
    public IntermediateTransferIndexDTOTupleScheme getScheme() {
      return new IntermediateTransferIndexDTOTupleScheme();
    }
  }

  private static class IntermediateTransferIndexDTOTupleScheme extends TupleScheme<IntermediateTransferIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IntermediateTransferIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetBizApplyHandleStatus()) {
        optionals.set(4);
      }
      if (struct.isSetRecStatus()) {
        optionals.set(5);
      }
      if (struct.isSetApplyHandleStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        optionals.set(7);
      }
      if (struct.isSetUserIds()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(11);
      }
      if (struct.isSetOldHome()) {
        optionals.set(12);
      }
      if (struct.isSetProjectPassDate()) {
        optionals.set(13);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(14);
      }
      if (struct.isSetProductType()) {
        optionals.set(15);
      }
      if (struct.isSetProductId()) {
        optionals.set(16);
      }
      if (struct.isSetProductName()) {
        optionals.set(17);
      }
      if (struct.isSetRequestDate()) {
        optionals.set(18);
      }
      if (struct.isSetRealLoan()) {
        optionals.set(19);
      }
      if (struct.isSetType()) {
        optionals.set(20);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(21);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(22);
      }
      if (struct.isSetRecDate()) {
        optionals.set(23);
      }
      if (struct.isSetTransferMoney()) {
        optionals.set(24);
      }
      if (struct.isSetTransferAccount()) {
        optionals.set(25);
      }
      if (struct.isSetTransferDate()) {
        optionals.set(26);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(27);
      }
      if (struct.isSetHouseName()) {
        optionals.set(28);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(29);
      }
      if (struct.isSetSellerName()) {
        optionals.set(30);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(31);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetBizApplyHandleStatus()) {
        oprot.writeI32(struct.bizApplyHandleStatus);
      }
      if (struct.isSetRecStatus()) {
        oprot.writeI32(struct.recStatus);
      }
      if (struct.isSetApplyHandleStatus()) {
        oprot.writeI32(struct.applyHandleStatus);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        oprot.writeString(struct.cancelGuaranteeDate);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter292 : struct.userIds)
          {
            oprot.writeI32(_iter292);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetOldHome()) {
        oprot.writeString(struct.oldHome);
      }
      if (struct.isSetProjectPassDate()) {
        oprot.writeString(struct.projectPassDate);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetRequestDate()) {
        oprot.writeString(struct.requestDate);
      }
      if (struct.isSetRealLoan()) {
        oprot.writeDouble(struct.realLoan);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetRecDate()) {
        oprot.writeString(struct.recDate);
      }
      if (struct.isSetTransferMoney()) {
        oprot.writeDouble(struct.transferMoney);
      }
      if (struct.isSetTransferAccount()) {
        oprot.writeString(struct.transferAccount);
      }
      if (struct.isSetTransferDate()) {
        oprot.writeString(struct.transferDate);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IntermediateTransferIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bizApplyHandleStatus = iprot.readI32();
        struct.setBizApplyHandleStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recStatus = iprot.readI32();
        struct.setRecStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.applyHandleStatus = iprot.readI32();
        struct.setApplyHandleStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cancelGuaranteeDate = iprot.readString();
        struct.setCancelGuaranteeDateIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list293.size);
          int _elem294;
          for (int _i295 = 0; _i295 < _list293.size; ++_i295)
          {
            _elem294 = iprot.readI32();
            struct.userIds.add(_elem294);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.oldHome = iprot.readString();
        struct.setOldHomeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectPassDate = iprot.readString();
        struct.setProjectPassDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.requestDate = iprot.readString();
        struct.setRequestDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.realLoan = iprot.readDouble();
        struct.setRealLoanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(23)) {
        struct.recDate = iprot.readString();
        struct.setRecDateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.transferMoney = iprot.readDouble();
        struct.setTransferMoneyIsSet(true);
      }
      if (incoming.get(25)) {
        struct.transferAccount = iprot.readString();
        struct.setTransferAccountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.transferDate = iprot.readString();
        struct.setTransferDateIsSet(true);
      }
      if (incoming.get(27)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(30)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(32)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
    }
  }

}


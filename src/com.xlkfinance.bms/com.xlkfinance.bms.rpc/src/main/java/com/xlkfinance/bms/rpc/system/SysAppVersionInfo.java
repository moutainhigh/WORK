/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysAppVersionInfo implements org.apache.thrift.TBase<SysAppVersionInfo, SysAppVersionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SysAppVersionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysAppVersionInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("appDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SYSTEM_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("systemPlatform", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DOWNLOAN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("downloanCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COERCIVENESS_UPGRADES_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("coercivenessUpgradesStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField APP_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("appCategory", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysAppVersionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysAppVersionInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String appName; // required
  public String appDescription; // required
  public String appVersion; // required
  public int status; // required
  public int fileId; // required
  public int systemPlatform; // required
  public int downloanCount; // required
  public int coercivenessUpgradesStatus; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public BizFile file; // required
  public int appCategory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    APP_NAME((short)2, "appName"),
    APP_DESCRIPTION((short)3, "appDescription"),
    APP_VERSION((short)4, "appVersion"),
    STATUS((short)5, "status"),
    FILE_ID((short)6, "fileId"),
    SYSTEM_PLATFORM((short)7, "systemPlatform"),
    DOWNLOAN_COUNT((short)8, "downloanCount"),
    COERCIVENESS_UPGRADES_STATUS((short)9, "coercivenessUpgradesStatus"),
    CREATER_DATE((short)10, "createrDate"),
    CREATER_ID((short)11, "createrId"),
    UPDATE_ID((short)12, "updateId"),
    UPDATE_DATE((short)13, "updateDate"),
    PAGE((short)14, "page"),
    ROWS((short)15, "rows"),
    FILE((short)16, "file"),
    APP_CATEGORY((short)17, "appCategory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // APP_DESCRIPTION
          return APP_DESCRIPTION;
        case 4: // APP_VERSION
          return APP_VERSION;
        case 5: // STATUS
          return STATUS;
        case 6: // FILE_ID
          return FILE_ID;
        case 7: // SYSTEM_PLATFORM
          return SYSTEM_PLATFORM;
        case 8: // DOWNLOAN_COUNT
          return DOWNLOAN_COUNT;
        case 9: // COERCIVENESS_UPGRADES_STATUS
          return COERCIVENESS_UPGRADES_STATUS;
        case 10: // CREATER_DATE
          return CREATER_DATE;
        case 11: // CREATER_ID
          return CREATER_ID;
        case 12: // UPDATE_ID
          return UPDATE_ID;
        case 13: // UPDATE_DATE
          return UPDATE_DATE;
        case 14: // PAGE
          return PAGE;
        case 15: // ROWS
          return ROWS;
        case 16: // FILE
          return FILE;
        case 17: // APP_CATEGORY
          return APP_CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __SYSTEMPLATFORM_ISSET_ID = 3;
  private static final int __DOWNLOANCOUNT_ISSET_ID = 4;
  private static final int __COERCIVENESSUPGRADESSTATUS_ISSET_ID = 5;
  private static final int __CREATERID_ISSET_ID = 6;
  private static final int __UPDATEID_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __APPCATEGORY_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("appDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYSTEM_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("systemPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNLOAN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("downloanCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COERCIVENESS_UPGRADES_STATUS, new org.apache.thrift.meta_data.FieldMetaData("coercivenessUpgradesStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizFile.class)));
    tmpMap.put(_Fields.APP_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("appCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysAppVersionInfo.class, metaDataMap);
  }

  public SysAppVersionInfo() {
    this.page = 1;

    this.rows = 10;

  }

  public SysAppVersionInfo(
    int pid,
    String appName,
    String appDescription,
    String appVersion,
    int status,
    int fileId,
    int systemPlatform,
    int downloanCount,
    int coercivenessUpgradesStatus,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    int page,
    int rows,
    BizFile file,
    int appCategory)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.appName = appName;
    this.appDescription = appDescription;
    this.appVersion = appVersion;
    this.status = status;
    setStatusIsSet(true);
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.systemPlatform = systemPlatform;
    setSystemPlatformIsSet(true);
    this.downloanCount = downloanCount;
    setDownloanCountIsSet(true);
    this.coercivenessUpgradesStatus = coercivenessUpgradesStatus;
    setCoercivenessUpgradesStatusIsSet(true);
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.file = file;
    this.appCategory = appCategory;
    setAppCategoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysAppVersionInfo(SysAppVersionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetAppDescription()) {
      this.appDescription = other.appDescription;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    this.status = other.status;
    this.fileId = other.fileId;
    this.systemPlatform = other.systemPlatform;
    this.downloanCount = other.downloanCount;
    this.coercivenessUpgradesStatus = other.coercivenessUpgradesStatus;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetFile()) {
      this.file = new BizFile(other.file);
    }
    this.appCategory = other.appCategory;
  }

  public SysAppVersionInfo deepCopy() {
    return new SysAppVersionInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.appName = null;
    this.appDescription = null;
    this.appVersion = null;
    setStatusIsSet(false);
    this.status = 0;
    setFileIdIsSet(false);
    this.fileId = 0;
    setSystemPlatformIsSet(false);
    this.systemPlatform = 0;
    setDownloanCountIsSet(false);
    this.downloanCount = 0;
    setCoercivenessUpgradesStatusIsSet(false);
    this.coercivenessUpgradesStatus = 0;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.file = null;
    setAppCategoryIsSet(false);
    this.appCategory = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public SysAppVersionInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getAppName() {
    return this.appName;
  }

  public SysAppVersionInfo setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getAppDescription() {
    return this.appDescription;
  }

  public SysAppVersionInfo setAppDescription(String appDescription) {
    this.appDescription = appDescription;
    return this;
  }

  public void unsetAppDescription() {
    this.appDescription = null;
  }

  /** Returns true if field appDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetAppDescription() {
    return this.appDescription != null;
  }

  public void setAppDescriptionIsSet(boolean value) {
    if (!value) {
      this.appDescription = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public SysAppVersionInfo setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysAppVersionInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getFileId() {
    return this.fileId;
  }

  public SysAppVersionInfo setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getSystemPlatform() {
    return this.systemPlatform;
  }

  public SysAppVersionInfo setSystemPlatform(int systemPlatform) {
    this.systemPlatform = systemPlatform;
    setSystemPlatformIsSet(true);
    return this;
  }

  public void unsetSystemPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEMPLATFORM_ISSET_ID);
  }

  /** Returns true if field systemPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEMPLATFORM_ISSET_ID);
  }

  public void setSystemPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEMPLATFORM_ISSET_ID, value);
  }

  public int getDownloanCount() {
    return this.downloanCount;
  }

  public SysAppVersionInfo setDownloanCount(int downloanCount) {
    this.downloanCount = downloanCount;
    setDownloanCountIsSet(true);
    return this;
  }

  public void unsetDownloanCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNLOANCOUNT_ISSET_ID);
  }

  /** Returns true if field downloanCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloanCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNLOANCOUNT_ISSET_ID);
  }

  public void setDownloanCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNLOANCOUNT_ISSET_ID, value);
  }

  public int getCoercivenessUpgradesStatus() {
    return this.coercivenessUpgradesStatus;
  }

  public SysAppVersionInfo setCoercivenessUpgradesStatus(int coercivenessUpgradesStatus) {
    this.coercivenessUpgradesStatus = coercivenessUpgradesStatus;
    setCoercivenessUpgradesStatusIsSet(true);
    return this;
  }

  public void unsetCoercivenessUpgradesStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COERCIVENESSUPGRADESSTATUS_ISSET_ID);
  }

  /** Returns true if field coercivenessUpgradesStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCoercivenessUpgradesStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COERCIVENESSUPGRADESSTATUS_ISSET_ID);
  }

  public void setCoercivenessUpgradesStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COERCIVENESSUPGRADESSTATUS_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public SysAppVersionInfo setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public SysAppVersionInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public SysAppVersionInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public SysAppVersionInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public SysAppVersionInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysAppVersionInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public BizFile getFile() {
    return this.file;
  }

  public SysAppVersionInfo setFile(BizFile file) {
    this.file = file;
    return this;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public int getAppCategory() {
    return this.appCategory;
  }

  public SysAppVersionInfo setAppCategory(int appCategory) {
    this.appCategory = appCategory;
    setAppCategoryIsSet(true);
    return this;
  }

  public void unsetAppCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPCATEGORY_ISSET_ID);
  }

  /** Returns true if field appCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __APPCATEGORY_ISSET_ID);
  }

  public void setAppCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPCATEGORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case APP_DESCRIPTION:
      if (value == null) {
        unsetAppDescription();
      } else {
        setAppDescription((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case SYSTEM_PLATFORM:
      if (value == null) {
        unsetSystemPlatform();
      } else {
        setSystemPlatform((Integer)value);
      }
      break;

    case DOWNLOAN_COUNT:
      if (value == null) {
        unsetDownloanCount();
      } else {
        setDownloanCount((Integer)value);
      }
      break;

    case COERCIVENESS_UPGRADES_STATUS:
      if (value == null) {
        unsetCoercivenessUpgradesStatus();
      } else {
        setCoercivenessUpgradesStatus((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case FILE:
      if (value == null) {
        unsetFile();
      } else {
        setFile((BizFile)value);
      }
      break;

    case APP_CATEGORY:
      if (value == null) {
        unsetAppCategory();
      } else {
        setAppCategory((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case APP_NAME:
      return getAppName();

    case APP_DESCRIPTION:
      return getAppDescription();

    case APP_VERSION:
      return getAppVersion();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case SYSTEM_PLATFORM:
      return Integer.valueOf(getSystemPlatform());

    case DOWNLOAN_COUNT:
      return Integer.valueOf(getDownloanCount());

    case COERCIVENESS_UPGRADES_STATUS:
      return Integer.valueOf(getCoercivenessUpgradesStatus());

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case FILE:
      return getFile();

    case APP_CATEGORY:
      return Integer.valueOf(getAppCategory());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case APP_NAME:
      return isSetAppName();
    case APP_DESCRIPTION:
      return isSetAppDescription();
    case APP_VERSION:
      return isSetAppVersion();
    case STATUS:
      return isSetStatus();
    case FILE_ID:
      return isSetFileId();
    case SYSTEM_PLATFORM:
      return isSetSystemPlatform();
    case DOWNLOAN_COUNT:
      return isSetDownloanCount();
    case COERCIVENESS_UPGRADES_STATUS:
      return isSetCoercivenessUpgradesStatus();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case FILE:
      return isSetFile();
    case APP_CATEGORY:
      return isSetAppCategory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysAppVersionInfo)
      return this.equals((SysAppVersionInfo)that);
    return false;
  }

  public boolean equals(SysAppVersionInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_appDescription = true && this.isSetAppDescription();
    boolean that_present_appDescription = true && that.isSetAppDescription();
    if (this_present_appDescription || that_present_appDescription) {
      if (!(this_present_appDescription && that_present_appDescription))
        return false;
      if (!this.appDescription.equals(that.appDescription))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_systemPlatform = true;
    boolean that_present_systemPlatform = true;
    if (this_present_systemPlatform || that_present_systemPlatform) {
      if (!(this_present_systemPlatform && that_present_systemPlatform))
        return false;
      if (this.systemPlatform != that.systemPlatform)
        return false;
    }

    boolean this_present_downloanCount = true;
    boolean that_present_downloanCount = true;
    if (this_present_downloanCount || that_present_downloanCount) {
      if (!(this_present_downloanCount && that_present_downloanCount))
        return false;
      if (this.downloanCount != that.downloanCount)
        return false;
    }

    boolean this_present_coercivenessUpgradesStatus = true;
    boolean that_present_coercivenessUpgradesStatus = true;
    if (this_present_coercivenessUpgradesStatus || that_present_coercivenessUpgradesStatus) {
      if (!(this_present_coercivenessUpgradesStatus && that_present_coercivenessUpgradesStatus))
        return false;
      if (this.coercivenessUpgradesStatus != that.coercivenessUpgradesStatus)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    boolean this_present_appCategory = true;
    boolean that_present_appCategory = true;
    if (this_present_appCategory || that_present_appCategory) {
      if (!(this_present_appCategory && that_present_appCategory))
        return false;
      if (this.appCategory != that.appCategory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_appName = true && (isSetAppName());
    list.add(present_appName);
    if (present_appName)
      list.add(appName);

    boolean present_appDescription = true && (isSetAppDescription());
    list.add(present_appDescription);
    if (present_appDescription)
      list.add(appDescription);

    boolean present_appVersion = true && (isSetAppVersion());
    list.add(present_appVersion);
    if (present_appVersion)
      list.add(appVersion);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_systemPlatform = true;
    list.add(present_systemPlatform);
    if (present_systemPlatform)
      list.add(systemPlatform);

    boolean present_downloanCount = true;
    list.add(present_downloanCount);
    if (present_downloanCount)
      list.add(downloanCount);

    boolean present_coercivenessUpgradesStatus = true;
    list.add(present_coercivenessUpgradesStatus);
    if (present_coercivenessUpgradesStatus)
      list.add(coercivenessUpgradesStatus);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_file = true && (isSetFile());
    list.add(present_file);
    if (present_file)
      list.add(file);

    boolean present_appCategory = true;
    list.add(present_appCategory);
    if (present_appCategory)
      list.add(appCategory);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysAppVersionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppDescription()).compareTo(other.isSetAppDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDescription, other.appDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(other.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, other.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemPlatform()).compareTo(other.isSetSystemPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemPlatform, other.systemPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloanCount()).compareTo(other.isSetDownloanCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloanCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloanCount, other.downloanCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoercivenessUpgradesStatus()).compareTo(other.isSetCoercivenessUpgradesStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoercivenessUpgradesStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coercivenessUpgradesStatus, other.coercivenessUpgradesStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCategory()).compareTo(other.isSetAppCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCategory, other.appCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysAppVersionInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appDescription:");
    if (this.appDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.appDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersion:");
    if (this.appVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemPlatform:");
    sb.append(this.systemPlatform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloanCount:");
    sb.append(this.downloanCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coercivenessUpgradesStatus:");
    sb.append(this.coercivenessUpgradesStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file:");
    if (this.file == null) {
      sb.append("null");
    } else {
      sb.append(this.file);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appCategory:");
    sb.append(this.appCategory);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (file != null) {
      file.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysAppVersionInfoStandardSchemeFactory implements SchemeFactory {
    public SysAppVersionInfoStandardScheme getScheme() {
      return new SysAppVersionInfoStandardScheme();
    }
  }

  private static class SysAppVersionInfoStandardScheme extends StandardScheme<SysAppVersionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysAppVersionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appDescription = iprot.readString();
              struct.setAppDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYSTEM_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.systemPlatform = iprot.readI32();
              struct.setSystemPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOWNLOAN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.downloanCount = iprot.readI32();
              struct.setDownloanCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COERCIVENESS_UPGRADES_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coercivenessUpgradesStatus = iprot.readI32();
              struct.setCoercivenessUpgradesStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file = new BizFile();
              struct.file.read(iprot);
              struct.setFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // APP_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appCategory = iprot.readI32();
              struct.setAppCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysAppVersionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.appDescription != null) {
        oprot.writeFieldBegin(APP_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.appDescription);
        oprot.writeFieldEnd();
      }
      if (struct.appVersion != null) {
        oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
        oprot.writeString(struct.appVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYSTEM_PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.systemPlatform);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWNLOAN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.downloanCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COERCIVENESS_UPGRADES_STATUS_FIELD_DESC);
      oprot.writeI32(struct.coercivenessUpgradesStatus);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.file != null) {
        oprot.writeFieldBegin(FILE_FIELD_DESC);
        struct.file.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.appCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysAppVersionInfoTupleSchemeFactory implements SchemeFactory {
    public SysAppVersionInfoTupleScheme getScheme() {
      return new SysAppVersionInfoTupleScheme();
    }
  }

  private static class SysAppVersionInfoTupleScheme extends TupleScheme<SysAppVersionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysAppVersionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAppName()) {
        optionals.set(1);
      }
      if (struct.isSetAppDescription()) {
        optionals.set(2);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetFileId()) {
        optionals.set(5);
      }
      if (struct.isSetSystemPlatform()) {
        optionals.set(6);
      }
      if (struct.isSetDownloanCount()) {
        optionals.set(7);
      }
      if (struct.isSetCoercivenessUpgradesStatus()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetFile()) {
        optionals.set(15);
      }
      if (struct.isSetAppCategory()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetAppDescription()) {
        oprot.writeString(struct.appDescription);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetSystemPlatform()) {
        oprot.writeI32(struct.systemPlatform);
      }
      if (struct.isSetDownloanCount()) {
        oprot.writeI32(struct.downloanCount);
      }
      if (struct.isSetCoercivenessUpgradesStatus()) {
        oprot.writeI32(struct.coercivenessUpgradesStatus);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetFile()) {
        struct.file.write(oprot);
      }
      if (struct.isSetAppCategory()) {
        oprot.writeI32(struct.appCategory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysAppVersionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appDescription = iprot.readString();
        struct.setAppDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.systemPlatform = iprot.readI32();
        struct.setSystemPlatformIsSet(true);
      }
      if (incoming.get(7)) {
        struct.downloanCount = iprot.readI32();
        struct.setDownloanCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.coercivenessUpgradesStatus = iprot.readI32();
        struct.setCoercivenessUpgradesStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.file = new BizFile();
        struct.file.read(iprot);
        struct.setFileIsSet(true);
      }
      if (incoming.get(16)) {
        struct.appCategory = iprot.readI32();
        struct.setAppCategoryIsSet(true);
      }
    }
  }

}


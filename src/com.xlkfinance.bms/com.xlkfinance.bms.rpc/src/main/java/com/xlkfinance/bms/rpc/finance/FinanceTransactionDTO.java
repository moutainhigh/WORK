/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceTransactionDTO implements org.apache.thrift.TBase<FinanceTransactionDTO, FinanceTransactionDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceTransactionDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceTransactionDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TENDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tenderType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAcctId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceTransactionDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceTransactionDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int refId; // required
  public int ftType; // required
  public String tenderType; // required
  public double ftAmt; // required
  public String ftDate; // required
  public int bankAcctId; // required
  public int userId; // required
  public int status; // required
  public int specialType; // required
  public String remark; // required
  public String createUser; // required
  public String createDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REF_ID((short)2, "refId"),
    FT_TYPE((short)3, "ftType"),
    TENDER_TYPE((short)4, "tenderType"),
    FT_AMT((short)5, "ftAmt"),
    FT_DATE((short)6, "ftDate"),
    BANK_ACCT_ID((short)7, "bankAcctId"),
    USER_ID((short)8, "userId"),
    STATUS((short)9, "status"),
    SPECIAL_TYPE((short)10, "specialType"),
    REMARK((short)11, "remark"),
    CREATE_USER((short)12, "createUser"),
    CREATE_DATE((short)13, "createDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REF_ID
          return REF_ID;
        case 3: // FT_TYPE
          return FT_TYPE;
        case 4: // TENDER_TYPE
          return TENDER_TYPE;
        case 5: // FT_AMT
          return FT_AMT;
        case 6: // FT_DATE
          return FT_DATE;
        case 7: // BANK_ACCT_ID
          return BANK_ACCT_ID;
        case 8: // USER_ID
          return USER_ID;
        case 9: // STATUS
          return STATUS;
        case 10: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 11: // REMARK
          return REMARK;
        case 12: // CREATE_USER
          return CREATE_USER;
        case 13: // CREATE_DATE
          return CREATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REFID_ISSET_ID = 1;
  private static final int __FTTYPE_ISSET_ID = 2;
  private static final int __FTAMT_ISSET_ID = 3;
  private static final int __BANKACCTID_ISSET_ID = 4;
  private static final int __USERID_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __SPECIALTYPE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TENDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tenderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_DATE, new org.apache.thrift.meta_data.FieldMetaData("ftDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("bankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceTransactionDTO.class, metaDataMap);
  }

  public FinanceTransactionDTO() {
  }

  public FinanceTransactionDTO(
    int pid,
    int refId,
    int ftType,
    String tenderType,
    double ftAmt,
    String ftDate,
    int bankAcctId,
    int userId,
    int status,
    int specialType,
    String remark,
    String createUser,
    String createDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.ftType = ftType;
    setFtTypeIsSet(true);
    this.tenderType = tenderType;
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftDate = ftDate;
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.remark = remark;
    this.createUser = createUser;
    this.createDate = createDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceTransactionDTO(FinanceTransactionDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.refId = other.refId;
    this.ftType = other.ftType;
    if (other.isSetTenderType()) {
      this.tenderType = other.tenderType;
    }
    this.ftAmt = other.ftAmt;
    if (other.isSetFtDate()) {
      this.ftDate = other.ftDate;
    }
    this.bankAcctId = other.bankAcctId;
    this.userId = other.userId;
    this.status = other.status;
    this.specialType = other.specialType;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
  }

  public FinanceTransactionDTO deepCopy() {
    return new FinanceTransactionDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setFtTypeIsSet(false);
    this.ftType = 0;
    this.tenderType = null;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftDate = null;
    setBankAcctIdIsSet(false);
    this.bankAcctId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setSpecialTypeIsSet(false);
    this.specialType = 0;
    this.remark = null;
    this.createUser = null;
    this.createDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceTransactionDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public FinanceTransactionDTO setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getFtType() {
    return this.ftType;
  }

  public FinanceTransactionDTO setFtType(int ftType) {
    this.ftType = ftType;
    setFtTypeIsSet(true);
    return this;
  }

  public void unsetFtType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return EncodingUtils.testBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  public void setFtTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTTYPE_ISSET_ID, value);
  }

  public String getTenderType() {
    return this.tenderType;
  }

  public FinanceTransactionDTO setTenderType(String tenderType) {
    this.tenderType = tenderType;
    return this;
  }

  public void unsetTenderType() {
    this.tenderType = null;
  }

  /** Returns true if field tenderType is set (has been assigned a value) and false otherwise */
  public boolean isSetTenderType() {
    return this.tenderType != null;
  }

  public void setTenderTypeIsSet(boolean value) {
    if (!value) {
      this.tenderType = null;
    }
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public FinanceTransactionDTO setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtDate() {
    return this.ftDate;
  }

  public FinanceTransactionDTO setFtDate(String ftDate) {
    this.ftDate = ftDate;
    return this;
  }

  public void unsetFtDate() {
    this.ftDate = null;
  }

  /** Returns true if field ftDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDate() {
    return this.ftDate != null;
  }

  public void setFtDateIsSet(boolean value) {
    if (!value) {
      this.ftDate = null;
    }
  }

  public int getBankAcctId() {
    return this.bankAcctId;
  }

  public FinanceTransactionDTO setBankAcctId(int bankAcctId) {
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    return this;
  }

  public void unsetBankAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  /** Returns true if field bankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  public void setBankAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKACCTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public FinanceTransactionDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public FinanceTransactionDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public FinanceTransactionDTO setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public FinanceTransactionDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public FinanceTransactionDTO setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public FinanceTransactionDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((Integer)value);
      }
      break;

    case TENDER_TYPE:
      if (value == null) {
        unsetTenderType();
      } else {
        setTenderType((String)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_DATE:
      if (value == null) {
        unsetFtDate();
      } else {
        setFtDate((String)value);
      }
      break;

    case BANK_ACCT_ID:
      if (value == null) {
        unsetBankAcctId();
      } else {
        setBankAcctId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case FT_TYPE:
      return Integer.valueOf(getFtType());

    case TENDER_TYPE:
      return getTenderType();

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_DATE:
      return getFtDate();

    case BANK_ACCT_ID:
      return Integer.valueOf(getBankAcctId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case REMARK:
      return getRemark();

    case CREATE_USER:
      return getCreateUser();

    case CREATE_DATE:
      return getCreateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REF_ID:
      return isSetRefId();
    case FT_TYPE:
      return isSetFtType();
    case TENDER_TYPE:
      return isSetTenderType();
    case FT_AMT:
      return isSetFtAmt();
    case FT_DATE:
      return isSetFtDate();
    case BANK_ACCT_ID:
      return isSetBankAcctId();
    case USER_ID:
      return isSetUserId();
    case STATUS:
      return isSetStatus();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case REMARK:
      return isSetRemark();
    case CREATE_USER:
      return isSetCreateUser();
    case CREATE_DATE:
      return isSetCreateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceTransactionDTO)
      return this.equals((FinanceTransactionDTO)that);
    return false;
  }

  public boolean equals(FinanceTransactionDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_ftType = true;
    boolean that_present_ftType = true;
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (this.ftType != that.ftType)
        return false;
    }

    boolean this_present_tenderType = true && this.isSetTenderType();
    boolean that_present_tenderType = true && that.isSetTenderType();
    if (this_present_tenderType || that_present_tenderType) {
      if (!(this_present_tenderType && that_present_tenderType))
        return false;
      if (!this.tenderType.equals(that.tenderType))
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftDate = true && this.isSetFtDate();
    boolean that_present_ftDate = true && that.isSetFtDate();
    if (this_present_ftDate || that_present_ftDate) {
      if (!(this_present_ftDate && that_present_ftDate))
        return false;
      if (!this.ftDate.equals(that.ftDate))
        return false;
    }

    boolean this_present_bankAcctId = true;
    boolean that_present_bankAcctId = true;
    if (this_present_bankAcctId || that_present_bankAcctId) {
      if (!(this_present_bankAcctId && that_present_bankAcctId))
        return false;
      if (this.bankAcctId != that.bankAcctId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_ftType = true;
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_tenderType = true && (isSetTenderType());
    list.add(present_tenderType);
    if (present_tenderType)
      list.add(tenderType);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftDate = true && (isSetFtDate());
    list.add(present_ftDate);
    if (present_ftDate)
      list.add(ftDate);

    boolean present_bankAcctId = true;
    list.add(present_bankAcctId);
    if (present_bankAcctId)
      list.add(bankAcctId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_specialType = true;
    list.add(present_specialType);
    if (present_specialType)
      list.add(specialType);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceTransactionDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenderType()).compareTo(other.isSetTenderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenderType, other.tenderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDate()).compareTo(other.isSetFtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDate, other.ftDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAcctId()).compareTo(other.isSetBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAcctId, other.bankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(other.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, other.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceTransactionDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    sb.append(this.ftType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenderType:");
    if (this.tenderType == null) {
      sb.append("null");
    } else {
      sb.append(this.tenderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDate:");
    if (this.ftDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAcctId:");
    sb.append(this.bankAcctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceTransactionDTOStandardSchemeFactory implements SchemeFactory {
    public FinanceTransactionDTOStandardScheme getScheme() {
      return new FinanceTransactionDTOStandardScheme();
    }
  }

  private static class FinanceTransactionDTOStandardScheme extends StandardScheme<FinanceTransactionDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceTransactionDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftType = iprot.readI32();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TENDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenderType = iprot.readString();
              struct.setTenderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDate = iprot.readString();
              struct.setFtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankAcctId = iprot.readI32();
              struct.setBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceTransactionDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ftType);
      oprot.writeFieldEnd();
      if (struct.tenderType != null) {
        oprot.writeFieldBegin(TENDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.tenderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftDate != null) {
        oprot.writeFieldBegin(FT_DATE_FIELD_DESC);
        oprot.writeString(struct.ftDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.bankAcctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceTransactionDTOTupleSchemeFactory implements SchemeFactory {
    public FinanceTransactionDTOTupleScheme getScheme() {
      return new FinanceTransactionDTOTupleScheme();
    }
  }

  private static class FinanceTransactionDTOTupleScheme extends TupleScheme<FinanceTransactionDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceTransactionDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetRefId()) {
        optionals.set(1);
      }
      if (struct.isSetFtType()) {
        optionals.set(2);
      }
      if (struct.isSetTenderType()) {
        optionals.set(3);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(4);
      }
      if (struct.isSetFtDate()) {
        optionals.set(5);
      }
      if (struct.isSetBankAcctId()) {
        optionals.set(6);
      }
      if (struct.isSetUserId()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(11);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetFtType()) {
        oprot.writeI32(struct.ftType);
      }
      if (struct.isSetTenderType()) {
        oprot.writeString(struct.tenderType);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtDate()) {
        oprot.writeString(struct.ftDate);
      }
      if (struct.isSetBankAcctId()) {
        oprot.writeI32(struct.bankAcctId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceTransactionDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ftType = iprot.readI32();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tenderType = iprot.readString();
        struct.setTenderTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ftDate = iprot.readString();
        struct.setFtDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankAcctId = iprot.readI32();
        struct.setBankAcctIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizChangeRecord implements org.apache.thrift.TBase<BizChangeRecord, BizChangeRecord._Fields>, java.io.Serializable, Cloneable, Comparable<BizChangeRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizChangeRecord");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MODIFY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyUser", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MODIFY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyReason", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldValue", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("newValue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CHANGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("changeType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATION_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("operationIp", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizChangeRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizChangeRecordTupleSchemeFactory());
  }

  public int pid; // required
  public int relationId; // required
  public int modifyUser; // required
  public String modifyTime; // required
  public String modifyReason; // required
  public String oldValue; // required
  public String newValue; // required
  public int valueType; // required
  public int changeType; // required
  public String operationIp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    RELATION_ID((short)2, "relationId"),
    MODIFY_USER((short)3, "modifyUser"),
    MODIFY_TIME((short)4, "modifyTime"),
    MODIFY_REASON((short)5, "modifyReason"),
    OLD_VALUE((short)6, "oldValue"),
    NEW_VALUE((short)7, "newValue"),
    VALUE_TYPE((short)8, "valueType"),
    CHANGE_TYPE((short)9, "changeType"),
    OPERATION_IP((short)10, "operationIp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // RELATION_ID
          return RELATION_ID;
        case 3: // MODIFY_USER
          return MODIFY_USER;
        case 4: // MODIFY_TIME
          return MODIFY_TIME;
        case 5: // MODIFY_REASON
          return MODIFY_REASON;
        case 6: // OLD_VALUE
          return OLD_VALUE;
        case 7: // NEW_VALUE
          return NEW_VALUE;
        case 8: // VALUE_TYPE
          return VALUE_TYPE;
        case 9: // CHANGE_TYPE
          return CHANGE_TYPE;
        case 10: // OPERATION_IP
          return OPERATION_IP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __RELATIONID_ISSET_ID = 1;
  private static final int __MODIFYUSER_ISSET_ID = 2;
  private static final int __VALUETYPE_ISSET_ID = 3;
  private static final int __CHANGETYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("relationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODIFY_USER, new org.apache.thrift.meta_data.FieldMetaData("modifyUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_REASON, new org.apache.thrift.meta_data.FieldMetaData("modifyReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("oldValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_VALUE, new org.apache.thrift.meta_data.FieldMetaData("newValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("changeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATION_IP, new org.apache.thrift.meta_data.FieldMetaData("operationIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizChangeRecord.class, metaDataMap);
  }

  public BizChangeRecord() {
  }

  public BizChangeRecord(
    int pid,
    int relationId,
    int modifyUser,
    String modifyTime,
    String modifyReason,
    String oldValue,
    String newValue,
    int valueType,
    int changeType,
    String operationIp)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.relationId = relationId;
    setRelationIdIsSet(true);
    this.modifyUser = modifyUser;
    setModifyUserIsSet(true);
    this.modifyTime = modifyTime;
    this.modifyReason = modifyReason;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.valueType = valueType;
    setValueTypeIsSet(true);
    this.changeType = changeType;
    setChangeTypeIsSet(true);
    this.operationIp = operationIp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizChangeRecord(BizChangeRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.relationId = other.relationId;
    this.modifyUser = other.modifyUser;
    if (other.isSetModifyTime()) {
      this.modifyTime = other.modifyTime;
    }
    if (other.isSetModifyReason()) {
      this.modifyReason = other.modifyReason;
    }
    if (other.isSetOldValue()) {
      this.oldValue = other.oldValue;
    }
    if (other.isSetNewValue()) {
      this.newValue = other.newValue;
    }
    this.valueType = other.valueType;
    this.changeType = other.changeType;
    if (other.isSetOperationIp()) {
      this.operationIp = other.operationIp;
    }
  }

  public BizChangeRecord deepCopy() {
    return new BizChangeRecord(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setRelationIdIsSet(false);
    this.relationId = 0;
    setModifyUserIsSet(false);
    this.modifyUser = 0;
    this.modifyTime = null;
    this.modifyReason = null;
    this.oldValue = null;
    this.newValue = null;
    setValueTypeIsSet(false);
    this.valueType = 0;
    setChangeTypeIsSet(false);
    this.changeType = 0;
    this.operationIp = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizChangeRecord setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRelationId() {
    return this.relationId;
  }

  public BizChangeRecord setRelationId(int relationId) {
    this.relationId = relationId;
    setRelationIdIsSet(true);
    return this;
  }

  public void unsetRelationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  /** Returns true if field relationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  public void setRelationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONID_ISSET_ID, value);
  }

  public int getModifyUser() {
    return this.modifyUser;
  }

  public BizChangeRecord setModifyUser(int modifyUser) {
    this.modifyUser = modifyUser;
    setModifyUserIsSet(true);
    return this;
  }

  public void unsetModifyUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFYUSER_ISSET_ID);
  }

  /** Returns true if field modifyUser is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyUser() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFYUSER_ISSET_ID);
  }

  public void setModifyUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFYUSER_ISSET_ID, value);
  }

  public String getModifyTime() {
    return this.modifyTime;
  }

  public BizChangeRecord setModifyTime(String modifyTime) {
    this.modifyTime = modifyTime;
    return this;
  }

  public void unsetModifyTime() {
    this.modifyTime = null;
  }

  /** Returns true if field modifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTime() {
    return this.modifyTime != null;
  }

  public void setModifyTimeIsSet(boolean value) {
    if (!value) {
      this.modifyTime = null;
    }
  }

  public String getModifyReason() {
    return this.modifyReason;
  }

  public BizChangeRecord setModifyReason(String modifyReason) {
    this.modifyReason = modifyReason;
    return this;
  }

  public void unsetModifyReason() {
    this.modifyReason = null;
  }

  /** Returns true if field modifyReason is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyReason() {
    return this.modifyReason != null;
  }

  public void setModifyReasonIsSet(boolean value) {
    if (!value) {
      this.modifyReason = null;
    }
  }

  public String getOldValue() {
    return this.oldValue;
  }

  public BizChangeRecord setOldValue(String oldValue) {
    this.oldValue = oldValue;
    return this;
  }

  public void unsetOldValue() {
    this.oldValue = null;
  }

  /** Returns true if field oldValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOldValue() {
    return this.oldValue != null;
  }

  public void setOldValueIsSet(boolean value) {
    if (!value) {
      this.oldValue = null;
    }
  }

  public String getNewValue() {
    return this.newValue;
  }

  public BizChangeRecord setNewValue(String newValue) {
    this.newValue = newValue;
    return this;
  }

  public void unsetNewValue() {
    this.newValue = null;
  }

  /** Returns true if field newValue is set (has been assigned a value) and false otherwise */
  public boolean isSetNewValue() {
    return this.newValue != null;
  }

  public void setNewValueIsSet(boolean value) {
    if (!value) {
      this.newValue = null;
    }
  }

  public int getValueType() {
    return this.valueType;
  }

  public BizChangeRecord setValueType(int valueType) {
    this.valueType = valueType;
    setValueTypeIsSet(true);
    return this;
  }

  public void unsetValueType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUETYPE_ISSET_ID);
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUETYPE_ISSET_ID);
  }

  public void setValueTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUETYPE_ISSET_ID, value);
  }

  public int getChangeType() {
    return this.changeType;
  }

  public BizChangeRecord setChangeType(int changeType) {
    this.changeType = changeType;
    setChangeTypeIsSet(true);
    return this;
  }

  public void unsetChangeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANGETYPE_ISSET_ID);
  }

  /** Returns true if field changeType is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeType() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANGETYPE_ISSET_ID);
  }

  public void setChangeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANGETYPE_ISSET_ID, value);
  }

  public String getOperationIp() {
    return this.operationIp;
  }

  public BizChangeRecord setOperationIp(String operationIp) {
    this.operationIp = operationIp;
    return this;
  }

  public void unsetOperationIp() {
    this.operationIp = null;
  }

  /** Returns true if field operationIp is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationIp() {
    return this.operationIp != null;
  }

  public void setOperationIpIsSet(boolean value) {
    if (!value) {
      this.operationIp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case RELATION_ID:
      if (value == null) {
        unsetRelationId();
      } else {
        setRelationId((Integer)value);
      }
      break;

    case MODIFY_USER:
      if (value == null) {
        unsetModifyUser();
      } else {
        setModifyUser((Integer)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModifyTime();
      } else {
        setModifyTime((String)value);
      }
      break;

    case MODIFY_REASON:
      if (value == null) {
        unsetModifyReason();
      } else {
        setModifyReason((String)value);
      }
      break;

    case OLD_VALUE:
      if (value == null) {
        unsetOldValue();
      } else {
        setOldValue((String)value);
      }
      break;

    case NEW_VALUE:
      if (value == null) {
        unsetNewValue();
      } else {
        setNewValue((String)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((Integer)value);
      }
      break;

    case CHANGE_TYPE:
      if (value == null) {
        unsetChangeType();
      } else {
        setChangeType((Integer)value);
      }
      break;

    case OPERATION_IP:
      if (value == null) {
        unsetOperationIp();
      } else {
        setOperationIp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case RELATION_ID:
      return Integer.valueOf(getRelationId());

    case MODIFY_USER:
      return Integer.valueOf(getModifyUser());

    case MODIFY_TIME:
      return getModifyTime();

    case MODIFY_REASON:
      return getModifyReason();

    case OLD_VALUE:
      return getOldValue();

    case NEW_VALUE:
      return getNewValue();

    case VALUE_TYPE:
      return Integer.valueOf(getValueType());

    case CHANGE_TYPE:
      return Integer.valueOf(getChangeType());

    case OPERATION_IP:
      return getOperationIp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case RELATION_ID:
      return isSetRelationId();
    case MODIFY_USER:
      return isSetModifyUser();
    case MODIFY_TIME:
      return isSetModifyTime();
    case MODIFY_REASON:
      return isSetModifyReason();
    case OLD_VALUE:
      return isSetOldValue();
    case NEW_VALUE:
      return isSetNewValue();
    case VALUE_TYPE:
      return isSetValueType();
    case CHANGE_TYPE:
      return isSetChangeType();
    case OPERATION_IP:
      return isSetOperationIp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizChangeRecord)
      return this.equals((BizChangeRecord)that);
    return false;
  }

  public boolean equals(BizChangeRecord that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_relationId = true;
    boolean that_present_relationId = true;
    if (this_present_relationId || that_present_relationId) {
      if (!(this_present_relationId && that_present_relationId))
        return false;
      if (this.relationId != that.relationId)
        return false;
    }

    boolean this_present_modifyUser = true;
    boolean that_present_modifyUser = true;
    if (this_present_modifyUser || that_present_modifyUser) {
      if (!(this_present_modifyUser && that_present_modifyUser))
        return false;
      if (this.modifyUser != that.modifyUser)
        return false;
    }

    boolean this_present_modifyTime = true && this.isSetModifyTime();
    boolean that_present_modifyTime = true && that.isSetModifyTime();
    if (this_present_modifyTime || that_present_modifyTime) {
      if (!(this_present_modifyTime && that_present_modifyTime))
        return false;
      if (!this.modifyTime.equals(that.modifyTime))
        return false;
    }

    boolean this_present_modifyReason = true && this.isSetModifyReason();
    boolean that_present_modifyReason = true && that.isSetModifyReason();
    if (this_present_modifyReason || that_present_modifyReason) {
      if (!(this_present_modifyReason && that_present_modifyReason))
        return false;
      if (!this.modifyReason.equals(that.modifyReason))
        return false;
    }

    boolean this_present_oldValue = true && this.isSetOldValue();
    boolean that_present_oldValue = true && that.isSetOldValue();
    if (this_present_oldValue || that_present_oldValue) {
      if (!(this_present_oldValue && that_present_oldValue))
        return false;
      if (!this.oldValue.equals(that.oldValue))
        return false;
    }

    boolean this_present_newValue = true && this.isSetNewValue();
    boolean that_present_newValue = true && that.isSetNewValue();
    if (this_present_newValue || that_present_newValue) {
      if (!(this_present_newValue && that_present_newValue))
        return false;
      if (!this.newValue.equals(that.newValue))
        return false;
    }

    boolean this_present_valueType = true;
    boolean that_present_valueType = true;
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (this.valueType != that.valueType)
        return false;
    }

    boolean this_present_changeType = true;
    boolean that_present_changeType = true;
    if (this_present_changeType || that_present_changeType) {
      if (!(this_present_changeType && that_present_changeType))
        return false;
      if (this.changeType != that.changeType)
        return false;
    }

    boolean this_present_operationIp = true && this.isSetOperationIp();
    boolean that_present_operationIp = true && that.isSetOperationIp();
    if (this_present_operationIp || that_present_operationIp) {
      if (!(this_present_operationIp && that_present_operationIp))
        return false;
      if (!this.operationIp.equals(that.operationIp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_relationId = true;
    list.add(present_relationId);
    if (present_relationId)
      list.add(relationId);

    boolean present_modifyUser = true;
    list.add(present_modifyUser);
    if (present_modifyUser)
      list.add(modifyUser);

    boolean present_modifyTime = true && (isSetModifyTime());
    list.add(present_modifyTime);
    if (present_modifyTime)
      list.add(modifyTime);

    boolean present_modifyReason = true && (isSetModifyReason());
    list.add(present_modifyReason);
    if (present_modifyReason)
      list.add(modifyReason);

    boolean present_oldValue = true && (isSetOldValue());
    list.add(present_oldValue);
    if (present_oldValue)
      list.add(oldValue);

    boolean present_newValue = true && (isSetNewValue());
    list.add(present_newValue);
    if (present_newValue)
      list.add(newValue);

    boolean present_valueType = true;
    list.add(present_valueType);
    if (present_valueType)
      list.add(valueType);

    boolean present_changeType = true;
    list.add(present_changeType);
    if (present_changeType)
      list.add(changeType);

    boolean present_operationIp = true && (isSetOperationIp());
    list.add(present_operationIp);
    if (present_operationIp)
      list.add(operationIp);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizChangeRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationId()).compareTo(other.isSetRelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationId, other.relationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyUser()).compareTo(other.isSetModifyUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyUser, other.modifyUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyTime()).compareTo(other.isSetModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, other.modifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyReason()).compareTo(other.isSetModifyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyReason, other.modifyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldValue()).compareTo(other.isSetOldValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldValue, other.oldValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewValue()).compareTo(other.isSetNewValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newValue, other.newValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueType()).compareTo(other.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangeType()).compareTo(other.isSetChangeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeType, other.changeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationIp()).compareTo(other.isSetOperationIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationIp, other.operationIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizChangeRecord(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationId:");
    sb.append(this.relationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyUser:");
    sb.append(this.modifyUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyTime:");
    if (this.modifyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyReason:");
    if (this.modifyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldValue:");
    if (this.oldValue == null) {
      sb.append("null");
    } else {
      sb.append(this.oldValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newValue:");
    if (this.newValue == null) {
      sb.append("null");
    } else {
      sb.append(this.newValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueType:");
    sb.append(this.valueType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("changeType:");
    sb.append(this.changeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationIp:");
    if (this.operationIp == null) {
      sb.append("null");
    } else {
      sb.append(this.operationIp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizChangeRecordStandardSchemeFactory implements SchemeFactory {
    public BizChangeRecordStandardScheme getScheme() {
      return new BizChangeRecordStandardScheme();
    }
  }

  private static class BizChangeRecordStandardScheme extends StandardScheme<BizChangeRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizChangeRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationId = iprot.readI32();
              struct.setRelationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODIFY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modifyUser = iprot.readI32();
              struct.setModifyUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyTime = iprot.readString();
              struct.setModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODIFY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyReason = iprot.readString();
              struct.setModifyReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldValue = iprot.readString();
              struct.setOldValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newValue = iprot.readString();
              struct.setNewValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valueType = iprot.readI32();
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHANGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.changeType = iprot.readI32();
              struct.setChangeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATION_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationIp = iprot.readString();
              struct.setOperationIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizChangeRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATION_ID_FIELD_DESC);
      oprot.writeI32(struct.relationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODIFY_USER_FIELD_DESC);
      oprot.writeI32(struct.modifyUser);
      oprot.writeFieldEnd();
      if (struct.modifyTime != null) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.modifyTime);
        oprot.writeFieldEnd();
      }
      if (struct.modifyReason != null) {
        oprot.writeFieldBegin(MODIFY_REASON_FIELD_DESC);
        oprot.writeString(struct.modifyReason);
        oprot.writeFieldEnd();
      }
      if (struct.oldValue != null) {
        oprot.writeFieldBegin(OLD_VALUE_FIELD_DESC);
        oprot.writeString(struct.oldValue);
        oprot.writeFieldEnd();
      }
      if (struct.newValue != null) {
        oprot.writeFieldBegin(NEW_VALUE_FIELD_DESC);
        oprot.writeString(struct.newValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.valueType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANGE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.changeType);
      oprot.writeFieldEnd();
      if (struct.operationIp != null) {
        oprot.writeFieldBegin(OPERATION_IP_FIELD_DESC);
        oprot.writeString(struct.operationIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizChangeRecordTupleSchemeFactory implements SchemeFactory {
    public BizChangeRecordTupleScheme getScheme() {
      return new BizChangeRecordTupleScheme();
    }
  }

  private static class BizChangeRecordTupleScheme extends TupleScheme<BizChangeRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizChangeRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetRelationId()) {
        optionals.set(1);
      }
      if (struct.isSetModifyUser()) {
        optionals.set(2);
      }
      if (struct.isSetModifyTime()) {
        optionals.set(3);
      }
      if (struct.isSetModifyReason()) {
        optionals.set(4);
      }
      if (struct.isSetOldValue()) {
        optionals.set(5);
      }
      if (struct.isSetNewValue()) {
        optionals.set(6);
      }
      if (struct.isSetValueType()) {
        optionals.set(7);
      }
      if (struct.isSetChangeType()) {
        optionals.set(8);
      }
      if (struct.isSetOperationIp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRelationId()) {
        oprot.writeI32(struct.relationId);
      }
      if (struct.isSetModifyUser()) {
        oprot.writeI32(struct.modifyUser);
      }
      if (struct.isSetModifyTime()) {
        oprot.writeString(struct.modifyTime);
      }
      if (struct.isSetModifyReason()) {
        oprot.writeString(struct.modifyReason);
      }
      if (struct.isSetOldValue()) {
        oprot.writeString(struct.oldValue);
      }
      if (struct.isSetNewValue()) {
        oprot.writeString(struct.newValue);
      }
      if (struct.isSetValueType()) {
        oprot.writeI32(struct.valueType);
      }
      if (struct.isSetChangeType()) {
        oprot.writeI32(struct.changeType);
      }
      if (struct.isSetOperationIp()) {
        oprot.writeString(struct.operationIp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizChangeRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.relationId = iprot.readI32();
        struct.setRelationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modifyUser = iprot.readI32();
        struct.setModifyUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.modifyTime = iprot.readString();
        struct.setModifyTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.modifyReason = iprot.readString();
        struct.setModifyReasonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oldValue = iprot.readString();
        struct.setOldValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.newValue = iprot.readString();
        struct.setNewValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.valueType = iprot.readI32();
        struct.setValueTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.changeType = iprot.readI32();
        struct.setChangeTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operationIp = iprot.readString();
        struct.setOperationIpIsSet(true);
      }
    }
  }

}


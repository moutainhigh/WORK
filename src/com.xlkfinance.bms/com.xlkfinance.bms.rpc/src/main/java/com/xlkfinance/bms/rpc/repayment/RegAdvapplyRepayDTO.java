/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RegAdvapplyRepayDTO implements org.apache.thrift.TBase<RegAdvapplyRepayDTO, RegAdvapplyRepayDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RegAdvapplyRepayDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegAdvapplyRepayDTO");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_LOAD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractLoadNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_CREDIT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCreditNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FILE_FUN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileFunType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BUSINESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessName", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegAdvapplyRepayDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegAdvapplyRepayDTOTupleSchemeFactory());
  }

  public String pId; // required
  public String contractLoadNo; // required
  public String contractCreditNo; // required
  public double creditAmt; // required
  public int projectType; // required
  public double monthLoanInterest; // required
  public int repayCycle; // required
  public String projectId; // required
  public String fileType; // required
  public String fileName; // required
  public int fileSize; // required
  public String uploadDttm; // required
  public String fileFunType; // required
  public String fileDesc; // required
  public int rows; // required
  public int page; // required
  public String projectName; // required
  public String filePath; // required
  public String businessName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    CONTRACT_LOAD_NO((short)2, "contractLoadNo"),
    CONTRACT_CREDIT_NO((short)3, "contractCreditNo"),
    CREDIT_AMT((short)4, "creditAmt"),
    PROJECT_TYPE((short)5, "projectType"),
    MONTH_LOAN_INTEREST((short)6, "monthLoanInterest"),
    REPAY_CYCLE((short)7, "repayCycle"),
    PROJECT_ID((short)8, "projectId"),
    FILE_TYPE((short)9, "fileType"),
    FILE_NAME((short)10, "fileName"),
    FILE_SIZE((short)11, "fileSize"),
    UPLOAD_DTTM((short)12, "uploadDttm"),
    FILE_FUN_TYPE((short)13, "fileFunType"),
    FILE_DESC((short)14, "fileDesc"),
    ROWS((short)15, "rows"),
    PAGE((short)16, "page"),
    PROJECT_NAME((short)17, "projectName"),
    FILE_PATH((short)18, "filePath"),
    BUSINESS_NAME((short)24, "businessName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // CONTRACT_LOAD_NO
          return CONTRACT_LOAD_NO;
        case 3: // CONTRACT_CREDIT_NO
          return CONTRACT_CREDIT_NO;
        case 4: // CREDIT_AMT
          return CREDIT_AMT;
        case 5: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 6: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 7: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 8: // PROJECT_ID
          return PROJECT_ID;
        case 9: // FILE_TYPE
          return FILE_TYPE;
        case 10: // FILE_NAME
          return FILE_NAME;
        case 11: // FILE_SIZE
          return FILE_SIZE;
        case 12: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 13: // FILE_FUN_TYPE
          return FILE_FUN_TYPE;
        case 14: // FILE_DESC
          return FILE_DESC;
        case 15: // ROWS
          return ROWS;
        case 16: // PAGE
          return PAGE;
        case 17: // PROJECT_NAME
          return PROJECT_NAME;
        case 18: // FILE_PATH
          return FILE_PATH;
        case 24: // BUSINESS_NAME
          return BUSINESS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREDITAMT_ISSET_ID = 0;
  private static final int __PROJECTTYPE_ISSET_ID = 1;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 2;
  private static final int __REPAYCYCLE_ISSET_ID = 3;
  private static final int __FILESIZE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_LOAD_NO, new org.apache.thrift.meta_data.FieldMetaData("contractLoadNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CREDIT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractCreditNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FUN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileFunType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegAdvapplyRepayDTO.class, metaDataMap);
  }

  public RegAdvapplyRepayDTO() {
  }

  public RegAdvapplyRepayDTO(
    String pId,
    String contractLoadNo,
    String contractCreditNo,
    double creditAmt,
    int projectType,
    double monthLoanInterest,
    int repayCycle,
    String projectId,
    String fileType,
    String fileName,
    int fileSize,
    String uploadDttm,
    String fileFunType,
    String fileDesc,
    int rows,
    int page,
    String projectName,
    String filePath,
    String businessName)
  {
    this();
    this.pId = pId;
    this.contractLoadNo = contractLoadNo;
    this.contractCreditNo = contractCreditNo;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.projectId = projectId;
    this.fileType = fileType;
    this.fileName = fileName;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.uploadDttm = uploadDttm;
    this.fileFunType = fileFunType;
    this.fileDesc = fileDesc;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.projectName = projectName;
    this.filePath = filePath;
    this.businessName = businessName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegAdvapplyRepayDTO(RegAdvapplyRepayDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    if (other.isSetContractLoadNo()) {
      this.contractLoadNo = other.contractLoadNo;
    }
    if (other.isSetContractCreditNo()) {
      this.contractCreditNo = other.contractCreditNo;
    }
    this.creditAmt = other.creditAmt;
    this.projectType = other.projectType;
    this.monthLoanInterest = other.monthLoanInterest;
    this.repayCycle = other.repayCycle;
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.fileSize = other.fileSize;
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetFileFunType()) {
      this.fileFunType = other.fileFunType;
    }
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    this.rows = other.rows;
    this.page = other.page;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetBusinessName()) {
      this.businessName = other.businessName;
    }
  }

  public RegAdvapplyRepayDTO deepCopy() {
    return new RegAdvapplyRepayDTO(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    this.contractLoadNo = null;
    this.contractCreditNo = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    this.projectId = null;
    this.fileType = null;
    this.fileName = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.uploadDttm = null;
    this.fileFunType = null;
    this.fileDesc = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    this.projectName = null;
    this.filePath = null;
    this.businessName = null;
  }

  public String getPId() {
    return this.pId;
  }

  public RegAdvapplyRepayDTO setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public String getContractLoadNo() {
    return this.contractLoadNo;
  }

  public RegAdvapplyRepayDTO setContractLoadNo(String contractLoadNo) {
    this.contractLoadNo = contractLoadNo;
    return this;
  }

  public void unsetContractLoadNo() {
    this.contractLoadNo = null;
  }

  /** Returns true if field contractLoadNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractLoadNo() {
    return this.contractLoadNo != null;
  }

  public void setContractLoadNoIsSet(boolean value) {
    if (!value) {
      this.contractLoadNo = null;
    }
  }

  public String getContractCreditNo() {
    return this.contractCreditNo;
  }

  public RegAdvapplyRepayDTO setContractCreditNo(String contractCreditNo) {
    this.contractCreditNo = contractCreditNo;
    return this;
  }

  public void unsetContractCreditNo() {
    this.contractCreditNo = null;
  }

  /** Returns true if field contractCreditNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCreditNo() {
    return this.contractCreditNo != null;
  }

  public void setContractCreditNoIsSet(boolean value) {
    if (!value) {
      this.contractCreditNo = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public RegAdvapplyRepayDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public RegAdvapplyRepayDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public RegAdvapplyRepayDTO setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public RegAdvapplyRepayDTO setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public String getProjectId() {
    return this.projectId;
  }

  public RegAdvapplyRepayDTO setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getFileType() {
    return this.fileType;
  }

  public RegAdvapplyRepayDTO setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public RegAdvapplyRepayDTO setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public RegAdvapplyRepayDTO setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public RegAdvapplyRepayDTO setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getFileFunType() {
    return this.fileFunType;
  }

  public RegAdvapplyRepayDTO setFileFunType(String fileFunType) {
    this.fileFunType = fileFunType;
    return this;
  }

  public void unsetFileFunType() {
    this.fileFunType = null;
  }

  /** Returns true if field fileFunType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileFunType() {
    return this.fileFunType != null;
  }

  public void setFileFunTypeIsSet(boolean value) {
    if (!value) {
      this.fileFunType = null;
    }
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public RegAdvapplyRepayDTO setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public RegAdvapplyRepayDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RegAdvapplyRepayDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RegAdvapplyRepayDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public RegAdvapplyRepayDTO setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public String getBusinessName() {
    return this.businessName;
  }

  public RegAdvapplyRepayDTO setBusinessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

  public void unsetBusinessName() {
    this.businessName = null;
  }

  /** Returns true if field businessName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessName() {
    return this.businessName != null;
  }

  public void setBusinessNameIsSet(boolean value) {
    if (!value) {
      this.businessName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case CONTRACT_LOAD_NO:
      if (value == null) {
        unsetContractLoadNo();
      } else {
        setContractLoadNo((String)value);
      }
      break;

    case CONTRACT_CREDIT_NO:
      if (value == null) {
        unsetContractCreditNo();
      } else {
        setContractCreditNo((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case FILE_FUN_TYPE:
      if (value == null) {
        unsetFileFunType();
      } else {
        setFileFunType((String)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case BUSINESS_NAME:
      if (value == null) {
        unsetBusinessName();
      } else {
        setBusinessName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case CONTRACT_LOAD_NO:
      return getContractLoadNo();

    case CONTRACT_CREDIT_NO:
      return getContractCreditNo();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case PROJECT_ID:
      return getProjectId();

    case FILE_TYPE:
      return getFileType();

    case FILE_NAME:
      return getFileName();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case UPLOAD_DTTM:
      return getUploadDttm();

    case FILE_FUN_TYPE:
      return getFileFunType();

    case FILE_DESC:
      return getFileDesc();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case PROJECT_NAME:
      return getProjectName();

    case FILE_PATH:
      return getFilePath();

    case BUSINESS_NAME:
      return getBusinessName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case CONTRACT_LOAD_NO:
      return isSetContractLoadNo();
    case CONTRACT_CREDIT_NO:
      return isSetContractCreditNo();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case PROJECT_TYPE:
      return isSetProjectType();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case PROJECT_ID:
      return isSetProjectId();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_NAME:
      return isSetFileName();
    case FILE_SIZE:
      return isSetFileSize();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case FILE_FUN_TYPE:
      return isSetFileFunType();
    case FILE_DESC:
      return isSetFileDesc();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case PROJECT_NAME:
      return isSetProjectName();
    case FILE_PATH:
      return isSetFilePath();
    case BUSINESS_NAME:
      return isSetBusinessName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegAdvapplyRepayDTO)
      return this.equals((RegAdvapplyRepayDTO)that);
    return false;
  }

  public boolean equals(RegAdvapplyRepayDTO that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_contractLoadNo = true && this.isSetContractLoadNo();
    boolean that_present_contractLoadNo = true && that.isSetContractLoadNo();
    if (this_present_contractLoadNo || that_present_contractLoadNo) {
      if (!(this_present_contractLoadNo && that_present_contractLoadNo))
        return false;
      if (!this.contractLoadNo.equals(that.contractLoadNo))
        return false;
    }

    boolean this_present_contractCreditNo = true && this.isSetContractCreditNo();
    boolean that_present_contractCreditNo = true && that.isSetContractCreditNo();
    if (this_present_contractCreditNo || that_present_contractCreditNo) {
      if (!(this_present_contractCreditNo && that_present_contractCreditNo))
        return false;
      if (!this.contractCreditNo.equals(that.contractCreditNo))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_fileFunType = true && this.isSetFileFunType();
    boolean that_present_fileFunType = true && that.isSetFileFunType();
    if (this_present_fileFunType || that_present_fileFunType) {
      if (!(this_present_fileFunType && that_present_fileFunType))
        return false;
      if (!this.fileFunType.equals(that.fileFunType))
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_businessName = true && this.isSetBusinessName();
    boolean that_present_businessName = true && that.isSetBusinessName();
    if (this_present_businessName || that_present_businessName) {
      if (!(this_present_businessName && that_present_businessName))
        return false;
      if (!this.businessName.equals(that.businessName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_contractLoadNo = true && (isSetContractLoadNo());
    list.add(present_contractLoadNo);
    if (present_contractLoadNo)
      list.add(contractLoadNo);

    boolean present_contractCreditNo = true && (isSetContractCreditNo());
    list.add(present_contractCreditNo);
    if (present_contractCreditNo)
      list.add(contractCreditNo);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_fileFunType = true && (isSetFileFunType());
    list.add(present_fileFunType);
    if (present_fileFunType)
      list.add(fileFunType);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_filePath = true && (isSetFilePath());
    list.add(present_filePath);
    if (present_filePath)
      list.add(filePath);

    boolean present_businessName = true && (isSetBusinessName());
    list.add(present_businessName);
    if (present_businessName)
      list.add(businessName);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegAdvapplyRepayDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractLoadNo()).compareTo(other.isSetContractLoadNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractLoadNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractLoadNo, other.contractLoadNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCreditNo()).compareTo(other.isSetContractCreditNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCreditNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCreditNo, other.contractCreditNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileFunType()).compareTo(other.isSetFileFunType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileFunType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileFunType, other.fileFunType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessName()).compareTo(other.isSetBusinessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessName, other.businessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegAdvapplyRepayDTO(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractLoadNo:");
    if (this.contractLoadNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractLoadNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractCreditNo:");
    if (this.contractCreditNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractCreditNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileFunType:");
    if (this.fileFunType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileFunType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessName:");
    if (this.businessName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegAdvapplyRepayDTOStandardSchemeFactory implements SchemeFactory {
    public RegAdvapplyRepayDTOStandardScheme getScheme() {
      return new RegAdvapplyRepayDTOStandardScheme();
    }
  }

  private static class RegAdvapplyRepayDTOStandardScheme extends StandardScheme<RegAdvapplyRepayDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegAdvapplyRepayDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_LOAD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractLoadNo = iprot.readString();
              struct.setContractLoadNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_CREDIT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCreditNo = iprot.readString();
              struct.setContractCreditNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FILE_FUN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileFunType = iprot.readString();
              struct.setFileFunTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BUSINESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessName = iprot.readString();
              struct.setBusinessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegAdvapplyRepayDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.contractLoadNo != null) {
        oprot.writeFieldBegin(CONTRACT_LOAD_NO_FIELD_DESC);
        oprot.writeString(struct.contractLoadNo);
        oprot.writeFieldEnd();
      }
      if (struct.contractCreditNo != null) {
        oprot.writeFieldBegin(CONTRACT_CREDIT_NO_FIELD_DESC);
        oprot.writeString(struct.contractCreditNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.fileFunType != null) {
        oprot.writeFieldBegin(FILE_FUN_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileFunType);
        oprot.writeFieldEnd();
      }
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.businessName != null) {
        oprot.writeFieldBegin(BUSINESS_NAME_FIELD_DESC);
        oprot.writeString(struct.businessName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegAdvapplyRepayDTOTupleSchemeFactory implements SchemeFactory {
    public RegAdvapplyRepayDTOTupleScheme getScheme() {
      return new RegAdvapplyRepayDTOTupleScheme();
    }
  }

  private static class RegAdvapplyRepayDTOTupleScheme extends TupleScheme<RegAdvapplyRepayDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyRepayDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetContractLoadNo()) {
        optionals.set(1);
      }
      if (struct.isSetContractCreditNo()) {
        optionals.set(2);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(3);
      }
      if (struct.isSetProjectType()) {
        optionals.set(4);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(5);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(6);
      }
      if (struct.isSetProjectId()) {
        optionals.set(7);
      }
      if (struct.isSetFileType()) {
        optionals.set(8);
      }
      if (struct.isSetFileName()) {
        optionals.set(9);
      }
      if (struct.isSetFileSize()) {
        optionals.set(10);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(11);
      }
      if (struct.isSetFileFunType()) {
        optionals.set(12);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetPage()) {
        optionals.set(15);
      }
      if (struct.isSetProjectName()) {
        optionals.set(16);
      }
      if (struct.isSetFilePath()) {
        optionals.set(17);
      }
      if (struct.isSetBusinessName()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetContractLoadNo()) {
        oprot.writeString(struct.contractLoadNo);
      }
      if (struct.isSetContractCreditNo()) {
        oprot.writeString(struct.contractCreditNo);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetFileFunType()) {
        oprot.writeString(struct.fileFunType);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetBusinessName()) {
        oprot.writeString(struct.businessName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyRepayDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractLoadNo = iprot.readString();
        struct.setContractLoadNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractCreditNo = iprot.readString();
        struct.setContractCreditNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(12)) {
        struct.fileFunType = iprot.readString();
        struct.setFileFunTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(18)) {
        struct.businessName = iprot.readString();
        struct.setBusinessNameIsSet(true);
      }
    }
  }

}


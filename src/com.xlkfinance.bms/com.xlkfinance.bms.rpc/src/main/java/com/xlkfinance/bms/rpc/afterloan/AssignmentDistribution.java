/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class AssignmentDistribution implements org.apache.thrift.TBase<AssignmentDistribution, AssignmentDistribution._Fields>, java.io.Serializable, Cloneable, Comparable<AssignmentDistribution> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignmentDistribution");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("appDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BALANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REMINDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField USER_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdStr", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssignmentDistributionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssignmentDistributionTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectId; // required
  public String acctType; // required
  public String appDate; // required
  public String telephone; // required
  public double creditAmt; // required
  public double balanceAmt; // required
  public int userId; // required
  public String realName; // required
  public String planOutLoanDt; // required
  public int rows; // required
  public int reminderId; // required
  public String userIdStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_ID((short)3, "projectId"),
    ACCT_TYPE((short)4, "acctType"),
    APP_DATE((short)5, "appDate"),
    TELEPHONE((short)6, "telephone"),
    CREDIT_AMT((short)7, "creditAmt"),
    BALANCE_AMT((short)8, "balanceAmt"),
    USER_ID((short)9, "userId"),
    REAL_NAME((short)10, "realName"),
    PLAN_OUT_LOAN_DT((short)11, "planOutLoanDt"),
    ROWS((short)12, "rows"),
    REMINDER_ID((short)13, "reminderId"),
    USER_ID_STR((short)14, "userIdStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // ACCT_TYPE
          return ACCT_TYPE;
        case 5: // APP_DATE
          return APP_DATE;
        case 6: // TELEPHONE
          return TELEPHONE;
        case 7: // CREDIT_AMT
          return CREDIT_AMT;
        case 8: // BALANCE_AMT
          return BALANCE_AMT;
        case 9: // USER_ID
          return USER_ID;
        case 10: // REAL_NAME
          return REAL_NAME;
        case 11: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 12: // ROWS
          return ROWS;
        case 13: // REMINDER_ID
          return REMINDER_ID;
        case 14: // USER_ID_STR
          return USER_ID_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREDITAMT_ISSET_ID = 1;
  private static final int __BALANCEAMT_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __REMINDERID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_DATE, new org.apache.thrift.meta_data.FieldMetaData("appDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("balanceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_ID, new org.apache.thrift.meta_data.FieldMetaData("reminderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("userIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignmentDistribution.class, metaDataMap);
  }

  public AssignmentDistribution() {
  }

  public AssignmentDistribution(
    int pid,
    String projectName,
    String projectId,
    String acctType,
    String appDate,
    String telephone,
    double creditAmt,
    double balanceAmt,
    int userId,
    String realName,
    String planOutLoanDt,
    int rows,
    int reminderId,
    String userIdStr)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectId = projectId;
    this.acctType = acctType;
    this.appDate = appDate;
    this.telephone = telephone;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.realName = realName;
    this.planOutLoanDt = planOutLoanDt;
    this.rows = rows;
    setRowsIsSet(true);
    this.reminderId = reminderId;
    setReminderIdIsSet(true);
    this.userIdStr = userIdStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssignmentDistribution(AssignmentDistribution other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetAcctType()) {
      this.acctType = other.acctType;
    }
    if (other.isSetAppDate()) {
      this.appDate = other.appDate;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    this.creditAmt = other.creditAmt;
    this.balanceAmt = other.balanceAmt;
    this.userId = other.userId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    this.rows = other.rows;
    this.reminderId = other.reminderId;
    if (other.isSetUserIdStr()) {
      this.userIdStr = other.userIdStr;
    }
  }

  public AssignmentDistribution deepCopy() {
    return new AssignmentDistribution(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectId = null;
    this.acctType = null;
    this.appDate = null;
    this.telephone = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setBalanceAmtIsSet(false);
    this.balanceAmt = 0.0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.realName = null;
    this.planOutLoanDt = null;
    setRowsIsSet(false);
    this.rows = 0;
    setReminderIdIsSet(false);
    this.reminderId = 0;
    this.userIdStr = null;
  }

  public int getPid() {
    return this.pid;
  }

  public AssignmentDistribution setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public AssignmentDistribution setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public AssignmentDistribution setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getAcctType() {
    return this.acctType;
  }

  public AssignmentDistribution setAcctType(String acctType) {
    this.acctType = acctType;
    return this;
  }

  public void unsetAcctType() {
    this.acctType = null;
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return this.acctType != null;
  }

  public void setAcctTypeIsSet(boolean value) {
    if (!value) {
      this.acctType = null;
    }
  }

  public String getAppDate() {
    return this.appDate;
  }

  public AssignmentDistribution setAppDate(String appDate) {
    this.appDate = appDate;
    return this;
  }

  public void unsetAppDate() {
    this.appDate = null;
  }

  /** Returns true if field appDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAppDate() {
    return this.appDate != null;
  }

  public void setAppDateIsSet(boolean value) {
    if (!value) {
      this.appDate = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public AssignmentDistribution setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public AssignmentDistribution setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getBalanceAmt() {
    return this.balanceAmt;
  }

  public AssignmentDistribution setBalanceAmt(double balanceAmt) {
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    return this;
  }

  public void unsetBalanceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  /** Returns true if field balanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  public void setBalanceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEAMT_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public AssignmentDistribution setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public AssignmentDistribution setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public AssignmentDistribution setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public AssignmentDistribution setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getReminderId() {
    return this.reminderId;
  }

  public AssignmentDistribution setReminderId(int reminderId) {
    this.reminderId = reminderId;
    setReminderIdIsSet(true);
    return this;
  }

  public void unsetReminderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMINDERID_ISSET_ID);
  }

  /** Returns true if field reminderId is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderId() {
    return EncodingUtils.testBit(__isset_bitfield, __REMINDERID_ISSET_ID);
  }

  public void setReminderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMINDERID_ISSET_ID, value);
  }

  public String getUserIdStr() {
    return this.userIdStr;
  }

  public AssignmentDistribution setUserIdStr(String userIdStr) {
    this.userIdStr = userIdStr;
    return this;
  }

  public void unsetUserIdStr() {
    this.userIdStr = null;
  }

  /** Returns true if field userIdStr is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdStr() {
    return this.userIdStr != null;
  }

  public void setUserIdStrIsSet(boolean value) {
    if (!value) {
      this.userIdStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((String)value);
      }
      break;

    case APP_DATE:
      if (value == null) {
        unsetAppDate();
      } else {
        setAppDate((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case BALANCE_AMT:
      if (value == null) {
        unsetBalanceAmt();
      } else {
        setBalanceAmt((Double)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REMINDER_ID:
      if (value == null) {
        unsetReminderId();
      } else {
        setReminderId((Integer)value);
      }
      break;

    case USER_ID_STR:
      if (value == null) {
        unsetUserIdStr();
      } else {
        setUserIdStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case ACCT_TYPE:
      return getAcctType();

    case APP_DATE:
      return getAppDate();

    case TELEPHONE:
      return getTelephone();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case BALANCE_AMT:
      return Double.valueOf(getBalanceAmt());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case REAL_NAME:
      return getRealName();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case ROWS:
      return Integer.valueOf(getRows());

    case REMINDER_ID:
      return Integer.valueOf(getReminderId());

    case USER_ID_STR:
      return getUserIdStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_TYPE:
      return isSetAcctType();
    case APP_DATE:
      return isSetAppDate();
    case TELEPHONE:
      return isSetTelephone();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case BALANCE_AMT:
      return isSetBalanceAmt();
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case ROWS:
      return isSetRows();
    case REMINDER_ID:
      return isSetReminderId();
    case USER_ID_STR:
      return isSetUserIdStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssignmentDistribution)
      return this.equals((AssignmentDistribution)that);
    return false;
  }

  public boolean equals(AssignmentDistribution that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_acctType = true && this.isSetAcctType();
    boolean that_present_acctType = true && that.isSetAcctType();
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (!this.acctType.equals(that.acctType))
        return false;
    }

    boolean this_present_appDate = true && this.isSetAppDate();
    boolean that_present_appDate = true && that.isSetAppDate();
    if (this_present_appDate || that_present_appDate) {
      if (!(this_present_appDate && that_present_appDate))
        return false;
      if (!this.appDate.equals(that.appDate))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_balanceAmt = true;
    boolean that_present_balanceAmt = true;
    if (this_present_balanceAmt || that_present_balanceAmt) {
      if (!(this_present_balanceAmt && that_present_balanceAmt))
        return false;
      if (this.balanceAmt != that.balanceAmt)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_reminderId = true;
    boolean that_present_reminderId = true;
    if (this_present_reminderId || that_present_reminderId) {
      if (!(this_present_reminderId && that_present_reminderId))
        return false;
      if (this.reminderId != that.reminderId)
        return false;
    }

    boolean this_present_userIdStr = true && this.isSetUserIdStr();
    boolean that_present_userIdStr = true && that.isSetUserIdStr();
    if (this_present_userIdStr || that_present_userIdStr) {
      if (!(this_present_userIdStr && that_present_userIdStr))
        return false;
      if (!this.userIdStr.equals(that.userIdStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctType = true && (isSetAcctType());
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_appDate = true && (isSetAppDate());
    list.add(present_appDate);
    if (present_appDate)
      list.add(appDate);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_balanceAmt = true;
    list.add(present_balanceAmt);
    if (present_balanceAmt)
      list.add(balanceAmt);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_reminderId = true;
    list.add(present_reminderId);
    if (present_reminderId)
      list.add(reminderId);

    boolean present_userIdStr = true && (isSetUserIdStr());
    list.add(present_userIdStr);
    if (present_userIdStr)
      list.add(userIdStr);

    return list.hashCode();
  }

  @Override
  public int compareTo(AssignmentDistribution other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppDate()).compareTo(other.isSetAppDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDate, other.appDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAmt()).compareTo(other.isSetBalanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceAmt, other.balanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderId()).compareTo(other.isSetReminderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderId, other.reminderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdStr()).compareTo(other.isSetUserIdStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdStr, other.userIdStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssignmentDistribution(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    if (this.acctType == null) {
      sb.append("null");
    } else {
      sb.append(this.acctType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appDate:");
    if (this.appDate == null) {
      sb.append("null");
    } else {
      sb.append(this.appDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceAmt:");
    sb.append(this.balanceAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderId:");
    sb.append(this.reminderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdStr:");
    if (this.userIdStr == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssignmentDistributionStandardSchemeFactory implements SchemeFactory {
    public AssignmentDistributionStandardScheme getScheme() {
      return new AssignmentDistributionStandardScheme();
    }
  }

  private static class AssignmentDistributionStandardScheme extends StandardScheme<AssignmentDistribution> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssignmentDistribution struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctType = iprot.readString();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appDate = iprot.readString();
              struct.setAppDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BALANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balanceAmt = iprot.readDouble();
              struct.setBalanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REMINDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reminderId = iprot.readI32();
              struct.setReminderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_ID_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userIdStr = iprot.readString();
              struct.setUserIdStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssignmentDistribution struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.acctType != null) {
        oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.acctType);
        oprot.writeFieldEnd();
      }
      if (struct.appDate != null) {
        oprot.writeFieldBegin(APP_DATE_FIELD_DESC);
        oprot.writeString(struct.appDate);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.balanceAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMINDER_ID_FIELD_DESC);
      oprot.writeI32(struct.reminderId);
      oprot.writeFieldEnd();
      if (struct.userIdStr != null) {
        oprot.writeFieldBegin(USER_ID_STR_FIELD_DESC);
        oprot.writeString(struct.userIdStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssignmentDistributionTupleSchemeFactory implements SchemeFactory {
    public AssignmentDistributionTupleScheme getScheme() {
      return new AssignmentDistributionTupleScheme();
    }
  }

  private static class AssignmentDistributionTupleScheme extends TupleScheme<AssignmentDistribution> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssignmentDistribution struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetAcctType()) {
        optionals.set(3);
      }
      if (struct.isSetAppDate()) {
        optionals.set(4);
      }
      if (struct.isSetTelephone()) {
        optionals.set(5);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(6);
      }
      if (struct.isSetBalanceAmt()) {
        optionals.set(7);
      }
      if (struct.isSetUserId()) {
        optionals.set(8);
      }
      if (struct.isSetRealName()) {
        optionals.set(9);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetReminderId()) {
        optionals.set(12);
      }
      if (struct.isSetUserIdStr()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAcctType()) {
        oprot.writeString(struct.acctType);
      }
      if (struct.isSetAppDate()) {
        oprot.writeString(struct.appDate);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetBalanceAmt()) {
        oprot.writeDouble(struct.balanceAmt);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetReminderId()) {
        oprot.writeI32(struct.reminderId);
      }
      if (struct.isSetUserIdStr()) {
        oprot.writeString(struct.userIdStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssignmentDistribution struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctType = iprot.readString();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appDate = iprot.readString();
        struct.setAppDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.balanceAmt = iprot.readDouble();
        struct.setBalanceAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.reminderId = iprot.readI32();
        struct.setReminderIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.userIdStr = iprot.readString();
        struct.setUserIdStrIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceTDTO implements org.apache.thrift.TBase<FinanceTDTO, FinanceTDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceTDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceTDTO");

  private static final org.apache.thrift.protocol.TField BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAcctId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CRE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FT_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usedType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REG_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("regCategory", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REPAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField INCOME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CRE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("creDttm", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceTDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceTDTOTupleSchemeFactory());
  }

  public int bankAcctId; // required
  public int creUserId; // required
  public double ftAmt; // required
  public String ftDt; // required
  public int usedType; // required
  public String remark; // required
  public int regCategory; // required
  public int ftType; // required
  public String repayDt; // required
  public int repayType; // required
  public int incomeType; // required
  public int pid; // required
  public int status; // required
  public int parentId; // required
  public String creDttm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANK_ACCT_ID((short)1, "bankAcctId"),
    CRE_USER_ID((short)2, "creUserId"),
    FT_AMT((short)3, "ftAmt"),
    FT_DT((short)4, "ftDt"),
    USED_TYPE((short)5, "usedType"),
    REMARK((short)6, "remark"),
    REG_CATEGORY((short)7, "regCategory"),
    FT_TYPE((short)8, "ftType"),
    REPAY_DT((short)9, "repayDt"),
    REPAY_TYPE((short)10, "repayType"),
    INCOME_TYPE((short)11, "incomeType"),
    PID((short)12, "pid"),
    STATUS((short)13, "status"),
    PARENT_ID((short)14, "parentId"),
    CRE_DTTM((short)15, "creDttm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANK_ACCT_ID
          return BANK_ACCT_ID;
        case 2: // CRE_USER_ID
          return CRE_USER_ID;
        case 3: // FT_AMT
          return FT_AMT;
        case 4: // FT_DT
          return FT_DT;
        case 5: // USED_TYPE
          return USED_TYPE;
        case 6: // REMARK
          return REMARK;
        case 7: // REG_CATEGORY
          return REG_CATEGORY;
        case 8: // FT_TYPE
          return FT_TYPE;
        case 9: // REPAY_DT
          return REPAY_DT;
        case 10: // REPAY_TYPE
          return REPAY_TYPE;
        case 11: // INCOME_TYPE
          return INCOME_TYPE;
        case 12: // PID
          return PID;
        case 13: // STATUS
          return STATUS;
        case 14: // PARENT_ID
          return PARENT_ID;
        case 15: // CRE_DTTM
          return CRE_DTTM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BANKACCTID_ISSET_ID = 0;
  private static final int __CREUSERID_ISSET_ID = 1;
  private static final int __FTAMT_ISSET_ID = 2;
  private static final int __USEDTYPE_ISSET_ID = 3;
  private static final int __REGCATEGORY_ISSET_ID = 4;
  private static final int __FTTYPE_ISSET_ID = 5;
  private static final int __REPAYTYPE_ISSET_ID = 6;
  private static final int __INCOMETYPE_ISSET_ID = 7;
  private static final int __PID_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __PARENTID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("bankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("creUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_DT, new org.apache.thrift.meta_data.FieldMetaData("ftDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("usedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("regCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("repayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCOME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("incomeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("creDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceTDTO.class, metaDataMap);
  }

  public FinanceTDTO() {
  }

  public FinanceTDTO(
    int bankAcctId,
    int creUserId,
    double ftAmt,
    String ftDt,
    int usedType,
    String remark,
    int regCategory,
    int ftType,
    String repayDt,
    int repayType,
    int incomeType,
    int pid,
    int status,
    int parentId,
    String creDttm)
  {
    this();
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    this.creUserId = creUserId;
    setCreUserIdIsSet(true);
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftDt = ftDt;
    this.usedType = usedType;
    setUsedTypeIsSet(true);
    this.remark = remark;
    this.regCategory = regCategory;
    setRegCategoryIsSet(true);
    this.ftType = ftType;
    setFtTypeIsSet(true);
    this.repayDt = repayDt;
    this.repayType = repayType;
    setRepayTypeIsSet(true);
    this.incomeType = incomeType;
    setIncomeTypeIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.creDttm = creDttm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceTDTO(FinanceTDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bankAcctId = other.bankAcctId;
    this.creUserId = other.creUserId;
    this.ftAmt = other.ftAmt;
    if (other.isSetFtDt()) {
      this.ftDt = other.ftDt;
    }
    this.usedType = other.usedType;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.regCategory = other.regCategory;
    this.ftType = other.ftType;
    if (other.isSetRepayDt()) {
      this.repayDt = other.repayDt;
    }
    this.repayType = other.repayType;
    this.incomeType = other.incomeType;
    this.pid = other.pid;
    this.status = other.status;
    this.parentId = other.parentId;
    if (other.isSetCreDttm()) {
      this.creDttm = other.creDttm;
    }
  }

  public FinanceTDTO deepCopy() {
    return new FinanceTDTO(this);
  }

  @Override
  public void clear() {
    setBankAcctIdIsSet(false);
    this.bankAcctId = 0;
    setCreUserIdIsSet(false);
    this.creUserId = 0;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftDt = null;
    setUsedTypeIsSet(false);
    this.usedType = 0;
    this.remark = null;
    setRegCategoryIsSet(false);
    this.regCategory = 0;
    setFtTypeIsSet(false);
    this.ftType = 0;
    this.repayDt = null;
    setRepayTypeIsSet(false);
    this.repayType = 0;
    setIncomeTypeIsSet(false);
    this.incomeType = 0;
    setPidIsSet(false);
    this.pid = 0;
    setStatusIsSet(false);
    this.status = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.creDttm = null;
  }

  public int getBankAcctId() {
    return this.bankAcctId;
  }

  public FinanceTDTO setBankAcctId(int bankAcctId) {
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    return this;
  }

  public void unsetBankAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  /** Returns true if field bankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  public void setBankAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKACCTID_ISSET_ID, value);
  }

  public int getCreUserId() {
    return this.creUserId;
  }

  public FinanceTDTO setCreUserId(int creUserId) {
    this.creUserId = creUserId;
    setCreUserIdIsSet(true);
    return this;
  }

  public void unsetCreUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREUSERID_ISSET_ID);
  }

  /** Returns true if field creUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREUSERID_ISSET_ID);
  }

  public void setCreUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREUSERID_ISSET_ID, value);
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public FinanceTDTO setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtDt() {
    return this.ftDt;
  }

  public FinanceTDTO setFtDt(String ftDt) {
    this.ftDt = ftDt;
    return this;
  }

  public void unsetFtDt() {
    this.ftDt = null;
  }

  /** Returns true if field ftDt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDt() {
    return this.ftDt != null;
  }

  public void setFtDtIsSet(boolean value) {
    if (!value) {
      this.ftDt = null;
    }
  }

  public int getUsedType() {
    return this.usedType;
  }

  public FinanceTDTO setUsedType(int usedType) {
    this.usedType = usedType;
    setUsedTypeIsSet(true);
    return this;
  }

  public void unsetUsedType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDTYPE_ISSET_ID);
  }

  /** Returns true if field usedType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedType() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDTYPE_ISSET_ID);
  }

  public void setUsedTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDTYPE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public FinanceTDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getRegCategory() {
    return this.regCategory;
  }

  public FinanceTDTO setRegCategory(int regCategory) {
    this.regCategory = regCategory;
    setRegCategoryIsSet(true);
    return this;
  }

  public void unsetRegCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGCATEGORY_ISSET_ID);
  }

  /** Returns true if field regCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetRegCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __REGCATEGORY_ISSET_ID);
  }

  public void setRegCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGCATEGORY_ISSET_ID, value);
  }

  public int getFtType() {
    return this.ftType;
  }

  public FinanceTDTO setFtType(int ftType) {
    this.ftType = ftType;
    setFtTypeIsSet(true);
    return this;
  }

  public void unsetFtType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return EncodingUtils.testBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  public void setFtTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTTYPE_ISSET_ID, value);
  }

  public String getRepayDt() {
    return this.repayDt;
  }

  public FinanceTDTO setRepayDt(String repayDt) {
    this.repayDt = repayDt;
    return this;
  }

  public void unsetRepayDt() {
    this.repayDt = null;
  }

  /** Returns true if field repayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDt() {
    return this.repayDt != null;
  }

  public void setRepayDtIsSet(boolean value) {
    if (!value) {
      this.repayDt = null;
    }
  }

  public int getRepayType() {
    return this.repayType;
  }

  public FinanceTDTO setRepayType(int repayType) {
    this.repayType = repayType;
    setRepayTypeIsSet(true);
    return this;
  }

  public void unsetRepayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  /** Returns true if field repayType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  public void setRepayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYTYPE_ISSET_ID, value);
  }

  public int getIncomeType() {
    return this.incomeType;
  }

  public FinanceTDTO setIncomeType(int incomeType) {
    this.incomeType = incomeType;
    setIncomeTypeIsSet(true);
    return this;
  }

  public void unsetIncomeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMETYPE_ISSET_ID);
  }

  /** Returns true if field incomeType is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeType() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMETYPE_ISSET_ID);
  }

  public void setIncomeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMETYPE_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceTDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public FinanceTDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public FinanceTDTO setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public String getCreDttm() {
    return this.creDttm;
  }

  public FinanceTDTO setCreDttm(String creDttm) {
    this.creDttm = creDttm;
    return this;
  }

  public void unsetCreDttm() {
    this.creDttm = null;
  }

  /** Returns true if field creDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCreDttm() {
    return this.creDttm != null;
  }

  public void setCreDttmIsSet(boolean value) {
    if (!value) {
      this.creDttm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANK_ACCT_ID:
      if (value == null) {
        unsetBankAcctId();
      } else {
        setBankAcctId((Integer)value);
      }
      break;

    case CRE_USER_ID:
      if (value == null) {
        unsetCreUserId();
      } else {
        setCreUserId((Integer)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_DT:
      if (value == null) {
        unsetFtDt();
      } else {
        setFtDt((String)value);
      }
      break;

    case USED_TYPE:
      if (value == null) {
        unsetUsedType();
      } else {
        setUsedType((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REG_CATEGORY:
      if (value == null) {
        unsetRegCategory();
      } else {
        setRegCategory((Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((Integer)value);
      }
      break;

    case REPAY_DT:
      if (value == null) {
        unsetRepayDt();
      } else {
        setRepayDt((String)value);
      }
      break;

    case REPAY_TYPE:
      if (value == null) {
        unsetRepayType();
      } else {
        setRepayType((Integer)value);
      }
      break;

    case INCOME_TYPE:
      if (value == null) {
        unsetIncomeType();
      } else {
        setIncomeType((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case CRE_DTTM:
      if (value == null) {
        unsetCreDttm();
      } else {
        setCreDttm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANK_ACCT_ID:
      return Integer.valueOf(getBankAcctId());

    case CRE_USER_ID:
      return Integer.valueOf(getCreUserId());

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_DT:
      return getFtDt();

    case USED_TYPE:
      return Integer.valueOf(getUsedType());

    case REMARK:
      return getRemark();

    case REG_CATEGORY:
      return Integer.valueOf(getRegCategory());

    case FT_TYPE:
      return Integer.valueOf(getFtType());

    case REPAY_DT:
      return getRepayDt();

    case REPAY_TYPE:
      return Integer.valueOf(getRepayType());

    case INCOME_TYPE:
      return Integer.valueOf(getIncomeType());

    case PID:
      return Integer.valueOf(getPid());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case CRE_DTTM:
      return getCreDttm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANK_ACCT_ID:
      return isSetBankAcctId();
    case CRE_USER_ID:
      return isSetCreUserId();
    case FT_AMT:
      return isSetFtAmt();
    case FT_DT:
      return isSetFtDt();
    case USED_TYPE:
      return isSetUsedType();
    case REMARK:
      return isSetRemark();
    case REG_CATEGORY:
      return isSetRegCategory();
    case FT_TYPE:
      return isSetFtType();
    case REPAY_DT:
      return isSetRepayDt();
    case REPAY_TYPE:
      return isSetRepayType();
    case INCOME_TYPE:
      return isSetIncomeType();
    case PID:
      return isSetPid();
    case STATUS:
      return isSetStatus();
    case PARENT_ID:
      return isSetParentId();
    case CRE_DTTM:
      return isSetCreDttm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceTDTO)
      return this.equals((FinanceTDTO)that);
    return false;
  }

  public boolean equals(FinanceTDTO that) {
    if (that == null)
      return false;

    boolean this_present_bankAcctId = true;
    boolean that_present_bankAcctId = true;
    if (this_present_bankAcctId || that_present_bankAcctId) {
      if (!(this_present_bankAcctId && that_present_bankAcctId))
        return false;
      if (this.bankAcctId != that.bankAcctId)
        return false;
    }

    boolean this_present_creUserId = true;
    boolean that_present_creUserId = true;
    if (this_present_creUserId || that_present_creUserId) {
      if (!(this_present_creUserId && that_present_creUserId))
        return false;
      if (this.creUserId != that.creUserId)
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftDt = true && this.isSetFtDt();
    boolean that_present_ftDt = true && that.isSetFtDt();
    if (this_present_ftDt || that_present_ftDt) {
      if (!(this_present_ftDt && that_present_ftDt))
        return false;
      if (!this.ftDt.equals(that.ftDt))
        return false;
    }

    boolean this_present_usedType = true;
    boolean that_present_usedType = true;
    if (this_present_usedType || that_present_usedType) {
      if (!(this_present_usedType && that_present_usedType))
        return false;
      if (this.usedType != that.usedType)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_regCategory = true;
    boolean that_present_regCategory = true;
    if (this_present_regCategory || that_present_regCategory) {
      if (!(this_present_regCategory && that_present_regCategory))
        return false;
      if (this.regCategory != that.regCategory)
        return false;
    }

    boolean this_present_ftType = true;
    boolean that_present_ftType = true;
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (this.ftType != that.ftType)
        return false;
    }

    boolean this_present_repayDt = true && this.isSetRepayDt();
    boolean that_present_repayDt = true && that.isSetRepayDt();
    if (this_present_repayDt || that_present_repayDt) {
      if (!(this_present_repayDt && that_present_repayDt))
        return false;
      if (!this.repayDt.equals(that.repayDt))
        return false;
    }

    boolean this_present_repayType = true;
    boolean that_present_repayType = true;
    if (this_present_repayType || that_present_repayType) {
      if (!(this_present_repayType && that_present_repayType))
        return false;
      if (this.repayType != that.repayType)
        return false;
    }

    boolean this_present_incomeType = true;
    boolean that_present_incomeType = true;
    if (this_present_incomeType || that_present_incomeType) {
      if (!(this_present_incomeType && that_present_incomeType))
        return false;
      if (this.incomeType != that.incomeType)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_creDttm = true && this.isSetCreDttm();
    boolean that_present_creDttm = true && that.isSetCreDttm();
    if (this_present_creDttm || that_present_creDttm) {
      if (!(this_present_creDttm && that_present_creDttm))
        return false;
      if (!this.creDttm.equals(that.creDttm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bankAcctId = true;
    list.add(present_bankAcctId);
    if (present_bankAcctId)
      list.add(bankAcctId);

    boolean present_creUserId = true;
    list.add(present_creUserId);
    if (present_creUserId)
      list.add(creUserId);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftDt = true && (isSetFtDt());
    list.add(present_ftDt);
    if (present_ftDt)
      list.add(ftDt);

    boolean present_usedType = true;
    list.add(present_usedType);
    if (present_usedType)
      list.add(usedType);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_regCategory = true;
    list.add(present_regCategory);
    if (present_regCategory)
      list.add(regCategory);

    boolean present_ftType = true;
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_repayDt = true && (isSetRepayDt());
    list.add(present_repayDt);
    if (present_repayDt)
      list.add(repayDt);

    boolean present_repayType = true;
    list.add(present_repayType);
    if (present_repayType)
      list.add(repayType);

    boolean present_incomeType = true;
    list.add(present_incomeType);
    if (present_incomeType)
      list.add(incomeType);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_creDttm = true && (isSetCreDttm());
    list.add(present_creDttm);
    if (present_creDttm)
      list.add(creDttm);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceTDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBankAcctId()).compareTo(other.isSetBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAcctId, other.bankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreUserId()).compareTo(other.isSetCreUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creUserId, other.creUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDt()).compareTo(other.isSetFtDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDt, other.ftDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedType()).compareTo(other.isSetUsedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedType, other.usedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegCategory()).compareTo(other.isSetRegCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regCategory, other.regCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDt()).compareTo(other.isSetRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDt, other.repayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayType()).compareTo(other.isSetRepayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayType, other.repayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeType()).compareTo(other.isSetIncomeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeType, other.incomeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreDttm()).compareTo(other.isSetCreDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creDttm, other.creDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceTDTO(");
    boolean first = true;

    sb.append("bankAcctId:");
    sb.append(this.bankAcctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creUserId:");
    sb.append(this.creUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDt:");
    if (this.ftDt == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedType:");
    sb.append(this.usedType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regCategory:");
    sb.append(this.regCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    sb.append(this.ftType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDt:");
    if (this.repayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayType:");
    sb.append(this.repayType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeType:");
    sb.append(this.incomeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creDttm:");
    if (this.creDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.creDttm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceTDTOStandardSchemeFactory implements SchemeFactory {
    public FinanceTDTOStandardScheme getScheme() {
      return new FinanceTDTOStandardScheme();
    }
  }

  private static class FinanceTDTOStandardScheme extends StandardScheme<FinanceTDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceTDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankAcctId = iprot.readI32();
              struct.setBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CRE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creUserId = iprot.readI32();
              struct.setCreUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FT_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDt = iprot.readString();
              struct.setFtDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usedType = iprot.readI32();
              struct.setUsedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REG_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regCategory = iprot.readI32();
              struct.setRegCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftType = iprot.readI32();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDt = iprot.readString();
              struct.setRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayType = iprot.readI32();
              struct.setRepayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INCOME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incomeType = iprot.readI32();
              struct.setIncomeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CRE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creDttm = iprot.readString();
              struct.setCreDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceTDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BANK_ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.bankAcctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.creUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftDt != null) {
        oprot.writeFieldBegin(FT_DT_FIELD_DESC);
        oprot.writeString(struct.ftDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USED_TYPE_FIELD_DESC);
      oprot.writeI32(struct.usedType);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REG_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.regCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ftType);
      oprot.writeFieldEnd();
      if (struct.repayDt != null) {
        oprot.writeFieldBegin(REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.repayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repayType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOME_TYPE_FIELD_DESC);
      oprot.writeI32(struct.incomeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.creDttm != null) {
        oprot.writeFieldBegin(CRE_DTTM_FIELD_DESC);
        oprot.writeString(struct.creDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceTDTOTupleSchemeFactory implements SchemeFactory {
    public FinanceTDTOTupleScheme getScheme() {
      return new FinanceTDTOTupleScheme();
    }
  }

  private static class FinanceTDTOTupleScheme extends TupleScheme<FinanceTDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceTDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBankAcctId()) {
        optionals.set(0);
      }
      if (struct.isSetCreUserId()) {
        optionals.set(1);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(2);
      }
      if (struct.isSetFtDt()) {
        optionals.set(3);
      }
      if (struct.isSetUsedType()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetRegCategory()) {
        optionals.set(6);
      }
      if (struct.isSetFtType()) {
        optionals.set(7);
      }
      if (struct.isSetRepayDt()) {
        optionals.set(8);
      }
      if (struct.isSetRepayType()) {
        optionals.set(9);
      }
      if (struct.isSetIncomeType()) {
        optionals.set(10);
      }
      if (struct.isSetPid()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetParentId()) {
        optionals.set(13);
      }
      if (struct.isSetCreDttm()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetBankAcctId()) {
        oprot.writeI32(struct.bankAcctId);
      }
      if (struct.isSetCreUserId()) {
        oprot.writeI32(struct.creUserId);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtDt()) {
        oprot.writeString(struct.ftDt);
      }
      if (struct.isSetUsedType()) {
        oprot.writeI32(struct.usedType);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRegCategory()) {
        oprot.writeI32(struct.regCategory);
      }
      if (struct.isSetFtType()) {
        oprot.writeI32(struct.ftType);
      }
      if (struct.isSetRepayDt()) {
        oprot.writeString(struct.repayDt);
      }
      if (struct.isSetRepayType()) {
        oprot.writeI32(struct.repayType);
      }
      if (struct.isSetIncomeType()) {
        oprot.writeI32(struct.incomeType);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetCreDttm()) {
        oprot.writeString(struct.creDttm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceTDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.bankAcctId = iprot.readI32();
        struct.setBankAcctIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creUserId = iprot.readI32();
        struct.setCreUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ftDt = iprot.readString();
        struct.setFtDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usedType = iprot.readI32();
        struct.setUsedTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regCategory = iprot.readI32();
        struct.setRegCategoryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ftType = iprot.readI32();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repayDt = iprot.readString();
        struct.setRepayDtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.repayType = iprot.readI32();
        struct.setRepayTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.incomeType = iprot.readI32();
        struct.setIncomeTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.creDttm = iprot.readString();
        struct.setCreDttmIsSet(true);
      }
    }
  }

}


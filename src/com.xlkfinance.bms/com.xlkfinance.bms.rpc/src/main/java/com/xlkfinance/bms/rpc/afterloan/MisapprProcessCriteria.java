/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class MisapprProcessCriteria implements org.apache.thrift.TBase<MisapprProcessCriteria, MisapprProcessCriteria._Fields>, java.io.Serializable, Cloneable, Comparable<MisapprProcessCriteria> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MisapprProcessCriteria");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DIVERT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertAmt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFineEndDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayAmt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DIVERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("divertId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MisapprProcessCriteriaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MisapprProcessCriteriaTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectNumber; // required
  public String cusType; // required
  public String divertAmt; // required
  public String divertFineEndDt; // required
  public String reviewStatus; // required
  public String requestDttm; // required
  public String divertFinePayAmt; // required
  public String divertFinePayDt; // required
  public int divertId; // required
  public String cusName; // required
  public int rows; // required
  public int page; // required
  public int pmUserId; // required
  public int ecoTrade; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    CUS_TYPE((short)4, "cusType"),
    DIVERT_AMT((short)5, "divertAmt"),
    DIVERT_FINE_END_DT((short)6, "divertFineEndDt"),
    REVIEW_STATUS((short)7, "reviewStatus"),
    REQUEST_DTTM((short)8, "requestDttm"),
    DIVERT_FINE_PAY_AMT((short)9, "divertFinePayAmt"),
    DIVERT_FINE_PAY_DT((short)10, "divertFinePayDt"),
    DIVERT_ID((short)11, "divertId"),
    CUS_NAME((short)12, "cusName"),
    ROWS((short)13, "rows"),
    PAGE((short)14, "page"),
    PM_USER_ID((short)15, "pmUserId"),
    ECO_TRADE((short)16, "ecoTrade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // CUS_TYPE
          return CUS_TYPE;
        case 5: // DIVERT_AMT
          return DIVERT_AMT;
        case 6: // DIVERT_FINE_END_DT
          return DIVERT_FINE_END_DT;
        case 7: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 8: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 9: // DIVERT_FINE_PAY_AMT
          return DIVERT_FINE_PAY_AMT;
        case 10: // DIVERT_FINE_PAY_DT
          return DIVERT_FINE_PAY_DT;
        case 11: // DIVERT_ID
          return DIVERT_ID;
        case 12: // CUS_NAME
          return CUS_NAME;
        case 13: // ROWS
          return ROWS;
        case 14: // PAGE
          return PAGE;
        case 15: // PM_USER_ID
          return PM_USER_ID;
        case 16: // ECO_TRADE
          return ECO_TRADE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __DIVERTID_ISSET_ID = 1;
  private static final int __ROWS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __PMUSERID_ISSET_ID = 4;
  private static final int __ECOTRADE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_END_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFineEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_ID, new org.apache.thrift.meta_data.FieldMetaData("divertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MisapprProcessCriteria.class, metaDataMap);
  }

  public MisapprProcessCriteria() {
  }

  public MisapprProcessCriteria(
    int pid,
    String projectName,
    String projectNumber,
    String cusType,
    String divertAmt,
    String divertFineEndDt,
    String reviewStatus,
    String requestDttm,
    String divertFinePayAmt,
    String divertFinePayDt,
    int divertId,
    String cusName,
    int rows,
    int page,
    int pmUserId,
    int ecoTrade)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.cusType = cusType;
    this.divertAmt = divertAmt;
    this.divertFineEndDt = divertFineEndDt;
    this.reviewStatus = reviewStatus;
    this.requestDttm = requestDttm;
    this.divertFinePayAmt = divertFinePayAmt;
    this.divertFinePayDt = divertFinePayDt;
    this.divertId = divertId;
    setDivertIdIsSet(true);
    this.cusName = cusName;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MisapprProcessCriteria(MisapprProcessCriteria other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetDivertAmt()) {
      this.divertAmt = other.divertAmt;
    }
    if (other.isSetDivertFineEndDt()) {
      this.divertFineEndDt = other.divertFineEndDt;
    }
    if (other.isSetReviewStatus()) {
      this.reviewStatus = other.reviewStatus;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetDivertFinePayAmt()) {
      this.divertFinePayAmt = other.divertFinePayAmt;
    }
    if (other.isSetDivertFinePayDt()) {
      this.divertFinePayDt = other.divertFinePayDt;
    }
    this.divertId = other.divertId;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.rows = other.rows;
    this.page = other.page;
    this.pmUserId = other.pmUserId;
    this.ecoTrade = other.ecoTrade;
  }

  public MisapprProcessCriteria deepCopy() {
    return new MisapprProcessCriteria(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.cusType = null;
    this.divertAmt = null;
    this.divertFineEndDt = null;
    this.reviewStatus = null;
    this.requestDttm = null;
    this.divertFinePayAmt = null;
    this.divertFinePayDt = null;
    setDivertIdIsSet(false);
    this.divertId = 0;
    this.cusName = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public MisapprProcessCriteria setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public MisapprProcessCriteria setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public MisapprProcessCriteria setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public MisapprProcessCriteria setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getDivertAmt() {
    return this.divertAmt;
  }

  public MisapprProcessCriteria setDivertAmt(String divertAmt) {
    this.divertAmt = divertAmt;
    return this;
  }

  public void unsetDivertAmt() {
    this.divertAmt = null;
  }

  /** Returns true if field divertAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertAmt() {
    return this.divertAmt != null;
  }

  public void setDivertAmtIsSet(boolean value) {
    if (!value) {
      this.divertAmt = null;
    }
  }

  public String getDivertFineEndDt() {
    return this.divertFineEndDt;
  }

  public MisapprProcessCriteria setDivertFineEndDt(String divertFineEndDt) {
    this.divertFineEndDt = divertFineEndDt;
    return this;
  }

  public void unsetDivertFineEndDt() {
    this.divertFineEndDt = null;
  }

  /** Returns true if field divertFineEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFineEndDt() {
    return this.divertFineEndDt != null;
  }

  public void setDivertFineEndDtIsSet(boolean value) {
    if (!value) {
      this.divertFineEndDt = null;
    }
  }

  public String getReviewStatus() {
    return this.reviewStatus;
  }

  public MisapprProcessCriteria setReviewStatus(String reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  public void unsetReviewStatus() {
    this.reviewStatus = null;
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return this.reviewStatus != null;
  }

  public void setReviewStatusIsSet(boolean value) {
    if (!value) {
      this.reviewStatus = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public MisapprProcessCriteria setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getDivertFinePayAmt() {
    return this.divertFinePayAmt;
  }

  public MisapprProcessCriteria setDivertFinePayAmt(String divertFinePayAmt) {
    this.divertFinePayAmt = divertFinePayAmt;
    return this;
  }

  public void unsetDivertFinePayAmt() {
    this.divertFinePayAmt = null;
  }

  /** Returns true if field divertFinePayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayAmt() {
    return this.divertFinePayAmt != null;
  }

  public void setDivertFinePayAmtIsSet(boolean value) {
    if (!value) {
      this.divertFinePayAmt = null;
    }
  }

  public String getDivertFinePayDt() {
    return this.divertFinePayDt;
  }

  public MisapprProcessCriteria setDivertFinePayDt(String divertFinePayDt) {
    this.divertFinePayDt = divertFinePayDt;
    return this;
  }

  public void unsetDivertFinePayDt() {
    this.divertFinePayDt = null;
  }

  /** Returns true if field divertFinePayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayDt() {
    return this.divertFinePayDt != null;
  }

  public void setDivertFinePayDtIsSet(boolean value) {
    if (!value) {
      this.divertFinePayDt = null;
    }
  }

  public int getDivertId() {
    return this.divertId;
  }

  public MisapprProcessCriteria setDivertId(int divertId) {
    this.divertId = divertId;
    setDivertIdIsSet(true);
    return this;
  }

  public void unsetDivertId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  /** Returns true if field divertId is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  public void setDivertIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTID_ISSET_ID, value);
  }

  public String getCusName() {
    return this.cusName;
  }

  public MisapprProcessCriteria setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public MisapprProcessCriteria setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public MisapprProcessCriteria setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public MisapprProcessCriteria setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public MisapprProcessCriteria setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case DIVERT_AMT:
      if (value == null) {
        unsetDivertAmt();
      } else {
        setDivertAmt((String)value);
      }
      break;

    case DIVERT_FINE_END_DT:
      if (value == null) {
        unsetDivertFineEndDt();
      } else {
        setDivertFineEndDt((String)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case DIVERT_FINE_PAY_AMT:
      if (value == null) {
        unsetDivertFinePayAmt();
      } else {
        setDivertFinePayAmt((String)value);
      }
      break;

    case DIVERT_FINE_PAY_DT:
      if (value == null) {
        unsetDivertFinePayDt();
      } else {
        setDivertFinePayDt((String)value);
      }
      break;

    case DIVERT_ID:
      if (value == null) {
        unsetDivertId();
      } else {
        setDivertId((Integer)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUS_TYPE:
      return getCusType();

    case DIVERT_AMT:
      return getDivertAmt();

    case DIVERT_FINE_END_DT:
      return getDivertFineEndDt();

    case REVIEW_STATUS:
      return getReviewStatus();

    case REQUEST_DTTM:
      return getRequestDttm();

    case DIVERT_FINE_PAY_AMT:
      return getDivertFinePayAmt();

    case DIVERT_FINE_PAY_DT:
      return getDivertFinePayDt();

    case DIVERT_ID:
      return Integer.valueOf(getDivertId());

    case CUS_NAME:
      return getCusName();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUS_TYPE:
      return isSetCusType();
    case DIVERT_AMT:
      return isSetDivertAmt();
    case DIVERT_FINE_END_DT:
      return isSetDivertFineEndDt();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case DIVERT_FINE_PAY_AMT:
      return isSetDivertFinePayAmt();
    case DIVERT_FINE_PAY_DT:
      return isSetDivertFinePayDt();
    case DIVERT_ID:
      return isSetDivertId();
    case CUS_NAME:
      return isSetCusName();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case PM_USER_ID:
      return isSetPmUserId();
    case ECO_TRADE:
      return isSetEcoTrade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MisapprProcessCriteria)
      return this.equals((MisapprProcessCriteria)that);
    return false;
  }

  public boolean equals(MisapprProcessCriteria that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_divertAmt = true && this.isSetDivertAmt();
    boolean that_present_divertAmt = true && that.isSetDivertAmt();
    if (this_present_divertAmt || that_present_divertAmt) {
      if (!(this_present_divertAmt && that_present_divertAmt))
        return false;
      if (!this.divertAmt.equals(that.divertAmt))
        return false;
    }

    boolean this_present_divertFineEndDt = true && this.isSetDivertFineEndDt();
    boolean that_present_divertFineEndDt = true && that.isSetDivertFineEndDt();
    if (this_present_divertFineEndDt || that_present_divertFineEndDt) {
      if (!(this_present_divertFineEndDt && that_present_divertFineEndDt))
        return false;
      if (!this.divertFineEndDt.equals(that.divertFineEndDt))
        return false;
    }

    boolean this_present_reviewStatus = true && this.isSetReviewStatus();
    boolean that_present_reviewStatus = true && that.isSetReviewStatus();
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (!this.reviewStatus.equals(that.reviewStatus))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_divertFinePayAmt = true && this.isSetDivertFinePayAmt();
    boolean that_present_divertFinePayAmt = true && that.isSetDivertFinePayAmt();
    if (this_present_divertFinePayAmt || that_present_divertFinePayAmt) {
      if (!(this_present_divertFinePayAmt && that_present_divertFinePayAmt))
        return false;
      if (!this.divertFinePayAmt.equals(that.divertFinePayAmt))
        return false;
    }

    boolean this_present_divertFinePayDt = true && this.isSetDivertFinePayDt();
    boolean that_present_divertFinePayDt = true && that.isSetDivertFinePayDt();
    if (this_present_divertFinePayDt || that_present_divertFinePayDt) {
      if (!(this_present_divertFinePayDt && that_present_divertFinePayDt))
        return false;
      if (!this.divertFinePayDt.equals(that.divertFinePayDt))
        return false;
    }

    boolean this_present_divertId = true;
    boolean that_present_divertId = true;
    if (this_present_divertId || that_present_divertId) {
      if (!(this_present_divertId && that_present_divertId))
        return false;
      if (this.divertId != that.divertId)
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_divertAmt = true && (isSetDivertAmt());
    list.add(present_divertAmt);
    if (present_divertAmt)
      list.add(divertAmt);

    boolean present_divertFineEndDt = true && (isSetDivertFineEndDt());
    list.add(present_divertFineEndDt);
    if (present_divertFineEndDt)
      list.add(divertFineEndDt);

    boolean present_reviewStatus = true && (isSetReviewStatus());
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_divertFinePayAmt = true && (isSetDivertFinePayAmt());
    list.add(present_divertFinePayAmt);
    if (present_divertFinePayAmt)
      list.add(divertFinePayAmt);

    boolean present_divertFinePayDt = true && (isSetDivertFinePayDt());
    list.add(present_divertFinePayDt);
    if (present_divertFinePayDt)
      list.add(divertFinePayDt);

    boolean present_divertId = true;
    list.add(present_divertId);
    if (present_divertId)
      list.add(divertId);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    return list.hashCode();
  }

  @Override
  public int compareTo(MisapprProcessCriteria other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertAmt()).compareTo(other.isSetDivertAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertAmt, other.divertAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFineEndDt()).compareTo(other.isSetDivertFineEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFineEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFineEndDt, other.divertFineEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayAmt()).compareTo(other.isSetDivertFinePayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayAmt, other.divertFinePayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayDt()).compareTo(other.isSetDivertFinePayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayDt, other.divertFinePayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertId()).compareTo(other.isSetDivertId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertId, other.divertId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MisapprProcessCriteria(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertAmt:");
    if (this.divertAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFineEndDt:");
    if (this.divertFineEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFineEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    if (this.reviewStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayAmt:");
    if (this.divertFinePayAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFinePayAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayDt:");
    if (this.divertFinePayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFinePayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertId:");
    sb.append(this.divertId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MisapprProcessCriteriaStandardSchemeFactory implements SchemeFactory {
    public MisapprProcessCriteriaStandardScheme getScheme() {
      return new MisapprProcessCriteriaStandardScheme();
    }
  }

  private static class MisapprProcessCriteriaStandardScheme extends StandardScheme<MisapprProcessCriteria> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MisapprProcessCriteria struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIVERT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertAmt = iprot.readString();
              struct.setDivertAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIVERT_FINE_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFineEndDt = iprot.readString();
              struct.setDivertFineEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewStatus = iprot.readString();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIVERT_FINE_PAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFinePayAmt = iprot.readString();
              struct.setDivertFinePayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DIVERT_FINE_PAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFinePayDt = iprot.readString();
              struct.setDivertFinePayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIVERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divertId = iprot.readI32();
              struct.setDivertIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MisapprProcessCriteria struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.divertAmt != null) {
        oprot.writeFieldBegin(DIVERT_AMT_FIELD_DESC);
        oprot.writeString(struct.divertAmt);
        oprot.writeFieldEnd();
      }
      if (struct.divertFineEndDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_END_DT_FIELD_DESC);
        oprot.writeString(struct.divertFineEndDt);
        oprot.writeFieldEnd();
      }
      if (struct.reviewStatus != null) {
        oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
        oprot.writeString(struct.reviewStatus);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.divertFinePayAmt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_PAY_AMT_FIELD_DESC);
        oprot.writeString(struct.divertFinePayAmt);
        oprot.writeFieldEnd();
      }
      if (struct.divertFinePayDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_PAY_DT_FIELD_DESC);
        oprot.writeString(struct.divertFinePayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIVERT_ID_FIELD_DESC);
      oprot.writeI32(struct.divertId);
      oprot.writeFieldEnd();
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MisapprProcessCriteriaTupleSchemeFactory implements SchemeFactory {
    public MisapprProcessCriteriaTupleScheme getScheme() {
      return new MisapprProcessCriteriaTupleScheme();
    }
  }

  private static class MisapprProcessCriteriaTupleScheme extends TupleScheme<MisapprProcessCriteria> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MisapprProcessCriteria struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetDivertAmt()) {
        optionals.set(4);
      }
      if (struct.isSetDivertFineEndDt()) {
        optionals.set(5);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(6);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(7);
      }
      if (struct.isSetDivertFinePayAmt()) {
        optionals.set(8);
      }
      if (struct.isSetDivertFinePayDt()) {
        optionals.set(9);
      }
      if (struct.isSetDivertId()) {
        optionals.set(10);
      }
      if (struct.isSetCusName()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(14);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetDivertAmt()) {
        oprot.writeString(struct.divertAmt);
      }
      if (struct.isSetDivertFineEndDt()) {
        oprot.writeString(struct.divertFineEndDt);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeString(struct.reviewStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetDivertFinePayAmt()) {
        oprot.writeString(struct.divertFinePayAmt);
      }
      if (struct.isSetDivertFinePayDt()) {
        oprot.writeString(struct.divertFinePayDt);
      }
      if (struct.isSetDivertId()) {
        oprot.writeI32(struct.divertId);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MisapprProcessCriteria struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.divertAmt = iprot.readString();
        struct.setDivertAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.divertFineEndDt = iprot.readString();
        struct.setDivertFineEndDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reviewStatus = iprot.readString();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.divertFinePayAmt = iprot.readString();
        struct.setDivertFinePayAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.divertFinePayDt = iprot.readString();
        struct.setDivertFinePayDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.divertId = iprot.readI32();
        struct.setDivertIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
    }
  }

}


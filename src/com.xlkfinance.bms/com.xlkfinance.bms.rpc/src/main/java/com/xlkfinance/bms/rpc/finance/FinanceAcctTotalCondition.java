/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceAcctTotalCondition implements org.apache.thrift.TBase<FinanceAcctTotalCondition, FinanceAcctTotalCondition._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceAcctTotalCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceAcctTotalCondition");

  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUserName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEARCHER_PERIOD_START_FIELD_DESC = new org.apache.thrift.protocol.TField("searcherPeriodStart", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEARCHER_PERIOD_END_FIELD_DESC = new org.apache.thrift.protocol.TField("searcherPeriodEnd", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceAcctTotalConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceAcctTotalConditionTupleSchemeFactory());
  }

  public String bankCardType; // required
  public String chargeName; // required
  public String bankUserName; // required
  public String bankNum; // required
  public String searcherPeriodStart; // required
  public String searcherPeriodEnd; // required
  public int rows; // required
  public int page; // required
  public int pid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANK_CARD_TYPE((short)1, "bankCardType"),
    CHARGE_NAME((short)2, "chargeName"),
    BANK_USER_NAME((short)3, "bankUserName"),
    BANK_NUM((short)4, "bankNum"),
    SEARCHER_PERIOD_START((short)5, "searcherPeriodStart"),
    SEARCHER_PERIOD_END((short)6, "searcherPeriodEnd"),
    ROWS((short)7, "rows"),
    PAGE((short)8, "page"),
    PID((short)9, "pid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 2: // CHARGE_NAME
          return CHARGE_NAME;
        case 3: // BANK_USER_NAME
          return BANK_USER_NAME;
        case 4: // BANK_NUM
          return BANK_NUM;
        case 5: // SEARCHER_PERIOD_START
          return SEARCHER_PERIOD_START;
        case 6: // SEARCHER_PERIOD_END
          return SEARCHER_PERIOD_END;
        case 7: // ROWS
          return ROWS;
        case 8: // PAGE
          return PAGE;
        case 9: // PID
          return PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWS_ISSET_ID = 0;
  private static final int __PAGE_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("chargeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("bankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCHER_PERIOD_START, new org.apache.thrift.meta_data.FieldMetaData("searcherPeriodStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCHER_PERIOD_END, new org.apache.thrift.meta_data.FieldMetaData("searcherPeriodEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceAcctTotalCondition.class, metaDataMap);
  }

  public FinanceAcctTotalCondition() {
  }

  public FinanceAcctTotalCondition(
    String bankCardType,
    String chargeName,
    String bankUserName,
    String bankNum,
    String searcherPeriodStart,
    String searcherPeriodEnd,
    int rows,
    int page,
    int pid)
  {
    this();
    this.bankCardType = bankCardType;
    this.chargeName = chargeName;
    this.bankUserName = bankUserName;
    this.bankNum = bankNum;
    this.searcherPeriodStart = searcherPeriodStart;
    this.searcherPeriodEnd = searcherPeriodEnd;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceAcctTotalCondition(FinanceAcctTotalCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBankCardType()) {
      this.bankCardType = other.bankCardType;
    }
    if (other.isSetChargeName()) {
      this.chargeName = other.chargeName;
    }
    if (other.isSetBankUserName()) {
      this.bankUserName = other.bankUserName;
    }
    if (other.isSetBankNum()) {
      this.bankNum = other.bankNum;
    }
    if (other.isSetSearcherPeriodStart()) {
      this.searcherPeriodStart = other.searcherPeriodStart;
    }
    if (other.isSetSearcherPeriodEnd()) {
      this.searcherPeriodEnd = other.searcherPeriodEnd;
    }
    this.rows = other.rows;
    this.page = other.page;
    this.pid = other.pid;
  }

  public FinanceAcctTotalCondition deepCopy() {
    return new FinanceAcctTotalCondition(this);
  }

  @Override
  public void clear() {
    this.bankCardType = null;
    this.chargeName = null;
    this.bankUserName = null;
    this.bankNum = null;
    this.searcherPeriodStart = null;
    this.searcherPeriodEnd = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setPidIsSet(false);
    this.pid = 0;
  }

  public String getBankCardType() {
    return this.bankCardType;
  }

  public FinanceAcctTotalCondition setBankCardType(String bankCardType) {
    this.bankCardType = bankCardType;
    return this;
  }

  public void unsetBankCardType() {
    this.bankCardType = null;
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return this.bankCardType != null;
  }

  public void setBankCardTypeIsSet(boolean value) {
    if (!value) {
      this.bankCardType = null;
    }
  }

  public String getChargeName() {
    return this.chargeName;
  }

  public FinanceAcctTotalCondition setChargeName(String chargeName) {
    this.chargeName = chargeName;
    return this;
  }

  public void unsetChargeName() {
    this.chargeName = null;
  }

  /** Returns true if field chargeName is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeName() {
    return this.chargeName != null;
  }

  public void setChargeNameIsSet(boolean value) {
    if (!value) {
      this.chargeName = null;
    }
  }

  public String getBankUserName() {
    return this.bankUserName;
  }

  public FinanceAcctTotalCondition setBankUserName(String bankUserName) {
    this.bankUserName = bankUserName;
    return this;
  }

  public void unsetBankUserName() {
    this.bankUserName = null;
  }

  /** Returns true if field bankUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUserName() {
    return this.bankUserName != null;
  }

  public void setBankUserNameIsSet(boolean value) {
    if (!value) {
      this.bankUserName = null;
    }
  }

  public String getBankNum() {
    return this.bankNum;
  }

  public FinanceAcctTotalCondition setBankNum(String bankNum) {
    this.bankNum = bankNum;
    return this;
  }

  public void unsetBankNum() {
    this.bankNum = null;
  }

  /** Returns true if field bankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNum() {
    return this.bankNum != null;
  }

  public void setBankNumIsSet(boolean value) {
    if (!value) {
      this.bankNum = null;
    }
  }

  public String getSearcherPeriodStart() {
    return this.searcherPeriodStart;
  }

  public FinanceAcctTotalCondition setSearcherPeriodStart(String searcherPeriodStart) {
    this.searcherPeriodStart = searcherPeriodStart;
    return this;
  }

  public void unsetSearcherPeriodStart() {
    this.searcherPeriodStart = null;
  }

  /** Returns true if field searcherPeriodStart is set (has been assigned a value) and false otherwise */
  public boolean isSetSearcherPeriodStart() {
    return this.searcherPeriodStart != null;
  }

  public void setSearcherPeriodStartIsSet(boolean value) {
    if (!value) {
      this.searcherPeriodStart = null;
    }
  }

  public String getSearcherPeriodEnd() {
    return this.searcherPeriodEnd;
  }

  public FinanceAcctTotalCondition setSearcherPeriodEnd(String searcherPeriodEnd) {
    this.searcherPeriodEnd = searcherPeriodEnd;
    return this;
  }

  public void unsetSearcherPeriodEnd() {
    this.searcherPeriodEnd = null;
  }

  /** Returns true if field searcherPeriodEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetSearcherPeriodEnd() {
    return this.searcherPeriodEnd != null;
  }

  public void setSearcherPeriodEndIsSet(boolean value) {
    if (!value) {
      this.searcherPeriodEnd = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public FinanceAcctTotalCondition setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public FinanceAcctTotalCondition setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceAcctTotalCondition setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((String)value);
      }
      break;

    case CHARGE_NAME:
      if (value == null) {
        unsetChargeName();
      } else {
        setChargeName((String)value);
      }
      break;

    case BANK_USER_NAME:
      if (value == null) {
        unsetBankUserName();
      } else {
        setBankUserName((String)value);
      }
      break;

    case BANK_NUM:
      if (value == null) {
        unsetBankNum();
      } else {
        setBankNum((String)value);
      }
      break;

    case SEARCHER_PERIOD_START:
      if (value == null) {
        unsetSearcherPeriodStart();
      } else {
        setSearcherPeriodStart((String)value);
      }
      break;

    case SEARCHER_PERIOD_END:
      if (value == null) {
        unsetSearcherPeriodEnd();
      } else {
        setSearcherPeriodEnd((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANK_CARD_TYPE:
      return getBankCardType();

    case CHARGE_NAME:
      return getChargeName();

    case BANK_USER_NAME:
      return getBankUserName();

    case BANK_NUM:
      return getBankNum();

    case SEARCHER_PERIOD_START:
      return getSearcherPeriodStart();

    case SEARCHER_PERIOD_END:
      return getSearcherPeriodEnd();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case PID:
      return Integer.valueOf(getPid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case CHARGE_NAME:
      return isSetChargeName();
    case BANK_USER_NAME:
      return isSetBankUserName();
    case BANK_NUM:
      return isSetBankNum();
    case SEARCHER_PERIOD_START:
      return isSetSearcherPeriodStart();
    case SEARCHER_PERIOD_END:
      return isSetSearcherPeriodEnd();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case PID:
      return isSetPid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceAcctTotalCondition)
      return this.equals((FinanceAcctTotalCondition)that);
    return false;
  }

  public boolean equals(FinanceAcctTotalCondition that) {
    if (that == null)
      return false;

    boolean this_present_bankCardType = true && this.isSetBankCardType();
    boolean that_present_bankCardType = true && that.isSetBankCardType();
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (!this.bankCardType.equals(that.bankCardType))
        return false;
    }

    boolean this_present_chargeName = true && this.isSetChargeName();
    boolean that_present_chargeName = true && that.isSetChargeName();
    if (this_present_chargeName || that_present_chargeName) {
      if (!(this_present_chargeName && that_present_chargeName))
        return false;
      if (!this.chargeName.equals(that.chargeName))
        return false;
    }

    boolean this_present_bankUserName = true && this.isSetBankUserName();
    boolean that_present_bankUserName = true && that.isSetBankUserName();
    if (this_present_bankUserName || that_present_bankUserName) {
      if (!(this_present_bankUserName && that_present_bankUserName))
        return false;
      if (!this.bankUserName.equals(that.bankUserName))
        return false;
    }

    boolean this_present_bankNum = true && this.isSetBankNum();
    boolean that_present_bankNum = true && that.isSetBankNum();
    if (this_present_bankNum || that_present_bankNum) {
      if (!(this_present_bankNum && that_present_bankNum))
        return false;
      if (!this.bankNum.equals(that.bankNum))
        return false;
    }

    boolean this_present_searcherPeriodStart = true && this.isSetSearcherPeriodStart();
    boolean that_present_searcherPeriodStart = true && that.isSetSearcherPeriodStart();
    if (this_present_searcherPeriodStart || that_present_searcherPeriodStart) {
      if (!(this_present_searcherPeriodStart && that_present_searcherPeriodStart))
        return false;
      if (!this.searcherPeriodStart.equals(that.searcherPeriodStart))
        return false;
    }

    boolean this_present_searcherPeriodEnd = true && this.isSetSearcherPeriodEnd();
    boolean that_present_searcherPeriodEnd = true && that.isSetSearcherPeriodEnd();
    if (this_present_searcherPeriodEnd || that_present_searcherPeriodEnd) {
      if (!(this_present_searcherPeriodEnd && that_present_searcherPeriodEnd))
        return false;
      if (!this.searcherPeriodEnd.equals(that.searcherPeriodEnd))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bankCardType = true && (isSetBankCardType());
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_chargeName = true && (isSetChargeName());
    list.add(present_chargeName);
    if (present_chargeName)
      list.add(chargeName);

    boolean present_bankUserName = true && (isSetBankUserName());
    list.add(present_bankUserName);
    if (present_bankUserName)
      list.add(bankUserName);

    boolean present_bankNum = true && (isSetBankNum());
    list.add(present_bankNum);
    if (present_bankNum)
      list.add(bankNum);

    boolean present_searcherPeriodStart = true && (isSetSearcherPeriodStart());
    list.add(present_searcherPeriodStart);
    if (present_searcherPeriodStart)
      list.add(searcherPeriodStart);

    boolean present_searcherPeriodEnd = true && (isSetSearcherPeriodEnd());
    list.add(present_searcherPeriodEnd);
    if (present_searcherPeriodEnd)
      list.add(searcherPeriodEnd);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceAcctTotalCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeName()).compareTo(other.isSetChargeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeName, other.chargeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUserName()).compareTo(other.isSetBankUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUserName, other.bankUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNum()).compareTo(other.isSetBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNum, other.bankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearcherPeriodStart()).compareTo(other.isSetSearcherPeriodStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearcherPeriodStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searcherPeriodStart, other.searcherPeriodStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearcherPeriodEnd()).compareTo(other.isSetSearcherPeriodEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearcherPeriodEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searcherPeriodEnd, other.searcherPeriodEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceAcctTotalCondition(");
    boolean first = true;

    sb.append("bankCardType:");
    if (this.bankCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeName:");
    if (this.chargeName == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUserName:");
    if (this.bankUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNum:");
    if (this.bankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searcherPeriodStart:");
    if (this.searcherPeriodStart == null) {
      sb.append("null");
    } else {
      sb.append(this.searcherPeriodStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searcherPeriodEnd:");
    if (this.searcherPeriodEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.searcherPeriodEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceAcctTotalConditionStandardSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalConditionStandardScheme getScheme() {
      return new FinanceAcctTotalConditionStandardScheme();
    }
  }

  private static class FinanceAcctTotalConditionStandardScheme extends StandardScheme<FinanceAcctTotalCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceAcctTotalCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardType = iprot.readString();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeName = iprot.readString();
              struct.setChargeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankUserName = iprot.readString();
              struct.setBankUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNum = iprot.readString();
              struct.setBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEARCHER_PERIOD_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searcherPeriodStart = iprot.readString();
              struct.setSearcherPeriodStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEARCHER_PERIOD_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searcherPeriodEnd = iprot.readString();
              struct.setSearcherPeriodEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceAcctTotalCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bankCardType != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankCardType);
        oprot.writeFieldEnd();
      }
      if (struct.chargeName != null) {
        oprot.writeFieldBegin(CHARGE_NAME_FIELD_DESC);
        oprot.writeString(struct.chargeName);
        oprot.writeFieldEnd();
      }
      if (struct.bankUserName != null) {
        oprot.writeFieldBegin(BANK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.bankUserName);
        oprot.writeFieldEnd();
      }
      if (struct.bankNum != null) {
        oprot.writeFieldBegin(BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.bankNum);
        oprot.writeFieldEnd();
      }
      if (struct.searcherPeriodStart != null) {
        oprot.writeFieldBegin(SEARCHER_PERIOD_START_FIELD_DESC);
        oprot.writeString(struct.searcherPeriodStart);
        oprot.writeFieldEnd();
      }
      if (struct.searcherPeriodEnd != null) {
        oprot.writeFieldBegin(SEARCHER_PERIOD_END_FIELD_DESC);
        oprot.writeString(struct.searcherPeriodEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceAcctTotalConditionTupleSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalConditionTupleScheme getScheme() {
      return new FinanceAcctTotalConditionTupleScheme();
    }
  }

  private static class FinanceAcctTotalConditionTupleScheme extends TupleScheme<FinanceAcctTotalCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBankCardType()) {
        optionals.set(0);
      }
      if (struct.isSetChargeName()) {
        optionals.set(1);
      }
      if (struct.isSetBankUserName()) {
        optionals.set(2);
      }
      if (struct.isSetBankNum()) {
        optionals.set(3);
      }
      if (struct.isSetSearcherPeriodStart()) {
        optionals.set(4);
      }
      if (struct.isSetSearcherPeriodEnd()) {
        optionals.set(5);
      }
      if (struct.isSetRows()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      if (struct.isSetPid()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBankCardType()) {
        oprot.writeString(struct.bankCardType);
      }
      if (struct.isSetChargeName()) {
        oprot.writeString(struct.chargeName);
      }
      if (struct.isSetBankUserName()) {
        oprot.writeString(struct.bankUserName);
      }
      if (struct.isSetBankNum()) {
        oprot.writeString(struct.bankNum);
      }
      if (struct.isSetSearcherPeriodStart()) {
        oprot.writeString(struct.searcherPeriodStart);
      }
      if (struct.isSetSearcherPeriodEnd()) {
        oprot.writeString(struct.searcherPeriodEnd);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.bankCardType = iprot.readString();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeName = iprot.readString();
        struct.setChargeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankUserName = iprot.readString();
        struct.setBankUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bankNum = iprot.readString();
        struct.setBankNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.searcherPeriodStart = iprot.readString();
        struct.setSearcherPeriodStartIsSet(true);
      }
      if (incoming.get(5)) {
        struct.searcherPeriodEnd = iprot.readString();
        struct.setSearcherPeriodEndIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
    }
  }

}


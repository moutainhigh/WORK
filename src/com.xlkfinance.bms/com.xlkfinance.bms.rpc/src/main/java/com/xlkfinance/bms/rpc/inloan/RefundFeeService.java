/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RefundFeeService {

  public interface Iface {

    public List<RefundFeeIndexDTO> findAllRefundFeeIndex(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException;

    public int getRefundFeeIndexTotal(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException;

    public List<RefundFeeDTO> findAllRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException;

    public int getRefundFeeTotal(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException;

    public boolean addRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException;

    public boolean updateRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException;

    public boolean addRefundTail(int projectId) throws org.apache.thrift.TException;

    public List<RefundFeeIndexDTO> queryRefundFeeByIds(String ids) throws org.apache.thrift.TException;

    public int saveBatchRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException;

    public BizLoanBatchRefundFeeMain getBatchRefundFeeMainById(int pid) throws org.apache.thrift.TException;

    public List<BizBatchRefundFeeRelation> getAllBatchRefundFeeRelation(BizBatchRefundFeeRelation query) throws org.apache.thrift.TException;

    public String generatedBatchName() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findAllRefundFeeIndex(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundFeeIndexTotal(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundFeeTotal(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRefundTail(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRefundFeeByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBatchRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBatchRefundFeeMainById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllBatchRefundFeeRelation(BizBatchRefundFeeRelation query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generatedBatchName(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<RefundFeeIndexDTO> findAllRefundFeeIndex(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException
    {
      send_findAllRefundFeeIndex(refundFeeIndexDTO);
      return recv_findAllRefundFeeIndex();
    }

    public void send_findAllRefundFeeIndex(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException
    {
      findAllRefundFeeIndex_args args = new findAllRefundFeeIndex_args();
      args.setRefundFeeIndexDTO(refundFeeIndexDTO);
      sendBase("findAllRefundFeeIndex", args);
    }

    public List<RefundFeeIndexDTO> recv_findAllRefundFeeIndex() throws org.apache.thrift.TException
    {
      findAllRefundFeeIndex_result result = new findAllRefundFeeIndex_result();
      receiveBase(result, "findAllRefundFeeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllRefundFeeIndex failed: unknown result");
    }

    public int getRefundFeeIndexTotal(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException
    {
      send_getRefundFeeIndexTotal(refundFeeIndexDTO);
      return recv_getRefundFeeIndexTotal();
    }

    public void send_getRefundFeeIndexTotal(RefundFeeIndexDTO refundFeeIndexDTO) throws org.apache.thrift.TException
    {
      getRefundFeeIndexTotal_args args = new getRefundFeeIndexTotal_args();
      args.setRefundFeeIndexDTO(refundFeeIndexDTO);
      sendBase("getRefundFeeIndexTotal", args);
    }

    public int recv_getRefundFeeIndexTotal() throws org.apache.thrift.TException
    {
      getRefundFeeIndexTotal_result result = new getRefundFeeIndexTotal_result();
      receiveBase(result, "getRefundFeeIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundFeeIndexTotal failed: unknown result");
    }

    public List<RefundFeeDTO> findAllRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      send_findAllRefundFee(refundFeeDTO);
      return recv_findAllRefundFee();
    }

    public void send_findAllRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      findAllRefundFee_args args = new findAllRefundFee_args();
      args.setRefundFeeDTO(refundFeeDTO);
      sendBase("findAllRefundFee", args);
    }

    public List<RefundFeeDTO> recv_findAllRefundFee() throws org.apache.thrift.TException
    {
      findAllRefundFee_result result = new findAllRefundFee_result();
      receiveBase(result, "findAllRefundFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllRefundFee failed: unknown result");
    }

    public int getRefundFeeTotal(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      send_getRefundFeeTotal(refundFeeDTO);
      return recv_getRefundFeeTotal();
    }

    public void send_getRefundFeeTotal(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      getRefundFeeTotal_args args = new getRefundFeeTotal_args();
      args.setRefundFeeDTO(refundFeeDTO);
      sendBase("getRefundFeeTotal", args);
    }

    public int recv_getRefundFeeTotal() throws org.apache.thrift.TException
    {
      getRefundFeeTotal_result result = new getRefundFeeTotal_result();
      receiveBase(result, "getRefundFeeTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundFeeTotal failed: unknown result");
    }

    public boolean addRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      send_addRefundFee(refundFeeDTO);
      return recv_addRefundFee();
    }

    public void send_addRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      addRefundFee_args args = new addRefundFee_args();
      args.setRefundFeeDTO(refundFeeDTO);
      sendBase("addRefundFee", args);
    }

    public boolean recv_addRefundFee() throws org.apache.thrift.TException
    {
      addRefundFee_result result = new addRefundFee_result();
      receiveBase(result, "addRefundFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRefundFee failed: unknown result");
    }

    public boolean updateRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      send_updateRefundFee(refundFeeDTO);
      return recv_updateRefundFee();
    }

    public void send_updateRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      updateRefundFee_args args = new updateRefundFee_args();
      args.setRefundFeeDTO(refundFeeDTO);
      sendBase("updateRefundFee", args);
    }

    public boolean recv_updateRefundFee() throws org.apache.thrift.TException
    {
      updateRefundFee_result result = new updateRefundFee_result();
      receiveBase(result, "updateRefundFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRefundFee failed: unknown result");
    }

    public boolean addRefundTail(int projectId) throws org.apache.thrift.TException
    {
      send_addRefundTail(projectId);
      return recv_addRefundTail();
    }

    public void send_addRefundTail(int projectId) throws org.apache.thrift.TException
    {
      addRefundTail_args args = new addRefundTail_args();
      args.setProjectId(projectId);
      sendBase("addRefundTail", args);
    }

    public boolean recv_addRefundTail() throws org.apache.thrift.TException
    {
      addRefundTail_result result = new addRefundTail_result();
      receiveBase(result, "addRefundTail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRefundTail failed: unknown result");
    }

    public List<RefundFeeIndexDTO> queryRefundFeeByIds(String ids) throws org.apache.thrift.TException
    {
      send_queryRefundFeeByIds(ids);
      return recv_queryRefundFeeByIds();
    }

    public void send_queryRefundFeeByIds(String ids) throws org.apache.thrift.TException
    {
      queryRefundFeeByIds_args args = new queryRefundFeeByIds_args();
      args.setIds(ids);
      sendBase("queryRefundFeeByIds", args);
    }

    public List<RefundFeeIndexDTO> recv_queryRefundFeeByIds() throws org.apache.thrift.TException
    {
      queryRefundFeeByIds_result result = new queryRefundFeeByIds_result();
      receiveBase(result, "queryRefundFeeByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRefundFeeByIds failed: unknown result");
    }

    public int saveBatchRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      send_saveBatchRefundFee(refundFeeDTO);
      return recv_saveBatchRefundFee();
    }

    public void send_saveBatchRefundFee(RefundFeeDTO refundFeeDTO) throws org.apache.thrift.TException
    {
      saveBatchRefundFee_args args = new saveBatchRefundFee_args();
      args.setRefundFeeDTO(refundFeeDTO);
      sendBase("saveBatchRefundFee", args);
    }

    public int recv_saveBatchRefundFee() throws org.apache.thrift.TException
    {
      saveBatchRefundFee_result result = new saveBatchRefundFee_result();
      receiveBase(result, "saveBatchRefundFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBatchRefundFee failed: unknown result");
    }

    public BizLoanBatchRefundFeeMain getBatchRefundFeeMainById(int pid) throws org.apache.thrift.TException
    {
      send_getBatchRefundFeeMainById(pid);
      return recv_getBatchRefundFeeMainById();
    }

    public void send_getBatchRefundFeeMainById(int pid) throws org.apache.thrift.TException
    {
      getBatchRefundFeeMainById_args args = new getBatchRefundFeeMainById_args();
      args.setPid(pid);
      sendBase("getBatchRefundFeeMainById", args);
    }

    public BizLoanBatchRefundFeeMain recv_getBatchRefundFeeMainById() throws org.apache.thrift.TException
    {
      getBatchRefundFeeMainById_result result = new getBatchRefundFeeMainById_result();
      receiveBase(result, "getBatchRefundFeeMainById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBatchRefundFeeMainById failed: unknown result");
    }

    public List<BizBatchRefundFeeRelation> getAllBatchRefundFeeRelation(BizBatchRefundFeeRelation query) throws org.apache.thrift.TException
    {
      send_getAllBatchRefundFeeRelation(query);
      return recv_getAllBatchRefundFeeRelation();
    }

    public void send_getAllBatchRefundFeeRelation(BizBatchRefundFeeRelation query) throws org.apache.thrift.TException
    {
      getAllBatchRefundFeeRelation_args args = new getAllBatchRefundFeeRelation_args();
      args.setQuery(query);
      sendBase("getAllBatchRefundFeeRelation", args);
    }

    public List<BizBatchRefundFeeRelation> recv_getAllBatchRefundFeeRelation() throws org.apache.thrift.TException
    {
      getAllBatchRefundFeeRelation_result result = new getAllBatchRefundFeeRelation_result();
      receiveBase(result, "getAllBatchRefundFeeRelation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllBatchRefundFeeRelation failed: unknown result");
    }

    public String generatedBatchName() throws org.apache.thrift.TException
    {
      send_generatedBatchName();
      return recv_generatedBatchName();
    }

    public void send_generatedBatchName() throws org.apache.thrift.TException
    {
      generatedBatchName_args args = new generatedBatchName_args();
      sendBase("generatedBatchName", args);
    }

    public String recv_generatedBatchName() throws org.apache.thrift.TException
    {
      generatedBatchName_result result = new generatedBatchName_result();
      receiveBase(result, "generatedBatchName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generatedBatchName failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findAllRefundFeeIndex(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllRefundFeeIndex_call method_call = new findAllRefundFeeIndex_call(refundFeeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllRefundFeeIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeIndexDTO refundFeeIndexDTO;
      public findAllRefundFeeIndex_call(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeIndexDTO = refundFeeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllRefundFeeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllRefundFeeIndex_args args = new findAllRefundFeeIndex_args();
        args.setRefundFeeIndexDTO(refundFeeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundFeeIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllRefundFeeIndex();
      }
    }

    public void getRefundFeeIndexTotal(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundFeeIndexTotal_call method_call = new getRefundFeeIndexTotal_call(refundFeeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundFeeIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeIndexDTO refundFeeIndexDTO;
      public getRefundFeeIndexTotal_call(RefundFeeIndexDTO refundFeeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeIndexDTO = refundFeeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundFeeIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundFeeIndexTotal_args args = new getRefundFeeIndexTotal_args();
        args.setRefundFeeIndexDTO(refundFeeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundFeeIndexTotal();
      }
    }

    public void findAllRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllRefundFee_call method_call = new findAllRefundFee_call(refundFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllRefundFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeDTO refundFeeDTO;
      public findAllRefundFee_call(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeDTO = refundFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllRefundFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllRefundFee_args args = new findAllRefundFee_args();
        args.setRefundFeeDTO(refundFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundFeeDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllRefundFee();
      }
    }

    public void getRefundFeeTotal(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundFeeTotal_call method_call = new getRefundFeeTotal_call(refundFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundFeeTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeDTO refundFeeDTO;
      public getRefundFeeTotal_call(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeDTO = refundFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundFeeTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundFeeTotal_args args = new getRefundFeeTotal_args();
        args.setRefundFeeDTO(refundFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundFeeTotal();
      }
    }

    public void addRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRefundFee_call method_call = new addRefundFee_call(refundFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRefundFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeDTO refundFeeDTO;
      public addRefundFee_call(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeDTO = refundFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRefundFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRefundFee_args args = new addRefundFee_args();
        args.setRefundFeeDTO(refundFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRefundFee();
      }
    }

    public void updateRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRefundFee_call method_call = new updateRefundFee_call(refundFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRefundFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeDTO refundFeeDTO;
      public updateRefundFee_call(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeDTO = refundFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRefundFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRefundFee_args args = new updateRefundFee_args();
        args.setRefundFeeDTO(refundFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRefundFee();
      }
    }

    public void addRefundTail(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRefundTail_call method_call = new addRefundTail_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRefundTail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public addRefundTail_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRefundTail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRefundTail_args args = new addRefundTail_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRefundTail();
      }
    }

    public void queryRefundFeeByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRefundFeeByIds_call method_call = new queryRefundFeeByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRefundFeeByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      public queryRefundFeeByIds_call(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRefundFeeByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRefundFeeByIds_args args = new queryRefundFeeByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundFeeIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRefundFeeByIds();
      }
    }

    public void saveBatchRefundFee(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBatchRefundFee_call method_call = new saveBatchRefundFee_call(refundFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBatchRefundFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeeDTO refundFeeDTO;
      public saveBatchRefundFee_call(RefundFeeDTO refundFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeeDTO = refundFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBatchRefundFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBatchRefundFee_args args = new saveBatchRefundFee_args();
        args.setRefundFeeDTO(refundFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBatchRefundFee();
      }
    }

    public void getBatchRefundFeeMainById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBatchRefundFeeMainById_call method_call = new getBatchRefundFeeMainById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBatchRefundFeeMainById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getBatchRefundFeeMainById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBatchRefundFeeMainById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBatchRefundFeeMainById_args args = new getBatchRefundFeeMainById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BizLoanBatchRefundFeeMain getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBatchRefundFeeMainById();
      }
    }

    public void getAllBatchRefundFeeRelation(BizBatchRefundFeeRelation query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllBatchRefundFeeRelation_call method_call = new getAllBatchRefundFeeRelation_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllBatchRefundFeeRelation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizBatchRefundFeeRelation query;
      public getAllBatchRefundFeeRelation_call(BizBatchRefundFeeRelation query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllBatchRefundFeeRelation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllBatchRefundFeeRelation_args args = new getAllBatchRefundFeeRelation_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BizBatchRefundFeeRelation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllBatchRefundFeeRelation();
      }
    }

    public void generatedBatchName(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generatedBatchName_call method_call = new generatedBatchName_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generatedBatchName_call extends org.apache.thrift.async.TAsyncMethodCall {
      public generatedBatchName_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generatedBatchName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generatedBatchName_args args = new generatedBatchName_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generatedBatchName();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findAllRefundFeeIndex", new findAllRefundFeeIndex());
      processMap.put("getRefundFeeIndexTotal", new getRefundFeeIndexTotal());
      processMap.put("findAllRefundFee", new findAllRefundFee());
      processMap.put("getRefundFeeTotal", new getRefundFeeTotal());
      processMap.put("addRefundFee", new addRefundFee());
      processMap.put("updateRefundFee", new updateRefundFee());
      processMap.put("addRefundTail", new addRefundTail());
      processMap.put("queryRefundFeeByIds", new queryRefundFeeByIds());
      processMap.put("saveBatchRefundFee", new saveBatchRefundFee());
      processMap.put("getBatchRefundFeeMainById", new getBatchRefundFeeMainById());
      processMap.put("getAllBatchRefundFeeRelation", new getAllBatchRefundFeeRelation());
      processMap.put("generatedBatchName", new generatedBatchName());
      return processMap;
    }

    public static class findAllRefundFeeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllRefundFeeIndex_args> {
      public findAllRefundFeeIndex() {
        super("findAllRefundFeeIndex");
      }

      public findAllRefundFeeIndex_args getEmptyArgsInstance() {
        return new findAllRefundFeeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllRefundFeeIndex_result getResult(I iface, findAllRefundFeeIndex_args args) throws org.apache.thrift.TException {
        findAllRefundFeeIndex_result result = new findAllRefundFeeIndex_result();
        result.success = iface.findAllRefundFeeIndex(args.refundFeeIndexDTO);
        return result;
      }
    }

    public static class getRefundFeeIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundFeeIndexTotal_args> {
      public getRefundFeeIndexTotal() {
        super("getRefundFeeIndexTotal");
      }

      public getRefundFeeIndexTotal_args getEmptyArgsInstance() {
        return new getRefundFeeIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundFeeIndexTotal_result getResult(I iface, getRefundFeeIndexTotal_args args) throws org.apache.thrift.TException {
        getRefundFeeIndexTotal_result result = new getRefundFeeIndexTotal_result();
        result.success = iface.getRefundFeeIndexTotal(args.refundFeeIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllRefundFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllRefundFee_args> {
      public findAllRefundFee() {
        super("findAllRefundFee");
      }

      public findAllRefundFee_args getEmptyArgsInstance() {
        return new findAllRefundFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllRefundFee_result getResult(I iface, findAllRefundFee_args args) throws org.apache.thrift.TException {
        findAllRefundFee_result result = new findAllRefundFee_result();
        result.success = iface.findAllRefundFee(args.refundFeeDTO);
        return result;
      }
    }

    public static class getRefundFeeTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundFeeTotal_args> {
      public getRefundFeeTotal() {
        super("getRefundFeeTotal");
      }

      public getRefundFeeTotal_args getEmptyArgsInstance() {
        return new getRefundFeeTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundFeeTotal_result getResult(I iface, getRefundFeeTotal_args args) throws org.apache.thrift.TException {
        getRefundFeeTotal_result result = new getRefundFeeTotal_result();
        result.success = iface.getRefundFeeTotal(args.refundFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRefundFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRefundFee_args> {
      public addRefundFee() {
        super("addRefundFee");
      }

      public addRefundFee_args getEmptyArgsInstance() {
        return new addRefundFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRefundFee_result getResult(I iface, addRefundFee_args args) throws org.apache.thrift.TException {
        addRefundFee_result result = new addRefundFee_result();
        result.success = iface.addRefundFee(args.refundFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateRefundFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRefundFee_args> {
      public updateRefundFee() {
        super("updateRefundFee");
      }

      public updateRefundFee_args getEmptyArgsInstance() {
        return new updateRefundFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRefundFee_result getResult(I iface, updateRefundFee_args args) throws org.apache.thrift.TException {
        updateRefundFee_result result = new updateRefundFee_result();
        result.success = iface.updateRefundFee(args.refundFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRefundTail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRefundTail_args> {
      public addRefundTail() {
        super("addRefundTail");
      }

      public addRefundTail_args getEmptyArgsInstance() {
        return new addRefundTail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRefundTail_result getResult(I iface, addRefundTail_args args) throws org.apache.thrift.TException {
        addRefundTail_result result = new addRefundTail_result();
        result.success = iface.addRefundTail(args.projectId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryRefundFeeByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRefundFeeByIds_args> {
      public queryRefundFeeByIds() {
        super("queryRefundFeeByIds");
      }

      public queryRefundFeeByIds_args getEmptyArgsInstance() {
        return new queryRefundFeeByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRefundFeeByIds_result getResult(I iface, queryRefundFeeByIds_args args) throws org.apache.thrift.TException {
        queryRefundFeeByIds_result result = new queryRefundFeeByIds_result();
        result.success = iface.queryRefundFeeByIds(args.ids);
        return result;
      }
    }

    public static class saveBatchRefundFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBatchRefundFee_args> {
      public saveBatchRefundFee() {
        super("saveBatchRefundFee");
      }

      public saveBatchRefundFee_args getEmptyArgsInstance() {
        return new saveBatchRefundFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBatchRefundFee_result getResult(I iface, saveBatchRefundFee_args args) throws org.apache.thrift.TException {
        saveBatchRefundFee_result result = new saveBatchRefundFee_result();
        result.success = iface.saveBatchRefundFee(args.refundFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBatchRefundFeeMainById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBatchRefundFeeMainById_args> {
      public getBatchRefundFeeMainById() {
        super("getBatchRefundFeeMainById");
      }

      public getBatchRefundFeeMainById_args getEmptyArgsInstance() {
        return new getBatchRefundFeeMainById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBatchRefundFeeMainById_result getResult(I iface, getBatchRefundFeeMainById_args args) throws org.apache.thrift.TException {
        getBatchRefundFeeMainById_result result = new getBatchRefundFeeMainById_result();
        result.success = iface.getBatchRefundFeeMainById(args.pid);
        return result;
      }
    }

    public static class getAllBatchRefundFeeRelation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllBatchRefundFeeRelation_args> {
      public getAllBatchRefundFeeRelation() {
        super("getAllBatchRefundFeeRelation");
      }

      public getAllBatchRefundFeeRelation_args getEmptyArgsInstance() {
        return new getAllBatchRefundFeeRelation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllBatchRefundFeeRelation_result getResult(I iface, getAllBatchRefundFeeRelation_args args) throws org.apache.thrift.TException {
        getAllBatchRefundFeeRelation_result result = new getAllBatchRefundFeeRelation_result();
        result.success = iface.getAllBatchRefundFeeRelation(args.query);
        return result;
      }
    }

    public static class generatedBatchName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generatedBatchName_args> {
      public generatedBatchName() {
        super("generatedBatchName");
      }

      public generatedBatchName_args getEmptyArgsInstance() {
        return new generatedBatchName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generatedBatchName_result getResult(I iface, generatedBatchName_args args) throws org.apache.thrift.TException {
        generatedBatchName_result result = new generatedBatchName_result();
        result.success = iface.generatedBatchName();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findAllRefundFeeIndex", new findAllRefundFeeIndex());
      processMap.put("getRefundFeeIndexTotal", new getRefundFeeIndexTotal());
      processMap.put("findAllRefundFee", new findAllRefundFee());
      processMap.put("getRefundFeeTotal", new getRefundFeeTotal());
      processMap.put("addRefundFee", new addRefundFee());
      processMap.put("updateRefundFee", new updateRefundFee());
      processMap.put("addRefundTail", new addRefundTail());
      processMap.put("queryRefundFeeByIds", new queryRefundFeeByIds());
      processMap.put("saveBatchRefundFee", new saveBatchRefundFee());
      processMap.put("getBatchRefundFeeMainById", new getBatchRefundFeeMainById());
      processMap.put("getAllBatchRefundFeeRelation", new getAllBatchRefundFeeRelation());
      processMap.put("generatedBatchName", new generatedBatchName());
      return processMap;
    }

    public static class findAllRefundFeeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllRefundFeeIndex_args, List<RefundFeeIndexDTO>> {
      public findAllRefundFeeIndex() {
        super("findAllRefundFeeIndex");
      }

      public findAllRefundFeeIndex_args getEmptyArgsInstance() {
        return new findAllRefundFeeIndex_args();
      }

      public AsyncMethodCallback<List<RefundFeeIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundFeeIndexDTO>>() { 
          public void onComplete(List<RefundFeeIndexDTO> o) {
            findAllRefundFeeIndex_result result = new findAllRefundFeeIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllRefundFeeIndex_result result = new findAllRefundFeeIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllRefundFeeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundFeeIndexDTO>> resultHandler) throws TException {
        iface.findAllRefundFeeIndex(args.refundFeeIndexDTO,resultHandler);
      }
    }

    public static class getRefundFeeIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundFeeIndexTotal_args, Integer> {
      public getRefundFeeIndexTotal() {
        super("getRefundFeeIndexTotal");
      }

      public getRefundFeeIndexTotal_args getEmptyArgsInstance() {
        return new getRefundFeeIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRefundFeeIndexTotal_result result = new getRefundFeeIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundFeeIndexTotal_result result = new getRefundFeeIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundFeeIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRefundFeeIndexTotal(args.refundFeeIndexDTO,resultHandler);
      }
    }

    public static class findAllRefundFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllRefundFee_args, List<RefundFeeDTO>> {
      public findAllRefundFee() {
        super("findAllRefundFee");
      }

      public findAllRefundFee_args getEmptyArgsInstance() {
        return new findAllRefundFee_args();
      }

      public AsyncMethodCallback<List<RefundFeeDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundFeeDTO>>() { 
          public void onComplete(List<RefundFeeDTO> o) {
            findAllRefundFee_result result = new findAllRefundFee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllRefundFee_result result = new findAllRefundFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllRefundFee_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundFeeDTO>> resultHandler) throws TException {
        iface.findAllRefundFee(args.refundFeeDTO,resultHandler);
      }
    }

    public static class getRefundFeeTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundFeeTotal_args, Integer> {
      public getRefundFeeTotal() {
        super("getRefundFeeTotal");
      }

      public getRefundFeeTotal_args getEmptyArgsInstance() {
        return new getRefundFeeTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRefundFeeTotal_result result = new getRefundFeeTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundFeeTotal_result result = new getRefundFeeTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundFeeTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRefundFeeTotal(args.refundFeeDTO,resultHandler);
      }
    }

    public static class addRefundFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRefundFee_args, Boolean> {
      public addRefundFee() {
        super("addRefundFee");
      }

      public addRefundFee_args getEmptyArgsInstance() {
        return new addRefundFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addRefundFee_result result = new addRefundFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRefundFee_result result = new addRefundFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRefundFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addRefundFee(args.refundFeeDTO,resultHandler);
      }
    }

    public static class updateRefundFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRefundFee_args, Boolean> {
      public updateRefundFee() {
        super("updateRefundFee");
      }

      public updateRefundFee_args getEmptyArgsInstance() {
        return new updateRefundFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateRefundFee_result result = new updateRefundFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRefundFee_result result = new updateRefundFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRefundFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateRefundFee(args.refundFeeDTO,resultHandler);
      }
    }

    public static class addRefundTail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRefundTail_args, Boolean> {
      public addRefundTail() {
        super("addRefundTail");
      }

      public addRefundTail_args getEmptyArgsInstance() {
        return new addRefundTail_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addRefundTail_result result = new addRefundTail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRefundTail_result result = new addRefundTail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRefundTail_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addRefundTail(args.projectId,resultHandler);
      }
    }

    public static class queryRefundFeeByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRefundFeeByIds_args, List<RefundFeeIndexDTO>> {
      public queryRefundFeeByIds() {
        super("queryRefundFeeByIds");
      }

      public queryRefundFeeByIds_args getEmptyArgsInstance() {
        return new queryRefundFeeByIds_args();
      }

      public AsyncMethodCallback<List<RefundFeeIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundFeeIndexDTO>>() { 
          public void onComplete(List<RefundFeeIndexDTO> o) {
            queryRefundFeeByIds_result result = new queryRefundFeeByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRefundFeeByIds_result result = new queryRefundFeeByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRefundFeeByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundFeeIndexDTO>> resultHandler) throws TException {
        iface.queryRefundFeeByIds(args.ids,resultHandler);
      }
    }

    public static class saveBatchRefundFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBatchRefundFee_args, Integer> {
      public saveBatchRefundFee() {
        super("saveBatchRefundFee");
      }

      public saveBatchRefundFee_args getEmptyArgsInstance() {
        return new saveBatchRefundFee_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBatchRefundFee_result result = new saveBatchRefundFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBatchRefundFee_result result = new saveBatchRefundFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBatchRefundFee_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBatchRefundFee(args.refundFeeDTO,resultHandler);
      }
    }

    public static class getBatchRefundFeeMainById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBatchRefundFeeMainById_args, BizLoanBatchRefundFeeMain> {
      public getBatchRefundFeeMainById() {
        super("getBatchRefundFeeMainById");
      }

      public getBatchRefundFeeMainById_args getEmptyArgsInstance() {
        return new getBatchRefundFeeMainById_args();
      }

      public AsyncMethodCallback<BizLoanBatchRefundFeeMain> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BizLoanBatchRefundFeeMain>() { 
          public void onComplete(BizLoanBatchRefundFeeMain o) {
            getBatchRefundFeeMainById_result result = new getBatchRefundFeeMainById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBatchRefundFeeMainById_result result = new getBatchRefundFeeMainById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBatchRefundFeeMainById_args args, org.apache.thrift.async.AsyncMethodCallback<BizLoanBatchRefundFeeMain> resultHandler) throws TException {
        iface.getBatchRefundFeeMainById(args.pid,resultHandler);
      }
    }

    public static class getAllBatchRefundFeeRelation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllBatchRefundFeeRelation_args, List<BizBatchRefundFeeRelation>> {
      public getAllBatchRefundFeeRelation() {
        super("getAllBatchRefundFeeRelation");
      }

      public getAllBatchRefundFeeRelation_args getEmptyArgsInstance() {
        return new getAllBatchRefundFeeRelation_args();
      }

      public AsyncMethodCallback<List<BizBatchRefundFeeRelation>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BizBatchRefundFeeRelation>>() { 
          public void onComplete(List<BizBatchRefundFeeRelation> o) {
            getAllBatchRefundFeeRelation_result result = new getAllBatchRefundFeeRelation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllBatchRefundFeeRelation_result result = new getAllBatchRefundFeeRelation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllBatchRefundFeeRelation_args args, org.apache.thrift.async.AsyncMethodCallback<List<BizBatchRefundFeeRelation>> resultHandler) throws TException {
        iface.getAllBatchRefundFeeRelation(args.query,resultHandler);
      }
    }

    public static class generatedBatchName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generatedBatchName_args, String> {
      public generatedBatchName() {
        super("generatedBatchName");
      }

      public generatedBatchName_args getEmptyArgsInstance() {
        return new generatedBatchName_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            generatedBatchName_result result = new generatedBatchName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generatedBatchName_result result = new generatedBatchName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generatedBatchName_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.generatedBatchName(resultHandler);
      }
    }

  }

  public static class findAllRefundFeeIndex_args implements org.apache.thrift.TBase<findAllRefundFeeIndex_args, findAllRefundFeeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundFeeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundFeeIndex_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundFeeIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundFeeIndex_argsTupleSchemeFactory());
    }

    public RefundFeeIndexDTO refundFeeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_INDEX_DTO((short)1, "refundFeeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_INDEX_DTO
            return REFUND_FEE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundFeeIndex_args.class, metaDataMap);
    }

    public findAllRefundFeeIndex_args() {
    }

    public findAllRefundFeeIndex_args(
      RefundFeeIndexDTO refundFeeIndexDTO)
    {
      this();
      this.refundFeeIndexDTO = refundFeeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundFeeIndex_args(findAllRefundFeeIndex_args other) {
      if (other.isSetRefundFeeIndexDTO()) {
        this.refundFeeIndexDTO = new RefundFeeIndexDTO(other.refundFeeIndexDTO);
      }
    }

    public findAllRefundFeeIndex_args deepCopy() {
      return new findAllRefundFeeIndex_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeIndexDTO = null;
    }

    public RefundFeeIndexDTO getRefundFeeIndexDTO() {
      return this.refundFeeIndexDTO;
    }

    public findAllRefundFeeIndex_args setRefundFeeIndexDTO(RefundFeeIndexDTO refundFeeIndexDTO) {
      this.refundFeeIndexDTO = refundFeeIndexDTO;
      return this;
    }

    public void unsetRefundFeeIndexDTO() {
      this.refundFeeIndexDTO = null;
    }

    /** Returns true if field refundFeeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeIndexDTO() {
      return this.refundFeeIndexDTO != null;
    }

    public void setRefundFeeIndexDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        if (value == null) {
          unsetRefundFeeIndexDTO();
        } else {
          setRefundFeeIndexDTO((RefundFeeIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        return getRefundFeeIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        return isSetRefundFeeIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundFeeIndex_args)
        return this.equals((findAllRefundFeeIndex_args)that);
      return false;
    }

    public boolean equals(findAllRefundFeeIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeIndexDTO = true && this.isSetRefundFeeIndexDTO();
      boolean that_present_refundFeeIndexDTO = true && that.isSetRefundFeeIndexDTO();
      if (this_present_refundFeeIndexDTO || that_present_refundFeeIndexDTO) {
        if (!(this_present_refundFeeIndexDTO && that_present_refundFeeIndexDTO))
          return false;
        if (!this.refundFeeIndexDTO.equals(that.refundFeeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeIndexDTO = true && (isSetRefundFeeIndexDTO());
      list.add(present_refundFeeIndexDTO);
      if (present_refundFeeIndexDTO)
        list.add(refundFeeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundFeeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeIndexDTO()).compareTo(other.isSetRefundFeeIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeIndexDTO, other.refundFeeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundFeeIndex_args(");
      boolean first = true;

      sb.append("refundFeeIndexDTO:");
      if (this.refundFeeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeIndexDTO != null) {
        refundFeeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundFeeIndex_argsStandardSchemeFactory implements SchemeFactory {
      public findAllRefundFeeIndex_argsStandardScheme getScheme() {
        return new findAllRefundFeeIndex_argsStandardScheme();
      }
    }

    private static class findAllRefundFeeIndex_argsStandardScheme extends StandardScheme<findAllRefundFeeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundFeeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeIndexDTO = new RefundFeeIndexDTO();
                struct.refundFeeIndexDTO.read(iprot);
                struct.setRefundFeeIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundFeeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeIndexDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_INDEX_DTO_FIELD_DESC);
          struct.refundFeeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundFeeIndex_argsTupleSchemeFactory implements SchemeFactory {
      public findAllRefundFeeIndex_argsTupleScheme getScheme() {
        return new findAllRefundFeeIndex_argsTupleScheme();
      }
    }

    private static class findAllRefundFeeIndex_argsTupleScheme extends TupleScheme<findAllRefundFeeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundFeeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeIndexDTO()) {
          struct.refundFeeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundFeeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeIndexDTO = new RefundFeeIndexDTO();
          struct.refundFeeIndexDTO.read(iprot);
          struct.setRefundFeeIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllRefundFeeIndex_result implements org.apache.thrift.TBase<findAllRefundFeeIndex_result, findAllRefundFeeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundFeeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundFeeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundFeeIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundFeeIndex_resultTupleSchemeFactory());
    }

    public List<RefundFeeIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundFeeIndex_result.class, metaDataMap);
    }

    public findAllRefundFeeIndex_result() {
    }

    public findAllRefundFeeIndex_result(
      List<RefundFeeIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundFeeIndex_result(findAllRefundFeeIndex_result other) {
      if (other.isSetSuccess()) {
        List<RefundFeeIndexDTO> __this__success = new ArrayList<RefundFeeIndexDTO>(other.success.size());
        for (RefundFeeIndexDTO other_element : other.success) {
          __this__success.add(new RefundFeeIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllRefundFeeIndex_result deepCopy() {
      return new findAllRefundFeeIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundFeeIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundFeeIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundFeeIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<RefundFeeIndexDTO> getSuccess() {
      return this.success;
    }

    public findAllRefundFeeIndex_result setSuccess(List<RefundFeeIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundFeeIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundFeeIndex_result)
        return this.equals((findAllRefundFeeIndex_result)that);
      return false;
    }

    public boolean equals(findAllRefundFeeIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundFeeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundFeeIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundFeeIndex_resultStandardSchemeFactory implements SchemeFactory {
      public findAllRefundFeeIndex_resultStandardScheme getScheme() {
        return new findAllRefundFeeIndex_resultStandardScheme();
      }
    }

    private static class findAllRefundFeeIndex_resultStandardScheme extends StandardScheme<findAllRefundFeeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundFeeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list700 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundFeeIndexDTO>(_list700.size);
                  RefundFeeIndexDTO _elem701;
                  for (int _i702 = 0; _i702 < _list700.size; ++_i702)
                  {
                    _elem701 = new RefundFeeIndexDTO();
                    _elem701.read(iprot);
                    struct.success.add(_elem701);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundFeeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundFeeIndexDTO _iter703 : struct.success)
            {
              _iter703.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundFeeIndex_resultTupleSchemeFactory implements SchemeFactory {
      public findAllRefundFeeIndex_resultTupleScheme getScheme() {
        return new findAllRefundFeeIndex_resultTupleScheme();
      }
    }

    private static class findAllRefundFeeIndex_resultTupleScheme extends TupleScheme<findAllRefundFeeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundFeeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundFeeIndexDTO _iter704 : struct.success)
            {
              _iter704.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundFeeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list705 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundFeeIndexDTO>(_list705.size);
            RefundFeeIndexDTO _elem706;
            for (int _i707 = 0; _i707 < _list705.size; ++_i707)
            {
              _elem706 = new RefundFeeIndexDTO();
              _elem706.read(iprot);
              struct.success.add(_elem706);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeeIndexTotal_args implements org.apache.thrift.TBase<getRefundFeeIndexTotal_args, getRefundFeeIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeeIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeeIndexTotal_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeeIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeeIndexTotal_argsTupleSchemeFactory());
    }

    public RefundFeeIndexDTO refundFeeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_INDEX_DTO((short)1, "refundFeeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_INDEX_DTO
            return REFUND_FEE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeeIndexTotal_args.class, metaDataMap);
    }

    public getRefundFeeIndexTotal_args() {
    }

    public getRefundFeeIndexTotal_args(
      RefundFeeIndexDTO refundFeeIndexDTO)
    {
      this();
      this.refundFeeIndexDTO = refundFeeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeeIndexTotal_args(getRefundFeeIndexTotal_args other) {
      if (other.isSetRefundFeeIndexDTO()) {
        this.refundFeeIndexDTO = new RefundFeeIndexDTO(other.refundFeeIndexDTO);
      }
    }

    public getRefundFeeIndexTotal_args deepCopy() {
      return new getRefundFeeIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeIndexDTO = null;
    }

    public RefundFeeIndexDTO getRefundFeeIndexDTO() {
      return this.refundFeeIndexDTO;
    }

    public getRefundFeeIndexTotal_args setRefundFeeIndexDTO(RefundFeeIndexDTO refundFeeIndexDTO) {
      this.refundFeeIndexDTO = refundFeeIndexDTO;
      return this;
    }

    public void unsetRefundFeeIndexDTO() {
      this.refundFeeIndexDTO = null;
    }

    /** Returns true if field refundFeeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeIndexDTO() {
      return this.refundFeeIndexDTO != null;
    }

    public void setRefundFeeIndexDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        if (value == null) {
          unsetRefundFeeIndexDTO();
        } else {
          setRefundFeeIndexDTO((RefundFeeIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        return getRefundFeeIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_INDEX_DTO:
        return isSetRefundFeeIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeeIndexTotal_args)
        return this.equals((getRefundFeeIndexTotal_args)that);
      return false;
    }

    public boolean equals(getRefundFeeIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeIndexDTO = true && this.isSetRefundFeeIndexDTO();
      boolean that_present_refundFeeIndexDTO = true && that.isSetRefundFeeIndexDTO();
      if (this_present_refundFeeIndexDTO || that_present_refundFeeIndexDTO) {
        if (!(this_present_refundFeeIndexDTO && that_present_refundFeeIndexDTO))
          return false;
        if (!this.refundFeeIndexDTO.equals(that.refundFeeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeIndexDTO = true && (isSetRefundFeeIndexDTO());
      list.add(present_refundFeeIndexDTO);
      if (present_refundFeeIndexDTO)
        list.add(refundFeeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeeIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeIndexDTO()).compareTo(other.isSetRefundFeeIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeIndexDTO, other.refundFeeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeeIndexTotal_args(");
      boolean first = true;

      sb.append("refundFeeIndexDTO:");
      if (this.refundFeeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeIndexDTO != null) {
        refundFeeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeeIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundFeeIndexTotal_argsStandardScheme getScheme() {
        return new getRefundFeeIndexTotal_argsStandardScheme();
      }
    }

    private static class getRefundFeeIndexTotal_argsStandardScheme extends StandardScheme<getRefundFeeIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeIndexDTO = new RefundFeeIndexDTO();
                struct.refundFeeIndexDTO.read(iprot);
                struct.setRefundFeeIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeIndexDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_INDEX_DTO_FIELD_DESC);
          struct.refundFeeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeeIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundFeeIndexTotal_argsTupleScheme getScheme() {
        return new getRefundFeeIndexTotal_argsTupleScheme();
      }
    }

    private static class getRefundFeeIndexTotal_argsTupleScheme extends TupleScheme<getRefundFeeIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeIndexDTO()) {
          struct.refundFeeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeIndexDTO = new RefundFeeIndexDTO();
          struct.refundFeeIndexDTO.read(iprot);
          struct.setRefundFeeIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeeIndexTotal_result implements org.apache.thrift.TBase<getRefundFeeIndexTotal_result, getRefundFeeIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeeIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeeIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeeIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeeIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeeIndexTotal_result.class, metaDataMap);
    }

    public getRefundFeeIndexTotal_result() {
    }

    public getRefundFeeIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeeIndexTotal_result(getRefundFeeIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRefundFeeIndexTotal_result deepCopy() {
      return new getRefundFeeIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRefundFeeIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeeIndexTotal_result)
        return this.equals((getRefundFeeIndexTotal_result)that);
      return false;
    }

    public boolean equals(getRefundFeeIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeeIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeeIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeeIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundFeeIndexTotal_resultStandardScheme getScheme() {
        return new getRefundFeeIndexTotal_resultStandardScheme();
      }
    }

    private static class getRefundFeeIndexTotal_resultStandardScheme extends StandardScheme<getRefundFeeIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeeIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundFeeIndexTotal_resultTupleScheme getScheme() {
        return new getRefundFeeIndexTotal_resultTupleScheme();
      }
    }

    private static class getRefundFeeIndexTotal_resultTupleScheme extends TupleScheme<getRefundFeeIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllRefundFee_args implements org.apache.thrift.TBase<findAllRefundFee_args, findAllRefundFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundFee_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundFee_argsTupleSchemeFactory());
    }

    public RefundFeeDTO refundFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_DTO((short)1, "refundFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_DTO
            return REFUND_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundFee_args.class, metaDataMap);
    }

    public findAllRefundFee_args() {
    }

    public findAllRefundFee_args(
      RefundFeeDTO refundFeeDTO)
    {
      this();
      this.refundFeeDTO = refundFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundFee_args(findAllRefundFee_args other) {
      if (other.isSetRefundFeeDTO()) {
        this.refundFeeDTO = new RefundFeeDTO(other.refundFeeDTO);
      }
    }

    public findAllRefundFee_args deepCopy() {
      return new findAllRefundFee_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeDTO = null;
    }

    public RefundFeeDTO getRefundFeeDTO() {
      return this.refundFeeDTO;
    }

    public findAllRefundFee_args setRefundFeeDTO(RefundFeeDTO refundFeeDTO) {
      this.refundFeeDTO = refundFeeDTO;
      return this;
    }

    public void unsetRefundFeeDTO() {
      this.refundFeeDTO = null;
    }

    /** Returns true if field refundFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeDTO() {
      return this.refundFeeDTO != null;
    }

    public void setRefundFeeDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_DTO:
        if (value == null) {
          unsetRefundFeeDTO();
        } else {
          setRefundFeeDTO((RefundFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_DTO:
        return getRefundFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_DTO:
        return isSetRefundFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundFee_args)
        return this.equals((findAllRefundFee_args)that);
      return false;
    }

    public boolean equals(findAllRefundFee_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeDTO = true && this.isSetRefundFeeDTO();
      boolean that_present_refundFeeDTO = true && that.isSetRefundFeeDTO();
      if (this_present_refundFeeDTO || that_present_refundFeeDTO) {
        if (!(this_present_refundFeeDTO && that_present_refundFeeDTO))
          return false;
        if (!this.refundFeeDTO.equals(that.refundFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeDTO = true && (isSetRefundFeeDTO());
      list.add(present_refundFeeDTO);
      if (present_refundFeeDTO)
        list.add(refundFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeDTO()).compareTo(other.isSetRefundFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeDTO, other.refundFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundFee_args(");
      boolean first = true;

      sb.append("refundFeeDTO:");
      if (this.refundFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeDTO != null) {
        refundFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundFee_argsStandardSchemeFactory implements SchemeFactory {
      public findAllRefundFee_argsStandardScheme getScheme() {
        return new findAllRefundFee_argsStandardScheme();
      }
    }

    private static class findAllRefundFee_argsStandardScheme extends StandardScheme<findAllRefundFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeDTO = new RefundFeeDTO();
                struct.refundFeeDTO.read(iprot);
                struct.setRefundFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_DTO_FIELD_DESC);
          struct.refundFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundFee_argsTupleSchemeFactory implements SchemeFactory {
      public findAllRefundFee_argsTupleScheme getScheme() {
        return new findAllRefundFee_argsTupleScheme();
      }
    }

    private static class findAllRefundFee_argsTupleScheme extends TupleScheme<findAllRefundFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeDTO()) {
          struct.refundFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeDTO = new RefundFeeDTO();
          struct.refundFeeDTO.read(iprot);
          struct.setRefundFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllRefundFee_result implements org.apache.thrift.TBase<findAllRefundFee_result, findAllRefundFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRefundFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRefundFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllRefundFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllRefundFee_resultTupleSchemeFactory());
    }

    public List<RefundFeeDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRefundFee_result.class, metaDataMap);
    }

    public findAllRefundFee_result() {
    }

    public findAllRefundFee_result(
      List<RefundFeeDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRefundFee_result(findAllRefundFee_result other) {
      if (other.isSetSuccess()) {
        List<RefundFeeDTO> __this__success = new ArrayList<RefundFeeDTO>(other.success.size());
        for (RefundFeeDTO other_element : other.success) {
          __this__success.add(new RefundFeeDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllRefundFee_result deepCopy() {
      return new findAllRefundFee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundFeeDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundFeeDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundFeeDTO>();
      }
      this.success.add(elem);
    }

    public List<RefundFeeDTO> getSuccess() {
      return this.success;
    }

    public findAllRefundFee_result setSuccess(List<RefundFeeDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundFeeDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRefundFee_result)
        return this.equals((findAllRefundFee_result)that);
      return false;
    }

    public boolean equals(findAllRefundFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllRefundFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllRefundFee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRefundFee_resultStandardSchemeFactory implements SchemeFactory {
      public findAllRefundFee_resultStandardScheme getScheme() {
        return new findAllRefundFee_resultStandardScheme();
      }
    }

    private static class findAllRefundFee_resultStandardScheme extends StandardScheme<findAllRefundFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRefundFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list708 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundFeeDTO>(_list708.size);
                  RefundFeeDTO _elem709;
                  for (int _i710 = 0; _i710 < _list708.size; ++_i710)
                  {
                    _elem709 = new RefundFeeDTO();
                    _elem709.read(iprot);
                    struct.success.add(_elem709);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRefundFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundFeeDTO _iter711 : struct.success)
            {
              _iter711.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRefundFee_resultTupleSchemeFactory implements SchemeFactory {
      public findAllRefundFee_resultTupleScheme getScheme() {
        return new findAllRefundFee_resultTupleScheme();
      }
    }

    private static class findAllRefundFee_resultTupleScheme extends TupleScheme<findAllRefundFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundFeeDTO _iter712 : struct.success)
            {
              _iter712.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list713 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundFeeDTO>(_list713.size);
            RefundFeeDTO _elem714;
            for (int _i715 = 0; _i715 < _list713.size; ++_i715)
            {
              _elem714 = new RefundFeeDTO();
              _elem714.read(iprot);
              struct.success.add(_elem714);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeeTotal_args implements org.apache.thrift.TBase<getRefundFeeTotal_args, getRefundFeeTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeeTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeeTotal_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeeTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeeTotal_argsTupleSchemeFactory());
    }

    public RefundFeeDTO refundFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_DTO((short)1, "refundFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_DTO
            return REFUND_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeeTotal_args.class, metaDataMap);
    }

    public getRefundFeeTotal_args() {
    }

    public getRefundFeeTotal_args(
      RefundFeeDTO refundFeeDTO)
    {
      this();
      this.refundFeeDTO = refundFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeeTotal_args(getRefundFeeTotal_args other) {
      if (other.isSetRefundFeeDTO()) {
        this.refundFeeDTO = new RefundFeeDTO(other.refundFeeDTO);
      }
    }

    public getRefundFeeTotal_args deepCopy() {
      return new getRefundFeeTotal_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeDTO = null;
    }

    public RefundFeeDTO getRefundFeeDTO() {
      return this.refundFeeDTO;
    }

    public getRefundFeeTotal_args setRefundFeeDTO(RefundFeeDTO refundFeeDTO) {
      this.refundFeeDTO = refundFeeDTO;
      return this;
    }

    public void unsetRefundFeeDTO() {
      this.refundFeeDTO = null;
    }

    /** Returns true if field refundFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeDTO() {
      return this.refundFeeDTO != null;
    }

    public void setRefundFeeDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_DTO:
        if (value == null) {
          unsetRefundFeeDTO();
        } else {
          setRefundFeeDTO((RefundFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_DTO:
        return getRefundFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_DTO:
        return isSetRefundFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeeTotal_args)
        return this.equals((getRefundFeeTotal_args)that);
      return false;
    }

    public boolean equals(getRefundFeeTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeDTO = true && this.isSetRefundFeeDTO();
      boolean that_present_refundFeeDTO = true && that.isSetRefundFeeDTO();
      if (this_present_refundFeeDTO || that_present_refundFeeDTO) {
        if (!(this_present_refundFeeDTO && that_present_refundFeeDTO))
          return false;
        if (!this.refundFeeDTO.equals(that.refundFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeDTO = true && (isSetRefundFeeDTO());
      list.add(present_refundFeeDTO);
      if (present_refundFeeDTO)
        list.add(refundFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeeTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeDTO()).compareTo(other.isSetRefundFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeDTO, other.refundFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeeTotal_args(");
      boolean first = true;

      sb.append("refundFeeDTO:");
      if (this.refundFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeDTO != null) {
        refundFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeeTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundFeeTotal_argsStandardScheme getScheme() {
        return new getRefundFeeTotal_argsStandardScheme();
      }
    }

    private static class getRefundFeeTotal_argsStandardScheme extends StandardScheme<getRefundFeeTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeeTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeDTO = new RefundFeeDTO();
                struct.refundFeeDTO.read(iprot);
                struct.setRefundFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeeTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_DTO_FIELD_DESC);
          struct.refundFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeeTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundFeeTotal_argsTupleScheme getScheme() {
        return new getRefundFeeTotal_argsTupleScheme();
      }
    }

    private static class getRefundFeeTotal_argsTupleScheme extends TupleScheme<getRefundFeeTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeeTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeDTO()) {
          struct.refundFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeeTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeDTO = new RefundFeeDTO();
          struct.refundFeeDTO.read(iprot);
          struct.setRefundFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeeTotal_result implements org.apache.thrift.TBase<getRefundFeeTotal_result, getRefundFeeTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeeTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeeTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeeTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeeTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeeTotal_result.class, metaDataMap);
    }

    public getRefundFeeTotal_result() {
    }

    public getRefundFeeTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeeTotal_result(getRefundFeeTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRefundFeeTotal_result deepCopy() {
      return new getRefundFeeTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRefundFeeTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeeTotal_result)
        return this.equals((getRefundFeeTotal_result)that);
      return false;
    }

    public boolean equals(getRefundFeeTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeeTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeeTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeeTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundFeeTotal_resultStandardScheme getScheme() {
        return new getRefundFeeTotal_resultStandardScheme();
      }
    }

    private static class getRefundFeeTotal_resultStandardScheme extends StandardScheme<getRefundFeeTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeeTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeeTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeeTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundFeeTotal_resultTupleScheme getScheme() {
        return new getRefundFeeTotal_resultTupleScheme();
      }
    }

    private static class getRefundFeeTotal_resultTupleScheme extends TupleScheme<getRefundFeeTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeeTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeeTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRefundFee_args implements org.apache.thrift.TBase<addRefundFee_args, addRefundFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundFee_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundFee_argsTupleSchemeFactory());
    }

    public RefundFeeDTO refundFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_DTO((short)1, "refundFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_DTO
            return REFUND_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundFee_args.class, metaDataMap);
    }

    public addRefundFee_args() {
    }

    public addRefundFee_args(
      RefundFeeDTO refundFeeDTO)
    {
      this();
      this.refundFeeDTO = refundFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundFee_args(addRefundFee_args other) {
      if (other.isSetRefundFeeDTO()) {
        this.refundFeeDTO = new RefundFeeDTO(other.refundFeeDTO);
      }
    }

    public addRefundFee_args deepCopy() {
      return new addRefundFee_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeDTO = null;
    }

    public RefundFeeDTO getRefundFeeDTO() {
      return this.refundFeeDTO;
    }

    public addRefundFee_args setRefundFeeDTO(RefundFeeDTO refundFeeDTO) {
      this.refundFeeDTO = refundFeeDTO;
      return this;
    }

    public void unsetRefundFeeDTO() {
      this.refundFeeDTO = null;
    }

    /** Returns true if field refundFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeDTO() {
      return this.refundFeeDTO != null;
    }

    public void setRefundFeeDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_DTO:
        if (value == null) {
          unsetRefundFeeDTO();
        } else {
          setRefundFeeDTO((RefundFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_DTO:
        return getRefundFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_DTO:
        return isSetRefundFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundFee_args)
        return this.equals((addRefundFee_args)that);
      return false;
    }

    public boolean equals(addRefundFee_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeDTO = true && this.isSetRefundFeeDTO();
      boolean that_present_refundFeeDTO = true && that.isSetRefundFeeDTO();
      if (this_present_refundFeeDTO || that_present_refundFeeDTO) {
        if (!(this_present_refundFeeDTO && that_present_refundFeeDTO))
          return false;
        if (!this.refundFeeDTO.equals(that.refundFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeDTO = true && (isSetRefundFeeDTO());
      list.add(present_refundFeeDTO);
      if (present_refundFeeDTO)
        list.add(refundFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeDTO()).compareTo(other.isSetRefundFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeDTO, other.refundFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundFee_args(");
      boolean first = true;

      sb.append("refundFeeDTO:");
      if (this.refundFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeDTO != null) {
        refundFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundFee_argsStandardSchemeFactory implements SchemeFactory {
      public addRefundFee_argsStandardScheme getScheme() {
        return new addRefundFee_argsStandardScheme();
      }
    }

    private static class addRefundFee_argsStandardScheme extends StandardScheme<addRefundFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeDTO = new RefundFeeDTO();
                struct.refundFeeDTO.read(iprot);
                struct.setRefundFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_DTO_FIELD_DESC);
          struct.refundFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundFee_argsTupleSchemeFactory implements SchemeFactory {
      public addRefundFee_argsTupleScheme getScheme() {
        return new addRefundFee_argsTupleScheme();
      }
    }

    private static class addRefundFee_argsTupleScheme extends TupleScheme<addRefundFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeDTO()) {
          struct.refundFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeDTO = new RefundFeeDTO();
          struct.refundFeeDTO.read(iprot);
          struct.setRefundFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class addRefundFee_result implements org.apache.thrift.TBase<addRefundFee_result, addRefundFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundFee_result.class, metaDataMap);
    }

    public addRefundFee_result() {
    }

    public addRefundFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundFee_result(addRefundFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRefundFee_result deepCopy() {
      return new addRefundFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addRefundFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundFee_result)
        return this.equals((addRefundFee_result)that);
      return false;
    }

    public boolean equals(addRefundFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundFee_resultStandardSchemeFactory implements SchemeFactory {
      public addRefundFee_resultStandardScheme getScheme() {
        return new addRefundFee_resultStandardScheme();
      }
    }

    private static class addRefundFee_resultStandardScheme extends StandardScheme<addRefundFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundFee_resultTupleSchemeFactory implements SchemeFactory {
      public addRefundFee_resultTupleScheme getScheme() {
        return new addRefundFee_resultTupleScheme();
      }
    }

    private static class addRefundFee_resultTupleScheme extends TupleScheme<addRefundFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRefundFee_args implements org.apache.thrift.TBase<updateRefundFee_args, updateRefundFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundFee_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundFee_argsTupleSchemeFactory());
    }

    public RefundFeeDTO refundFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_DTO((short)1, "refundFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_DTO
            return REFUND_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundFee_args.class, metaDataMap);
    }

    public updateRefundFee_args() {
    }

    public updateRefundFee_args(
      RefundFeeDTO refundFeeDTO)
    {
      this();
      this.refundFeeDTO = refundFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundFee_args(updateRefundFee_args other) {
      if (other.isSetRefundFeeDTO()) {
        this.refundFeeDTO = new RefundFeeDTO(other.refundFeeDTO);
      }
    }

    public updateRefundFee_args deepCopy() {
      return new updateRefundFee_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeDTO = null;
    }

    public RefundFeeDTO getRefundFeeDTO() {
      return this.refundFeeDTO;
    }

    public updateRefundFee_args setRefundFeeDTO(RefundFeeDTO refundFeeDTO) {
      this.refundFeeDTO = refundFeeDTO;
      return this;
    }

    public void unsetRefundFeeDTO() {
      this.refundFeeDTO = null;
    }

    /** Returns true if field refundFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeDTO() {
      return this.refundFeeDTO != null;
    }

    public void setRefundFeeDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_DTO:
        if (value == null) {
          unsetRefundFeeDTO();
        } else {
          setRefundFeeDTO((RefundFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_DTO:
        return getRefundFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_DTO:
        return isSetRefundFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundFee_args)
        return this.equals((updateRefundFee_args)that);
      return false;
    }

    public boolean equals(updateRefundFee_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeDTO = true && this.isSetRefundFeeDTO();
      boolean that_present_refundFeeDTO = true && that.isSetRefundFeeDTO();
      if (this_present_refundFeeDTO || that_present_refundFeeDTO) {
        if (!(this_present_refundFeeDTO && that_present_refundFeeDTO))
          return false;
        if (!this.refundFeeDTO.equals(that.refundFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeDTO = true && (isSetRefundFeeDTO());
      list.add(present_refundFeeDTO);
      if (present_refundFeeDTO)
        list.add(refundFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeDTO()).compareTo(other.isSetRefundFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeDTO, other.refundFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundFee_args(");
      boolean first = true;

      sb.append("refundFeeDTO:");
      if (this.refundFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeDTO != null) {
        refundFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundFee_argsStandardSchemeFactory implements SchemeFactory {
      public updateRefundFee_argsStandardScheme getScheme() {
        return new updateRefundFee_argsStandardScheme();
      }
    }

    private static class updateRefundFee_argsStandardScheme extends StandardScheme<updateRefundFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeDTO = new RefundFeeDTO();
                struct.refundFeeDTO.read(iprot);
                struct.setRefundFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_DTO_FIELD_DESC);
          struct.refundFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundFee_argsTupleSchemeFactory implements SchemeFactory {
      public updateRefundFee_argsTupleScheme getScheme() {
        return new updateRefundFee_argsTupleScheme();
      }
    }

    private static class updateRefundFee_argsTupleScheme extends TupleScheme<updateRefundFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeDTO()) {
          struct.refundFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeDTO = new RefundFeeDTO();
          struct.refundFeeDTO.read(iprot);
          struct.setRefundFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRefundFee_result implements org.apache.thrift.TBase<updateRefundFee_result, updateRefundFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRefundFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefundFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefundFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefundFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefundFee_result.class, metaDataMap);
    }

    public updateRefundFee_result() {
    }

    public updateRefundFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefundFee_result(updateRefundFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateRefundFee_result deepCopy() {
      return new updateRefundFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRefundFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefundFee_result)
        return this.equals((updateRefundFee_result)that);
      return false;
    }

    public boolean equals(updateRefundFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRefundFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefundFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefundFee_resultStandardSchemeFactory implements SchemeFactory {
      public updateRefundFee_resultStandardScheme getScheme() {
        return new updateRefundFee_resultStandardScheme();
      }
    }

    private static class updateRefundFee_resultStandardScheme extends StandardScheme<updateRefundFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefundFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefundFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefundFee_resultTupleSchemeFactory implements SchemeFactory {
      public updateRefundFee_resultTupleScheme getScheme() {
        return new updateRefundFee_resultTupleScheme();
      }
    }

    private static class updateRefundFee_resultTupleScheme extends TupleScheme<updateRefundFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRefundTail_args implements org.apache.thrift.TBase<addRefundTail_args, addRefundTail_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundTail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundTail_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundTail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundTail_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundTail_args.class, metaDataMap);
    }

    public addRefundTail_args() {
    }

    public addRefundTail_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundTail_args(addRefundTail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public addRefundTail_args deepCopy() {
      return new addRefundTail_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public addRefundTail_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundTail_args)
        return this.equals((addRefundTail_args)that);
      return false;
    }

    public boolean equals(addRefundTail_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundTail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundTail_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundTail_argsStandardSchemeFactory implements SchemeFactory {
      public addRefundTail_argsStandardScheme getScheme() {
        return new addRefundTail_argsStandardScheme();
      }
    }

    private static class addRefundTail_argsStandardScheme extends StandardScheme<addRefundTail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundTail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundTail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundTail_argsTupleSchemeFactory implements SchemeFactory {
      public addRefundTail_argsTupleScheme getScheme() {
        return new addRefundTail_argsTupleScheme();
      }
    }

    private static class addRefundTail_argsTupleScheme extends TupleScheme<addRefundTail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundTail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundTail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class addRefundTail_result implements org.apache.thrift.TBase<addRefundTail_result, addRefundTail_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRefundTail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRefundTail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRefundTail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRefundTail_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRefundTail_result.class, metaDataMap);
    }

    public addRefundTail_result() {
    }

    public addRefundTail_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRefundTail_result(addRefundTail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRefundTail_result deepCopy() {
      return new addRefundTail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addRefundTail_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRefundTail_result)
        return this.equals((addRefundTail_result)that);
      return false;
    }

    public boolean equals(addRefundTail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRefundTail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRefundTail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRefundTail_resultStandardSchemeFactory implements SchemeFactory {
      public addRefundTail_resultStandardScheme getScheme() {
        return new addRefundTail_resultStandardScheme();
      }
    }

    private static class addRefundTail_resultStandardScheme extends StandardScheme<addRefundTail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRefundTail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRefundTail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRefundTail_resultTupleSchemeFactory implements SchemeFactory {
      public addRefundTail_resultTupleScheme getScheme() {
        return new addRefundTail_resultTupleScheme();
      }
    }

    private static class addRefundTail_resultTupleScheme extends TupleScheme<addRefundTail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRefundTail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRefundTail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRefundFeeByIds_args implements org.apache.thrift.TBase<queryRefundFeeByIds_args, queryRefundFeeByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRefundFeeByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRefundFeeByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRefundFeeByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRefundFeeByIds_argsTupleSchemeFactory());
    }

    public String ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRefundFeeByIds_args.class, metaDataMap);
    }

    public queryRefundFeeByIds_args() {
    }

    public queryRefundFeeByIds_args(
      String ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRefundFeeByIds_args(queryRefundFeeByIds_args other) {
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
    }

    public queryRefundFeeByIds_args deepCopy() {
      return new queryRefundFeeByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public String getIds() {
      return this.ids;
    }

    public queryRefundFeeByIds_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRefundFeeByIds_args)
        return this.equals((queryRefundFeeByIds_args)that);
      return false;
    }

    public boolean equals(queryRefundFeeByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRefundFeeByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRefundFeeByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRefundFeeByIds_argsStandardSchemeFactory implements SchemeFactory {
      public queryRefundFeeByIds_argsStandardScheme getScheme() {
        return new queryRefundFeeByIds_argsStandardScheme();
      }
    }

    private static class queryRefundFeeByIds_argsStandardScheme extends StandardScheme<queryRefundFeeByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRefundFeeByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRefundFeeByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRefundFeeByIds_argsTupleSchemeFactory implements SchemeFactory {
      public queryRefundFeeByIds_argsTupleScheme getScheme() {
        return new queryRefundFeeByIds_argsTupleScheme();
      }
    }

    private static class queryRefundFeeByIds_argsTupleScheme extends TupleScheme<queryRefundFeeByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRefundFeeByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRefundFeeByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class queryRefundFeeByIds_result implements org.apache.thrift.TBase<queryRefundFeeByIds_result, queryRefundFeeByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRefundFeeByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRefundFeeByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRefundFeeByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRefundFeeByIds_resultTupleSchemeFactory());
    }

    public List<RefundFeeIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRefundFeeByIds_result.class, metaDataMap);
    }

    public queryRefundFeeByIds_result() {
    }

    public queryRefundFeeByIds_result(
      List<RefundFeeIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRefundFeeByIds_result(queryRefundFeeByIds_result other) {
      if (other.isSetSuccess()) {
        List<RefundFeeIndexDTO> __this__success = new ArrayList<RefundFeeIndexDTO>(other.success.size());
        for (RefundFeeIndexDTO other_element : other.success) {
          __this__success.add(new RefundFeeIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRefundFeeByIds_result deepCopy() {
      return new queryRefundFeeByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundFeeIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundFeeIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundFeeIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<RefundFeeIndexDTO> getSuccess() {
      return this.success;
    }

    public queryRefundFeeByIds_result setSuccess(List<RefundFeeIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundFeeIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRefundFeeByIds_result)
        return this.equals((queryRefundFeeByIds_result)that);
      return false;
    }

    public boolean equals(queryRefundFeeByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRefundFeeByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRefundFeeByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRefundFeeByIds_resultStandardSchemeFactory implements SchemeFactory {
      public queryRefundFeeByIds_resultStandardScheme getScheme() {
        return new queryRefundFeeByIds_resultStandardScheme();
      }
    }

    private static class queryRefundFeeByIds_resultStandardScheme extends StandardScheme<queryRefundFeeByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRefundFeeByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list716 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundFeeIndexDTO>(_list716.size);
                  RefundFeeIndexDTO _elem717;
                  for (int _i718 = 0; _i718 < _list716.size; ++_i718)
                  {
                    _elem717 = new RefundFeeIndexDTO();
                    _elem717.read(iprot);
                    struct.success.add(_elem717);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRefundFeeByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundFeeIndexDTO _iter719 : struct.success)
            {
              _iter719.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRefundFeeByIds_resultTupleSchemeFactory implements SchemeFactory {
      public queryRefundFeeByIds_resultTupleScheme getScheme() {
        return new queryRefundFeeByIds_resultTupleScheme();
      }
    }

    private static class queryRefundFeeByIds_resultTupleScheme extends TupleScheme<queryRefundFeeByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRefundFeeByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundFeeIndexDTO _iter720 : struct.success)
            {
              _iter720.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRefundFeeByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list721 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundFeeIndexDTO>(_list721.size);
            RefundFeeIndexDTO _elem722;
            for (int _i723 = 0; _i723 < _list721.size; ++_i723)
            {
              _elem722 = new RefundFeeIndexDTO();
              _elem722.read(iprot);
              struct.success.add(_elem722);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveBatchRefundFee_args implements org.apache.thrift.TBase<saveBatchRefundFee_args, saveBatchRefundFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBatchRefundFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBatchRefundFee_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBatchRefundFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBatchRefundFee_argsTupleSchemeFactory());
    }

    public RefundFeeDTO refundFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEE_DTO((short)1, "refundFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEE_DTO
            return REFUND_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("refundFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBatchRefundFee_args.class, metaDataMap);
    }

    public saveBatchRefundFee_args() {
    }

    public saveBatchRefundFee_args(
      RefundFeeDTO refundFeeDTO)
    {
      this();
      this.refundFeeDTO = refundFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBatchRefundFee_args(saveBatchRefundFee_args other) {
      if (other.isSetRefundFeeDTO()) {
        this.refundFeeDTO = new RefundFeeDTO(other.refundFeeDTO);
      }
    }

    public saveBatchRefundFee_args deepCopy() {
      return new saveBatchRefundFee_args(this);
    }

    @Override
    public void clear() {
      this.refundFeeDTO = null;
    }

    public RefundFeeDTO getRefundFeeDTO() {
      return this.refundFeeDTO;
    }

    public saveBatchRefundFee_args setRefundFeeDTO(RefundFeeDTO refundFeeDTO) {
      this.refundFeeDTO = refundFeeDTO;
      return this;
    }

    public void unsetRefundFeeDTO() {
      this.refundFeeDTO = null;
    }

    /** Returns true if field refundFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeeDTO() {
      return this.refundFeeDTO != null;
    }

    public void setRefundFeeDTOIsSet(boolean value) {
      if (!value) {
        this.refundFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEE_DTO:
        if (value == null) {
          unsetRefundFeeDTO();
        } else {
          setRefundFeeDTO((RefundFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEE_DTO:
        return getRefundFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEE_DTO:
        return isSetRefundFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBatchRefundFee_args)
        return this.equals((saveBatchRefundFee_args)that);
      return false;
    }

    public boolean equals(saveBatchRefundFee_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeeDTO = true && this.isSetRefundFeeDTO();
      boolean that_present_refundFeeDTO = true && that.isSetRefundFeeDTO();
      if (this_present_refundFeeDTO || that_present_refundFeeDTO) {
        if (!(this_present_refundFeeDTO && that_present_refundFeeDTO))
          return false;
        if (!this.refundFeeDTO.equals(that.refundFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeeDTO = true && (isSetRefundFeeDTO());
      list.add(present_refundFeeDTO);
      if (present_refundFeeDTO)
        list.add(refundFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBatchRefundFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeeDTO()).compareTo(other.isSetRefundFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeeDTO, other.refundFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBatchRefundFee_args(");
      boolean first = true;

      sb.append("refundFeeDTO:");
      if (this.refundFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeeDTO != null) {
        refundFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBatchRefundFee_argsStandardSchemeFactory implements SchemeFactory {
      public saveBatchRefundFee_argsStandardScheme getScheme() {
        return new saveBatchRefundFee_argsStandardScheme();
      }
    }

    private static class saveBatchRefundFee_argsStandardScheme extends StandardScheme<saveBatchRefundFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBatchRefundFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeeDTO = new RefundFeeDTO();
                struct.refundFeeDTO.read(iprot);
                struct.setRefundFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBatchRefundFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeeDTO != null) {
          oprot.writeFieldBegin(REFUND_FEE_DTO_FIELD_DESC);
          struct.refundFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBatchRefundFee_argsTupleSchemeFactory implements SchemeFactory {
      public saveBatchRefundFee_argsTupleScheme getScheme() {
        return new saveBatchRefundFee_argsTupleScheme();
      }
    }

    private static class saveBatchRefundFee_argsTupleScheme extends TupleScheme<saveBatchRefundFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBatchRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeeDTO()) {
          struct.refundFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBatchRefundFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeeDTO = new RefundFeeDTO();
          struct.refundFeeDTO.read(iprot);
          struct.setRefundFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class saveBatchRefundFee_result implements org.apache.thrift.TBase<saveBatchRefundFee_result, saveBatchRefundFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBatchRefundFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBatchRefundFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBatchRefundFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBatchRefundFee_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBatchRefundFee_result.class, metaDataMap);
    }

    public saveBatchRefundFee_result() {
    }

    public saveBatchRefundFee_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBatchRefundFee_result(saveBatchRefundFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveBatchRefundFee_result deepCopy() {
      return new saveBatchRefundFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBatchRefundFee_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBatchRefundFee_result)
        return this.equals((saveBatchRefundFee_result)that);
      return false;
    }

    public boolean equals(saveBatchRefundFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBatchRefundFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBatchRefundFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBatchRefundFee_resultStandardSchemeFactory implements SchemeFactory {
      public saveBatchRefundFee_resultStandardScheme getScheme() {
        return new saveBatchRefundFee_resultStandardScheme();
      }
    }

    private static class saveBatchRefundFee_resultStandardScheme extends StandardScheme<saveBatchRefundFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBatchRefundFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBatchRefundFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBatchRefundFee_resultTupleSchemeFactory implements SchemeFactory {
      public saveBatchRefundFee_resultTupleScheme getScheme() {
        return new saveBatchRefundFee_resultTupleScheme();
      }
    }

    private static class saveBatchRefundFee_resultTupleScheme extends TupleScheme<saveBatchRefundFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBatchRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBatchRefundFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBatchRefundFeeMainById_args implements org.apache.thrift.TBase<getBatchRefundFeeMainById_args, getBatchRefundFeeMainById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBatchRefundFeeMainById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBatchRefundFeeMainById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBatchRefundFeeMainById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBatchRefundFeeMainById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBatchRefundFeeMainById_args.class, metaDataMap);
    }

    public getBatchRefundFeeMainById_args() {
    }

    public getBatchRefundFeeMainById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBatchRefundFeeMainById_args(getBatchRefundFeeMainById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getBatchRefundFeeMainById_args deepCopy() {
      return new getBatchRefundFeeMainById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getBatchRefundFeeMainById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBatchRefundFeeMainById_args)
        return this.equals((getBatchRefundFeeMainById_args)that);
      return false;
    }

    public boolean equals(getBatchRefundFeeMainById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBatchRefundFeeMainById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBatchRefundFeeMainById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBatchRefundFeeMainById_argsStandardSchemeFactory implements SchemeFactory {
      public getBatchRefundFeeMainById_argsStandardScheme getScheme() {
        return new getBatchRefundFeeMainById_argsStandardScheme();
      }
    }

    private static class getBatchRefundFeeMainById_argsStandardScheme extends StandardScheme<getBatchRefundFeeMainById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBatchRefundFeeMainById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBatchRefundFeeMainById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBatchRefundFeeMainById_argsTupleSchemeFactory implements SchemeFactory {
      public getBatchRefundFeeMainById_argsTupleScheme getScheme() {
        return new getBatchRefundFeeMainById_argsTupleScheme();
      }
    }

    private static class getBatchRefundFeeMainById_argsTupleScheme extends TupleScheme<getBatchRefundFeeMainById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBatchRefundFeeMainById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBatchRefundFeeMainById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getBatchRefundFeeMainById_result implements org.apache.thrift.TBase<getBatchRefundFeeMainById_result, getBatchRefundFeeMainById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBatchRefundFeeMainById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBatchRefundFeeMainById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBatchRefundFeeMainById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBatchRefundFeeMainById_resultTupleSchemeFactory());
    }

    public BizLoanBatchRefundFeeMain success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "BizLoanBatchRefundFeeMain")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBatchRefundFeeMainById_result.class, metaDataMap);
    }

    public getBatchRefundFeeMainById_result() {
    }

    public getBatchRefundFeeMainById_result(
      BizLoanBatchRefundFeeMain success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBatchRefundFeeMainById_result(getBatchRefundFeeMainById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBatchRefundFeeMainById_result deepCopy() {
      return new getBatchRefundFeeMainById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BizLoanBatchRefundFeeMain getSuccess() {
      return this.success;
    }

    public getBatchRefundFeeMainById_result setSuccess(BizLoanBatchRefundFeeMain success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BizLoanBatchRefundFeeMain)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBatchRefundFeeMainById_result)
        return this.equals((getBatchRefundFeeMainById_result)that);
      return false;
    }

    public boolean equals(getBatchRefundFeeMainById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBatchRefundFeeMainById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBatchRefundFeeMainById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBatchRefundFeeMainById_resultStandardSchemeFactory implements SchemeFactory {
      public getBatchRefundFeeMainById_resultStandardScheme getScheme() {
        return new getBatchRefundFeeMainById_resultStandardScheme();
      }
    }

    private static class getBatchRefundFeeMainById_resultStandardScheme extends StandardScheme<getBatchRefundFeeMainById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBatchRefundFeeMainById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BizLoanBatchRefundFeeMain();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBatchRefundFeeMainById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBatchRefundFeeMainById_resultTupleSchemeFactory implements SchemeFactory {
      public getBatchRefundFeeMainById_resultTupleScheme getScheme() {
        return new getBatchRefundFeeMainById_resultTupleScheme();
      }
    }

    private static class getBatchRefundFeeMainById_resultTupleScheme extends TupleScheme<getBatchRefundFeeMainById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBatchRefundFeeMainById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBatchRefundFeeMainById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BizLoanBatchRefundFeeMain();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllBatchRefundFeeRelation_args implements org.apache.thrift.TBase<getAllBatchRefundFeeRelation_args, getAllBatchRefundFeeRelation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBatchRefundFeeRelation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBatchRefundFeeRelation_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllBatchRefundFeeRelation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllBatchRefundFeeRelation_argsTupleSchemeFactory());
    }

    public BizBatchRefundFeeRelation query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "BizBatchRefundFeeRelation")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBatchRefundFeeRelation_args.class, metaDataMap);
    }

    public getAllBatchRefundFeeRelation_args() {
    }

    public getAllBatchRefundFeeRelation_args(
      BizBatchRefundFeeRelation query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBatchRefundFeeRelation_args(getAllBatchRefundFeeRelation_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public getAllBatchRefundFeeRelation_args deepCopy() {
      return new getAllBatchRefundFeeRelation_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public BizBatchRefundFeeRelation getQuery() {
      return this.query;
    }

    public getAllBatchRefundFeeRelation_args setQuery(BizBatchRefundFeeRelation query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((BizBatchRefundFeeRelation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBatchRefundFeeRelation_args)
        return this.equals((getAllBatchRefundFeeRelation_args)that);
      return false;
    }

    public boolean equals(getAllBatchRefundFeeRelation_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllBatchRefundFeeRelation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllBatchRefundFeeRelation_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBatchRefundFeeRelation_argsStandardSchemeFactory implements SchemeFactory {
      public getAllBatchRefundFeeRelation_argsStandardScheme getScheme() {
        return new getAllBatchRefundFeeRelation_argsStandardScheme();
      }
    }

    private static class getAllBatchRefundFeeRelation_argsStandardScheme extends StandardScheme<getAllBatchRefundFeeRelation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBatchRefundFeeRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new BizBatchRefundFeeRelation();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBatchRefundFeeRelation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBatchRefundFeeRelation_argsTupleSchemeFactory implements SchemeFactory {
      public getAllBatchRefundFeeRelation_argsTupleScheme getScheme() {
        return new getAllBatchRefundFeeRelation_argsTupleScheme();
      }
    }

    private static class getAllBatchRefundFeeRelation_argsTupleScheme extends TupleScheme<getAllBatchRefundFeeRelation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBatchRefundFeeRelation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBatchRefundFeeRelation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new BizBatchRefundFeeRelation();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getAllBatchRefundFeeRelation_result implements org.apache.thrift.TBase<getAllBatchRefundFeeRelation_result, getAllBatchRefundFeeRelation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBatchRefundFeeRelation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBatchRefundFeeRelation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllBatchRefundFeeRelation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllBatchRefundFeeRelation_resultTupleSchemeFactory());
    }

    public List<BizBatchRefundFeeRelation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "BizBatchRefundFeeRelation"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBatchRefundFeeRelation_result.class, metaDataMap);
    }

    public getAllBatchRefundFeeRelation_result() {
    }

    public getAllBatchRefundFeeRelation_result(
      List<BizBatchRefundFeeRelation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBatchRefundFeeRelation_result(getAllBatchRefundFeeRelation_result other) {
      if (other.isSetSuccess()) {
        List<BizBatchRefundFeeRelation> __this__success = new ArrayList<BizBatchRefundFeeRelation>(other.success.size());
        for (BizBatchRefundFeeRelation other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getAllBatchRefundFeeRelation_result deepCopy() {
      return new getAllBatchRefundFeeRelation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BizBatchRefundFeeRelation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BizBatchRefundFeeRelation elem) {
      if (this.success == null) {
        this.success = new ArrayList<BizBatchRefundFeeRelation>();
      }
      this.success.add(elem);
    }

    public List<BizBatchRefundFeeRelation> getSuccess() {
      return this.success;
    }

    public getAllBatchRefundFeeRelation_result setSuccess(List<BizBatchRefundFeeRelation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BizBatchRefundFeeRelation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBatchRefundFeeRelation_result)
        return this.equals((getAllBatchRefundFeeRelation_result)that);
      return false;
    }

    public boolean equals(getAllBatchRefundFeeRelation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllBatchRefundFeeRelation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllBatchRefundFeeRelation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBatchRefundFeeRelation_resultStandardSchemeFactory implements SchemeFactory {
      public getAllBatchRefundFeeRelation_resultStandardScheme getScheme() {
        return new getAllBatchRefundFeeRelation_resultStandardScheme();
      }
    }

    private static class getAllBatchRefundFeeRelation_resultStandardScheme extends StandardScheme<getAllBatchRefundFeeRelation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBatchRefundFeeRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list724 = iprot.readListBegin();
                  struct.success = new ArrayList<BizBatchRefundFeeRelation>(_list724.size);
                  BizBatchRefundFeeRelation _elem725;
                  for (int _i726 = 0; _i726 < _list724.size; ++_i726)
                  {
                    _elem725 = new BizBatchRefundFeeRelation();
                    _elem725.read(iprot);
                    struct.success.add(_elem725);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBatchRefundFeeRelation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BizBatchRefundFeeRelation _iter727 : struct.success)
            {
              _iter727.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBatchRefundFeeRelation_resultTupleSchemeFactory implements SchemeFactory {
      public getAllBatchRefundFeeRelation_resultTupleScheme getScheme() {
        return new getAllBatchRefundFeeRelation_resultTupleScheme();
      }
    }

    private static class getAllBatchRefundFeeRelation_resultTupleScheme extends TupleScheme<getAllBatchRefundFeeRelation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBatchRefundFeeRelation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BizBatchRefundFeeRelation _iter728 : struct.success)
            {
              _iter728.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBatchRefundFeeRelation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list729 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BizBatchRefundFeeRelation>(_list729.size);
            BizBatchRefundFeeRelation _elem730;
            for (int _i731 = 0; _i731 < _list729.size; ++_i731)
            {
              _elem730 = new BizBatchRefundFeeRelation();
              _elem730.read(iprot);
              struct.success.add(_elem730);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generatedBatchName_args implements org.apache.thrift.TBase<generatedBatchName_args, generatedBatchName_args._Fields>, java.io.Serializable, Cloneable, Comparable<generatedBatchName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generatedBatchName_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generatedBatchName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generatedBatchName_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generatedBatchName_args.class, metaDataMap);
    }

    public generatedBatchName_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generatedBatchName_args(generatedBatchName_args other) {
    }

    public generatedBatchName_args deepCopy() {
      return new generatedBatchName_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generatedBatchName_args)
        return this.equals((generatedBatchName_args)that);
      return false;
    }

    public boolean equals(generatedBatchName_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(generatedBatchName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generatedBatchName_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generatedBatchName_argsStandardSchemeFactory implements SchemeFactory {
      public generatedBatchName_argsStandardScheme getScheme() {
        return new generatedBatchName_argsStandardScheme();
      }
    }

    private static class generatedBatchName_argsStandardScheme extends StandardScheme<generatedBatchName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generatedBatchName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generatedBatchName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generatedBatchName_argsTupleSchemeFactory implements SchemeFactory {
      public generatedBatchName_argsTupleScheme getScheme() {
        return new generatedBatchName_argsTupleScheme();
      }
    }

    private static class generatedBatchName_argsTupleScheme extends TupleScheme<generatedBatchName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generatedBatchName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generatedBatchName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class generatedBatchName_result implements org.apache.thrift.TBase<generatedBatchName_result, generatedBatchName_result._Fields>, java.io.Serializable, Cloneable, Comparable<generatedBatchName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generatedBatchName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generatedBatchName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generatedBatchName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generatedBatchName_result.class, metaDataMap);
    }

    public generatedBatchName_result() {
    }

    public generatedBatchName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generatedBatchName_result(generatedBatchName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public generatedBatchName_result deepCopy() {
      return new generatedBatchName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public generatedBatchName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generatedBatchName_result)
        return this.equals((generatedBatchName_result)that);
      return false;
    }

    public boolean equals(generatedBatchName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(generatedBatchName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generatedBatchName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generatedBatchName_resultStandardSchemeFactory implements SchemeFactory {
      public generatedBatchName_resultStandardScheme getScheme() {
        return new generatedBatchName_resultStandardScheme();
      }
    }

    private static class generatedBatchName_resultStandardScheme extends StandardScheme<generatedBatchName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generatedBatchName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generatedBatchName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generatedBatchName_resultTupleSchemeFactory implements SchemeFactory {
      public generatedBatchName_resultTupleScheme getScheme() {
        return new generatedBatchName_resultTupleScheme();
      }
    }

    private static class generatedBatchName_resultTupleScheme extends TupleScheme<generatedBatchName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generatedBatchName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generatedBatchName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

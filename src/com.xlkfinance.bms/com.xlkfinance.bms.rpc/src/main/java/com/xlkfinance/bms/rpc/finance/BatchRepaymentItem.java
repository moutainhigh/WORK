/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class BatchRepaymentItem implements org.apache.thrift.TBase<BatchRepaymentItem, BatchRepaymentItem._Fields>, java.io.Serializable, Cloneable, Comparable<BatchRepaymentItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchRepaymentItem");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REF_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("refPid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField S_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FINANCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("financeType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField BALANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField REMAINING_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDays", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UN_BALANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("unBalanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatchRepaymentItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatchRepaymentItemTupleSchemeFactory());
  }

  public int loanId; // required
  public String projectName; // required
  public String projectNum; // required
  public String limitDate; // required
  public int refPid; // required
  public int sType; // required
  public String itemName; // required
  public int financeType; // required
  public double totalAmt; // required
  public double balanceAmt; // required
  public double remainingAmt; // required
  public int overdueDays; // required
  public double unBalanceAmt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUM((short)3, "projectNum"),
    LIMIT_DATE((short)4, "limitDate"),
    REF_PID((short)5, "refPid"),
    S_TYPE((short)6, "sType"),
    ITEM_NAME((short)7, "itemName"),
    FINANCE_TYPE((short)8, "financeType"),
    TOTAL_AMT((short)9, "totalAmt"),
    BALANCE_AMT((short)10, "balanceAmt"),
    REMAINING_AMT((short)11, "remainingAmt"),
    OVERDUE_DAYS((short)12, "overdueDays"),
    UN_BALANCE_AMT((short)13, "unBalanceAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUM
          return PROJECT_NUM;
        case 4: // LIMIT_DATE
          return LIMIT_DATE;
        case 5: // REF_PID
          return REF_PID;
        case 6: // S_TYPE
          return S_TYPE;
        case 7: // ITEM_NAME
          return ITEM_NAME;
        case 8: // FINANCE_TYPE
          return FINANCE_TYPE;
        case 9: // TOTAL_AMT
          return TOTAL_AMT;
        case 10: // BALANCE_AMT
          return BALANCE_AMT;
        case 11: // REMAINING_AMT
          return REMAINING_AMT;
        case 12: // OVERDUE_DAYS
          return OVERDUE_DAYS;
        case 13: // UN_BALANCE_AMT
          return UN_BALANCE_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __REFPID_ISSET_ID = 1;
  private static final int __STYPE_ISSET_ID = 2;
  private static final int __FINANCETYPE_ISSET_ID = 3;
  private static final int __TOTALAMT_ISSET_ID = 4;
  private static final int __BALANCEAMT_ISSET_ID = 5;
  private static final int __REMAININGAMT_ISSET_ID = 6;
  private static final int __OVERDUEDAYS_ISSET_ID = 7;
  private static final int __UNBALANCEAMT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_DATE, new org.apache.thrift.meta_data.FieldMetaData("limitDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_PID, new org.apache.thrift.meta_data.FieldMetaData("refPid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINANCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("financeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("totalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("balanceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMAINING_AMT, new org.apache.thrift.meta_data.FieldMetaData("remainingAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("overdueDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UN_BALANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("unBalanceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchRepaymentItem.class, metaDataMap);
  }

  public BatchRepaymentItem() {
  }

  public BatchRepaymentItem(
    int loanId,
    String projectName,
    String projectNum,
    String limitDate,
    int refPid,
    int sType,
    String itemName,
    int financeType,
    double totalAmt,
    double balanceAmt,
    double remainingAmt,
    int overdueDays,
    double unBalanceAmt)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectName = projectName;
    this.projectNum = projectNum;
    this.limitDate = limitDate;
    this.refPid = refPid;
    setRefPidIsSet(true);
    this.sType = sType;
    setSTypeIsSet(true);
    this.itemName = itemName;
    this.financeType = financeType;
    setFinanceTypeIsSet(true);
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    this.remainingAmt = remainingAmt;
    setRemainingAmtIsSet(true);
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    this.unBalanceAmt = unBalanceAmt;
    setUnBalanceAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchRepaymentItem(BatchRepaymentItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    if (other.isSetLimitDate()) {
      this.limitDate = other.limitDate;
    }
    this.refPid = other.refPid;
    this.sType = other.sType;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.financeType = other.financeType;
    this.totalAmt = other.totalAmt;
    this.balanceAmt = other.balanceAmt;
    this.remainingAmt = other.remainingAmt;
    this.overdueDays = other.overdueDays;
    this.unBalanceAmt = other.unBalanceAmt;
  }

  public BatchRepaymentItem deepCopy() {
    return new BatchRepaymentItem(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.projectName = null;
    this.projectNum = null;
    this.limitDate = null;
    setRefPidIsSet(false);
    this.refPid = 0;
    setSTypeIsSet(false);
    this.sType = 0;
    this.itemName = null;
    setFinanceTypeIsSet(false);
    this.financeType = 0;
    setTotalAmtIsSet(false);
    this.totalAmt = 0.0;
    setBalanceAmtIsSet(false);
    this.balanceAmt = 0.0;
    setRemainingAmtIsSet(false);
    this.remainingAmt = 0.0;
    setOverdueDaysIsSet(false);
    this.overdueDays = 0;
    setUnBalanceAmtIsSet(false);
    this.unBalanceAmt = 0.0;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public BatchRepaymentItem setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public BatchRepaymentItem setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public BatchRepaymentItem setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public String getLimitDate() {
    return this.limitDate;
  }

  public BatchRepaymentItem setLimitDate(String limitDate) {
    this.limitDate = limitDate;
    return this;
  }

  public void unsetLimitDate() {
    this.limitDate = null;
  }

  /** Returns true if field limitDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitDate() {
    return this.limitDate != null;
  }

  public void setLimitDateIsSet(boolean value) {
    if (!value) {
      this.limitDate = null;
    }
  }

  public int getRefPid() {
    return this.refPid;
  }

  public BatchRepaymentItem setRefPid(int refPid) {
    this.refPid = refPid;
    setRefPidIsSet(true);
    return this;
  }

  public void unsetRefPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFPID_ISSET_ID);
  }

  /** Returns true if field refPid is set (has been assigned a value) and false otherwise */
  public boolean isSetRefPid() {
    return EncodingUtils.testBit(__isset_bitfield, __REFPID_ISSET_ID);
  }

  public void setRefPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFPID_ISSET_ID, value);
  }

  public int getSType() {
    return this.sType;
  }

  public BatchRepaymentItem setSType(int sType) {
    this.sType = sType;
    setSTypeIsSet(true);
    return this;
  }

  public void unsetSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STYPE_ISSET_ID);
  }

  /** Returns true if field sType is set (has been assigned a value) and false otherwise */
  public boolean isSetSType() {
    return EncodingUtils.testBit(__isset_bitfield, __STYPE_ISSET_ID);
  }

  public void setSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STYPE_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public BatchRepaymentItem setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public int getFinanceType() {
    return this.financeType;
  }

  public BatchRepaymentItem setFinanceType(int financeType) {
    this.financeType = financeType;
    setFinanceTypeIsSet(true);
    return this;
  }

  public void unsetFinanceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCETYPE_ISSET_ID);
  }

  /** Returns true if field financeType is set (has been assigned a value) and false otherwise */
  public boolean isSetFinanceType() {
    return EncodingUtils.testBit(__isset_bitfield, __FINANCETYPE_ISSET_ID);
  }

  public void setFinanceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCETYPE_ISSET_ID, value);
  }

  public double getTotalAmt() {
    return this.totalAmt;
  }

  public BatchRepaymentItem setTotalAmt(double totalAmt) {
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    return this;
  }

  public void unsetTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  /** Returns true if field totalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  public void setTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMT_ISSET_ID, value);
  }

  public double getBalanceAmt() {
    return this.balanceAmt;
  }

  public BatchRepaymentItem setBalanceAmt(double balanceAmt) {
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    return this;
  }

  public void unsetBalanceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  /** Returns true if field balanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  public void setBalanceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEAMT_ISSET_ID, value);
  }

  public double getRemainingAmt() {
    return this.remainingAmt;
  }

  public BatchRepaymentItem setRemainingAmt(double remainingAmt) {
    this.remainingAmt = remainingAmt;
    setRemainingAmtIsSet(true);
    return this;
  }

  public void unsetRemainingAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGAMT_ISSET_ID);
  }

  /** Returns true if field remainingAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGAMT_ISSET_ID);
  }

  public void setRemainingAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGAMT_ISSET_ID, value);
  }

  public int getOverdueDays() {
    return this.overdueDays;
  }

  public BatchRepaymentItem setOverdueDays(int overdueDays) {
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    return this;
  }

  public void unsetOverdueDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  /** Returns true if field overdueDays is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDays() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  public void setOverdueDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID, value);
  }

  public double getUnBalanceAmt() {
    return this.unBalanceAmt;
  }

  public BatchRepaymentItem setUnBalanceAmt(double unBalanceAmt) {
    this.unBalanceAmt = unBalanceAmt;
    setUnBalanceAmtIsSet(true);
    return this;
  }

  public void unsetUnBalanceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNBALANCEAMT_ISSET_ID);
  }

  /** Returns true if field unBalanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetUnBalanceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __UNBALANCEAMT_ISSET_ID);
  }

  public void setUnBalanceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNBALANCEAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case LIMIT_DATE:
      if (value == null) {
        unsetLimitDate();
      } else {
        setLimitDate((String)value);
      }
      break;

    case REF_PID:
      if (value == null) {
        unsetRefPid();
      } else {
        setRefPid((Integer)value);
      }
      break;

    case S_TYPE:
      if (value == null) {
        unsetSType();
      } else {
        setSType((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case FINANCE_TYPE:
      if (value == null) {
        unsetFinanceType();
      } else {
        setFinanceType((Integer)value);
      }
      break;

    case TOTAL_AMT:
      if (value == null) {
        unsetTotalAmt();
      } else {
        setTotalAmt((Double)value);
      }
      break;

    case BALANCE_AMT:
      if (value == null) {
        unsetBalanceAmt();
      } else {
        setBalanceAmt((Double)value);
      }
      break;

    case REMAINING_AMT:
      if (value == null) {
        unsetRemainingAmt();
      } else {
        setRemainingAmt((Double)value);
      }
      break;

    case OVERDUE_DAYS:
      if (value == null) {
        unsetOverdueDays();
      } else {
        setOverdueDays((Integer)value);
      }
      break;

    case UN_BALANCE_AMT:
      if (value == null) {
        unsetUnBalanceAmt();
      } else {
        setUnBalanceAmt((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUM:
      return getProjectNum();

    case LIMIT_DATE:
      return getLimitDate();

    case REF_PID:
      return Integer.valueOf(getRefPid());

    case S_TYPE:
      return Integer.valueOf(getSType());

    case ITEM_NAME:
      return getItemName();

    case FINANCE_TYPE:
      return Integer.valueOf(getFinanceType());

    case TOTAL_AMT:
      return Double.valueOf(getTotalAmt());

    case BALANCE_AMT:
      return Double.valueOf(getBalanceAmt());

    case REMAINING_AMT:
      return Double.valueOf(getRemainingAmt());

    case OVERDUE_DAYS:
      return Integer.valueOf(getOverdueDays());

    case UN_BALANCE_AMT:
      return Double.valueOf(getUnBalanceAmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUM:
      return isSetProjectNum();
    case LIMIT_DATE:
      return isSetLimitDate();
    case REF_PID:
      return isSetRefPid();
    case S_TYPE:
      return isSetSType();
    case ITEM_NAME:
      return isSetItemName();
    case FINANCE_TYPE:
      return isSetFinanceType();
    case TOTAL_AMT:
      return isSetTotalAmt();
    case BALANCE_AMT:
      return isSetBalanceAmt();
    case REMAINING_AMT:
      return isSetRemainingAmt();
    case OVERDUE_DAYS:
      return isSetOverdueDays();
    case UN_BALANCE_AMT:
      return isSetUnBalanceAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchRepaymentItem)
      return this.equals((BatchRepaymentItem)that);
    return false;
  }

  public boolean equals(BatchRepaymentItem that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_limitDate = true && this.isSetLimitDate();
    boolean that_present_limitDate = true && that.isSetLimitDate();
    if (this_present_limitDate || that_present_limitDate) {
      if (!(this_present_limitDate && that_present_limitDate))
        return false;
      if (!this.limitDate.equals(that.limitDate))
        return false;
    }

    boolean this_present_refPid = true;
    boolean that_present_refPid = true;
    if (this_present_refPid || that_present_refPid) {
      if (!(this_present_refPid && that_present_refPid))
        return false;
      if (this.refPid != that.refPid)
        return false;
    }

    boolean this_present_sType = true;
    boolean that_present_sType = true;
    if (this_present_sType || that_present_sType) {
      if (!(this_present_sType && that_present_sType))
        return false;
      if (this.sType != that.sType)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_financeType = true;
    boolean that_present_financeType = true;
    if (this_present_financeType || that_present_financeType) {
      if (!(this_present_financeType && that_present_financeType))
        return false;
      if (this.financeType != that.financeType)
        return false;
    }

    boolean this_present_totalAmt = true;
    boolean that_present_totalAmt = true;
    if (this_present_totalAmt || that_present_totalAmt) {
      if (!(this_present_totalAmt && that_present_totalAmt))
        return false;
      if (this.totalAmt != that.totalAmt)
        return false;
    }

    boolean this_present_balanceAmt = true;
    boolean that_present_balanceAmt = true;
    if (this_present_balanceAmt || that_present_balanceAmt) {
      if (!(this_present_balanceAmt && that_present_balanceAmt))
        return false;
      if (this.balanceAmt != that.balanceAmt)
        return false;
    }

    boolean this_present_remainingAmt = true;
    boolean that_present_remainingAmt = true;
    if (this_present_remainingAmt || that_present_remainingAmt) {
      if (!(this_present_remainingAmt && that_present_remainingAmt))
        return false;
      if (this.remainingAmt != that.remainingAmt)
        return false;
    }

    boolean this_present_overdueDays = true;
    boolean that_present_overdueDays = true;
    if (this_present_overdueDays || that_present_overdueDays) {
      if (!(this_present_overdueDays && that_present_overdueDays))
        return false;
      if (this.overdueDays != that.overdueDays)
        return false;
    }

    boolean this_present_unBalanceAmt = true;
    boolean that_present_unBalanceAmt = true;
    if (this_present_unBalanceAmt || that_present_unBalanceAmt) {
      if (!(this_present_unBalanceAmt && that_present_unBalanceAmt))
        return false;
      if (this.unBalanceAmt != that.unBalanceAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_limitDate = true && (isSetLimitDate());
    list.add(present_limitDate);
    if (present_limitDate)
      list.add(limitDate);

    boolean present_refPid = true;
    list.add(present_refPid);
    if (present_refPid)
      list.add(refPid);

    boolean present_sType = true;
    list.add(present_sType);
    if (present_sType)
      list.add(sType);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_financeType = true;
    list.add(present_financeType);
    if (present_financeType)
      list.add(financeType);

    boolean present_totalAmt = true;
    list.add(present_totalAmt);
    if (present_totalAmt)
      list.add(totalAmt);

    boolean present_balanceAmt = true;
    list.add(present_balanceAmt);
    if (present_balanceAmt)
      list.add(balanceAmt);

    boolean present_remainingAmt = true;
    list.add(present_remainingAmt);
    if (present_remainingAmt)
      list.add(remainingAmt);

    boolean present_overdueDays = true;
    list.add(present_overdueDays);
    if (present_overdueDays)
      list.add(overdueDays);

    boolean present_unBalanceAmt = true;
    list.add(present_unBalanceAmt);
    if (present_unBalanceAmt)
      list.add(unBalanceAmt);

    return list.hashCode();
  }

  @Override
  public int compareTo(BatchRepaymentItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitDate()).compareTo(other.isSetLimitDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitDate, other.limitDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefPid()).compareTo(other.isSetRefPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refPid, other.refPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSType()).compareTo(other.isSetSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sType, other.sType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinanceType()).compareTo(other.isSetFinanceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinanceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeType, other.financeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmt()).compareTo(other.isSetTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmt, other.totalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAmt()).compareTo(other.isSetBalanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceAmt, other.balanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingAmt()).compareTo(other.isSetRemainingAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingAmt, other.remainingAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDays()).compareTo(other.isSetOverdueDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDays, other.overdueDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnBalanceAmt()).compareTo(other.isSetUnBalanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnBalanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unBalanceAmt, other.unBalanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchRepaymentItem(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitDate:");
    if (this.limitDate == null) {
      sb.append("null");
    } else {
      sb.append(this.limitDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refPid:");
    sb.append(this.refPid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sType:");
    sb.append(this.sType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("financeType:");
    sb.append(this.financeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmt:");
    sb.append(this.totalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceAmt:");
    sb.append(this.balanceAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingAmt:");
    sb.append(this.remainingAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDays:");
    sb.append(this.overdueDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unBalanceAmt:");
    sb.append(this.unBalanceAmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchRepaymentItemStandardSchemeFactory implements SchemeFactory {
    public BatchRepaymentItemStandardScheme getScheme() {
      return new BatchRepaymentItemStandardScheme();
    }
  }

  private static class BatchRepaymentItemStandardScheme extends StandardScheme<BatchRepaymentItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchRepaymentItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limitDate = iprot.readString();
              struct.setLimitDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REF_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refPid = iprot.readI32();
              struct.setRefPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // S_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sType = iprot.readI32();
              struct.setSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FINANCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.financeType = iprot.readI32();
              struct.setFinanceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmt = iprot.readDouble();
              struct.setTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BALANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balanceAmt = iprot.readDouble();
              struct.setBalanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMAINING_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.remainingAmt = iprot.readDouble();
              struct.setRemainingAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OVERDUE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDays = iprot.readI32();
              struct.setOverdueDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UN_BALANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unBalanceAmt = iprot.readDouble();
              struct.setUnBalanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchRepaymentItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      if (struct.limitDate != null) {
        oprot.writeFieldBegin(LIMIT_DATE_FIELD_DESC);
        oprot.writeString(struct.limitDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_PID_FIELD_DESC);
      oprot.writeI32(struct.refPid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_TYPE_FIELD_DESC);
      oprot.writeI32(struct.sType);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINANCE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.financeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.balanceAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAINING_AMT_FIELD_DESC);
      oprot.writeDouble(struct.remainingAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.overdueDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_BALANCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.unBalanceAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchRepaymentItemTupleSchemeFactory implements SchemeFactory {
    public BatchRepaymentItemTupleScheme getScheme() {
      return new BatchRepaymentItemTupleScheme();
    }
  }

  private static class BatchRepaymentItemTupleScheme extends TupleScheme<BatchRepaymentItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchRepaymentItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(2);
      }
      if (struct.isSetLimitDate()) {
        optionals.set(3);
      }
      if (struct.isSetRefPid()) {
        optionals.set(4);
      }
      if (struct.isSetSType()) {
        optionals.set(5);
      }
      if (struct.isSetItemName()) {
        optionals.set(6);
      }
      if (struct.isSetFinanceType()) {
        optionals.set(7);
      }
      if (struct.isSetTotalAmt()) {
        optionals.set(8);
      }
      if (struct.isSetBalanceAmt()) {
        optionals.set(9);
      }
      if (struct.isSetRemainingAmt()) {
        optionals.set(10);
      }
      if (struct.isSetOverdueDays()) {
        optionals.set(11);
      }
      if (struct.isSetUnBalanceAmt()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetLimitDate()) {
        oprot.writeString(struct.limitDate);
      }
      if (struct.isSetRefPid()) {
        oprot.writeI32(struct.refPid);
      }
      if (struct.isSetSType()) {
        oprot.writeI32(struct.sType);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetFinanceType()) {
        oprot.writeI32(struct.financeType);
      }
      if (struct.isSetTotalAmt()) {
        oprot.writeDouble(struct.totalAmt);
      }
      if (struct.isSetBalanceAmt()) {
        oprot.writeDouble(struct.balanceAmt);
      }
      if (struct.isSetRemainingAmt()) {
        oprot.writeDouble(struct.remainingAmt);
      }
      if (struct.isSetOverdueDays()) {
        oprot.writeI32(struct.overdueDays);
      }
      if (struct.isSetUnBalanceAmt()) {
        oprot.writeDouble(struct.unBalanceAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchRepaymentItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitDate = iprot.readString();
        struct.setLimitDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refPid = iprot.readI32();
        struct.setRefPidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sType = iprot.readI32();
        struct.setSTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.financeType = iprot.readI32();
        struct.setFinanceTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalAmt = iprot.readDouble();
        struct.setTotalAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.balanceAmt = iprot.readDouble();
        struct.setBalanceAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remainingAmt = iprot.readDouble();
        struct.setRemainingAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.overdueDays = iprot.readI32();
        struct.setOverdueDaysIsSet(true);
      }
      if (incoming.get(12)) {
        struct.unBalanceAmt = iprot.readDouble();
        struct.setUnBalanceAmtIsSet(true);
      }
    }
  }

}


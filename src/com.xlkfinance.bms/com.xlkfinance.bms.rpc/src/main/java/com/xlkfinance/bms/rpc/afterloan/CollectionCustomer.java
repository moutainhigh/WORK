/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class CollectionCustomer implements org.apache.thrift.TBase<CollectionCustomer, CollectionCustomer._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionCustomer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionCustomer");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECIPIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("recipient", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POSTAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("postalCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loadId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionCustomerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionCustomerTupleSchemeFactory());
  }

  public int projectId; // required
  public int acctId; // required
  public String acctName; // required
  public String telephone; // required
  public String email; // required
  public String recipient; // required
  public String address; // required
  public String postalCode; // required
  public int loadId; // required
  public int acctType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    ACCT_ID((short)2, "acctId"),
    ACCT_NAME((short)3, "acctName"),
    TELEPHONE((short)4, "telephone"),
    EMAIL((short)5, "email"),
    RECIPIENT((short)6, "recipient"),
    ADDRESS((short)7, "address"),
    POSTAL_CODE((short)8, "postalCode"),
    LOAD_ID((short)9, "loadId"),
    ACCT_TYPE((short)10, "acctType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // ACCT_NAME
          return ACCT_NAME;
        case 4: // TELEPHONE
          return TELEPHONE;
        case 5: // EMAIL
          return EMAIL;
        case 6: // RECIPIENT
          return RECIPIENT;
        case 7: // ADDRESS
          return ADDRESS;
        case 8: // POSTAL_CODE
          return POSTAL_CODE;
        case 9: // LOAD_ID
          return LOAD_ID;
        case 10: // ACCT_TYPE
          return ACCT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __LOADID_ISSET_ID = 2;
  private static final int __ACCTTYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIPIENT, new org.apache.thrift.meta_data.FieldMetaData("recipient", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSTAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("postalCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("loadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionCustomer.class, metaDataMap);
  }

  public CollectionCustomer() {
  }

  public CollectionCustomer(
    int projectId,
    int acctId,
    String acctName,
    String telephone,
    String email,
    String recipient,
    String address,
    String postalCode,
    int loadId,
    int acctType)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.acctName = acctName;
    this.telephone = telephone;
    this.email = email;
    this.recipient = recipient;
    this.address = address;
    this.postalCode = postalCode;
    this.loadId = loadId;
    setLoadIdIsSet(true);
    this.acctType = acctType;
    setAcctTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionCustomer(CollectionCustomer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    this.acctId = other.acctId;
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetRecipient()) {
      this.recipient = other.recipient;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPostalCode()) {
      this.postalCode = other.postalCode;
    }
    this.loadId = other.loadId;
    this.acctType = other.acctType;
  }

  public CollectionCustomer deepCopy() {
    return new CollectionCustomer(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.acctName = null;
    this.telephone = null;
    this.email = null;
    this.recipient = null;
    this.address = null;
    this.postalCode = null;
    setLoadIdIsSet(false);
    this.loadId = 0;
    setAcctTypeIsSet(false);
    this.acctType = 0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectionCustomer setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CollectionCustomer setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public String getAcctName() {
    return this.acctName;
  }

  public CollectionCustomer setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CollectionCustomer setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public CollectionCustomer setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getRecipient() {
    return this.recipient;
  }

  public CollectionCustomer setRecipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

  public void unsetRecipient() {
    this.recipient = null;
  }

  /** Returns true if field recipient is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipient() {
    return this.recipient != null;
  }

  public void setRecipientIsSet(boolean value) {
    if (!value) {
      this.recipient = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public CollectionCustomer setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPostalCode() {
    return this.postalCode;
  }

  public CollectionCustomer setPostalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  public void unsetPostalCode() {
    this.postalCode = null;
  }

  /** Returns true if field postalCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPostalCode() {
    return this.postalCode != null;
  }

  public void setPostalCodeIsSet(boolean value) {
    if (!value) {
      this.postalCode = null;
    }
  }

  public int getLoadId() {
    return this.loadId;
  }

  public CollectionCustomer setLoadId(int loadId) {
    this.loadId = loadId;
    setLoadIdIsSet(true);
    return this;
  }

  public void unsetLoadId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOADID_ISSET_ID);
  }

  /** Returns true if field loadId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOADID_ISSET_ID);
  }

  public void setLoadIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOADID_ISSET_ID, value);
  }

  public int getAcctType() {
    return this.acctType;
  }

  public CollectionCustomer setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case RECIPIENT:
      if (value == null) {
        unsetRecipient();
      } else {
        setRecipient((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case POSTAL_CODE:
      if (value == null) {
        unsetPostalCode();
      } else {
        setPostalCode((String)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoadId();
      } else {
        setLoadId((Integer)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case ACCT_NAME:
      return getAcctName();

    case TELEPHONE:
      return getTelephone();

    case EMAIL:
      return getEmail();

    case RECIPIENT:
      return getRecipient();

    case ADDRESS:
      return getAddress();

    case POSTAL_CODE:
      return getPostalCode();

    case LOAD_ID:
      return Integer.valueOf(getLoadId());

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_ID:
      return isSetAcctId();
    case ACCT_NAME:
      return isSetAcctName();
    case TELEPHONE:
      return isSetTelephone();
    case EMAIL:
      return isSetEmail();
    case RECIPIENT:
      return isSetRecipient();
    case ADDRESS:
      return isSetAddress();
    case POSTAL_CODE:
      return isSetPostalCode();
    case LOAD_ID:
      return isSetLoadId();
    case ACCT_TYPE:
      return isSetAcctType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionCustomer)
      return this.equals((CollectionCustomer)that);
    return false;
  }

  public boolean equals(CollectionCustomer that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_recipient = true && this.isSetRecipient();
    boolean that_present_recipient = true && that.isSetRecipient();
    if (this_present_recipient || that_present_recipient) {
      if (!(this_present_recipient && that_present_recipient))
        return false;
      if (!this.recipient.equals(that.recipient))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_postalCode = true && this.isSetPostalCode();
    boolean that_present_postalCode = true && that.isSetPostalCode();
    if (this_present_postalCode || that_present_postalCode) {
      if (!(this_present_postalCode && that_present_postalCode))
        return false;
      if (!this.postalCode.equals(that.postalCode))
        return false;
    }

    boolean this_present_loadId = true;
    boolean that_present_loadId = true;
    if (this_present_loadId || that_present_loadId) {
      if (!(this_present_loadId && that_present_loadId))
        return false;
      if (this.loadId != that.loadId)
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_recipient = true && (isSetRecipient());
    list.add(present_recipient);
    if (present_recipient)
      list.add(recipient);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_postalCode = true && (isSetPostalCode());
    list.add(present_postalCode);
    if (present_postalCode)
      list.add(postalCode);

    boolean present_loadId = true;
    list.add(present_loadId);
    if (present_loadId)
      list.add(loadId);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectionCustomer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipient()).compareTo(other.isSetRecipient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipient, other.recipient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostalCode()).compareTo(other.isSetPostalCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostalCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postalCode, other.postalCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoadId()).compareTo(other.isSetLoadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadId, other.loadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionCustomer(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recipient:");
    if (this.recipient == null) {
      sb.append("null");
    } else {
      sb.append(this.recipient);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postalCode:");
    if (this.postalCode == null) {
      sb.append("null");
    } else {
      sb.append(this.postalCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loadId:");
    sb.append(this.loadId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionCustomerStandardSchemeFactory implements SchemeFactory {
    public CollectionCustomerStandardScheme getScheme() {
      return new CollectionCustomerStandardScheme();
    }
  }

  private static class CollectionCustomerStandardScheme extends StandardScheme<CollectionCustomer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionCustomer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECIPIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recipient = iprot.readString();
              struct.setRecipientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSTAL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postalCode = iprot.readString();
              struct.setPostalCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loadId = iprot.readI32();
              struct.setLoadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionCustomer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.recipient != null) {
        oprot.writeFieldBegin(RECIPIENT_FIELD_DESC);
        oprot.writeString(struct.recipient);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.postalCode != null) {
        oprot.writeFieldBegin(POSTAL_CODE_FIELD_DESC);
        oprot.writeString(struct.postalCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
      oprot.writeI32(struct.loadId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionCustomerTupleSchemeFactory implements SchemeFactory {
    public CollectionCustomerTupleScheme getScheme() {
      return new CollectionCustomerTupleScheme();
    }
  }

  private static class CollectionCustomerTupleScheme extends TupleScheme<CollectionCustomer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionCustomer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetAcctName()) {
        optionals.set(2);
      }
      if (struct.isSetTelephone()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      if (struct.isSetRecipient()) {
        optionals.set(5);
      }
      if (struct.isSetAddress()) {
        optionals.set(6);
      }
      if (struct.isSetPostalCode()) {
        optionals.set(7);
      }
      if (struct.isSetLoadId()) {
        optionals.set(8);
      }
      if (struct.isSetAcctType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetRecipient()) {
        oprot.writeString(struct.recipient);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetPostalCode()) {
        oprot.writeString(struct.postalCode);
      }
      if (struct.isSetLoadId()) {
        oprot.writeI32(struct.loadId);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionCustomer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recipient = iprot.readString();
        struct.setRecipientIsSet(true);
      }
      if (incoming.get(6)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(7)) {
        struct.postalCode = iprot.readString();
        struct.setPostalCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loadId = iprot.readI32();
        struct.setLoadIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
    }
  }

}


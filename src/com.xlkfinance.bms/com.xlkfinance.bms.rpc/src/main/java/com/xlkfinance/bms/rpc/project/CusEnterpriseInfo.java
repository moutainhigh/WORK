/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class CusEnterpriseInfo implements org.apache.thrift.TBase<CusEnterpriseInfo, CusEnterpriseInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CusEnterpriseInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEnterpriseInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENTERPRISE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("enterpriseName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEGAL_REPRESENTATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("legalRepresentative", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FOUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foundDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REG_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("regMoney", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STOCKHOLDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stockholderType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STAFF_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("staffNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATION_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationScope", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EMPLOY_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("employSituation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ENTERPRISE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("enterpriseType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEnterpriseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEnterpriseInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int acctId; // required
  public String enterpriseName; // required
  public String legalRepresentative; // required
  public String foundDate; // required
  public String regMoney; // required
  public String stockholderType; // required
  public int staffNum; // required
  public String operationScope; // required
  public String employSituation; // required
  public String enterpriseType; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    ACCT_ID((short)3, "acctId"),
    ENTERPRISE_NAME((short)4, "enterpriseName"),
    LEGAL_REPRESENTATIVE((short)5, "legalRepresentative"),
    FOUND_DATE((short)6, "foundDate"),
    REG_MONEY((short)7, "regMoney"),
    STOCKHOLDER_TYPE((short)8, "stockholderType"),
    STAFF_NUM((short)9, "staffNum"),
    OPERATION_SCOPE((short)10, "operationScope"),
    EMPLOY_SITUATION((short)11, "employSituation"),
    ENTERPRISE_TYPE((short)12, "enterpriseType"),
    CREATE_DATE((short)13, "createDate"),
    CREATER_ID((short)14, "createrId"),
    UPDATE_ID((short)15, "updateId"),
    UPDATE_DATE((short)16, "updateDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // ACCT_ID
          return ACCT_ID;
        case 4: // ENTERPRISE_NAME
          return ENTERPRISE_NAME;
        case 5: // LEGAL_REPRESENTATIVE
          return LEGAL_REPRESENTATIVE;
        case 6: // FOUND_DATE
          return FOUND_DATE;
        case 7: // REG_MONEY
          return REG_MONEY;
        case 8: // STOCKHOLDER_TYPE
          return STOCKHOLDER_TYPE;
        case 9: // STAFF_NUM
          return STAFF_NUM;
        case 10: // OPERATION_SCOPE
          return OPERATION_SCOPE;
        case 11: // EMPLOY_SITUATION
          return EMPLOY_SITUATION;
        case 12: // ENTERPRISE_TYPE
          return ENTERPRISE_TYPE;
        case 13: // CREATE_DATE
          return CREATE_DATE;
        case 14: // CREATER_ID
          return CREATER_ID;
        case 15: // UPDATE_ID
          return UPDATE_ID;
        case 16: // UPDATE_DATE
          return UPDATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __ACCTID_ISSET_ID = 2;
  private static final int __STAFFNUM_ISSET_ID = 3;
  private static final int __CREATERID_ISSET_ID = 4;
  private static final int __UPDATEID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTERPRISE_NAME, new org.apache.thrift.meta_data.FieldMetaData("enterpriseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_REPRESENTATIVE, new org.apache.thrift.meta_data.FieldMetaData("legalRepresentative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("foundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_MONEY, new org.apache.thrift.meta_data.FieldMetaData("regMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCKHOLDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stockholderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAFF_NUM, new org.apache.thrift.meta_data.FieldMetaData("staffNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATION_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("operationScope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOY_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("employSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTERPRISE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("enterpriseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEnterpriseInfo.class, metaDataMap);
  }

  public CusEnterpriseInfo() {
  }

  public CusEnterpriseInfo(
    int pid,
    int projectId,
    int acctId,
    String enterpriseName,
    String legalRepresentative,
    String foundDate,
    String regMoney,
    String stockholderType,
    int staffNum,
    String operationScope,
    String employSituation,
    String enterpriseType,
    String createDate,
    int createrId,
    int updateId,
    String updateDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.enterpriseName = enterpriseName;
    this.legalRepresentative = legalRepresentative;
    this.foundDate = foundDate;
    this.regMoney = regMoney;
    this.stockholderType = stockholderType;
    this.staffNum = staffNum;
    setStaffNumIsSet(true);
    this.operationScope = operationScope;
    this.employSituation = employSituation;
    this.enterpriseType = enterpriseType;
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEnterpriseInfo(CusEnterpriseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.acctId = other.acctId;
    if (other.isSetEnterpriseName()) {
      this.enterpriseName = other.enterpriseName;
    }
    if (other.isSetLegalRepresentative()) {
      this.legalRepresentative = other.legalRepresentative;
    }
    if (other.isSetFoundDate()) {
      this.foundDate = other.foundDate;
    }
    if (other.isSetRegMoney()) {
      this.regMoney = other.regMoney;
    }
    if (other.isSetStockholderType()) {
      this.stockholderType = other.stockholderType;
    }
    this.staffNum = other.staffNum;
    if (other.isSetOperationScope()) {
      this.operationScope = other.operationScope;
    }
    if (other.isSetEmploySituation()) {
      this.employSituation = other.employSituation;
    }
    if (other.isSetEnterpriseType()) {
      this.enterpriseType = other.enterpriseType;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
  }

  public CusEnterpriseInfo deepCopy() {
    return new CusEnterpriseInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.enterpriseName = null;
    this.legalRepresentative = null;
    this.foundDate = null;
    this.regMoney = null;
    this.stockholderType = null;
    setStaffNumIsSet(false);
    this.staffNum = 0;
    this.operationScope = null;
    this.employSituation = null;
    this.enterpriseType = null;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusEnterpriseInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CusEnterpriseInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusEnterpriseInfo setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public String getEnterpriseName() {
    return this.enterpriseName;
  }

  public CusEnterpriseInfo setEnterpriseName(String enterpriseName) {
    this.enterpriseName = enterpriseName;
    return this;
  }

  public void unsetEnterpriseName() {
    this.enterpriseName = null;
  }

  /** Returns true if field enterpriseName is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterpriseName() {
    return this.enterpriseName != null;
  }

  public void setEnterpriseNameIsSet(boolean value) {
    if (!value) {
      this.enterpriseName = null;
    }
  }

  public String getLegalRepresentative() {
    return this.legalRepresentative;
  }

  public CusEnterpriseInfo setLegalRepresentative(String legalRepresentative) {
    this.legalRepresentative = legalRepresentative;
    return this;
  }

  public void unsetLegalRepresentative() {
    this.legalRepresentative = null;
  }

  /** Returns true if field legalRepresentative is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalRepresentative() {
    return this.legalRepresentative != null;
  }

  public void setLegalRepresentativeIsSet(boolean value) {
    if (!value) {
      this.legalRepresentative = null;
    }
  }

  public String getFoundDate() {
    return this.foundDate;
  }

  public CusEnterpriseInfo setFoundDate(String foundDate) {
    this.foundDate = foundDate;
    return this;
  }

  public void unsetFoundDate() {
    this.foundDate = null;
  }

  /** Returns true if field foundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFoundDate() {
    return this.foundDate != null;
  }

  public void setFoundDateIsSet(boolean value) {
    if (!value) {
      this.foundDate = null;
    }
  }

  public String getRegMoney() {
    return this.regMoney;
  }

  public CusEnterpriseInfo setRegMoney(String regMoney) {
    this.regMoney = regMoney;
    return this;
  }

  public void unsetRegMoney() {
    this.regMoney = null;
  }

  /** Returns true if field regMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRegMoney() {
    return this.regMoney != null;
  }

  public void setRegMoneyIsSet(boolean value) {
    if (!value) {
      this.regMoney = null;
    }
  }

  public String getStockholderType() {
    return this.stockholderType;
  }

  public CusEnterpriseInfo setStockholderType(String stockholderType) {
    this.stockholderType = stockholderType;
    return this;
  }

  public void unsetStockholderType() {
    this.stockholderType = null;
  }

  /** Returns true if field stockholderType is set (has been assigned a value) and false otherwise */
  public boolean isSetStockholderType() {
    return this.stockholderType != null;
  }

  public void setStockholderTypeIsSet(boolean value) {
    if (!value) {
      this.stockholderType = null;
    }
  }

  public int getStaffNum() {
    return this.staffNum;
  }

  public CusEnterpriseInfo setStaffNum(int staffNum) {
    this.staffNum = staffNum;
    setStaffNumIsSet(true);
    return this;
  }

  public void unsetStaffNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAFFNUM_ISSET_ID);
  }

  /** Returns true if field staffNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStaffNum() {
    return EncodingUtils.testBit(__isset_bitfield, __STAFFNUM_ISSET_ID);
  }

  public void setStaffNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAFFNUM_ISSET_ID, value);
  }

  public String getOperationScope() {
    return this.operationScope;
  }

  public CusEnterpriseInfo setOperationScope(String operationScope) {
    this.operationScope = operationScope;
    return this;
  }

  public void unsetOperationScope() {
    this.operationScope = null;
  }

  /** Returns true if field operationScope is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationScope() {
    return this.operationScope != null;
  }

  public void setOperationScopeIsSet(boolean value) {
    if (!value) {
      this.operationScope = null;
    }
  }

  public String getEmploySituation() {
    return this.employSituation;
  }

  public CusEnterpriseInfo setEmploySituation(String employSituation) {
    this.employSituation = employSituation;
    return this;
  }

  public void unsetEmploySituation() {
    this.employSituation = null;
  }

  /** Returns true if field employSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetEmploySituation() {
    return this.employSituation != null;
  }

  public void setEmploySituationIsSet(boolean value) {
    if (!value) {
      this.employSituation = null;
    }
  }

  public String getEnterpriseType() {
    return this.enterpriseType;
  }

  public CusEnterpriseInfo setEnterpriseType(String enterpriseType) {
    this.enterpriseType = enterpriseType;
    return this;
  }

  public void unsetEnterpriseType() {
    this.enterpriseType = null;
  }

  /** Returns true if field enterpriseType is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterpriseType() {
    return this.enterpriseType != null;
  }

  public void setEnterpriseTypeIsSet(boolean value) {
    if (!value) {
      this.enterpriseType = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public CusEnterpriseInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CusEnterpriseInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CusEnterpriseInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CusEnterpriseInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case ENTERPRISE_NAME:
      if (value == null) {
        unsetEnterpriseName();
      } else {
        setEnterpriseName((String)value);
      }
      break;

    case LEGAL_REPRESENTATIVE:
      if (value == null) {
        unsetLegalRepresentative();
      } else {
        setLegalRepresentative((String)value);
      }
      break;

    case FOUND_DATE:
      if (value == null) {
        unsetFoundDate();
      } else {
        setFoundDate((String)value);
      }
      break;

    case REG_MONEY:
      if (value == null) {
        unsetRegMoney();
      } else {
        setRegMoney((String)value);
      }
      break;

    case STOCKHOLDER_TYPE:
      if (value == null) {
        unsetStockholderType();
      } else {
        setStockholderType((String)value);
      }
      break;

    case STAFF_NUM:
      if (value == null) {
        unsetStaffNum();
      } else {
        setStaffNum((Integer)value);
      }
      break;

    case OPERATION_SCOPE:
      if (value == null) {
        unsetOperationScope();
      } else {
        setOperationScope((String)value);
      }
      break;

    case EMPLOY_SITUATION:
      if (value == null) {
        unsetEmploySituation();
      } else {
        setEmploySituation((String)value);
      }
      break;

    case ENTERPRISE_TYPE:
      if (value == null) {
        unsetEnterpriseType();
      } else {
        setEnterpriseType((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case ENTERPRISE_NAME:
      return getEnterpriseName();

    case LEGAL_REPRESENTATIVE:
      return getLegalRepresentative();

    case FOUND_DATE:
      return getFoundDate();

    case REG_MONEY:
      return getRegMoney();

    case STOCKHOLDER_TYPE:
      return getStockholderType();

    case STAFF_NUM:
      return Integer.valueOf(getStaffNum());

    case OPERATION_SCOPE:
      return getOperationScope();

    case EMPLOY_SITUATION:
      return getEmploySituation();

    case ENTERPRISE_TYPE:
      return getEnterpriseType();

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_ID:
      return isSetAcctId();
    case ENTERPRISE_NAME:
      return isSetEnterpriseName();
    case LEGAL_REPRESENTATIVE:
      return isSetLegalRepresentative();
    case FOUND_DATE:
      return isSetFoundDate();
    case REG_MONEY:
      return isSetRegMoney();
    case STOCKHOLDER_TYPE:
      return isSetStockholderType();
    case STAFF_NUM:
      return isSetStaffNum();
    case OPERATION_SCOPE:
      return isSetOperationScope();
    case EMPLOY_SITUATION:
      return isSetEmploySituation();
    case ENTERPRISE_TYPE:
      return isSetEnterpriseType();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEnterpriseInfo)
      return this.equals((CusEnterpriseInfo)that);
    return false;
  }

  public boolean equals(CusEnterpriseInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_enterpriseName = true && this.isSetEnterpriseName();
    boolean that_present_enterpriseName = true && that.isSetEnterpriseName();
    if (this_present_enterpriseName || that_present_enterpriseName) {
      if (!(this_present_enterpriseName && that_present_enterpriseName))
        return false;
      if (!this.enterpriseName.equals(that.enterpriseName))
        return false;
    }

    boolean this_present_legalRepresentative = true && this.isSetLegalRepresentative();
    boolean that_present_legalRepresentative = true && that.isSetLegalRepresentative();
    if (this_present_legalRepresentative || that_present_legalRepresentative) {
      if (!(this_present_legalRepresentative && that_present_legalRepresentative))
        return false;
      if (!this.legalRepresentative.equals(that.legalRepresentative))
        return false;
    }

    boolean this_present_foundDate = true && this.isSetFoundDate();
    boolean that_present_foundDate = true && that.isSetFoundDate();
    if (this_present_foundDate || that_present_foundDate) {
      if (!(this_present_foundDate && that_present_foundDate))
        return false;
      if (!this.foundDate.equals(that.foundDate))
        return false;
    }

    boolean this_present_regMoney = true && this.isSetRegMoney();
    boolean that_present_regMoney = true && that.isSetRegMoney();
    if (this_present_regMoney || that_present_regMoney) {
      if (!(this_present_regMoney && that_present_regMoney))
        return false;
      if (!this.regMoney.equals(that.regMoney))
        return false;
    }

    boolean this_present_stockholderType = true && this.isSetStockholderType();
    boolean that_present_stockholderType = true && that.isSetStockholderType();
    if (this_present_stockholderType || that_present_stockholderType) {
      if (!(this_present_stockholderType && that_present_stockholderType))
        return false;
      if (!this.stockholderType.equals(that.stockholderType))
        return false;
    }

    boolean this_present_staffNum = true;
    boolean that_present_staffNum = true;
    if (this_present_staffNum || that_present_staffNum) {
      if (!(this_present_staffNum && that_present_staffNum))
        return false;
      if (this.staffNum != that.staffNum)
        return false;
    }

    boolean this_present_operationScope = true && this.isSetOperationScope();
    boolean that_present_operationScope = true && that.isSetOperationScope();
    if (this_present_operationScope || that_present_operationScope) {
      if (!(this_present_operationScope && that_present_operationScope))
        return false;
      if (!this.operationScope.equals(that.operationScope))
        return false;
    }

    boolean this_present_employSituation = true && this.isSetEmploySituation();
    boolean that_present_employSituation = true && that.isSetEmploySituation();
    if (this_present_employSituation || that_present_employSituation) {
      if (!(this_present_employSituation && that_present_employSituation))
        return false;
      if (!this.employSituation.equals(that.employSituation))
        return false;
    }

    boolean this_present_enterpriseType = true && this.isSetEnterpriseType();
    boolean that_present_enterpriseType = true && that.isSetEnterpriseType();
    if (this_present_enterpriseType || that_present_enterpriseType) {
      if (!(this_present_enterpriseType && that_present_enterpriseType))
        return false;
      if (!this.enterpriseType.equals(that.enterpriseType))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_enterpriseName = true && (isSetEnterpriseName());
    list.add(present_enterpriseName);
    if (present_enterpriseName)
      list.add(enterpriseName);

    boolean present_legalRepresentative = true && (isSetLegalRepresentative());
    list.add(present_legalRepresentative);
    if (present_legalRepresentative)
      list.add(legalRepresentative);

    boolean present_foundDate = true && (isSetFoundDate());
    list.add(present_foundDate);
    if (present_foundDate)
      list.add(foundDate);

    boolean present_regMoney = true && (isSetRegMoney());
    list.add(present_regMoney);
    if (present_regMoney)
      list.add(regMoney);

    boolean present_stockholderType = true && (isSetStockholderType());
    list.add(present_stockholderType);
    if (present_stockholderType)
      list.add(stockholderType);

    boolean present_staffNum = true;
    list.add(present_staffNum);
    if (present_staffNum)
      list.add(staffNum);

    boolean present_operationScope = true && (isSetOperationScope());
    list.add(present_operationScope);
    if (present_operationScope)
      list.add(operationScope);

    boolean present_employSituation = true && (isSetEmploySituation());
    list.add(present_employSituation);
    if (present_employSituation)
      list.add(employSituation);

    boolean present_enterpriseType = true && (isSetEnterpriseType());
    list.add(present_enterpriseType);
    if (present_enterpriseType)
      list.add(enterpriseType);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEnterpriseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterpriseName()).compareTo(other.isSetEnterpriseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterpriseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterpriseName, other.enterpriseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalRepresentative()).compareTo(other.isSetLegalRepresentative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalRepresentative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalRepresentative, other.legalRepresentative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoundDate()).compareTo(other.isSetFoundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foundDate, other.foundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegMoney()).compareTo(other.isSetRegMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regMoney, other.regMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockholderType()).compareTo(other.isSetStockholderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockholderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockholderType, other.stockholderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaffNum()).compareTo(other.isSetStaffNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaffNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staffNum, other.staffNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationScope()).compareTo(other.isSetOperationScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationScope, other.operationScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmploySituation()).compareTo(other.isSetEmploySituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmploySituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employSituation, other.employSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterpriseType()).compareTo(other.isSetEnterpriseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterpriseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterpriseType, other.enterpriseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEnterpriseInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterpriseName:");
    if (this.enterpriseName == null) {
      sb.append("null");
    } else {
      sb.append(this.enterpriseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalRepresentative:");
    if (this.legalRepresentative == null) {
      sb.append("null");
    } else {
      sb.append(this.legalRepresentative);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foundDate:");
    if (this.foundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regMoney:");
    if (this.regMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.regMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockholderType:");
    if (this.stockholderType == null) {
      sb.append("null");
    } else {
      sb.append(this.stockholderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("staffNum:");
    sb.append(this.staffNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationScope:");
    if (this.operationScope == null) {
      sb.append("null");
    } else {
      sb.append(this.operationScope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employSituation:");
    if (this.employSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.employSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterpriseType:");
    if (this.enterpriseType == null) {
      sb.append("null");
    } else {
      sb.append(this.enterpriseType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEnterpriseInfoStandardSchemeFactory implements SchemeFactory {
    public CusEnterpriseInfoStandardScheme getScheme() {
      return new CusEnterpriseInfoStandardScheme();
    }
  }

  private static class CusEnterpriseInfoStandardScheme extends StandardScheme<CusEnterpriseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEnterpriseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTERPRISE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterpriseName = iprot.readString();
              struct.setEnterpriseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEGAL_REPRESENTATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalRepresentative = iprot.readString();
              struct.setLegalRepresentativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foundDate = iprot.readString();
              struct.setFoundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REG_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regMoney = iprot.readString();
              struct.setRegMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STOCKHOLDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockholderType = iprot.readString();
              struct.setStockholderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STAFF_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.staffNum = iprot.readI32();
              struct.setStaffNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATION_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationScope = iprot.readString();
              struct.setOperationScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EMPLOY_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employSituation = iprot.readString();
              struct.setEmploySituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENTERPRISE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterpriseType = iprot.readString();
              struct.setEnterpriseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEnterpriseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.enterpriseName != null) {
        oprot.writeFieldBegin(ENTERPRISE_NAME_FIELD_DESC);
        oprot.writeString(struct.enterpriseName);
        oprot.writeFieldEnd();
      }
      if (struct.legalRepresentative != null) {
        oprot.writeFieldBegin(LEGAL_REPRESENTATIVE_FIELD_DESC);
        oprot.writeString(struct.legalRepresentative);
        oprot.writeFieldEnd();
      }
      if (struct.foundDate != null) {
        oprot.writeFieldBegin(FOUND_DATE_FIELD_DESC);
        oprot.writeString(struct.foundDate);
        oprot.writeFieldEnd();
      }
      if (struct.regMoney != null) {
        oprot.writeFieldBegin(REG_MONEY_FIELD_DESC);
        oprot.writeString(struct.regMoney);
        oprot.writeFieldEnd();
      }
      if (struct.stockholderType != null) {
        oprot.writeFieldBegin(STOCKHOLDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.stockholderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAFF_NUM_FIELD_DESC);
      oprot.writeI32(struct.staffNum);
      oprot.writeFieldEnd();
      if (struct.operationScope != null) {
        oprot.writeFieldBegin(OPERATION_SCOPE_FIELD_DESC);
        oprot.writeString(struct.operationScope);
        oprot.writeFieldEnd();
      }
      if (struct.employSituation != null) {
        oprot.writeFieldBegin(EMPLOY_SITUATION_FIELD_DESC);
        oprot.writeString(struct.employSituation);
        oprot.writeFieldEnd();
      }
      if (struct.enterpriseType != null) {
        oprot.writeFieldBegin(ENTERPRISE_TYPE_FIELD_DESC);
        oprot.writeString(struct.enterpriseType);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEnterpriseInfoTupleSchemeFactory implements SchemeFactory {
    public CusEnterpriseInfoTupleScheme getScheme() {
      return new CusEnterpriseInfoTupleScheme();
    }
  }

  private static class CusEnterpriseInfoTupleScheme extends TupleScheme<CusEnterpriseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEnterpriseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetAcctId()) {
        optionals.set(2);
      }
      if (struct.isSetEnterpriseName()) {
        optionals.set(3);
      }
      if (struct.isSetLegalRepresentative()) {
        optionals.set(4);
      }
      if (struct.isSetFoundDate()) {
        optionals.set(5);
      }
      if (struct.isSetRegMoney()) {
        optionals.set(6);
      }
      if (struct.isSetStockholderType()) {
        optionals.set(7);
      }
      if (struct.isSetStaffNum()) {
        optionals.set(8);
      }
      if (struct.isSetOperationScope()) {
        optionals.set(9);
      }
      if (struct.isSetEmploySituation()) {
        optionals.set(10);
      }
      if (struct.isSetEnterpriseType()) {
        optionals.set(11);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(12);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(13);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetEnterpriseName()) {
        oprot.writeString(struct.enterpriseName);
      }
      if (struct.isSetLegalRepresentative()) {
        oprot.writeString(struct.legalRepresentative);
      }
      if (struct.isSetFoundDate()) {
        oprot.writeString(struct.foundDate);
      }
      if (struct.isSetRegMoney()) {
        oprot.writeString(struct.regMoney);
      }
      if (struct.isSetStockholderType()) {
        oprot.writeString(struct.stockholderType);
      }
      if (struct.isSetStaffNum()) {
        oprot.writeI32(struct.staffNum);
      }
      if (struct.isSetOperationScope()) {
        oprot.writeString(struct.operationScope);
      }
      if (struct.isSetEmploySituation()) {
        oprot.writeString(struct.employSituation);
      }
      if (struct.isSetEnterpriseType()) {
        oprot.writeString(struct.enterpriseType);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEnterpriseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enterpriseName = iprot.readString();
        struct.setEnterpriseNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legalRepresentative = iprot.readString();
        struct.setLegalRepresentativeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.foundDate = iprot.readString();
        struct.setFoundDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regMoney = iprot.readString();
        struct.setRegMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stockholderType = iprot.readString();
        struct.setStockholderTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.staffNum = iprot.readI32();
        struct.setStaffNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operationScope = iprot.readString();
        struct.setOperationScopeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.employSituation = iprot.readString();
        struct.setEmploySituationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.enterpriseType = iprot.readString();
        struct.setEnterpriseTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
    }
  }

}


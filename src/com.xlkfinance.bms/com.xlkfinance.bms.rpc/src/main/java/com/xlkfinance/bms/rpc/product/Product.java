/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.product;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-17")
public class Product implements org.apache.thrift.TBase<Product, Product._Fields>, java.io.Serializable, Cloneable, Comparable<Product> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Product");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("productNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTerm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MANAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("manageRate", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OTHER_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("otherRate", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField MARKET_AVG_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("marketAvgInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FLOATING_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("floatingRate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("productTypeText", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField ACT_PRODUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("actProducts", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField CITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cityIds", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField LOAN_WORK_PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanWorkProcessId", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BIZ_HANDLE_WORK_PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleWorkProcessId", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PRODUCT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("productSource", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeType", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField IS_FORECLOSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("isForeclosure", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductTupleSchemeFactory());
  }

  public int pid; // required
  public int createrId; // required
  public int productType; // required
  public String productName; // required
  public int cityId; // required
  public String productNumber; // required
  public String loanMoney; // required
  public String loanTerm; // required
  public double yearLoanInterest; // required
  public double monthLoanInterest; // required
  public double manageRate; // required
  public double otherRate; // required
  public double marketAvgInterest; // required
  public double floatingRate; // required
  public String createDate; // required
  public String updateDate; // required
  public int status; // required
  public String remark; // required
  public String productTypeText; // required
  public String cityName; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public List<ActProduct> actProducts; // required
  public List<Integer> cityIds; // required
  public String loanWorkProcessId; // required
  public String bizHandleWorkProcessId; // required
  public int productSource; // required
  public int tradeType; // required
  public int isForeclosure; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CREATER_ID((short)2, "createrId"),
    PRODUCT_TYPE((short)3, "productType"),
    PRODUCT_NAME((short)4, "productName"),
    CITY_ID((short)5, "cityId"),
    PRODUCT_NUMBER((short)6, "productNumber"),
    LOAN_MONEY((short)7, "loanMoney"),
    LOAN_TERM((short)8, "loanTerm"),
    YEAR_LOAN_INTEREST((short)9, "yearLoanInterest"),
    MONTH_LOAN_INTEREST((short)10, "monthLoanInterest"),
    MANAGE_RATE((short)11, "manageRate"),
    OTHER_RATE((short)12, "otherRate"),
    MARKET_AVG_INTEREST((short)13, "marketAvgInterest"),
    FLOATING_RATE((short)14, "floatingRate"),
    CREATE_DATE((short)15, "createDate"),
    UPDATE_DATE((short)16, "updateDate"),
    STATUS((short)17, "status"),
    REMARK((short)18, "remark"),
    PRODUCT_TYPE_TEXT((short)19, "productTypeText"),
    CITY_NAME((short)20, "cityName"),
    PAGE((short)21, "page"),
    ROWS((short)22, "rows"),
    USER_IDS((short)23, "userIds"),
    ACT_PRODUCTS((short)24, "actProducts"),
    CITY_IDS((short)25, "cityIds"),
    LOAN_WORK_PROCESS_ID((short)26, "loanWorkProcessId"),
    BIZ_HANDLE_WORK_PROCESS_ID((short)27, "bizHandleWorkProcessId"),
    PRODUCT_SOURCE((short)28, "productSource"),
    TRADE_TYPE((short)29, "tradeType"),
    IS_FORECLOSURE((short)30, "isForeclosure");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CREATER_ID
          return CREATER_ID;
        case 3: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 4: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 5: // CITY_ID
          return CITY_ID;
        case 6: // PRODUCT_NUMBER
          return PRODUCT_NUMBER;
        case 7: // LOAN_MONEY
          return LOAN_MONEY;
        case 8: // LOAN_TERM
          return LOAN_TERM;
        case 9: // YEAR_LOAN_INTEREST
          return YEAR_LOAN_INTEREST;
        case 10: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 11: // MANAGE_RATE
          return MANAGE_RATE;
        case 12: // OTHER_RATE
          return OTHER_RATE;
        case 13: // MARKET_AVG_INTEREST
          return MARKET_AVG_INTEREST;
        case 14: // FLOATING_RATE
          return FLOATING_RATE;
        case 15: // CREATE_DATE
          return CREATE_DATE;
        case 16: // UPDATE_DATE
          return UPDATE_DATE;
        case 17: // STATUS
          return STATUS;
        case 18: // REMARK
          return REMARK;
        case 19: // PRODUCT_TYPE_TEXT
          return PRODUCT_TYPE_TEXT;
        case 20: // CITY_NAME
          return CITY_NAME;
        case 21: // PAGE
          return PAGE;
        case 22: // ROWS
          return ROWS;
        case 23: // USER_IDS
          return USER_IDS;
        case 24: // ACT_PRODUCTS
          return ACT_PRODUCTS;
        case 25: // CITY_IDS
          return CITY_IDS;
        case 26: // LOAN_WORK_PROCESS_ID
          return LOAN_WORK_PROCESS_ID;
        case 27: // BIZ_HANDLE_WORK_PROCESS_ID
          return BIZ_HANDLE_WORK_PROCESS_ID;
        case 28: // PRODUCT_SOURCE
          return PRODUCT_SOURCE;
        case 29: // TRADE_TYPE
          return TRADE_TYPE;
        case 30: // IS_FORECLOSURE
          return IS_FORECLOSURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREATERID_ISSET_ID = 1;
  private static final int __PRODUCTTYPE_ISSET_ID = 2;
  private static final int __CITYID_ISSET_ID = 3;
  private static final int __YEARLOANINTEREST_ISSET_ID = 4;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 5;
  private static final int __MANAGERATE_ISSET_ID = 6;
  private static final int __OTHERRATE_ISSET_ID = 7;
  private static final int __MARKETAVGINTEREST_ISSET_ID = 8;
  private static final int __FLOATINGRATE_ISSET_ID = 9;
  private static final int __STATUS_ISSET_ID = 10;
  private static final int __PAGE_ISSET_ID = 11;
  private static final int __ROWS_ISSET_ID = 12;
  private static final int __PRODUCTSOURCE_ISSET_ID = 13;
  private static final int __TRADETYPE_ISSET_ID = 14;
  private static final int __ISFORECLOSURE_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("productNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_TERM, new org.apache.thrift.meta_data.FieldMetaData("loanTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("yearLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("manageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_RATE, new org.apache.thrift.meta_data.FieldMetaData("otherRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARKET_AVG_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("marketAvgInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLOATING_RATE, new org.apache.thrift.meta_data.FieldMetaData("floatingRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("productTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ACT_PRODUCTS, new org.apache.thrift.meta_data.FieldMetaData("actProducts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ActProduct"))));
    tmpMap.put(_Fields.CITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("cityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LOAN_WORK_PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("loanWorkProcessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_HANDLE_WORK_PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("bizHandleWorkProcessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("productSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FORECLOSURE, new org.apache.thrift.meta_data.FieldMetaData("isForeclosure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Product.class, metaDataMap);
  }

  public Product() {
  }

  public Product(
    int pid,
    int createrId,
    int productType,
    String productName,
    int cityId,
    String productNumber,
    String loanMoney,
    String loanTerm,
    double yearLoanInterest,
    double monthLoanInterest,
    double manageRate,
    double otherRate,
    double marketAvgInterest,
    double floatingRate,
    String createDate,
    String updateDate,
    int status,
    String remark,
    String productTypeText,
    String cityName,
    int page,
    int rows,
    List<Integer> userIds,
    List<ActProduct> actProducts,
    List<Integer> cityIds,
    String loanWorkProcessId,
    String bizHandleWorkProcessId,
    int productSource,
    int tradeType,
    int isForeclosure)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.productName = productName;
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.productNumber = productNumber;
    this.loanMoney = loanMoney;
    this.loanTerm = loanTerm;
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.manageRate = manageRate;
    setManageRateIsSet(true);
    this.otherRate = otherRate;
    setOtherRateIsSet(true);
    this.marketAvgInterest = marketAvgInterest;
    setMarketAvgInterestIsSet(true);
    this.floatingRate = floatingRate;
    setFloatingRateIsSet(true);
    this.createDate = createDate;
    this.updateDate = updateDate;
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.productTypeText = productTypeText;
    this.cityName = cityName;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.actProducts = actProducts;
    this.cityIds = cityIds;
    this.loanWorkProcessId = loanWorkProcessId;
    this.bizHandleWorkProcessId = bizHandleWorkProcessId;
    this.productSource = productSource;
    setProductSourceIsSet(true);
    this.tradeType = tradeType;
    setTradeTypeIsSet(true);
    this.isForeclosure = isForeclosure;
    setIsForeclosureIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Product(Product other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.createrId = other.createrId;
    this.productType = other.productType;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.cityId = other.cityId;
    if (other.isSetProductNumber()) {
      this.productNumber = other.productNumber;
    }
    if (other.isSetLoanMoney()) {
      this.loanMoney = other.loanMoney;
    }
    if (other.isSetLoanTerm()) {
      this.loanTerm = other.loanTerm;
    }
    this.yearLoanInterest = other.yearLoanInterest;
    this.monthLoanInterest = other.monthLoanInterest;
    this.manageRate = other.manageRate;
    this.otherRate = other.otherRate;
    this.marketAvgInterest = other.marketAvgInterest;
    this.floatingRate = other.floatingRate;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetProductTypeText()) {
      this.productTypeText = other.productTypeText;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetActProducts()) {
      List<ActProduct> __this__actProducts = new ArrayList<ActProduct>(other.actProducts.size());
      for (ActProduct other_element : other.actProducts) {
        __this__actProducts.add(other_element);
      }
      this.actProducts = __this__actProducts;
    }
    if (other.isSetCityIds()) {
      List<Integer> __this__cityIds = new ArrayList<Integer>(other.cityIds);
      this.cityIds = __this__cityIds;
    }
    if (other.isSetLoanWorkProcessId()) {
      this.loanWorkProcessId = other.loanWorkProcessId;
    }
    if (other.isSetBizHandleWorkProcessId()) {
      this.bizHandleWorkProcessId = other.bizHandleWorkProcessId;
    }
    this.productSource = other.productSource;
    this.tradeType = other.tradeType;
    this.isForeclosure = other.isForeclosure;
  }

  public Product deepCopy() {
    return new Product(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setProductTypeIsSet(false);
    this.productType = 0;
    this.productName = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    this.productNumber = null;
    this.loanMoney = null;
    this.loanTerm = null;
    setYearLoanInterestIsSet(false);
    this.yearLoanInterest = 0.0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    setManageRateIsSet(false);
    this.manageRate = 0.0;
    setOtherRateIsSet(false);
    this.otherRate = 0.0;
    setMarketAvgInterestIsSet(false);
    this.marketAvgInterest = 0.0;
    setFloatingRateIsSet(false);
    this.floatingRate = 0.0;
    this.createDate = null;
    this.updateDate = null;
    setStatusIsSet(false);
    this.status = 0;
    this.remark = null;
    this.productTypeText = null;
    this.cityName = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.userIds = null;
    this.actProducts = null;
    this.cityIds = null;
    this.loanWorkProcessId = null;
    this.bizHandleWorkProcessId = null;
    setProductSourceIsSet(false);
    this.productSource = 0;
    setTradeTypeIsSet(false);
    this.tradeType = 0;
    setIsForeclosureIsSet(false);
    this.isForeclosure = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public Product setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public Product setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public Product setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public Product setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getCityId() {
    return this.cityId;
  }

  public Product setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);
    return this;
  }

  public void unsetCityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
  }

  public String getProductNumber() {
    return this.productNumber;
  }

  public Product setProductNumber(String productNumber) {
    this.productNumber = productNumber;
    return this;
  }

  public void unsetProductNumber() {
    this.productNumber = null;
  }

  /** Returns true if field productNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProductNumber() {
    return this.productNumber != null;
  }

  public void setProductNumberIsSet(boolean value) {
    if (!value) {
      this.productNumber = null;
    }
  }

  public String getLoanMoney() {
    return this.loanMoney;
  }

  public Product setLoanMoney(String loanMoney) {
    this.loanMoney = loanMoney;
    return this;
  }

  public void unsetLoanMoney() {
    this.loanMoney = null;
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return this.loanMoney != null;
  }

  public void setLoanMoneyIsSet(boolean value) {
    if (!value) {
      this.loanMoney = null;
    }
  }

  public String getLoanTerm() {
    return this.loanTerm;
  }

  public Product setLoanTerm(String loanTerm) {
    this.loanTerm = loanTerm;
    return this;
  }

  public void unsetLoanTerm() {
    this.loanTerm = null;
  }

  /** Returns true if field loanTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTerm() {
    return this.loanTerm != null;
  }

  public void setLoanTermIsSet(boolean value) {
    if (!value) {
      this.loanTerm = null;
    }
  }

  public double getYearLoanInterest() {
    return this.yearLoanInterest;
  }

  public Product setYearLoanInterest(double yearLoanInterest) {
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    return this;
  }

  public void unsetYearLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field yearLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID);
  }

  public void setYearLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public Product setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public double getManageRate() {
    return this.manageRate;
  }

  public Product setManageRate(double manageRate) {
    this.manageRate = manageRate;
    setManageRateIsSet(true);
    return this;
  }

  public void unsetManageRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANAGERATE_ISSET_ID);
  }

  /** Returns true if field manageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetManageRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MANAGERATE_ISSET_ID);
  }

  public void setManageRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANAGERATE_ISSET_ID, value);
  }

  public double getOtherRate() {
    return this.otherRate;
  }

  public Product setOtherRate(double otherRate) {
    this.otherRate = otherRate;
    setOtherRateIsSet(true);
    return this;
  }

  public void unsetOtherRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERRATE_ISSET_ID);
  }

  /** Returns true if field otherRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERRATE_ISSET_ID);
  }

  public void setOtherRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERRATE_ISSET_ID, value);
  }

  public double getMarketAvgInterest() {
    return this.marketAvgInterest;
  }

  public Product setMarketAvgInterest(double marketAvgInterest) {
    this.marketAvgInterest = marketAvgInterest;
    setMarketAvgInterestIsSet(true);
    return this;
  }

  public void unsetMarketAvgInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETAVGINTEREST_ISSET_ID);
  }

  /** Returns true if field marketAvgInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketAvgInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETAVGINTEREST_ISSET_ID);
  }

  public void setMarketAvgInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETAVGINTEREST_ISSET_ID, value);
  }

  public double getFloatingRate() {
    return this.floatingRate;
  }

  public Product setFloatingRate(double floatingRate) {
    this.floatingRate = floatingRate;
    setFloatingRateIsSet(true);
    return this;
  }

  public void unsetFloatingRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOATINGRATE_ISSET_ID);
  }

  /** Returns true if field floatingRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatingRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOATINGRATE_ISSET_ID);
  }

  public void setFloatingRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOATINGRATE_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public Product setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public Product setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Product setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public Product setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getProductTypeText() {
    return this.productTypeText;
  }

  public Product setProductTypeText(String productTypeText) {
    this.productTypeText = productTypeText;
    return this;
  }

  public void unsetProductTypeText() {
    this.productTypeText = null;
  }

  /** Returns true if field productTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetProductTypeText() {
    return this.productTypeText != null;
  }

  public void setProductTypeTextIsSet(boolean value) {
    if (!value) {
      this.productTypeText = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public Product setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public Product setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public Product setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public Product setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getActProductsSize() {
    return (this.actProducts == null) ? 0 : this.actProducts.size();
  }

  public java.util.Iterator<ActProduct> getActProductsIterator() {
    return (this.actProducts == null) ? null : this.actProducts.iterator();
  }

  public void addToActProducts(ActProduct elem) {
    if (this.actProducts == null) {
      this.actProducts = new ArrayList<ActProduct>();
    }
    this.actProducts.add(elem);
  }

  public List<ActProduct> getActProducts() {
    return this.actProducts;
  }

  public Product setActProducts(List<ActProduct> actProducts) {
    this.actProducts = actProducts;
    return this;
  }

  public void unsetActProducts() {
    this.actProducts = null;
  }

  /** Returns true if field actProducts is set (has been assigned a value) and false otherwise */
  public boolean isSetActProducts() {
    return this.actProducts != null;
  }

  public void setActProductsIsSet(boolean value) {
    if (!value) {
      this.actProducts = null;
    }
  }

  public int getCityIdsSize() {
    return (this.cityIds == null) ? 0 : this.cityIds.size();
  }

  public java.util.Iterator<Integer> getCityIdsIterator() {
    return (this.cityIds == null) ? null : this.cityIds.iterator();
  }

  public void addToCityIds(int elem) {
    if (this.cityIds == null) {
      this.cityIds = new ArrayList<Integer>();
    }
    this.cityIds.add(elem);
  }

  public List<Integer> getCityIds() {
    return this.cityIds;
  }

  public Product setCityIds(List<Integer> cityIds) {
    this.cityIds = cityIds;
    return this;
  }

  public void unsetCityIds() {
    this.cityIds = null;
  }

  /** Returns true if field cityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCityIds() {
    return this.cityIds != null;
  }

  public void setCityIdsIsSet(boolean value) {
    if (!value) {
      this.cityIds = null;
    }
  }

  public String getLoanWorkProcessId() {
    return this.loanWorkProcessId;
  }

  public Product setLoanWorkProcessId(String loanWorkProcessId) {
    this.loanWorkProcessId = loanWorkProcessId;
    return this;
  }

  public void unsetLoanWorkProcessId() {
    this.loanWorkProcessId = null;
  }

  /** Returns true if field loanWorkProcessId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanWorkProcessId() {
    return this.loanWorkProcessId != null;
  }

  public void setLoanWorkProcessIdIsSet(boolean value) {
    if (!value) {
      this.loanWorkProcessId = null;
    }
  }

  public String getBizHandleWorkProcessId() {
    return this.bizHandleWorkProcessId;
  }

  public Product setBizHandleWorkProcessId(String bizHandleWorkProcessId) {
    this.bizHandleWorkProcessId = bizHandleWorkProcessId;
    return this;
  }

  public void unsetBizHandleWorkProcessId() {
    this.bizHandleWorkProcessId = null;
  }

  /** Returns true if field bizHandleWorkProcessId is set (has been assigned a value) and false otherwise */
  public boolean isSetBizHandleWorkProcessId() {
    return this.bizHandleWorkProcessId != null;
  }

  public void setBizHandleWorkProcessIdIsSet(boolean value) {
    if (!value) {
      this.bizHandleWorkProcessId = null;
    }
  }

  public int getProductSource() {
    return this.productSource;
  }

  public Product setProductSource(int productSource) {
    this.productSource = productSource;
    setProductSourceIsSet(true);
    return this;
  }

  public void unsetProductSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTSOURCE_ISSET_ID);
  }

  /** Returns true if field productSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProductSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTSOURCE_ISSET_ID);
  }

  public void setProductSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTSOURCE_ISSET_ID, value);
  }

  public int getTradeType() {
    return this.tradeType;
  }

  public Product setTradeType(int tradeType) {
    this.tradeType = tradeType;
    setTradeTypeIsSet(true);
    return this;
  }

  public void unsetTradeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADETYPE_ISSET_ID);
  }

  /** Returns true if field tradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeType() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADETYPE_ISSET_ID);
  }

  public void setTradeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADETYPE_ISSET_ID, value);
  }

  public int getIsForeclosure() {
    return this.isForeclosure;
  }

  public Product setIsForeclosure(int isForeclosure) {
    this.isForeclosure = isForeclosure;
    setIsForeclosureIsSet(true);
    return this;
  }

  public void unsetIsForeclosure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORECLOSURE_ISSET_ID);
  }

  /** Returns true if field isForeclosure is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForeclosure() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORECLOSURE_ISSET_ID);
  }

  public void setIsForeclosureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORECLOSURE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;

    case PRODUCT_NUMBER:
      if (value == null) {
        unsetProductNumber();
      } else {
        setProductNumber((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((String)value);
      }
      break;

    case LOAN_TERM:
      if (value == null) {
        unsetLoanTerm();
      } else {
        setLoanTerm((String)value);
      }
      break;

    case YEAR_LOAN_INTEREST:
      if (value == null) {
        unsetYearLoanInterest();
      } else {
        setYearLoanInterest((Double)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case MANAGE_RATE:
      if (value == null) {
        unsetManageRate();
      } else {
        setManageRate((Double)value);
      }
      break;

    case OTHER_RATE:
      if (value == null) {
        unsetOtherRate();
      } else {
        setOtherRate((Double)value);
      }
      break;

    case MARKET_AVG_INTEREST:
      if (value == null) {
        unsetMarketAvgInterest();
      } else {
        setMarketAvgInterest((Double)value);
      }
      break;

    case FLOATING_RATE:
      if (value == null) {
        unsetFloatingRate();
      } else {
        setFloatingRate((Double)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PRODUCT_TYPE_TEXT:
      if (value == null) {
        unsetProductTypeText();
      } else {
        setProductTypeText((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case ACT_PRODUCTS:
      if (value == null) {
        unsetActProducts();
      } else {
        setActProducts((List<ActProduct>)value);
      }
      break;

    case CITY_IDS:
      if (value == null) {
        unsetCityIds();
      } else {
        setCityIds((List<Integer>)value);
      }
      break;

    case LOAN_WORK_PROCESS_ID:
      if (value == null) {
        unsetLoanWorkProcessId();
      } else {
        setLoanWorkProcessId((String)value);
      }
      break;

    case BIZ_HANDLE_WORK_PROCESS_ID:
      if (value == null) {
        unsetBizHandleWorkProcessId();
      } else {
        setBizHandleWorkProcessId((String)value);
      }
      break;

    case PRODUCT_SOURCE:
      if (value == null) {
        unsetProductSource();
      } else {
        setProductSource((Integer)value);
      }
      break;

    case TRADE_TYPE:
      if (value == null) {
        unsetTradeType();
      } else {
        setTradeType((Integer)value);
      }
      break;

    case IS_FORECLOSURE:
      if (value == null) {
        unsetIsForeclosure();
      } else {
        setIsForeclosure((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case PRODUCT_NAME:
      return getProductName();

    case CITY_ID:
      return Integer.valueOf(getCityId());

    case PRODUCT_NUMBER:
      return getProductNumber();

    case LOAN_MONEY:
      return getLoanMoney();

    case LOAN_TERM:
      return getLoanTerm();

    case YEAR_LOAN_INTEREST:
      return Double.valueOf(getYearLoanInterest());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case MANAGE_RATE:
      return Double.valueOf(getManageRate());

    case OTHER_RATE:
      return Double.valueOf(getOtherRate());

    case MARKET_AVG_INTEREST:
      return Double.valueOf(getMarketAvgInterest());

    case FLOATING_RATE:
      return Double.valueOf(getFloatingRate());

    case CREATE_DATE:
      return getCreateDate();

    case UPDATE_DATE:
      return getUpdateDate();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case PRODUCT_TYPE_TEXT:
      return getProductTypeText();

    case CITY_NAME:
      return getCityName();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case ACT_PRODUCTS:
      return getActProducts();

    case CITY_IDS:
      return getCityIds();

    case LOAN_WORK_PROCESS_ID:
      return getLoanWorkProcessId();

    case BIZ_HANDLE_WORK_PROCESS_ID:
      return getBizHandleWorkProcessId();

    case PRODUCT_SOURCE:
      return Integer.valueOf(getProductSource());

    case TRADE_TYPE:
      return Integer.valueOf(getTradeType());

    case IS_FORECLOSURE:
      return Integer.valueOf(getIsForeclosure());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CREATER_ID:
      return isSetCreaterId();
    case PRODUCT_TYPE:
      return isSetProductType();
    case PRODUCT_NAME:
      return isSetProductName();
    case CITY_ID:
      return isSetCityId();
    case PRODUCT_NUMBER:
      return isSetProductNumber();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case LOAN_TERM:
      return isSetLoanTerm();
    case YEAR_LOAN_INTEREST:
      return isSetYearLoanInterest();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case MANAGE_RATE:
      return isSetManageRate();
    case OTHER_RATE:
      return isSetOtherRate();
    case MARKET_AVG_INTEREST:
      return isSetMarketAvgInterest();
    case FLOATING_RATE:
      return isSetFloatingRate();
    case CREATE_DATE:
      return isSetCreateDate();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case PRODUCT_TYPE_TEXT:
      return isSetProductTypeText();
    case CITY_NAME:
      return isSetCityName();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case ACT_PRODUCTS:
      return isSetActProducts();
    case CITY_IDS:
      return isSetCityIds();
    case LOAN_WORK_PROCESS_ID:
      return isSetLoanWorkProcessId();
    case BIZ_HANDLE_WORK_PROCESS_ID:
      return isSetBizHandleWorkProcessId();
    case PRODUCT_SOURCE:
      return isSetProductSource();
    case TRADE_TYPE:
      return isSetTradeType();
    case IS_FORECLOSURE:
      return isSetIsForeclosure();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Product)
      return this.equals((Product)that);
    return false;
  }

  public boolean equals(Product that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }

    boolean this_present_productNumber = true && this.isSetProductNumber();
    boolean that_present_productNumber = true && that.isSetProductNumber();
    if (this_present_productNumber || that_present_productNumber) {
      if (!(this_present_productNumber && that_present_productNumber))
        return false;
      if (!this.productNumber.equals(that.productNumber))
        return false;
    }

    boolean this_present_loanMoney = true && this.isSetLoanMoney();
    boolean that_present_loanMoney = true && that.isSetLoanMoney();
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (!this.loanMoney.equals(that.loanMoney))
        return false;
    }

    boolean this_present_loanTerm = true && this.isSetLoanTerm();
    boolean that_present_loanTerm = true && that.isSetLoanTerm();
    if (this_present_loanTerm || that_present_loanTerm) {
      if (!(this_present_loanTerm && that_present_loanTerm))
        return false;
      if (!this.loanTerm.equals(that.loanTerm))
        return false;
    }

    boolean this_present_yearLoanInterest = true;
    boolean that_present_yearLoanInterest = true;
    if (this_present_yearLoanInterest || that_present_yearLoanInterest) {
      if (!(this_present_yearLoanInterest && that_present_yearLoanInterest))
        return false;
      if (this.yearLoanInterest != that.yearLoanInterest)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_manageRate = true;
    boolean that_present_manageRate = true;
    if (this_present_manageRate || that_present_manageRate) {
      if (!(this_present_manageRate && that_present_manageRate))
        return false;
      if (this.manageRate != that.manageRate)
        return false;
    }

    boolean this_present_otherRate = true;
    boolean that_present_otherRate = true;
    if (this_present_otherRate || that_present_otherRate) {
      if (!(this_present_otherRate && that_present_otherRate))
        return false;
      if (this.otherRate != that.otherRate)
        return false;
    }

    boolean this_present_marketAvgInterest = true;
    boolean that_present_marketAvgInterest = true;
    if (this_present_marketAvgInterest || that_present_marketAvgInterest) {
      if (!(this_present_marketAvgInterest && that_present_marketAvgInterest))
        return false;
      if (this.marketAvgInterest != that.marketAvgInterest)
        return false;
    }

    boolean this_present_floatingRate = true;
    boolean that_present_floatingRate = true;
    if (this_present_floatingRate || that_present_floatingRate) {
      if (!(this_present_floatingRate && that_present_floatingRate))
        return false;
      if (this.floatingRate != that.floatingRate)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_productTypeText = true && this.isSetProductTypeText();
    boolean that_present_productTypeText = true && that.isSetProductTypeText();
    if (this_present_productTypeText || that_present_productTypeText) {
      if (!(this_present_productTypeText && that_present_productTypeText))
        return false;
      if (!this.productTypeText.equals(that.productTypeText))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_actProducts = true && this.isSetActProducts();
    boolean that_present_actProducts = true && that.isSetActProducts();
    if (this_present_actProducts || that_present_actProducts) {
      if (!(this_present_actProducts && that_present_actProducts))
        return false;
      if (!this.actProducts.equals(that.actProducts))
        return false;
    }

    boolean this_present_cityIds = true && this.isSetCityIds();
    boolean that_present_cityIds = true && that.isSetCityIds();
    if (this_present_cityIds || that_present_cityIds) {
      if (!(this_present_cityIds && that_present_cityIds))
        return false;
      if (!this.cityIds.equals(that.cityIds))
        return false;
    }

    boolean this_present_loanWorkProcessId = true && this.isSetLoanWorkProcessId();
    boolean that_present_loanWorkProcessId = true && that.isSetLoanWorkProcessId();
    if (this_present_loanWorkProcessId || that_present_loanWorkProcessId) {
      if (!(this_present_loanWorkProcessId && that_present_loanWorkProcessId))
        return false;
      if (!this.loanWorkProcessId.equals(that.loanWorkProcessId))
        return false;
    }

    boolean this_present_bizHandleWorkProcessId = true && this.isSetBizHandleWorkProcessId();
    boolean that_present_bizHandleWorkProcessId = true && that.isSetBizHandleWorkProcessId();
    if (this_present_bizHandleWorkProcessId || that_present_bizHandleWorkProcessId) {
      if (!(this_present_bizHandleWorkProcessId && that_present_bizHandleWorkProcessId))
        return false;
      if (!this.bizHandleWorkProcessId.equals(that.bizHandleWorkProcessId))
        return false;
    }

    boolean this_present_productSource = true;
    boolean that_present_productSource = true;
    if (this_present_productSource || that_present_productSource) {
      if (!(this_present_productSource && that_present_productSource))
        return false;
      if (this.productSource != that.productSource)
        return false;
    }

    boolean this_present_tradeType = true;
    boolean that_present_tradeType = true;
    if (this_present_tradeType || that_present_tradeType) {
      if (!(this_present_tradeType && that_present_tradeType))
        return false;
      if (this.tradeType != that.tradeType)
        return false;
    }

    boolean this_present_isForeclosure = true;
    boolean that_present_isForeclosure = true;
    if (this_present_isForeclosure || that_present_isForeclosure) {
      if (!(this_present_isForeclosure && that_present_isForeclosure))
        return false;
      if (this.isForeclosure != that.isForeclosure)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_cityId = true;
    list.add(present_cityId);
    if (present_cityId)
      list.add(cityId);

    boolean present_productNumber = true && (isSetProductNumber());
    list.add(present_productNumber);
    if (present_productNumber)
      list.add(productNumber);

    boolean present_loanMoney = true && (isSetLoanMoney());
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_loanTerm = true && (isSetLoanTerm());
    list.add(present_loanTerm);
    if (present_loanTerm)
      list.add(loanTerm);

    boolean present_yearLoanInterest = true;
    list.add(present_yearLoanInterest);
    if (present_yearLoanInterest)
      list.add(yearLoanInterest);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_manageRate = true;
    list.add(present_manageRate);
    if (present_manageRate)
      list.add(manageRate);

    boolean present_otherRate = true;
    list.add(present_otherRate);
    if (present_otherRate)
      list.add(otherRate);

    boolean present_marketAvgInterest = true;
    list.add(present_marketAvgInterest);
    if (present_marketAvgInterest)
      list.add(marketAvgInterest);

    boolean present_floatingRate = true;
    list.add(present_floatingRate);
    if (present_floatingRate)
      list.add(floatingRate);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_productTypeText = true && (isSetProductTypeText());
    list.add(present_productTypeText);
    if (present_productTypeText)
      list.add(productTypeText);

    boolean present_cityName = true && (isSetCityName());
    list.add(present_cityName);
    if (present_cityName)
      list.add(cityName);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_actProducts = true && (isSetActProducts());
    list.add(present_actProducts);
    if (present_actProducts)
      list.add(actProducts);

    boolean present_cityIds = true && (isSetCityIds());
    list.add(present_cityIds);
    if (present_cityIds)
      list.add(cityIds);

    boolean present_loanWorkProcessId = true && (isSetLoanWorkProcessId());
    list.add(present_loanWorkProcessId);
    if (present_loanWorkProcessId)
      list.add(loanWorkProcessId);

    boolean present_bizHandleWorkProcessId = true && (isSetBizHandleWorkProcessId());
    list.add(present_bizHandleWorkProcessId);
    if (present_bizHandleWorkProcessId)
      list.add(bizHandleWorkProcessId);

    boolean present_productSource = true;
    list.add(present_productSource);
    if (present_productSource)
      list.add(productSource);

    boolean present_tradeType = true;
    list.add(present_tradeType);
    if (present_tradeType)
      list.add(tradeType);

    boolean present_isForeclosure = true;
    list.add(present_isForeclosure);
    if (present_isForeclosure)
      list.add(isForeclosure);

    return list.hashCode();
  }

  @Override
  public int compareTo(Product other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductNumber()).compareTo(other.isSetProductNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNumber, other.productNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTerm()).compareTo(other.isSetLoanTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTerm, other.loanTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanInterest()).compareTo(other.isSetYearLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanInterest, other.yearLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManageRate()).compareTo(other.isSetManageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manageRate, other.manageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherRate()).compareTo(other.isSetOtherRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherRate, other.otherRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketAvgInterest()).compareTo(other.isSetMarketAvgInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketAvgInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketAvgInterest, other.marketAvgInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloatingRate()).compareTo(other.isSetFloatingRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatingRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatingRate, other.floatingRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductTypeText()).compareTo(other.isSetProductTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productTypeText, other.productTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActProducts()).compareTo(other.isSetActProducts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActProducts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actProducts, other.actProducts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityIds()).compareTo(other.isSetCityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityIds, other.cityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanWorkProcessId()).compareTo(other.isSetLoanWorkProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanWorkProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanWorkProcessId, other.loanWorkProcessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizHandleWorkProcessId()).compareTo(other.isSetBizHandleWorkProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizHandleWorkProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleWorkProcessId, other.bizHandleWorkProcessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSource()).compareTo(other.isSetProductSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSource, other.productSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeType()).compareTo(other.isSetTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeType, other.tradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForeclosure()).compareTo(other.isSetIsForeclosure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForeclosure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForeclosure, other.isForeclosure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Product(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productNumber:");
    if (this.productNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.productNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    if (this.loanMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTerm:");
    if (this.loanTerm == null) {
      sb.append("null");
    } else {
      sb.append(this.loanTerm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanInterest:");
    sb.append(this.yearLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("manageRate:");
    sb.append(this.manageRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherRate:");
    sb.append(this.otherRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketAvgInterest:");
    sb.append(this.marketAvgInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("floatingRate:");
    sb.append(this.floatingRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productTypeText:");
    if (this.productTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.productTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actProducts:");
    if (this.actProducts == null) {
      sb.append("null");
    } else {
      sb.append(this.actProducts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityIds:");
    if (this.cityIds == null) {
      sb.append("null");
    } else {
      sb.append(this.cityIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanWorkProcessId:");
    if (this.loanWorkProcessId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanWorkProcessId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizHandleWorkProcessId:");
    if (this.bizHandleWorkProcessId == null) {
      sb.append("null");
    } else {
      sb.append(this.bizHandleWorkProcessId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productSource:");
    sb.append(this.productSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeType:");
    sb.append(this.tradeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isForeclosure:");
    sb.append(this.isForeclosure);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductStandardSchemeFactory implements SchemeFactory {
    public ProductStandardScheme getScheme() {
      return new ProductStandardScheme();
    }
  }

  private static class ProductStandardScheme extends StandardScheme<Product> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Product struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityId = iprot.readI32();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productNumber = iprot.readString();
              struct.setProductNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMoney = iprot.readString();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanTerm = iprot.readString();
              struct.setLoanTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // YEAR_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanInterest = iprot.readDouble();
              struct.setYearLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MANAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.manageRate = iprot.readDouble();
              struct.setManageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OTHER_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherRate = iprot.readDouble();
              struct.setOtherRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MARKET_AVG_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marketAvgInterest = iprot.readDouble();
              struct.setMarketAvgInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLOATING_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.floatingRate = iprot.readDouble();
              struct.setFloatingRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRODUCT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productTypeText = iprot.readString();
              struct.setProductTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ACT_PRODUCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.actProducts = new ArrayList<ActProduct>(_list3.size);
                ActProduct _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new ActProduct();
                  _elem4.read(iprot);
                  struct.actProducts.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setActProductsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.cityIds = new ArrayList<Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.cityIds.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setCityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOAN_WORK_PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanWorkProcessId = iprot.readString();
              struct.setLoanWorkProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BIZ_HANDLE_WORK_PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bizHandleWorkProcessId = iprot.readString();
              struct.setBizHandleWorkProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PRODUCT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productSource = iprot.readI32();
              struct.setProductSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeType = iprot.readI32();
              struct.setTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_FORECLOSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isForeclosure = iprot.readI32();
              struct.setIsForeclosureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Product struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
      oprot.writeI32(struct.cityId);
      oprot.writeFieldEnd();
      if (struct.productNumber != null) {
        oprot.writeFieldBegin(PRODUCT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.productNumber);
        oprot.writeFieldEnd();
      }
      if (struct.loanMoney != null) {
        oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
        oprot.writeString(struct.loanMoney);
        oprot.writeFieldEnd();
      }
      if (struct.loanTerm != null) {
        oprot.writeFieldBegin(LOAN_TERM_FIELD_DESC);
        oprot.writeString(struct.loanTerm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANAGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.manageRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_RATE_FIELD_DESC);
      oprot.writeDouble(struct.otherRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARKET_AVG_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.marketAvgInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOATING_RATE_FIELD_DESC);
      oprot.writeDouble(struct.floatingRate);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.productTypeText != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.productTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter9 : struct.userIds)
          {
            oprot.writeI32(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.actProducts != null) {
        oprot.writeFieldBegin(ACT_PRODUCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actProducts.size()));
          for (ActProduct _iter10 : struct.actProducts)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cityIds != null) {
        oprot.writeFieldBegin(CITY_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cityIds.size()));
          for (int _iter11 : struct.cityIds)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.loanWorkProcessId != null) {
        oprot.writeFieldBegin(LOAN_WORK_PROCESS_ID_FIELD_DESC);
        oprot.writeString(struct.loanWorkProcessId);
        oprot.writeFieldEnd();
      }
      if (struct.bizHandleWorkProcessId != null) {
        oprot.writeFieldBegin(BIZ_HANDLE_WORK_PROCESS_ID_FIELD_DESC);
        oprot.writeString(struct.bizHandleWorkProcessId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.productSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.tradeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FORECLOSURE_FIELD_DESC);
      oprot.writeI32(struct.isForeclosure);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductTupleSchemeFactory implements SchemeFactory {
    public ProductTupleScheme getScheme() {
      return new ProductTupleScheme();
    }
  }

  private static class ProductTupleScheme extends TupleScheme<Product> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Product struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(1);
      }
      if (struct.isSetProductType()) {
        optionals.set(2);
      }
      if (struct.isSetProductName()) {
        optionals.set(3);
      }
      if (struct.isSetCityId()) {
        optionals.set(4);
      }
      if (struct.isSetProductNumber()) {
        optionals.set(5);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(6);
      }
      if (struct.isSetLoanTerm()) {
        optionals.set(7);
      }
      if (struct.isSetYearLoanInterest()) {
        optionals.set(8);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(9);
      }
      if (struct.isSetManageRate()) {
        optionals.set(10);
      }
      if (struct.isSetOtherRate()) {
        optionals.set(11);
      }
      if (struct.isSetMarketAvgInterest()) {
        optionals.set(12);
      }
      if (struct.isSetFloatingRate()) {
        optionals.set(13);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(15);
      }
      if (struct.isSetStatus()) {
        optionals.set(16);
      }
      if (struct.isSetRemark()) {
        optionals.set(17);
      }
      if (struct.isSetProductTypeText()) {
        optionals.set(18);
      }
      if (struct.isSetCityName()) {
        optionals.set(19);
      }
      if (struct.isSetPage()) {
        optionals.set(20);
      }
      if (struct.isSetRows()) {
        optionals.set(21);
      }
      if (struct.isSetUserIds()) {
        optionals.set(22);
      }
      if (struct.isSetActProducts()) {
        optionals.set(23);
      }
      if (struct.isSetCityIds()) {
        optionals.set(24);
      }
      if (struct.isSetLoanWorkProcessId()) {
        optionals.set(25);
      }
      if (struct.isSetBizHandleWorkProcessId()) {
        optionals.set(26);
      }
      if (struct.isSetProductSource()) {
        optionals.set(27);
      }
      if (struct.isSetTradeType()) {
        optionals.set(28);
      }
      if (struct.isSetIsForeclosure()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetCityId()) {
        oprot.writeI32(struct.cityId);
      }
      if (struct.isSetProductNumber()) {
        oprot.writeString(struct.productNumber);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeString(struct.loanMoney);
      }
      if (struct.isSetLoanTerm()) {
        oprot.writeString(struct.loanTerm);
      }
      if (struct.isSetYearLoanInterest()) {
        oprot.writeDouble(struct.yearLoanInterest);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetManageRate()) {
        oprot.writeDouble(struct.manageRate);
      }
      if (struct.isSetOtherRate()) {
        oprot.writeDouble(struct.otherRate);
      }
      if (struct.isSetMarketAvgInterest()) {
        oprot.writeDouble(struct.marketAvgInterest);
      }
      if (struct.isSetFloatingRate()) {
        oprot.writeDouble(struct.floatingRate);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetProductTypeText()) {
        oprot.writeString(struct.productTypeText);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter12 : struct.userIds)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetActProducts()) {
        {
          oprot.writeI32(struct.actProducts.size());
          for (ActProduct _iter13 : struct.actProducts)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetCityIds()) {
        {
          oprot.writeI32(struct.cityIds.size());
          for (int _iter14 : struct.cityIds)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetLoanWorkProcessId()) {
        oprot.writeString(struct.loanWorkProcessId);
      }
      if (struct.isSetBizHandleWorkProcessId()) {
        oprot.writeString(struct.bizHandleWorkProcessId);
      }
      if (struct.isSetProductSource()) {
        oprot.writeI32(struct.productSource);
      }
      if (struct.isSetTradeType()) {
        oprot.writeI32(struct.tradeType);
      }
      if (struct.isSetIsForeclosure()) {
        oprot.writeI32(struct.isForeclosure);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Product struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cityId = iprot.readI32();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productNumber = iprot.readString();
        struct.setProductNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanMoney = iprot.readString();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanTerm = iprot.readString();
        struct.setLoanTermIsSet(true);
      }
      if (incoming.get(8)) {
        struct.yearLoanInterest = iprot.readDouble();
        struct.setYearLoanInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(10)) {
        struct.manageRate = iprot.readDouble();
        struct.setManageRateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.otherRate = iprot.readDouble();
        struct.setOtherRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.marketAvgInterest = iprot.readDouble();
        struct.setMarketAvgInterestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.floatingRate = iprot.readDouble();
        struct.setFloatingRateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(18)) {
        struct.productTypeText = iprot.readString();
        struct.setProductTypeTextIsSet(true);
      }
      if (incoming.get(19)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(21)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list15.size);
          int _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI32();
            struct.userIds.add(_elem16);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actProducts = new ArrayList<ActProduct>(_list18.size);
          ActProduct _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new ActProduct();
            _elem19.read(iprot);
            struct.actProducts.add(_elem19);
          }
        }
        struct.setActProductsIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.cityIds = new ArrayList<Integer>(_list21.size);
          int _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI32();
            struct.cityIds.add(_elem22);
          }
        }
        struct.setCityIdsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.loanWorkProcessId = iprot.readString();
        struct.setLoanWorkProcessIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.bizHandleWorkProcessId = iprot.readString();
        struct.setBizHandleWorkProcessIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.productSource = iprot.readI32();
        struct.setProductSourceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.tradeType = iprot.readI32();
        struct.setTradeTypeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isForeclosure = iprot.readI32();
        struct.setIsForeclosureIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class RepaymentLoanInfo implements org.apache.thrift.TBase<RepaymentLoanInfo, RepaymentLoanInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentLoanInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentLoanInfo");

  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_OUT_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOutDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRepayDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REPAYMENT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFun", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OTHER_COST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCostName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFunVal", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FEES_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("feesProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField FORMAT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("formatAmt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrStr", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFeeStr", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestStr", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FEES_PROPORTION_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("feesProportionStr", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentLoanInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentLoanInfoTupleSchemeFactory());
  }

  public String acctName; // required
  public String contractNo; // required
  public String loanOutDt; // required
  public String loanRepayDt; // required
  public int repayCycle; // required
  public double creditAmt; // required
  public double loanInterest; // required
  public double repaymentAmt; // required
  public int repayFun; // required
  public String otherCostName; // required
  public String repayFunVal; // required
  public double loanMgr; // required
  public double loanOtherFee; // required
  public double feesProportion; // required
  public String formatAmt; // required
  public String loanMgrStr; // required
  public String loanOtherFeeStr; // required
  public String loanInterestStr; // required
  public String feesProportionStr; // required
  public int projectId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCT_NAME((short)1, "acctName"),
    CONTRACT_NO((short)2, "contractNo"),
    LOAN_OUT_DT((short)3, "loanOutDt"),
    LOAN_REPAY_DT((short)4, "loanRepayDt"),
    REPAY_CYCLE((short)5, "repayCycle"),
    CREDIT_AMT((short)6, "creditAmt"),
    LOAN_INTEREST((short)7, "loanInterest"),
    REPAYMENT_AMT((short)8, "repaymentAmt"),
    REPAY_FUN((short)9, "repayFun"),
    OTHER_COST_NAME((short)10, "otherCostName"),
    REPAY_FUN_VAL((short)11, "repayFunVal"),
    LOAN_MGR((short)12, "loanMgr"),
    LOAN_OTHER_FEE((short)13, "loanOtherFee"),
    FEES_PROPORTION((short)14, "feesProportion"),
    FORMAT_AMT((short)15, "formatAmt"),
    LOAN_MGR_STR((short)16, "loanMgrStr"),
    LOAN_OTHER_FEE_STR((short)17, "loanOtherFeeStr"),
    LOAN_INTEREST_STR((short)18, "loanInterestStr"),
    FEES_PROPORTION_STR((short)19, "feesProportionStr"),
    PROJECT_ID((short)20, "projectId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCT_NAME
          return ACCT_NAME;
        case 2: // CONTRACT_NO
          return CONTRACT_NO;
        case 3: // LOAN_OUT_DT
          return LOAN_OUT_DT;
        case 4: // LOAN_REPAY_DT
          return LOAN_REPAY_DT;
        case 5: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 6: // CREDIT_AMT
          return CREDIT_AMT;
        case 7: // LOAN_INTEREST
          return LOAN_INTEREST;
        case 8: // REPAYMENT_AMT
          return REPAYMENT_AMT;
        case 9: // REPAY_FUN
          return REPAY_FUN;
        case 10: // OTHER_COST_NAME
          return OTHER_COST_NAME;
        case 11: // REPAY_FUN_VAL
          return REPAY_FUN_VAL;
        case 12: // LOAN_MGR
          return LOAN_MGR;
        case 13: // LOAN_OTHER_FEE
          return LOAN_OTHER_FEE;
        case 14: // FEES_PROPORTION
          return FEES_PROPORTION;
        case 15: // FORMAT_AMT
          return FORMAT_AMT;
        case 16: // LOAN_MGR_STR
          return LOAN_MGR_STR;
        case 17: // LOAN_OTHER_FEE_STR
          return LOAN_OTHER_FEE_STR;
        case 18: // LOAN_INTEREST_STR
          return LOAN_INTEREST_STR;
        case 19: // FEES_PROPORTION_STR
          return FEES_PROPORTION_STR;
        case 20: // PROJECT_ID
          return PROJECT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPAYCYCLE_ISSET_ID = 0;
  private static final int __CREDITAMT_ISSET_ID = 1;
  private static final int __LOANINTEREST_ISSET_ID = 2;
  private static final int __REPAYMENTAMT_ISSET_ID = 3;
  private static final int __REPAYFUN_ISSET_ID = 4;
  private static final int __LOANMGR_ISSET_ID = 5;
  private static final int __LOANOTHERFEE_ISSET_ID = 6;
  private static final int __FEESPROPORTION_ISSET_ID = 7;
  private static final int __PROJECTID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OUT_DT, new org.apache.thrift.meta_data.FieldMetaData("loanOutDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("loanRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("loanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_AMT, new org.apache.thrift.meta_data.FieldMetaData("repaymentAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_FUN, new org.apache.thrift.meta_data.FieldMetaData("repayFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OTHER_COST_NAME, new org.apache.thrift.meta_data.FieldMetaData("otherCostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_FUN_VAL, new org.apache.thrift.meta_data.FieldMetaData("repayFunVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("loanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEES_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("feesProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORMAT_AMT, new org.apache.thrift.meta_data.FieldMetaData("formatAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MGR_STR, new org.apache.thrift.meta_data.FieldMetaData("loanMgrStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE_STR, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFeeStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_INTEREST_STR, new org.apache.thrift.meta_data.FieldMetaData("loanInterestStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEES_PROPORTION_STR, new org.apache.thrift.meta_data.FieldMetaData("feesProportionStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentLoanInfo.class, metaDataMap);
  }

  public RepaymentLoanInfo() {
  }

  public RepaymentLoanInfo(
    String acctName,
    String contractNo,
    String loanOutDt,
    String loanRepayDt,
    int repayCycle,
    double creditAmt,
    double loanInterest,
    double repaymentAmt,
    int repayFun,
    String otherCostName,
    String repayFunVal,
    double loanMgr,
    double loanOtherFee,
    double feesProportion,
    String formatAmt,
    String loanMgrStr,
    String loanOtherFeeStr,
    String loanInterestStr,
    String feesProportionStr,
    int projectId)
  {
    this();
    this.acctName = acctName;
    this.contractNo = contractNo;
    this.loanOutDt = loanOutDt;
    this.loanRepayDt = loanRepayDt;
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.loanInterest = loanInterest;
    setLoanInterestIsSet(true);
    this.repaymentAmt = repaymentAmt;
    setRepaymentAmtIsSet(true);
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    this.otherCostName = otherCostName;
    this.repayFunVal = repayFunVal;
    this.loanMgr = loanMgr;
    setLoanMgrIsSet(true);
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    this.formatAmt = formatAmt;
    this.loanMgrStr = loanMgrStr;
    this.loanOtherFeeStr = loanOtherFeeStr;
    this.loanInterestStr = loanInterestStr;
    this.feesProportionStr = feesProportionStr;
    this.projectId = projectId;
    setProjectIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentLoanInfo(RepaymentLoanInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetLoanOutDt()) {
      this.loanOutDt = other.loanOutDt;
    }
    if (other.isSetLoanRepayDt()) {
      this.loanRepayDt = other.loanRepayDt;
    }
    this.repayCycle = other.repayCycle;
    this.creditAmt = other.creditAmt;
    this.loanInterest = other.loanInterest;
    this.repaymentAmt = other.repaymentAmt;
    this.repayFun = other.repayFun;
    if (other.isSetOtherCostName()) {
      this.otherCostName = other.otherCostName;
    }
    if (other.isSetRepayFunVal()) {
      this.repayFunVal = other.repayFunVal;
    }
    this.loanMgr = other.loanMgr;
    this.loanOtherFee = other.loanOtherFee;
    this.feesProportion = other.feesProportion;
    if (other.isSetFormatAmt()) {
      this.formatAmt = other.formatAmt;
    }
    if (other.isSetLoanMgrStr()) {
      this.loanMgrStr = other.loanMgrStr;
    }
    if (other.isSetLoanOtherFeeStr()) {
      this.loanOtherFeeStr = other.loanOtherFeeStr;
    }
    if (other.isSetLoanInterestStr()) {
      this.loanInterestStr = other.loanInterestStr;
    }
    if (other.isSetFeesProportionStr()) {
      this.feesProportionStr = other.feesProportionStr;
    }
    this.projectId = other.projectId;
  }

  public RepaymentLoanInfo deepCopy() {
    return new RepaymentLoanInfo(this);
  }

  @Override
  public void clear() {
    this.acctName = null;
    this.contractNo = null;
    this.loanOutDt = null;
    this.loanRepayDt = null;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setLoanInterestIsSet(false);
    this.loanInterest = 0.0;
    setRepaymentAmtIsSet(false);
    this.repaymentAmt = 0.0;
    setRepayFunIsSet(false);
    this.repayFun = 0;
    this.otherCostName = null;
    this.repayFunVal = null;
    setLoanMgrIsSet(false);
    this.loanMgr = 0.0;
    setLoanOtherFeeIsSet(false);
    this.loanOtherFee = 0.0;
    setFeesProportionIsSet(false);
    this.feesProportion = 0.0;
    this.formatAmt = null;
    this.loanMgrStr = null;
    this.loanOtherFeeStr = null;
    this.loanInterestStr = null;
    this.feesProportionStr = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
  }

  public String getAcctName() {
    return this.acctName;
  }

  public RepaymentLoanInfo setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public RepaymentLoanInfo setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public String getLoanOutDt() {
    return this.loanOutDt;
  }

  public RepaymentLoanInfo setLoanOutDt(String loanOutDt) {
    this.loanOutDt = loanOutDt;
    return this;
  }

  public void unsetLoanOutDt() {
    this.loanOutDt = null;
  }

  /** Returns true if field loanOutDt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOutDt() {
    return this.loanOutDt != null;
  }

  public void setLoanOutDtIsSet(boolean value) {
    if (!value) {
      this.loanOutDt = null;
    }
  }

  public String getLoanRepayDt() {
    return this.loanRepayDt;
  }

  public RepaymentLoanInfo setLoanRepayDt(String loanRepayDt) {
    this.loanRepayDt = loanRepayDt;
    return this;
  }

  public void unsetLoanRepayDt() {
    this.loanRepayDt = null;
  }

  /** Returns true if field loanRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRepayDt() {
    return this.loanRepayDt != null;
  }

  public void setLoanRepayDtIsSet(boolean value) {
    if (!value) {
      this.loanRepayDt = null;
    }
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public RepaymentLoanInfo setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public RepaymentLoanInfo setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getLoanInterest() {
    return this.loanInterest;
  }

  public RepaymentLoanInfo setLoanInterest(double loanInterest) {
    this.loanInterest = loanInterest;
    setLoanInterestIsSet(true);
    return this;
  }

  public void unsetLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINTEREST_ISSET_ID);
  }

  /** Returns true if field loanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINTEREST_ISSET_ID);
  }

  public void setLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINTEREST_ISSET_ID, value);
  }

  public double getRepaymentAmt() {
    return this.repaymentAmt;
  }

  public RepaymentLoanInfo setRepaymentAmt(double repaymentAmt) {
    this.repaymentAmt = repaymentAmt;
    setRepaymentAmtIsSet(true);
    return this;
  }

  public void unsetRepaymentAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTAMT_ISSET_ID);
  }

  /** Returns true if field repaymentAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTAMT_ISSET_ID);
  }

  public void setRepaymentAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTAMT_ISSET_ID, value);
  }

  public int getRepayFun() {
    return this.repayFun;
  }

  public RepaymentLoanInfo setRepayFun(int repayFun) {
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    return this;
  }

  public void unsetRepayFun() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYFUN_ISSET_ID);
  }

  /** Returns true if field repayFun is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFun() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYFUN_ISSET_ID);
  }

  public void setRepayFunIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYFUN_ISSET_ID, value);
  }

  public String getOtherCostName() {
    return this.otherCostName;
  }

  public RepaymentLoanInfo setOtherCostName(String otherCostName) {
    this.otherCostName = otherCostName;
    return this;
  }

  public void unsetOtherCostName() {
    this.otherCostName = null;
  }

  /** Returns true if field otherCostName is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCostName() {
    return this.otherCostName != null;
  }

  public void setOtherCostNameIsSet(boolean value) {
    if (!value) {
      this.otherCostName = null;
    }
  }

  public String getRepayFunVal() {
    return this.repayFunVal;
  }

  public RepaymentLoanInfo setRepayFunVal(String repayFunVal) {
    this.repayFunVal = repayFunVal;
    return this;
  }

  public void unsetRepayFunVal() {
    this.repayFunVal = null;
  }

  /** Returns true if field repayFunVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFunVal() {
    return this.repayFunVal != null;
  }

  public void setRepayFunValIsSet(boolean value) {
    if (!value) {
      this.repayFunVal = null;
    }
  }

  public double getLoanMgr() {
    return this.loanMgr;
  }

  public RepaymentLoanInfo setLoanMgr(double loanMgr) {
    this.loanMgr = loanMgr;
    setLoanMgrIsSet(true);
    return this;
  }

  public void unsetLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMGR_ISSET_ID);
  }

  /** Returns true if field loanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMGR_ISSET_ID);
  }

  public void setLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMGR_ISSET_ID, value);
  }

  public double getLoanOtherFee() {
    return this.loanOtherFee;
  }

  public RepaymentLoanInfo setLoanOtherFee(double loanOtherFee) {
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field loanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  public void setLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID, value);
  }

  public double getFeesProportion() {
    return this.feesProportion;
  }

  public RepaymentLoanInfo setFeesProportion(double feesProportion) {
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    return this;
  }

  public void unsetFeesProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID);
  }

  /** Returns true if field feesProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetFeesProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID);
  }

  public void setFeesProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID, value);
  }

  public String getFormatAmt() {
    return this.formatAmt;
  }

  public RepaymentLoanInfo setFormatAmt(String formatAmt) {
    this.formatAmt = formatAmt;
    return this;
  }

  public void unsetFormatAmt() {
    this.formatAmt = null;
  }

  /** Returns true if field formatAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatAmt() {
    return this.formatAmt != null;
  }

  public void setFormatAmtIsSet(boolean value) {
    if (!value) {
      this.formatAmt = null;
    }
  }

  public String getLoanMgrStr() {
    return this.loanMgrStr;
  }

  public RepaymentLoanInfo setLoanMgrStr(String loanMgrStr) {
    this.loanMgrStr = loanMgrStr;
    return this;
  }

  public void unsetLoanMgrStr() {
    this.loanMgrStr = null;
  }

  /** Returns true if field loanMgrStr is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrStr() {
    return this.loanMgrStr != null;
  }

  public void setLoanMgrStrIsSet(boolean value) {
    if (!value) {
      this.loanMgrStr = null;
    }
  }

  public String getLoanOtherFeeStr() {
    return this.loanOtherFeeStr;
  }

  public RepaymentLoanInfo setLoanOtherFeeStr(String loanOtherFeeStr) {
    this.loanOtherFeeStr = loanOtherFeeStr;
    return this;
  }

  public void unsetLoanOtherFeeStr() {
    this.loanOtherFeeStr = null;
  }

  /** Returns true if field loanOtherFeeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFeeStr() {
    return this.loanOtherFeeStr != null;
  }

  public void setLoanOtherFeeStrIsSet(boolean value) {
    if (!value) {
      this.loanOtherFeeStr = null;
    }
  }

  public String getLoanInterestStr() {
    return this.loanInterestStr;
  }

  public RepaymentLoanInfo setLoanInterestStr(String loanInterestStr) {
    this.loanInterestStr = loanInterestStr;
    return this;
  }

  public void unsetLoanInterestStr() {
    this.loanInterestStr = null;
  }

  /** Returns true if field loanInterestStr is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestStr() {
    return this.loanInterestStr != null;
  }

  public void setLoanInterestStrIsSet(boolean value) {
    if (!value) {
      this.loanInterestStr = null;
    }
  }

  public String getFeesProportionStr() {
    return this.feesProportionStr;
  }

  public RepaymentLoanInfo setFeesProportionStr(String feesProportionStr) {
    this.feesProportionStr = feesProportionStr;
    return this;
  }

  public void unsetFeesProportionStr() {
    this.feesProportionStr = null;
  }

  /** Returns true if field feesProportionStr is set (has been assigned a value) and false otherwise */
  public boolean isSetFeesProportionStr() {
    return this.feesProportionStr != null;
  }

  public void setFeesProportionStrIsSet(boolean value) {
    if (!value) {
      this.feesProportionStr = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentLoanInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case LOAN_OUT_DT:
      if (value == null) {
        unsetLoanOutDt();
      } else {
        setLoanOutDt((String)value);
      }
      break;

    case LOAN_REPAY_DT:
      if (value == null) {
        unsetLoanRepayDt();
      } else {
        setLoanRepayDt((String)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case LOAN_INTEREST:
      if (value == null) {
        unsetLoanInterest();
      } else {
        setLoanInterest((Double)value);
      }
      break;

    case REPAYMENT_AMT:
      if (value == null) {
        unsetRepaymentAmt();
      } else {
        setRepaymentAmt((Double)value);
      }
      break;

    case REPAY_FUN:
      if (value == null) {
        unsetRepayFun();
      } else {
        setRepayFun((Integer)value);
      }
      break;

    case OTHER_COST_NAME:
      if (value == null) {
        unsetOtherCostName();
      } else {
        setOtherCostName((String)value);
      }
      break;

    case REPAY_FUN_VAL:
      if (value == null) {
        unsetRepayFunVal();
      } else {
        setRepayFunVal((String)value);
      }
      break;

    case LOAN_MGR:
      if (value == null) {
        unsetLoanMgr();
      } else {
        setLoanMgr((Double)value);
      }
      break;

    case LOAN_OTHER_FEE:
      if (value == null) {
        unsetLoanOtherFee();
      } else {
        setLoanOtherFee((Double)value);
      }
      break;

    case FEES_PROPORTION:
      if (value == null) {
        unsetFeesProportion();
      } else {
        setFeesProportion((Double)value);
      }
      break;

    case FORMAT_AMT:
      if (value == null) {
        unsetFormatAmt();
      } else {
        setFormatAmt((String)value);
      }
      break;

    case LOAN_MGR_STR:
      if (value == null) {
        unsetLoanMgrStr();
      } else {
        setLoanMgrStr((String)value);
      }
      break;

    case LOAN_OTHER_FEE_STR:
      if (value == null) {
        unsetLoanOtherFeeStr();
      } else {
        setLoanOtherFeeStr((String)value);
      }
      break;

    case LOAN_INTEREST_STR:
      if (value == null) {
        unsetLoanInterestStr();
      } else {
        setLoanInterestStr((String)value);
      }
      break;

    case FEES_PROPORTION_STR:
      if (value == null) {
        unsetFeesProportionStr();
      } else {
        setFeesProportionStr((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCT_NAME:
      return getAcctName();

    case CONTRACT_NO:
      return getContractNo();

    case LOAN_OUT_DT:
      return getLoanOutDt();

    case LOAN_REPAY_DT:
      return getLoanRepayDt();

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case LOAN_INTEREST:
      return Double.valueOf(getLoanInterest());

    case REPAYMENT_AMT:
      return Double.valueOf(getRepaymentAmt());

    case REPAY_FUN:
      return Integer.valueOf(getRepayFun());

    case OTHER_COST_NAME:
      return getOtherCostName();

    case REPAY_FUN_VAL:
      return getRepayFunVal();

    case LOAN_MGR:
      return Double.valueOf(getLoanMgr());

    case LOAN_OTHER_FEE:
      return Double.valueOf(getLoanOtherFee());

    case FEES_PROPORTION:
      return Double.valueOf(getFeesProportion());

    case FORMAT_AMT:
      return getFormatAmt();

    case LOAN_MGR_STR:
      return getLoanMgrStr();

    case LOAN_OTHER_FEE_STR:
      return getLoanOtherFeeStr();

    case LOAN_INTEREST_STR:
      return getLoanInterestStr();

    case FEES_PROPORTION_STR:
      return getFeesProportionStr();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCT_NAME:
      return isSetAcctName();
    case CONTRACT_NO:
      return isSetContractNo();
    case LOAN_OUT_DT:
      return isSetLoanOutDt();
    case LOAN_REPAY_DT:
      return isSetLoanRepayDt();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case LOAN_INTEREST:
      return isSetLoanInterest();
    case REPAYMENT_AMT:
      return isSetRepaymentAmt();
    case REPAY_FUN:
      return isSetRepayFun();
    case OTHER_COST_NAME:
      return isSetOtherCostName();
    case REPAY_FUN_VAL:
      return isSetRepayFunVal();
    case LOAN_MGR:
      return isSetLoanMgr();
    case LOAN_OTHER_FEE:
      return isSetLoanOtherFee();
    case FEES_PROPORTION:
      return isSetFeesProportion();
    case FORMAT_AMT:
      return isSetFormatAmt();
    case LOAN_MGR_STR:
      return isSetLoanMgrStr();
    case LOAN_OTHER_FEE_STR:
      return isSetLoanOtherFeeStr();
    case LOAN_INTEREST_STR:
      return isSetLoanInterestStr();
    case FEES_PROPORTION_STR:
      return isSetFeesProportionStr();
    case PROJECT_ID:
      return isSetProjectId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentLoanInfo)
      return this.equals((RepaymentLoanInfo)that);
    return false;
  }

  public boolean equals(RepaymentLoanInfo that) {
    if (that == null)
      return false;

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_loanOutDt = true && this.isSetLoanOutDt();
    boolean that_present_loanOutDt = true && that.isSetLoanOutDt();
    if (this_present_loanOutDt || that_present_loanOutDt) {
      if (!(this_present_loanOutDt && that_present_loanOutDt))
        return false;
      if (!this.loanOutDt.equals(that.loanOutDt))
        return false;
    }

    boolean this_present_loanRepayDt = true && this.isSetLoanRepayDt();
    boolean that_present_loanRepayDt = true && that.isSetLoanRepayDt();
    if (this_present_loanRepayDt || that_present_loanRepayDt) {
      if (!(this_present_loanRepayDt && that_present_loanRepayDt))
        return false;
      if (!this.loanRepayDt.equals(that.loanRepayDt))
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_loanInterest = true;
    boolean that_present_loanInterest = true;
    if (this_present_loanInterest || that_present_loanInterest) {
      if (!(this_present_loanInterest && that_present_loanInterest))
        return false;
      if (this.loanInterest != that.loanInterest)
        return false;
    }

    boolean this_present_repaymentAmt = true;
    boolean that_present_repaymentAmt = true;
    if (this_present_repaymentAmt || that_present_repaymentAmt) {
      if (!(this_present_repaymentAmt && that_present_repaymentAmt))
        return false;
      if (this.repaymentAmt != that.repaymentAmt)
        return false;
    }

    boolean this_present_repayFun = true;
    boolean that_present_repayFun = true;
    if (this_present_repayFun || that_present_repayFun) {
      if (!(this_present_repayFun && that_present_repayFun))
        return false;
      if (this.repayFun != that.repayFun)
        return false;
    }

    boolean this_present_otherCostName = true && this.isSetOtherCostName();
    boolean that_present_otherCostName = true && that.isSetOtherCostName();
    if (this_present_otherCostName || that_present_otherCostName) {
      if (!(this_present_otherCostName && that_present_otherCostName))
        return false;
      if (!this.otherCostName.equals(that.otherCostName))
        return false;
    }

    boolean this_present_repayFunVal = true && this.isSetRepayFunVal();
    boolean that_present_repayFunVal = true && that.isSetRepayFunVal();
    if (this_present_repayFunVal || that_present_repayFunVal) {
      if (!(this_present_repayFunVal && that_present_repayFunVal))
        return false;
      if (!this.repayFunVal.equals(that.repayFunVal))
        return false;
    }

    boolean this_present_loanMgr = true;
    boolean that_present_loanMgr = true;
    if (this_present_loanMgr || that_present_loanMgr) {
      if (!(this_present_loanMgr && that_present_loanMgr))
        return false;
      if (this.loanMgr != that.loanMgr)
        return false;
    }

    boolean this_present_loanOtherFee = true;
    boolean that_present_loanOtherFee = true;
    if (this_present_loanOtherFee || that_present_loanOtherFee) {
      if (!(this_present_loanOtherFee && that_present_loanOtherFee))
        return false;
      if (this.loanOtherFee != that.loanOtherFee)
        return false;
    }

    boolean this_present_feesProportion = true;
    boolean that_present_feesProportion = true;
    if (this_present_feesProportion || that_present_feesProportion) {
      if (!(this_present_feesProportion && that_present_feesProportion))
        return false;
      if (this.feesProportion != that.feesProportion)
        return false;
    }

    boolean this_present_formatAmt = true && this.isSetFormatAmt();
    boolean that_present_formatAmt = true && that.isSetFormatAmt();
    if (this_present_formatAmt || that_present_formatAmt) {
      if (!(this_present_formatAmt && that_present_formatAmt))
        return false;
      if (!this.formatAmt.equals(that.formatAmt))
        return false;
    }

    boolean this_present_loanMgrStr = true && this.isSetLoanMgrStr();
    boolean that_present_loanMgrStr = true && that.isSetLoanMgrStr();
    if (this_present_loanMgrStr || that_present_loanMgrStr) {
      if (!(this_present_loanMgrStr && that_present_loanMgrStr))
        return false;
      if (!this.loanMgrStr.equals(that.loanMgrStr))
        return false;
    }

    boolean this_present_loanOtherFeeStr = true && this.isSetLoanOtherFeeStr();
    boolean that_present_loanOtherFeeStr = true && that.isSetLoanOtherFeeStr();
    if (this_present_loanOtherFeeStr || that_present_loanOtherFeeStr) {
      if (!(this_present_loanOtherFeeStr && that_present_loanOtherFeeStr))
        return false;
      if (!this.loanOtherFeeStr.equals(that.loanOtherFeeStr))
        return false;
    }

    boolean this_present_loanInterestStr = true && this.isSetLoanInterestStr();
    boolean that_present_loanInterestStr = true && that.isSetLoanInterestStr();
    if (this_present_loanInterestStr || that_present_loanInterestStr) {
      if (!(this_present_loanInterestStr && that_present_loanInterestStr))
        return false;
      if (!this.loanInterestStr.equals(that.loanInterestStr))
        return false;
    }

    boolean this_present_feesProportionStr = true && this.isSetFeesProportionStr();
    boolean that_present_feesProportionStr = true && that.isSetFeesProportionStr();
    if (this_present_feesProportionStr || that_present_feesProportionStr) {
      if (!(this_present_feesProportionStr && that_present_feesProportionStr))
        return false;
      if (!this.feesProportionStr.equals(that.feesProportionStr))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_loanOutDt = true && (isSetLoanOutDt());
    list.add(present_loanOutDt);
    if (present_loanOutDt)
      list.add(loanOutDt);

    boolean present_loanRepayDt = true && (isSetLoanRepayDt());
    list.add(present_loanRepayDt);
    if (present_loanRepayDt)
      list.add(loanRepayDt);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_loanInterest = true;
    list.add(present_loanInterest);
    if (present_loanInterest)
      list.add(loanInterest);

    boolean present_repaymentAmt = true;
    list.add(present_repaymentAmt);
    if (present_repaymentAmt)
      list.add(repaymentAmt);

    boolean present_repayFun = true;
    list.add(present_repayFun);
    if (present_repayFun)
      list.add(repayFun);

    boolean present_otherCostName = true && (isSetOtherCostName());
    list.add(present_otherCostName);
    if (present_otherCostName)
      list.add(otherCostName);

    boolean present_repayFunVal = true && (isSetRepayFunVal());
    list.add(present_repayFunVal);
    if (present_repayFunVal)
      list.add(repayFunVal);

    boolean present_loanMgr = true;
    list.add(present_loanMgr);
    if (present_loanMgr)
      list.add(loanMgr);

    boolean present_loanOtherFee = true;
    list.add(present_loanOtherFee);
    if (present_loanOtherFee)
      list.add(loanOtherFee);

    boolean present_feesProportion = true;
    list.add(present_feesProportion);
    if (present_feesProportion)
      list.add(feesProportion);

    boolean present_formatAmt = true && (isSetFormatAmt());
    list.add(present_formatAmt);
    if (present_formatAmt)
      list.add(formatAmt);

    boolean present_loanMgrStr = true && (isSetLoanMgrStr());
    list.add(present_loanMgrStr);
    if (present_loanMgrStr)
      list.add(loanMgrStr);

    boolean present_loanOtherFeeStr = true && (isSetLoanOtherFeeStr());
    list.add(present_loanOtherFeeStr);
    if (present_loanOtherFeeStr)
      list.add(loanOtherFeeStr);

    boolean present_loanInterestStr = true && (isSetLoanInterestStr());
    list.add(present_loanInterestStr);
    if (present_loanInterestStr)
      list.add(loanInterestStr);

    boolean present_feesProportionStr = true && (isSetFeesProportionStr());
    list.add(present_feesProportionStr);
    if (present_feesProportionStr)
      list.add(feesProportionStr);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentLoanInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOutDt()).compareTo(other.isSetLoanOutDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOutDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOutDt, other.loanOutDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRepayDt()).compareTo(other.isSetLoanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRepayDt, other.loanRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterest()).compareTo(other.isSetLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterest, other.loanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentAmt()).compareTo(other.isSetRepaymentAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentAmt, other.repaymentAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFun()).compareTo(other.isSetRepayFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFun, other.repayFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCostName()).compareTo(other.isSetOtherCostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCostName, other.otherCostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFunVal()).compareTo(other.isSetRepayFunVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFunVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFunVal, other.repayFunVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgr()).compareTo(other.isSetLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgr, other.loanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFee()).compareTo(other.isSetLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFee, other.loanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeesProportion()).compareTo(other.isSetFeesProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeesProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feesProportion, other.feesProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormatAmt()).compareTo(other.isSetFormatAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formatAmt, other.formatAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrStr()).compareTo(other.isSetLoanMgrStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrStr, other.loanMgrStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFeeStr()).compareTo(other.isSetLoanOtherFeeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFeeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFeeStr, other.loanOtherFeeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestStr()).compareTo(other.isSetLoanInterestStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestStr, other.loanInterestStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeesProportionStr()).compareTo(other.isSetFeesProportionStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeesProportionStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feesProportionStr, other.feesProportionStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentLoanInfo(");
    boolean first = true;

    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOutDt:");
    if (this.loanOutDt == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOutDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRepayDt:");
    if (this.loanRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.loanRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterest:");
    sb.append(this.loanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentAmt:");
    sb.append(this.repaymentAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFun:");
    sb.append(this.repayFun);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCostName:");
    if (this.otherCostName == null) {
      sb.append("null");
    } else {
      sb.append(this.otherCostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFunVal:");
    if (this.repayFunVal == null) {
      sb.append("null");
    } else {
      sb.append(this.repayFunVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgr:");
    sb.append(this.loanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFee:");
    sb.append(this.loanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feesProportion:");
    sb.append(this.feesProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("formatAmt:");
    if (this.formatAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.formatAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrStr:");
    if (this.loanMgrStr == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMgrStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFeeStr:");
    if (this.loanOtherFeeStr == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFeeStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestStr:");
    if (this.loanInterestStr == null) {
      sb.append("null");
    } else {
      sb.append(this.loanInterestStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feesProportionStr:");
    if (this.feesProportionStr == null) {
      sb.append("null");
    } else {
      sb.append(this.feesProportionStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentLoanInfoStandardSchemeFactory implements SchemeFactory {
    public RepaymentLoanInfoStandardScheme getScheme() {
      return new RepaymentLoanInfoStandardScheme();
    }
  }

  private static class RepaymentLoanInfoStandardScheme extends StandardScheme<RepaymentLoanInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentLoanInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_OUT_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOutDt = iprot.readString();
              struct.setLoanOutDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanRepayDt = iprot.readString();
              struct.setLoanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanInterest = iprot.readDouble();
              struct.setLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAYMENT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentAmt = iprot.readDouble();
              struct.setRepaymentAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPAY_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayFun = iprot.readI32();
              struct.setRepayFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OTHER_COST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherCostName = iprot.readString();
              struct.setOtherCostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REPAY_FUN_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayFunVal = iprot.readString();
              struct.setRepayFunValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMgr = iprot.readDouble();
              struct.setLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanOtherFee = iprot.readDouble();
              struct.setLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FEES_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feesProportion = iprot.readDouble();
              struct.setFeesProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FORMAT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formatAmt = iprot.readString();
              struct.setFormatAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_MGR_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMgrStr = iprot.readString();
              struct.setLoanMgrStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOAN_OTHER_FEE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFeeStr = iprot.readString();
              struct.setLoanOtherFeeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOAN_INTEREST_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanInterestStr = iprot.readString();
              struct.setLoanInterestStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FEES_PROPORTION_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feesProportionStr = iprot.readString();
              struct.setFeesProportionStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentLoanInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      if (struct.loanOutDt != null) {
        oprot.writeFieldBegin(LOAN_OUT_DT_FIELD_DESC);
        oprot.writeString(struct.loanOutDt);
        oprot.writeFieldEnd();
      }
      if (struct.loanRepayDt != null) {
        oprot.writeFieldBegin(LOAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.loanRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.loanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.repaymentAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_FUN_FIELD_DESC);
      oprot.writeI32(struct.repayFun);
      oprot.writeFieldEnd();
      if (struct.otherCostName != null) {
        oprot.writeFieldBegin(OTHER_COST_NAME_FIELD_DESC);
        oprot.writeString(struct.otherCostName);
        oprot.writeFieldEnd();
      }
      if (struct.repayFunVal != null) {
        oprot.writeFieldBegin(REPAY_FUN_VAL_FIELD_DESC);
        oprot.writeString(struct.repayFunVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.loanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.loanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEES_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.feesProportion);
      oprot.writeFieldEnd();
      if (struct.formatAmt != null) {
        oprot.writeFieldBegin(FORMAT_AMT_FIELD_DESC);
        oprot.writeString(struct.formatAmt);
        oprot.writeFieldEnd();
      }
      if (struct.loanMgrStr != null) {
        oprot.writeFieldBegin(LOAN_MGR_STR_FIELD_DESC);
        oprot.writeString(struct.loanMgrStr);
        oprot.writeFieldEnd();
      }
      if (struct.loanOtherFeeStr != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FEE_STR_FIELD_DESC);
        oprot.writeString(struct.loanOtherFeeStr);
        oprot.writeFieldEnd();
      }
      if (struct.loanInterestStr != null) {
        oprot.writeFieldBegin(LOAN_INTEREST_STR_FIELD_DESC);
        oprot.writeString(struct.loanInterestStr);
        oprot.writeFieldEnd();
      }
      if (struct.feesProportionStr != null) {
        oprot.writeFieldBegin(FEES_PROPORTION_STR_FIELD_DESC);
        oprot.writeString(struct.feesProportionStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentLoanInfoTupleSchemeFactory implements SchemeFactory {
    public RepaymentLoanInfoTupleScheme getScheme() {
      return new RepaymentLoanInfoTupleScheme();
    }
  }

  private static class RepaymentLoanInfoTupleScheme extends TupleScheme<RepaymentLoanInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentLoanInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAcctName()) {
        optionals.set(0);
      }
      if (struct.isSetContractNo()) {
        optionals.set(1);
      }
      if (struct.isSetLoanOutDt()) {
        optionals.set(2);
      }
      if (struct.isSetLoanRepayDt()) {
        optionals.set(3);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(4);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(5);
      }
      if (struct.isSetLoanInterest()) {
        optionals.set(6);
      }
      if (struct.isSetRepaymentAmt()) {
        optionals.set(7);
      }
      if (struct.isSetRepayFun()) {
        optionals.set(8);
      }
      if (struct.isSetOtherCostName()) {
        optionals.set(9);
      }
      if (struct.isSetRepayFunVal()) {
        optionals.set(10);
      }
      if (struct.isSetLoanMgr()) {
        optionals.set(11);
      }
      if (struct.isSetLoanOtherFee()) {
        optionals.set(12);
      }
      if (struct.isSetFeesProportion()) {
        optionals.set(13);
      }
      if (struct.isSetFormatAmt()) {
        optionals.set(14);
      }
      if (struct.isSetLoanMgrStr()) {
        optionals.set(15);
      }
      if (struct.isSetLoanOtherFeeStr()) {
        optionals.set(16);
      }
      if (struct.isSetLoanInterestStr()) {
        optionals.set(17);
      }
      if (struct.isSetFeesProportionStr()) {
        optionals.set(18);
      }
      if (struct.isSetProjectId()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetLoanOutDt()) {
        oprot.writeString(struct.loanOutDt);
      }
      if (struct.isSetLoanRepayDt()) {
        oprot.writeString(struct.loanRepayDt);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetLoanInterest()) {
        oprot.writeDouble(struct.loanInterest);
      }
      if (struct.isSetRepaymentAmt()) {
        oprot.writeDouble(struct.repaymentAmt);
      }
      if (struct.isSetRepayFun()) {
        oprot.writeI32(struct.repayFun);
      }
      if (struct.isSetOtherCostName()) {
        oprot.writeString(struct.otherCostName);
      }
      if (struct.isSetRepayFunVal()) {
        oprot.writeString(struct.repayFunVal);
      }
      if (struct.isSetLoanMgr()) {
        oprot.writeDouble(struct.loanMgr);
      }
      if (struct.isSetLoanOtherFee()) {
        oprot.writeDouble(struct.loanOtherFee);
      }
      if (struct.isSetFeesProportion()) {
        oprot.writeDouble(struct.feesProportion);
      }
      if (struct.isSetFormatAmt()) {
        oprot.writeString(struct.formatAmt);
      }
      if (struct.isSetLoanMgrStr()) {
        oprot.writeString(struct.loanMgrStr);
      }
      if (struct.isSetLoanOtherFeeStr()) {
        oprot.writeString(struct.loanOtherFeeStr);
      }
      if (struct.isSetLoanInterestStr()) {
        oprot.writeString(struct.loanInterestStr);
      }
      if (struct.isSetFeesProportionStr()) {
        oprot.writeString(struct.feesProportionStr);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentLoanInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanOutDt = iprot.readString();
        struct.setLoanOutDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanRepayDt = iprot.readString();
        struct.setLoanRepayDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanInterest = iprot.readDouble();
        struct.setLoanInterestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repaymentAmt = iprot.readDouble();
        struct.setRepaymentAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repayFun = iprot.readI32();
        struct.setRepayFunIsSet(true);
      }
      if (incoming.get(9)) {
        struct.otherCostName = iprot.readString();
        struct.setOtherCostNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.repayFunVal = iprot.readString();
        struct.setRepayFunValIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanMgr = iprot.readDouble();
        struct.setLoanMgrIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loanOtherFee = iprot.readDouble();
        struct.setLoanOtherFeeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.feesProportion = iprot.readDouble();
        struct.setFeesProportionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.formatAmt = iprot.readString();
        struct.setFormatAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanMgrStr = iprot.readString();
        struct.setLoanMgrStrIsSet(true);
      }
      if (incoming.get(16)) {
        struct.loanOtherFeeStr = iprot.readString();
        struct.setLoanOtherFeeStrIsSet(true);
      }
      if (incoming.get(17)) {
        struct.loanInterestStr = iprot.readString();
        struct.setLoanInterestStrIsSet(true);
      }
      if (incoming.get(18)) {
        struct.feesProportionStr = iprot.readString();
        struct.setFeesProportionStrIsSet(true);
      }
      if (incoming.get(19)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
    }
  }

}


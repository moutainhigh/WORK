/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerFamilyDTO implements org.apache.thrift.TBase<CusPerFamilyDTO, CusPerFamilyDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerFamilyDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerFamilyDTO");

  private static final org.apache.thrift.protocol.TField CUS_PER_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerFamily", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_FAMILY_FINANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerFamilyFinance", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerson", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerFamilyDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerFamilyDTOTupleSchemeFactory());
  }

  public CusPerFamily cusPerFamily; // required
  public CusPerFamilyFinance cusPerFamilyFinance; // required
  public CusPerson cusPerson; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUS_PER_FAMILY((short)1, "cusPerFamily"),
    CUS_PER_FAMILY_FINANCE((short)2, "cusPerFamilyFinance"),
    CUS_PERSON((short)3, "cusPerson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUS_PER_FAMILY
          return CUS_PER_FAMILY;
        case 2: // CUS_PER_FAMILY_FINANCE
          return CUS_PER_FAMILY_FINANCE;
        case 3: // CUS_PERSON
          return CUS_PERSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUS_PER_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("cusPerFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerFamily.class)));
    tmpMap.put(_Fields.CUS_PER_FAMILY_FINANCE, new org.apache.thrift.meta_data.FieldMetaData("cusPerFamilyFinance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerFamilyFinance.class)));
    tmpMap.put(_Fields.CUS_PERSON, new org.apache.thrift.meta_data.FieldMetaData("cusPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerson.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerFamilyDTO.class, metaDataMap);
  }

  public CusPerFamilyDTO() {
  }

  public CusPerFamilyDTO(
    CusPerFamily cusPerFamily,
    CusPerFamilyFinance cusPerFamilyFinance,
    CusPerson cusPerson)
  {
    this();
    this.cusPerFamily = cusPerFamily;
    this.cusPerFamilyFinance = cusPerFamilyFinance;
    this.cusPerson = cusPerson;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerFamilyDTO(CusPerFamilyDTO other) {
    if (other.isSetCusPerFamily()) {
      this.cusPerFamily = new CusPerFamily(other.cusPerFamily);
    }
    if (other.isSetCusPerFamilyFinance()) {
      this.cusPerFamilyFinance = new CusPerFamilyFinance(other.cusPerFamilyFinance);
    }
    if (other.isSetCusPerson()) {
      this.cusPerson = new CusPerson(other.cusPerson);
    }
  }

  public CusPerFamilyDTO deepCopy() {
    return new CusPerFamilyDTO(this);
  }

  @Override
  public void clear() {
    this.cusPerFamily = null;
    this.cusPerFamilyFinance = null;
    this.cusPerson = null;
  }

  public CusPerFamily getCusPerFamily() {
    return this.cusPerFamily;
  }

  public CusPerFamilyDTO setCusPerFamily(CusPerFamily cusPerFamily) {
    this.cusPerFamily = cusPerFamily;
    return this;
  }

  public void unsetCusPerFamily() {
    this.cusPerFamily = null;
  }

  /** Returns true if field cusPerFamily is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerFamily() {
    return this.cusPerFamily != null;
  }

  public void setCusPerFamilyIsSet(boolean value) {
    if (!value) {
      this.cusPerFamily = null;
    }
  }

  public CusPerFamilyFinance getCusPerFamilyFinance() {
    return this.cusPerFamilyFinance;
  }

  public CusPerFamilyDTO setCusPerFamilyFinance(CusPerFamilyFinance cusPerFamilyFinance) {
    this.cusPerFamilyFinance = cusPerFamilyFinance;
    return this;
  }

  public void unsetCusPerFamilyFinance() {
    this.cusPerFamilyFinance = null;
  }

  /** Returns true if field cusPerFamilyFinance is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerFamilyFinance() {
    return this.cusPerFamilyFinance != null;
  }

  public void setCusPerFamilyFinanceIsSet(boolean value) {
    if (!value) {
      this.cusPerFamilyFinance = null;
    }
  }

  public CusPerson getCusPerson() {
    return this.cusPerson;
  }

  public CusPerFamilyDTO setCusPerson(CusPerson cusPerson) {
    this.cusPerson = cusPerson;
    return this;
  }

  public void unsetCusPerson() {
    this.cusPerson = null;
  }

  /** Returns true if field cusPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerson() {
    return this.cusPerson != null;
  }

  public void setCusPersonIsSet(boolean value) {
    if (!value) {
      this.cusPerson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUS_PER_FAMILY:
      if (value == null) {
        unsetCusPerFamily();
      } else {
        setCusPerFamily((CusPerFamily)value);
      }
      break;

    case CUS_PER_FAMILY_FINANCE:
      if (value == null) {
        unsetCusPerFamilyFinance();
      } else {
        setCusPerFamilyFinance((CusPerFamilyFinance)value);
      }
      break;

    case CUS_PERSON:
      if (value == null) {
        unsetCusPerson();
      } else {
        setCusPerson((CusPerson)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUS_PER_FAMILY:
      return getCusPerFamily();

    case CUS_PER_FAMILY_FINANCE:
      return getCusPerFamilyFinance();

    case CUS_PERSON:
      return getCusPerson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUS_PER_FAMILY:
      return isSetCusPerFamily();
    case CUS_PER_FAMILY_FINANCE:
      return isSetCusPerFamilyFinance();
    case CUS_PERSON:
      return isSetCusPerson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerFamilyDTO)
      return this.equals((CusPerFamilyDTO)that);
    return false;
  }

  public boolean equals(CusPerFamilyDTO that) {
    if (that == null)
      return false;

    boolean this_present_cusPerFamily = true && this.isSetCusPerFamily();
    boolean that_present_cusPerFamily = true && that.isSetCusPerFamily();
    if (this_present_cusPerFamily || that_present_cusPerFamily) {
      if (!(this_present_cusPerFamily && that_present_cusPerFamily))
        return false;
      if (!this.cusPerFamily.equals(that.cusPerFamily))
        return false;
    }

    boolean this_present_cusPerFamilyFinance = true && this.isSetCusPerFamilyFinance();
    boolean that_present_cusPerFamilyFinance = true && that.isSetCusPerFamilyFinance();
    if (this_present_cusPerFamilyFinance || that_present_cusPerFamilyFinance) {
      if (!(this_present_cusPerFamilyFinance && that_present_cusPerFamilyFinance))
        return false;
      if (!this.cusPerFamilyFinance.equals(that.cusPerFamilyFinance))
        return false;
    }

    boolean this_present_cusPerson = true && this.isSetCusPerson();
    boolean that_present_cusPerson = true && that.isSetCusPerson();
    if (this_present_cusPerson || that_present_cusPerson) {
      if (!(this_present_cusPerson && that_present_cusPerson))
        return false;
      if (!this.cusPerson.equals(that.cusPerson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cusPerFamily = true && (isSetCusPerFamily());
    list.add(present_cusPerFamily);
    if (present_cusPerFamily)
      list.add(cusPerFamily);

    boolean present_cusPerFamilyFinance = true && (isSetCusPerFamilyFinance());
    list.add(present_cusPerFamilyFinance);
    if (present_cusPerFamilyFinance)
      list.add(cusPerFamilyFinance);

    boolean present_cusPerson = true && (isSetCusPerson());
    list.add(present_cusPerson);
    if (present_cusPerson)
      list.add(cusPerson);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerFamilyDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCusPerFamily()).compareTo(other.isSetCusPerFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerFamily, other.cusPerFamily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerFamilyFinance()).compareTo(other.isSetCusPerFamilyFinance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerFamilyFinance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerFamilyFinance, other.cusPerFamilyFinance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerson()).compareTo(other.isSetCusPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerson, other.cusPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerFamilyDTO(");
    boolean first = true;

    sb.append("cusPerFamily:");
    if (this.cusPerFamily == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerFamily);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerFamilyFinance:");
    if (this.cusPerFamilyFinance == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerFamilyFinance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerson:");
    if (this.cusPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerson);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerFamily != null) {
      cusPerFamily.validate();
    }
    if (cusPerFamilyFinance != null) {
      cusPerFamilyFinance.validate();
    }
    if (cusPerson != null) {
      cusPerson.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerFamilyDTOStandardSchemeFactory implements SchemeFactory {
    public CusPerFamilyDTOStandardScheme getScheme() {
      return new CusPerFamilyDTOStandardScheme();
    }
  }

  private static class CusPerFamilyDTOStandardScheme extends StandardScheme<CusPerFamilyDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerFamilyDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUS_PER_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerFamily = new CusPerFamily();
              struct.cusPerFamily.read(iprot);
              struct.setCusPerFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_FAMILY_FINANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerFamilyFinance = new CusPerFamilyFinance();
              struct.cusPerFamilyFinance.read(iprot);
              struct.setCusPerFamilyFinanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerson = new CusPerson();
              struct.cusPerson.read(iprot);
              struct.setCusPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerFamilyDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cusPerFamily != null) {
        oprot.writeFieldBegin(CUS_PER_FAMILY_FIELD_DESC);
        struct.cusPerFamily.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusPerFamilyFinance != null) {
        oprot.writeFieldBegin(CUS_PER_FAMILY_FINANCE_FIELD_DESC);
        struct.cusPerFamilyFinance.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusPerson != null) {
        oprot.writeFieldBegin(CUS_PERSON_FIELD_DESC);
        struct.cusPerson.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerFamilyDTOTupleSchemeFactory implements SchemeFactory {
    public CusPerFamilyDTOTupleScheme getScheme() {
      return new CusPerFamilyDTOTupleScheme();
    }
  }

  private static class CusPerFamilyDTOTupleScheme extends TupleScheme<CusPerFamilyDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerFamilyDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCusPerFamily()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerFamilyFinance()) {
        optionals.set(1);
      }
      if (struct.isSetCusPerson()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCusPerFamily()) {
        struct.cusPerFamily.write(oprot);
      }
      if (struct.isSetCusPerFamilyFinance()) {
        struct.cusPerFamilyFinance.write(oprot);
      }
      if (struct.isSetCusPerson()) {
        struct.cusPerson.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerFamilyDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cusPerFamily = new CusPerFamily();
        struct.cusPerFamily.read(iprot);
        struct.setCusPerFamilyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerFamilyFinance = new CusPerFamilyFinance();
        struct.cusPerFamilyFinance.read(iprot);
        struct.setCusPerFamilyFinanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusPerson = new CusPerson();
        struct.cusPerson.read(iprot);
        struct.setCusPersonIsSet(true);
      }
    }
  }

}


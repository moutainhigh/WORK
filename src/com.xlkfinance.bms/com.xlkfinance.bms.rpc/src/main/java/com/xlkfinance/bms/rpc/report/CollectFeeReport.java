/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class CollectFeeReport implements org.apache.thrift.TBase<CollectFeeReport, CollectFeeReport._Fields>, java.io.Serializable, Cloneable, Comparable<CollectFeeReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectFeeReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deptId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureAmt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CONSULT_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("consultFee", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField BROKERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerage", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField COLLECT_FEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeeDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_COLLECT_FEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCollectFeeDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField HOME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("homeName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectFeeReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectFeeReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public int businessSource; // required
  public String businessSourceName; // required
  public String businessSourceStr; // required
  public String deptName; // required
  public int deptId; // required
  public String pmUserName; // required
  public int pmUserId; // required
  public double loanAmt; // required
  public String foreclosureAmt; // required
  public double consultFee; // required
  public double poundage; // required
  public double brokerage; // required
  public String collectFeeDate; // required
  public String maxCollectFeeDate; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String housePropertyCard; // required
  public String homeName; // required
  public String sellerName; // required
  public String buyerName; // required
  public int foreclosureStatus; // required
  public int innerOrOut; // required
  public String productName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_SOURCE((short)4, "businessSource"),
    BUSINESS_SOURCE_NAME((short)5, "businessSourceName"),
    BUSINESS_SOURCE_STR((short)24, "businessSourceStr"),
    DEPT_NAME((short)6, "deptName"),
    DEPT_ID((short)7, "deptId"),
    PM_USER_NAME((short)8, "pmUserName"),
    PM_USER_ID((short)9, "pmUserId"),
    LOAN_AMT((short)10, "loanAmt"),
    FORECLOSURE_AMT((short)11, "foreclosureAmt"),
    CONSULT_FEE((short)12, "consultFee"),
    POUNDAGE((short)13, "poundage"),
    BROKERAGE((short)14, "brokerage"),
    COLLECT_FEE_DATE((short)15, "collectFeeDate"),
    MAX_COLLECT_FEE_DATE((short)16, "maxCollectFeeDate"),
    PAGE((short)17, "page"),
    ROWS((short)18, "rows"),
    USER_IDS((short)19, "userIds"),
    HOUSE_PROPERTY_CARD((short)20, "housePropertyCard"),
    HOME_NAME((short)21, "homeName"),
    SELLER_NAME((short)22, "sellerName"),
    BUYER_NAME((short)23, "buyerName"),
    FORECLOSURE_STATUS((short)25, "foreclosureStatus"),
    INNER_OR_OUT((short)26, "innerOrOut"),
    PRODUCT_NAME((short)27, "productName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 5: // BUSINESS_SOURCE_NAME
          return BUSINESS_SOURCE_NAME;
        case 24: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 6: // DEPT_NAME
          return DEPT_NAME;
        case 7: // DEPT_ID
          return DEPT_ID;
        case 8: // PM_USER_NAME
          return PM_USER_NAME;
        case 9: // PM_USER_ID
          return PM_USER_ID;
        case 10: // LOAN_AMT
          return LOAN_AMT;
        case 11: // FORECLOSURE_AMT
          return FORECLOSURE_AMT;
        case 12: // CONSULT_FEE
          return CONSULT_FEE;
        case 13: // POUNDAGE
          return POUNDAGE;
        case 14: // BROKERAGE
          return BROKERAGE;
        case 15: // COLLECT_FEE_DATE
          return COLLECT_FEE_DATE;
        case 16: // MAX_COLLECT_FEE_DATE
          return MAX_COLLECT_FEE_DATE;
        case 17: // PAGE
          return PAGE;
        case 18: // ROWS
          return ROWS;
        case 19: // USER_IDS
          return USER_IDS;
        case 20: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 21: // HOME_NAME
          return HOME_NAME;
        case 22: // SELLER_NAME
          return SELLER_NAME;
        case 23: // BUYER_NAME
          return BUYER_NAME;
        case 25: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 26: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 27: // PRODUCT_NAME
          return PRODUCT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __BUSINESSSOURCE_ISSET_ID = 1;
  private static final int __DEPTID_ISSET_ID = 2;
  private static final int __PMUSERID_ISSET_ID = 3;
  private static final int __LOANAMT_ISSET_ID = 4;
  private static final int __CONSULTFEE_ISSET_ID = 5;
  private static final int __POUNDAGE_ISSET_ID = 6;
  private static final int __BROKERAGE_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 10;
  private static final int __INNEROROUT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessSourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("deptId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_AMT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSULT_FEE, new org.apache.thrift.meta_data.FieldMetaData("consultFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BROKERAGE, new org.apache.thrift.meta_data.FieldMetaData("brokerage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLLECT_FEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("collectFeeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_COLLECT_FEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("maxCollectFeeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_NAME, new org.apache.thrift.meta_data.FieldMetaData("homeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectFeeReport.class, metaDataMap);
  }

  public CollectFeeReport() {
    this.page = 1;

    this.rows = 10;

  }

  public CollectFeeReport(
    int projectId,
    String projectName,
    String projectNumber,
    int businessSource,
    String businessSourceName,
    String businessSourceStr,
    String deptName,
    int deptId,
    String pmUserName,
    int pmUserId,
    double loanAmt,
    String foreclosureAmt,
    double consultFee,
    double poundage,
    double brokerage,
    String collectFeeDate,
    String maxCollectFeeDate,
    int page,
    int rows,
    List<Integer> userIds,
    String housePropertyCard,
    String homeName,
    String sellerName,
    String buyerName,
    int foreclosureStatus,
    int innerOrOut,
    String productName)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.businessSourceName = businessSourceName;
    this.businessSourceStr = businessSourceStr;
    this.deptName = deptName;
    this.deptId = deptId;
    setDeptIdIsSet(true);
    this.pmUserName = pmUserName;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.foreclosureAmt = foreclosureAmt;
    this.consultFee = consultFee;
    setConsultFeeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    this.collectFeeDate = collectFeeDate;
    this.maxCollectFeeDate = maxCollectFeeDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.housePropertyCard = housePropertyCard;
    this.homeName = homeName;
    this.sellerName = sellerName;
    this.buyerName = buyerName;
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.productName = productName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectFeeReport(CollectFeeReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.businessSource = other.businessSource;
    if (other.isSetBusinessSourceName()) {
      this.businessSourceName = other.businessSourceName;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    this.deptId = other.deptId;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.pmUserId = other.pmUserId;
    this.loanAmt = other.loanAmt;
    if (other.isSetForeclosureAmt()) {
      this.foreclosureAmt = other.foreclosureAmt;
    }
    this.consultFee = other.consultFee;
    this.poundage = other.poundage;
    this.brokerage = other.brokerage;
    if (other.isSetCollectFeeDate()) {
      this.collectFeeDate = other.collectFeeDate;
    }
    if (other.isSetMaxCollectFeeDate()) {
      this.maxCollectFeeDate = other.maxCollectFeeDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetHomeName()) {
      this.homeName = other.homeName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    this.foreclosureStatus = other.foreclosureStatus;
    this.innerOrOut = other.innerOrOut;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
  }

  public CollectFeeReport deepCopy() {
    return new CollectFeeReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.businessSourceName = null;
    this.businessSourceStr = null;
    this.deptName = null;
    setDeptIdIsSet(false);
    this.deptId = 0;
    this.pmUserName = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    this.foreclosureAmt = null;
    setConsultFeeIsSet(false);
    this.consultFee = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    setBrokerageIsSet(false);
    this.brokerage = 0.0;
    this.collectFeeDate = null;
    this.maxCollectFeeDate = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.housePropertyCard = null;
    this.homeName = null;
    this.sellerName = null;
    this.buyerName = null;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    this.productName = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectFeeReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CollectFeeReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public CollectFeeReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public CollectFeeReport setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getBusinessSourceName() {
    return this.businessSourceName;
  }

  public CollectFeeReport setBusinessSourceName(String businessSourceName) {
    this.businessSourceName = businessSourceName;
    return this;
  }

  public void unsetBusinessSourceName() {
    this.businessSourceName = null;
  }

  /** Returns true if field businessSourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceName() {
    return this.businessSourceName != null;
  }

  public void setBusinessSourceNameIsSet(boolean value) {
    if (!value) {
      this.businessSourceName = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public CollectFeeReport setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getDeptName() {
    return this.deptName;
  }

  public CollectFeeReport setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public int getDeptId() {
    return this.deptId;
  }

  public CollectFeeReport setDeptId(int deptId) {
    this.deptId = deptId;
    setDeptIdIsSet(true);
    return this;
  }

  public void unsetDeptId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  /** Returns true if field deptId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  public void setDeptIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTID_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public CollectFeeReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public CollectFeeReport setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public CollectFeeReport setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public String getForeclosureAmt() {
    return this.foreclosureAmt;
  }

  public CollectFeeReport setForeclosureAmt(String foreclosureAmt) {
    this.foreclosureAmt = foreclosureAmt;
    return this;
  }

  public void unsetForeclosureAmt() {
    this.foreclosureAmt = null;
  }

  /** Returns true if field foreclosureAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureAmt() {
    return this.foreclosureAmt != null;
  }

  public void setForeclosureAmtIsSet(boolean value) {
    if (!value) {
      this.foreclosureAmt = null;
    }
  }

  public double getConsultFee() {
    return this.consultFee;
  }

  public CollectFeeReport setConsultFee(double consultFee) {
    this.consultFee = consultFee;
    setConsultFeeIsSet(true);
    return this;
  }

  public void unsetConsultFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSULTFEE_ISSET_ID);
  }

  /** Returns true if field consultFee is set (has been assigned a value) and false otherwise */
  public boolean isSetConsultFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSULTFEE_ISSET_ID);
  }

  public void setConsultFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSULTFEE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public CollectFeeReport setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public double getBrokerage() {
    return this.brokerage;
  }

  public CollectFeeReport setBrokerage(double brokerage) {
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    return this;
  }

  public void unsetBrokerage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  /** Returns true if field brokerage is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerage() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  public void setBrokerageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERAGE_ISSET_ID, value);
  }

  public String getCollectFeeDate() {
    return this.collectFeeDate;
  }

  public CollectFeeReport setCollectFeeDate(String collectFeeDate) {
    this.collectFeeDate = collectFeeDate;
    return this;
  }

  public void unsetCollectFeeDate() {
    this.collectFeeDate = null;
  }

  /** Returns true if field collectFeeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFeeDate() {
    return this.collectFeeDate != null;
  }

  public void setCollectFeeDateIsSet(boolean value) {
    if (!value) {
      this.collectFeeDate = null;
    }
  }

  public String getMaxCollectFeeDate() {
    return this.maxCollectFeeDate;
  }

  public CollectFeeReport setMaxCollectFeeDate(String maxCollectFeeDate) {
    this.maxCollectFeeDate = maxCollectFeeDate;
    return this;
  }

  public void unsetMaxCollectFeeDate() {
    this.maxCollectFeeDate = null;
  }

  /** Returns true if field maxCollectFeeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCollectFeeDate() {
    return this.maxCollectFeeDate != null;
  }

  public void setMaxCollectFeeDateIsSet(boolean value) {
    if (!value) {
      this.maxCollectFeeDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CollectFeeReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CollectFeeReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CollectFeeReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public CollectFeeReport setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getHomeName() {
    return this.homeName;
  }

  public CollectFeeReport setHomeName(String homeName) {
    this.homeName = homeName;
    return this;
  }

  public void unsetHomeName() {
    this.homeName = null;
  }

  /** Returns true if field homeName is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeName() {
    return this.homeName != null;
  }

  public void setHomeNameIsSet(boolean value) {
    if (!value) {
      this.homeName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public CollectFeeReport setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public CollectFeeReport setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public CollectFeeReport setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public CollectFeeReport setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return EncodingUtils.testBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INNEROROUT_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public CollectFeeReport setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case BUSINESS_SOURCE_NAME:
      if (value == null) {
        unsetBusinessSourceName();
      } else {
        setBusinessSourceName((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case DEPT_ID:
      if (value == null) {
        unsetDeptId();
      } else {
        setDeptId((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case FORECLOSURE_AMT:
      if (value == null) {
        unsetForeclosureAmt();
      } else {
        setForeclosureAmt((String)value);
      }
      break;

    case CONSULT_FEE:
      if (value == null) {
        unsetConsultFee();
      } else {
        setConsultFee((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case BROKERAGE:
      if (value == null) {
        unsetBrokerage();
      } else {
        setBrokerage((Double)value);
      }
      break;

    case COLLECT_FEE_DATE:
      if (value == null) {
        unsetCollectFeeDate();
      } else {
        setCollectFeeDate((String)value);
      }
      break;

    case MAX_COLLECT_FEE_DATE:
      if (value == null) {
        unsetMaxCollectFeeDate();
      } else {
        setMaxCollectFeeDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case HOME_NAME:
      if (value == null) {
        unsetHomeName();
      } else {
        setHomeName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case BUSINESS_SOURCE_NAME:
      return getBusinessSourceName();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case DEPT_NAME:
      return getDeptName();

    case DEPT_ID:
      return Integer.valueOf(getDeptId());

    case PM_USER_NAME:
      return getPmUserName();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case FORECLOSURE_AMT:
      return getForeclosureAmt();

    case CONSULT_FEE:
      return Double.valueOf(getConsultFee());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case BROKERAGE:
      return Double.valueOf(getBrokerage());

    case COLLECT_FEE_DATE:
      return getCollectFeeDate();

    case MAX_COLLECT_FEE_DATE:
      return getMaxCollectFeeDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case HOME_NAME:
      return getHomeName();

    case SELLER_NAME:
      return getSellerName();

    case BUYER_NAME:
      return getBuyerName();

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case PRODUCT_NAME:
      return getProductName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case BUSINESS_SOURCE_NAME:
      return isSetBusinessSourceName();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case DEPT_NAME:
      return isSetDeptName();
    case DEPT_ID:
      return isSetDeptId();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PM_USER_ID:
      return isSetPmUserId();
    case LOAN_AMT:
      return isSetLoanAmt();
    case FORECLOSURE_AMT:
      return isSetForeclosureAmt();
    case CONSULT_FEE:
      return isSetConsultFee();
    case POUNDAGE:
      return isSetPoundage();
    case BROKERAGE:
      return isSetBrokerage();
    case COLLECT_FEE_DATE:
      return isSetCollectFeeDate();
    case MAX_COLLECT_FEE_DATE:
      return isSetMaxCollectFeeDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case HOME_NAME:
      return isSetHomeName();
    case SELLER_NAME:
      return isSetSellerName();
    case BUYER_NAME:
      return isSetBuyerName();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case PRODUCT_NAME:
      return isSetProductName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectFeeReport)
      return this.equals((CollectFeeReport)that);
    return false;
  }

  public boolean equals(CollectFeeReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_businessSourceName = true && this.isSetBusinessSourceName();
    boolean that_present_businessSourceName = true && that.isSetBusinessSourceName();
    if (this_present_businessSourceName || that_present_businessSourceName) {
      if (!(this_present_businessSourceName && that_present_businessSourceName))
        return false;
      if (!this.businessSourceName.equals(that.businessSourceName))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_deptId = true;
    boolean that_present_deptId = true;
    if (this_present_deptId || that_present_deptId) {
      if (!(this_present_deptId && that_present_deptId))
        return false;
      if (this.deptId != that.deptId)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_foreclosureAmt = true && this.isSetForeclosureAmt();
    boolean that_present_foreclosureAmt = true && that.isSetForeclosureAmt();
    if (this_present_foreclosureAmt || that_present_foreclosureAmt) {
      if (!(this_present_foreclosureAmt && that_present_foreclosureAmt))
        return false;
      if (!this.foreclosureAmt.equals(that.foreclosureAmt))
        return false;
    }

    boolean this_present_consultFee = true;
    boolean that_present_consultFee = true;
    if (this_present_consultFee || that_present_consultFee) {
      if (!(this_present_consultFee && that_present_consultFee))
        return false;
      if (this.consultFee != that.consultFee)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_brokerage = true;
    boolean that_present_brokerage = true;
    if (this_present_brokerage || that_present_brokerage) {
      if (!(this_present_brokerage && that_present_brokerage))
        return false;
      if (this.brokerage != that.brokerage)
        return false;
    }

    boolean this_present_collectFeeDate = true && this.isSetCollectFeeDate();
    boolean that_present_collectFeeDate = true && that.isSetCollectFeeDate();
    if (this_present_collectFeeDate || that_present_collectFeeDate) {
      if (!(this_present_collectFeeDate && that_present_collectFeeDate))
        return false;
      if (!this.collectFeeDate.equals(that.collectFeeDate))
        return false;
    }

    boolean this_present_maxCollectFeeDate = true && this.isSetMaxCollectFeeDate();
    boolean that_present_maxCollectFeeDate = true && that.isSetMaxCollectFeeDate();
    if (this_present_maxCollectFeeDate || that_present_maxCollectFeeDate) {
      if (!(this_present_maxCollectFeeDate && that_present_maxCollectFeeDate))
        return false;
      if (!this.maxCollectFeeDate.equals(that.maxCollectFeeDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_homeName = true && this.isSetHomeName();
    boolean that_present_homeName = true && that.isSetHomeName();
    if (this_present_homeName || that_present_homeName) {
      if (!(this_present_homeName && that_present_homeName))
        return false;
      if (!this.homeName.equals(that.homeName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_businessSourceName = true && (isSetBusinessSourceName());
    list.add(present_businessSourceName);
    if (present_businessSourceName)
      list.add(businessSourceName);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_deptId = true;
    list.add(present_deptId);
    if (present_deptId)
      list.add(deptId);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_foreclosureAmt = true && (isSetForeclosureAmt());
    list.add(present_foreclosureAmt);
    if (present_foreclosureAmt)
      list.add(foreclosureAmt);

    boolean present_consultFee = true;
    list.add(present_consultFee);
    if (present_consultFee)
      list.add(consultFee);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_brokerage = true;
    list.add(present_brokerage);
    if (present_brokerage)
      list.add(brokerage);

    boolean present_collectFeeDate = true && (isSetCollectFeeDate());
    list.add(present_collectFeeDate);
    if (present_collectFeeDate)
      list.add(collectFeeDate);

    boolean present_maxCollectFeeDate = true && (isSetMaxCollectFeeDate());
    list.add(present_maxCollectFeeDate);
    if (present_maxCollectFeeDate)
      list.add(maxCollectFeeDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_homeName = true && (isSetHomeName());
    list.add(present_homeName);
    if (present_homeName)
      list.add(homeName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectFeeReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceName()).compareTo(other.isSetBusinessSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceName, other.businessSourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptId()).compareTo(other.isSetDeptId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptId, other.deptId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureAmt()).compareTo(other.isSetForeclosureAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureAmt, other.foreclosureAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsultFee()).compareTo(other.isSetConsultFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsultFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consultFee, other.consultFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerage()).compareTo(other.isSetBrokerage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerage, other.brokerage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFeeDate()).compareTo(other.isSetCollectFeeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFeeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeeDate, other.collectFeeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCollectFeeDate()).compareTo(other.isSetMaxCollectFeeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCollectFeeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCollectFeeDate, other.maxCollectFeeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeName()).compareTo(other.isSetHomeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeName, other.homeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectFeeReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceName:");
    if (this.businessSourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptId:");
    sb.append(this.deptId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureAmt:");
    if (this.foreclosureAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consultFee:");
    sb.append(this.consultFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerage:");
    sb.append(this.brokerage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFeeDate:");
    if (this.collectFeeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFeeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCollectFeeDate:");
    if (this.maxCollectFeeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.maxCollectFeeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeName:");
    if (this.homeName == null) {
      sb.append("null");
    } else {
      sb.append(this.homeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectFeeReportStandardSchemeFactory implements SchemeFactory {
    public CollectFeeReportStandardScheme getScheme() {
      return new CollectFeeReportStandardScheme();
    }
  }

  private static class CollectFeeReportStandardScheme extends StandardScheme<CollectFeeReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectFeeReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceName = iprot.readString();
              struct.setBusinessSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deptId = iprot.readI32();
              struct.setDeptIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FORECLOSURE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureAmt = iprot.readString();
              struct.setForeclosureAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONSULT_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consultFee = iprot.readDouble();
              struct.setConsultFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BROKERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brokerage = iprot.readDouble();
              struct.setBrokerageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COLLECT_FEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectFeeDate = iprot.readString();
              struct.setCollectFeeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_COLLECT_FEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxCollectFeeDate = iprot.readString();
              struct.setMaxCollectFeeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.userIds.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // HOME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeName = iprot.readString();
              struct.setHomeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectFeeReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.businessSourceName != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.businessSourceName);
        oprot.writeFieldEnd();
      }
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.deptId);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      if (struct.foreclosureAmt != null) {
        oprot.writeFieldBegin(FORECLOSURE_AMT_FIELD_DESC);
        oprot.writeString(struct.foreclosureAmt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSULT_FEE_FIELD_DESC);
      oprot.writeDouble(struct.consultFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKERAGE_FIELD_DESC);
      oprot.writeDouble(struct.brokerage);
      oprot.writeFieldEnd();
      if (struct.collectFeeDate != null) {
        oprot.writeFieldBegin(COLLECT_FEE_DATE_FIELD_DESC);
        oprot.writeString(struct.collectFeeDate);
        oprot.writeFieldEnd();
      }
      if (struct.maxCollectFeeDate != null) {
        oprot.writeFieldBegin(MAX_COLLECT_FEE_DATE_FIELD_DESC);
        oprot.writeString(struct.maxCollectFeeDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter27 : struct.userIds)
          {
            oprot.writeI32(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.homeName != null) {
        oprot.writeFieldBegin(HOME_NAME_FIELD_DESC);
        oprot.writeString(struct.homeName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectFeeReportTupleSchemeFactory implements SchemeFactory {
    public CollectFeeReportTupleScheme getScheme() {
      return new CollectFeeReportTupleScheme();
    }
  }

  private static class CollectFeeReportTupleScheme extends TupleScheme<CollectFeeReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectFeeReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessSourceName()) {
        optionals.set(4);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(5);
      }
      if (struct.isSetDeptName()) {
        optionals.set(6);
      }
      if (struct.isSetDeptId()) {
        optionals.set(7);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(8);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(9);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(10);
      }
      if (struct.isSetForeclosureAmt()) {
        optionals.set(11);
      }
      if (struct.isSetConsultFee()) {
        optionals.set(12);
      }
      if (struct.isSetPoundage()) {
        optionals.set(13);
      }
      if (struct.isSetBrokerage()) {
        optionals.set(14);
      }
      if (struct.isSetCollectFeeDate()) {
        optionals.set(15);
      }
      if (struct.isSetMaxCollectFeeDate()) {
        optionals.set(16);
      }
      if (struct.isSetPage()) {
        optionals.set(17);
      }
      if (struct.isSetRows()) {
        optionals.set(18);
      }
      if (struct.isSetUserIds()) {
        optionals.set(19);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(20);
      }
      if (struct.isSetHomeName()) {
        optionals.set(21);
      }
      if (struct.isSetSellerName()) {
        optionals.set(22);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(23);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(24);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(25);
      }
      if (struct.isSetProductName()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetBusinessSourceName()) {
        oprot.writeString(struct.businessSourceName);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetDeptId()) {
        oprot.writeI32(struct.deptId);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetForeclosureAmt()) {
        oprot.writeString(struct.foreclosureAmt);
      }
      if (struct.isSetConsultFee()) {
        oprot.writeDouble(struct.consultFee);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetBrokerage()) {
        oprot.writeDouble(struct.brokerage);
      }
      if (struct.isSetCollectFeeDate()) {
        oprot.writeString(struct.collectFeeDate);
      }
      if (struct.isSetMaxCollectFeeDate()) {
        oprot.writeString(struct.maxCollectFeeDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter28 : struct.userIds)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetHomeName()) {
        oprot.writeString(struct.homeName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectFeeReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessSourceName = iprot.readString();
        struct.setBusinessSourceNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deptId = iprot.readI32();
        struct.setDeptIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.foreclosureAmt = iprot.readString();
        struct.setForeclosureAmtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.consultFee = iprot.readDouble();
        struct.setConsultFeeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.brokerage = iprot.readDouble();
        struct.setBrokerageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.collectFeeDate = iprot.readString();
        struct.setCollectFeeDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.maxCollectFeeDate = iprot.readString();
        struct.setMaxCollectFeeDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(18)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.userIds.add(_elem30);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(21)) {
        struct.homeName = iprot.readString();
        struct.setHomeNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(25)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(26)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.foreafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-14")
public class TransitMonitorIndex implements org.apache.thrift.TBase<TransitMonitorIndex, TransitMonitorIndex._Fields>, java.io.Serializable, Cloneable, Comparable<TransitMonitorIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransitMonitorIndex");

  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDateDiff", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REPAYMENT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentEndDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentEndDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FORE_AFTER_MONITOR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAfterMonitorStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REPAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentStatus", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MAKE_LOANS_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("makeLoansRes", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField FORE_AFTER_MONITOR_STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAfterMonitorStatusName", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransitMonitorIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransitMonitorIndexTupleSchemeFactory());
  }

  public String projectName; // required
  public String receDate; // required
  public int loanDays; // required
  public double loanMoney; // required
  public String businessSourceStr; // required
  public String buyerName; // required
  public String sellerName; // required
  public String houseName; // required
  public String housePropertyCard; // required
  public String productName; // required
  public String planRepaymentDate; // required
  public int repaymentDateDiff; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String repaymentDate; // required
  public String repaymentEndDate; // required
  public String planRepaymentEndDate; // required
  public int foreAfterMonitorStatus; // required
  public int repaymentStatus; // required
  public int projectId; // required
  public String makeLoansRes; // required
  public String foreAfterMonitorStatusName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_NAME((short)1, "projectName"),
    RECE_DATE((short)2, "receDate"),
    LOAN_DAYS((short)3, "loanDays"),
    LOAN_MONEY((short)4, "loanMoney"),
    BUSINESS_SOURCE_STR((short)5, "businessSourceStr"),
    BUYER_NAME((short)6, "buyerName"),
    SELLER_NAME((short)7, "sellerName"),
    HOUSE_NAME((short)8, "houseName"),
    HOUSE_PROPERTY_CARD((short)9, "housePropertyCard"),
    PRODUCT_NAME((short)10, "productName"),
    PLAN_REPAYMENT_DATE((short)11, "planRepaymentDate"),
    REPAYMENT_DATE_DIFF((short)12, "repaymentDateDiff"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows"),
    USER_IDS((short)15, "userIds"),
    REPAYMENT_DATE((short)16, "repaymentDate"),
    REPAYMENT_END_DATE((short)17, "repaymentEndDate"),
    PLAN_REPAYMENT_END_DATE((short)18, "planRepaymentEndDate"),
    FORE_AFTER_MONITOR_STATUS((short)19, "foreAfterMonitorStatus"),
    REPAYMENT_STATUS((short)20, "repaymentStatus"),
    PROJECT_ID((short)21, "projectId"),
    MAKE_LOANS_RES((short)22, "makeLoansRes"),
    FORE_AFTER_MONITOR_STATUS_NAME((short)23, "foreAfterMonitorStatusName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_NAME
          return PROJECT_NAME;
        case 2: // RECE_DATE
          return RECE_DATE;
        case 3: // LOAN_DAYS
          return LOAN_DAYS;
        case 4: // LOAN_MONEY
          return LOAN_MONEY;
        case 5: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 6: // BUYER_NAME
          return BUYER_NAME;
        case 7: // SELLER_NAME
          return SELLER_NAME;
        case 8: // HOUSE_NAME
          return HOUSE_NAME;
        case 9: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 10: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 11: // PLAN_REPAYMENT_DATE
          return PLAN_REPAYMENT_DATE;
        case 12: // REPAYMENT_DATE_DIFF
          return REPAYMENT_DATE_DIFF;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        case 15: // USER_IDS
          return USER_IDS;
        case 16: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 17: // REPAYMENT_END_DATE
          return REPAYMENT_END_DATE;
        case 18: // PLAN_REPAYMENT_END_DATE
          return PLAN_REPAYMENT_END_DATE;
        case 19: // FORE_AFTER_MONITOR_STATUS
          return FORE_AFTER_MONITOR_STATUS;
        case 20: // REPAYMENT_STATUS
          return REPAYMENT_STATUS;
        case 21: // PROJECT_ID
          return PROJECT_ID;
        case 22: // MAKE_LOANS_RES
          return MAKE_LOANS_RES;
        case 23: // FORE_AFTER_MONITOR_STATUS_NAME
          return FORE_AFTER_MONITOR_STATUS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANDAYS_ISSET_ID = 0;
  private static final int __LOANMONEY_ISSET_ID = 1;
  private static final int __REPAYMENTDATEDIFF_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __FOREAFTERMONITORSTATUS_ISSET_ID = 5;
  private static final int __REPAYMENTSTATUS_ISSET_ID = 6;
  private static final int __PROJECTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE, new org.apache.thrift.meta_data.FieldMetaData("receDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_DATE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("repaymentDateDiff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_AFTER_MONITOR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreAfterMonitorStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAKE_LOANS_RES, new org.apache.thrift.meta_data.FieldMetaData("makeLoansRes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_AFTER_MONITOR_STATUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreAfterMonitorStatusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransitMonitorIndex.class, metaDataMap);
  }

  public TransitMonitorIndex() {
    this.page = 1;

    this.rows = 10;

  }

  public TransitMonitorIndex(
    String projectName,
    String receDate,
    int loanDays,
    double loanMoney,
    String businessSourceStr,
    String buyerName,
    String sellerName,
    String houseName,
    String housePropertyCard,
    String productName,
    String planRepaymentDate,
    int repaymentDateDiff,
    int page,
    int rows,
    List<Integer> userIds,
    String repaymentDate,
    String repaymentEndDate,
    String planRepaymentEndDate,
    int foreAfterMonitorStatus,
    int repaymentStatus,
    int projectId,
    String makeLoansRes,
    String foreAfterMonitorStatusName)
  {
    this();
    this.projectName = projectName;
    this.receDate = receDate;
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.businessSourceStr = businessSourceStr;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.houseName = houseName;
    this.housePropertyCard = housePropertyCard;
    this.productName = productName;
    this.planRepaymentDate = planRepaymentDate;
    this.repaymentDateDiff = repaymentDateDiff;
    setRepaymentDateDiffIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.repaymentDate = repaymentDate;
    this.repaymentEndDate = repaymentEndDate;
    this.planRepaymentEndDate = planRepaymentEndDate;
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.makeLoansRes = makeLoansRes;
    this.foreAfterMonitorStatusName = foreAfterMonitorStatusName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransitMonitorIndex(TransitMonitorIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetReceDate()) {
      this.receDate = other.receDate;
    }
    this.loanDays = other.loanDays;
    this.loanMoney = other.loanMoney;
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetPlanRepaymentDate()) {
      this.planRepaymentDate = other.planRepaymentDate;
    }
    this.repaymentDateDiff = other.repaymentDateDiff;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    if (other.isSetRepaymentEndDate()) {
      this.repaymentEndDate = other.repaymentEndDate;
    }
    if (other.isSetPlanRepaymentEndDate()) {
      this.planRepaymentEndDate = other.planRepaymentEndDate;
    }
    this.foreAfterMonitorStatus = other.foreAfterMonitorStatus;
    this.repaymentStatus = other.repaymentStatus;
    this.projectId = other.projectId;
    if (other.isSetMakeLoansRes()) {
      this.makeLoansRes = other.makeLoansRes;
    }
    if (other.isSetForeAfterMonitorStatusName()) {
      this.foreAfterMonitorStatusName = other.foreAfterMonitorStatusName;
    }
  }

  public TransitMonitorIndex deepCopy() {
    return new TransitMonitorIndex(this);
  }

  @Override
  public void clear() {
    this.projectName = null;
    this.receDate = null;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.businessSourceStr = null;
    this.buyerName = null;
    this.sellerName = null;
    this.houseName = null;
    this.housePropertyCard = null;
    this.productName = null;
    this.planRepaymentDate = null;
    setRepaymentDateDiffIsSet(false);
    this.repaymentDateDiff = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.repaymentDate = null;
    this.repaymentEndDate = null;
    this.planRepaymentEndDate = null;
    setForeAfterMonitorStatusIsSet(false);
    this.foreAfterMonitorStatus = 0;
    setRepaymentStatusIsSet(false);
    this.repaymentStatus = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.makeLoansRes = null;
    this.foreAfterMonitorStatusName = null;
  }

  public String getProjectName() {
    return this.projectName;
  }

  public TransitMonitorIndex setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getReceDate() {
    return this.receDate;
  }

  public TransitMonitorIndex setReceDate(String receDate) {
    this.receDate = receDate;
    return this;
  }

  public void unsetReceDate() {
    this.receDate = null;
  }

  /** Returns true if field receDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDate() {
    return this.receDate != null;
  }

  public void setReceDateIsSet(boolean value) {
    if (!value) {
      this.receDate = null;
    }
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public TransitMonitorIndex setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public TransitMonitorIndex setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public TransitMonitorIndex setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public TransitMonitorIndex setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public TransitMonitorIndex setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public TransitMonitorIndex setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public TransitMonitorIndex setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public TransitMonitorIndex setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getPlanRepaymentDate() {
    return this.planRepaymentDate;
  }

  public TransitMonitorIndex setPlanRepaymentDate(String planRepaymentDate) {
    this.planRepaymentDate = planRepaymentDate;
    return this;
  }

  public void unsetPlanRepaymentDate() {
    this.planRepaymentDate = null;
  }

  /** Returns true if field planRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentDate() {
    return this.planRepaymentDate != null;
  }

  public void setPlanRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentDate = null;
    }
  }

  public int getRepaymentDateDiff() {
    return this.repaymentDateDiff;
  }

  public TransitMonitorIndex setRepaymentDateDiff(int repaymentDateDiff) {
    this.repaymentDateDiff = repaymentDateDiff;
    setRepaymentDateDiffIsSet(true);
    return this;
  }

  public void unsetRepaymentDateDiff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID);
  }

  /** Returns true if field repaymentDateDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDateDiff() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID);
  }

  public void setRepaymentDateDiffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TransitMonitorIndex setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TransitMonitorIndex setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public TransitMonitorIndex setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public TransitMonitorIndex setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public String getRepaymentEndDate() {
    return this.repaymentEndDate;
  }

  public TransitMonitorIndex setRepaymentEndDate(String repaymentEndDate) {
    this.repaymentEndDate = repaymentEndDate;
    return this;
  }

  public void unsetRepaymentEndDate() {
    this.repaymentEndDate = null;
  }

  /** Returns true if field repaymentEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentEndDate() {
    return this.repaymentEndDate != null;
  }

  public void setRepaymentEndDateIsSet(boolean value) {
    if (!value) {
      this.repaymentEndDate = null;
    }
  }

  public String getPlanRepaymentEndDate() {
    return this.planRepaymentEndDate;
  }

  public TransitMonitorIndex setPlanRepaymentEndDate(String planRepaymentEndDate) {
    this.planRepaymentEndDate = planRepaymentEndDate;
    return this;
  }

  public void unsetPlanRepaymentEndDate() {
    this.planRepaymentEndDate = null;
  }

  /** Returns true if field planRepaymentEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentEndDate() {
    return this.planRepaymentEndDate != null;
  }

  public void setPlanRepaymentEndDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentEndDate = null;
    }
  }

  public int getForeAfterMonitorStatus() {
    return this.foreAfterMonitorStatus;
  }

  public TransitMonitorIndex setForeAfterMonitorStatus(int foreAfterMonitorStatus) {
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    return this;
  }

  public void unsetForeAfterMonitorStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  /** Returns true if field foreAfterMonitorStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAfterMonitorStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  public void setForeAfterMonitorStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOREAFTERMONITORSTATUS_ISSET_ID, value);
  }

  public int getRepaymentStatus() {
    return this.repaymentStatus;
  }

  public TransitMonitorIndex setRepaymentStatus(int repaymentStatus) {
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    return this;
  }

  public void unsetRepaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field repaymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  public void setRepaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TransitMonitorIndex setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getMakeLoansRes() {
    return this.makeLoansRes;
  }

  public TransitMonitorIndex setMakeLoansRes(String makeLoansRes) {
    this.makeLoansRes = makeLoansRes;
    return this;
  }

  public void unsetMakeLoansRes() {
    this.makeLoansRes = null;
  }

  /** Returns true if field makeLoansRes is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeLoansRes() {
    return this.makeLoansRes != null;
  }

  public void setMakeLoansResIsSet(boolean value) {
    if (!value) {
      this.makeLoansRes = null;
    }
  }

  public String getForeAfterMonitorStatusName() {
    return this.foreAfterMonitorStatusName;
  }

  public TransitMonitorIndex setForeAfterMonitorStatusName(String foreAfterMonitorStatusName) {
    this.foreAfterMonitorStatusName = foreAfterMonitorStatusName;
    return this;
  }

  public void unsetForeAfterMonitorStatusName() {
    this.foreAfterMonitorStatusName = null;
  }

  /** Returns true if field foreAfterMonitorStatusName is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAfterMonitorStatusName() {
    return this.foreAfterMonitorStatusName != null;
  }

  public void setForeAfterMonitorStatusNameIsSet(boolean value) {
    if (!value) {
      this.foreAfterMonitorStatusName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case RECE_DATE:
      if (value == null) {
        unsetReceDate();
      } else {
        setReceDate((String)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PLAN_REPAYMENT_DATE:
      if (value == null) {
        unsetPlanRepaymentDate();
      } else {
        setPlanRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_DATE_DIFF:
      if (value == null) {
        unsetRepaymentDateDiff();
      } else {
        setRepaymentDateDiff((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_END_DATE:
      if (value == null) {
        unsetRepaymentEndDate();
      } else {
        setRepaymentEndDate((String)value);
      }
      break;

    case PLAN_REPAYMENT_END_DATE:
      if (value == null) {
        unsetPlanRepaymentEndDate();
      } else {
        setPlanRepaymentEndDate((String)value);
      }
      break;

    case FORE_AFTER_MONITOR_STATUS:
      if (value == null) {
        unsetForeAfterMonitorStatus();
      } else {
        setForeAfterMonitorStatus((Integer)value);
      }
      break;

    case REPAYMENT_STATUS:
      if (value == null) {
        unsetRepaymentStatus();
      } else {
        setRepaymentStatus((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MAKE_LOANS_RES:
      if (value == null) {
        unsetMakeLoansRes();
      } else {
        setMakeLoansRes((String)value);
      }
      break;

    case FORE_AFTER_MONITOR_STATUS_NAME:
      if (value == null) {
        unsetForeAfterMonitorStatusName();
      } else {
        setForeAfterMonitorStatusName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_NAME:
      return getProjectName();

    case RECE_DATE:
      return getReceDate();

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case HOUSE_NAME:
      return getHouseName();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case PRODUCT_NAME:
      return getProductName();

    case PLAN_REPAYMENT_DATE:
      return getPlanRepaymentDate();

    case REPAYMENT_DATE_DIFF:
      return Integer.valueOf(getRepaymentDateDiff());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case REPAYMENT_END_DATE:
      return getRepaymentEndDate();

    case PLAN_REPAYMENT_END_DATE:
      return getPlanRepaymentEndDate();

    case FORE_AFTER_MONITOR_STATUS:
      return Integer.valueOf(getForeAfterMonitorStatus());

    case REPAYMENT_STATUS:
      return Integer.valueOf(getRepaymentStatus());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MAKE_LOANS_RES:
      return getMakeLoansRes();

    case FORE_AFTER_MONITOR_STATUS_NAME:
      return getForeAfterMonitorStatusName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_NAME:
      return isSetProjectName();
    case RECE_DATE:
      return isSetReceDate();
    case LOAN_DAYS:
      return isSetLoanDays();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case HOUSE_NAME:
      return isSetHouseName();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case PRODUCT_NAME:
      return isSetProductName();
    case PLAN_REPAYMENT_DATE:
      return isSetPlanRepaymentDate();
    case REPAYMENT_DATE_DIFF:
      return isSetRepaymentDateDiff();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case REPAYMENT_END_DATE:
      return isSetRepaymentEndDate();
    case PLAN_REPAYMENT_END_DATE:
      return isSetPlanRepaymentEndDate();
    case FORE_AFTER_MONITOR_STATUS:
      return isSetForeAfterMonitorStatus();
    case REPAYMENT_STATUS:
      return isSetRepaymentStatus();
    case PROJECT_ID:
      return isSetProjectId();
    case MAKE_LOANS_RES:
      return isSetMakeLoansRes();
    case FORE_AFTER_MONITOR_STATUS_NAME:
      return isSetForeAfterMonitorStatusName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransitMonitorIndex)
      return this.equals((TransitMonitorIndex)that);
    return false;
  }

  public boolean equals(TransitMonitorIndex that) {
    if (that == null)
      return false;

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_receDate = true && this.isSetReceDate();
    boolean that_present_receDate = true && that.isSetReceDate();
    if (this_present_receDate || that_present_receDate) {
      if (!(this_present_receDate && that_present_receDate))
        return false;
      if (!this.receDate.equals(that.receDate))
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_planRepaymentDate = true && this.isSetPlanRepaymentDate();
    boolean that_present_planRepaymentDate = true && that.isSetPlanRepaymentDate();
    if (this_present_planRepaymentDate || that_present_planRepaymentDate) {
      if (!(this_present_planRepaymentDate && that_present_planRepaymentDate))
        return false;
      if (!this.planRepaymentDate.equals(that.planRepaymentDate))
        return false;
    }

    boolean this_present_repaymentDateDiff = true;
    boolean that_present_repaymentDateDiff = true;
    if (this_present_repaymentDateDiff || that_present_repaymentDateDiff) {
      if (!(this_present_repaymentDateDiff && that_present_repaymentDateDiff))
        return false;
      if (this.repaymentDateDiff != that.repaymentDateDiff)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_repaymentEndDate = true && this.isSetRepaymentEndDate();
    boolean that_present_repaymentEndDate = true && that.isSetRepaymentEndDate();
    if (this_present_repaymentEndDate || that_present_repaymentEndDate) {
      if (!(this_present_repaymentEndDate && that_present_repaymentEndDate))
        return false;
      if (!this.repaymentEndDate.equals(that.repaymentEndDate))
        return false;
    }

    boolean this_present_planRepaymentEndDate = true && this.isSetPlanRepaymentEndDate();
    boolean that_present_planRepaymentEndDate = true && that.isSetPlanRepaymentEndDate();
    if (this_present_planRepaymentEndDate || that_present_planRepaymentEndDate) {
      if (!(this_present_planRepaymentEndDate && that_present_planRepaymentEndDate))
        return false;
      if (!this.planRepaymentEndDate.equals(that.planRepaymentEndDate))
        return false;
    }

    boolean this_present_foreAfterMonitorStatus = true;
    boolean that_present_foreAfterMonitorStatus = true;
    if (this_present_foreAfterMonitorStatus || that_present_foreAfterMonitorStatus) {
      if (!(this_present_foreAfterMonitorStatus && that_present_foreAfterMonitorStatus))
        return false;
      if (this.foreAfterMonitorStatus != that.foreAfterMonitorStatus)
        return false;
    }

    boolean this_present_repaymentStatus = true;
    boolean that_present_repaymentStatus = true;
    if (this_present_repaymentStatus || that_present_repaymentStatus) {
      if (!(this_present_repaymentStatus && that_present_repaymentStatus))
        return false;
      if (this.repaymentStatus != that.repaymentStatus)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_makeLoansRes = true && this.isSetMakeLoansRes();
    boolean that_present_makeLoansRes = true && that.isSetMakeLoansRes();
    if (this_present_makeLoansRes || that_present_makeLoansRes) {
      if (!(this_present_makeLoansRes && that_present_makeLoansRes))
        return false;
      if (!this.makeLoansRes.equals(that.makeLoansRes))
        return false;
    }

    boolean this_present_foreAfterMonitorStatusName = true && this.isSetForeAfterMonitorStatusName();
    boolean that_present_foreAfterMonitorStatusName = true && that.isSetForeAfterMonitorStatusName();
    if (this_present_foreAfterMonitorStatusName || that_present_foreAfterMonitorStatusName) {
      if (!(this_present_foreAfterMonitorStatusName && that_present_foreAfterMonitorStatusName))
        return false;
      if (!this.foreAfterMonitorStatusName.equals(that.foreAfterMonitorStatusName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_receDate = true && (isSetReceDate());
    list.add(present_receDate);
    if (present_receDate)
      list.add(receDate);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_planRepaymentDate = true && (isSetPlanRepaymentDate());
    list.add(present_planRepaymentDate);
    if (present_planRepaymentDate)
      list.add(planRepaymentDate);

    boolean present_repaymentDateDiff = true;
    list.add(present_repaymentDateDiff);
    if (present_repaymentDateDiff)
      list.add(repaymentDateDiff);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_repaymentEndDate = true && (isSetRepaymentEndDate());
    list.add(present_repaymentEndDate);
    if (present_repaymentEndDate)
      list.add(repaymentEndDate);

    boolean present_planRepaymentEndDate = true && (isSetPlanRepaymentEndDate());
    list.add(present_planRepaymentEndDate);
    if (present_planRepaymentEndDate)
      list.add(planRepaymentEndDate);

    boolean present_foreAfterMonitorStatus = true;
    list.add(present_foreAfterMonitorStatus);
    if (present_foreAfterMonitorStatus)
      list.add(foreAfterMonitorStatus);

    boolean present_repaymentStatus = true;
    list.add(present_repaymentStatus);
    if (present_repaymentStatus)
      list.add(repaymentStatus);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_makeLoansRes = true && (isSetMakeLoansRes());
    list.add(present_makeLoansRes);
    if (present_makeLoansRes)
      list.add(makeLoansRes);

    boolean present_foreAfterMonitorStatusName = true && (isSetForeAfterMonitorStatusName());
    list.add(present_foreAfterMonitorStatusName);
    if (present_foreAfterMonitorStatusName)
      list.add(foreAfterMonitorStatusName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransitMonitorIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDate()).compareTo(other.isSetReceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDate, other.receDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentDate()).compareTo(other.isSetPlanRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentDate, other.planRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDateDiff()).compareTo(other.isSetRepaymentDateDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDateDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDateDiff, other.repaymentDateDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentEndDate()).compareTo(other.isSetRepaymentEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentEndDate, other.repaymentEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentEndDate()).compareTo(other.isSetPlanRepaymentEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentEndDate, other.planRepaymentEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAfterMonitorStatus()).compareTo(other.isSetForeAfterMonitorStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAfterMonitorStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAfterMonitorStatus, other.foreAfterMonitorStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentStatus()).compareTo(other.isSetRepaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentStatus, other.repaymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeLoansRes()).compareTo(other.isSetMakeLoansRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeLoansRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeLoansRes, other.makeLoansRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAfterMonitorStatusName()).compareTo(other.isSetForeAfterMonitorStatusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAfterMonitorStatusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAfterMonitorStatusName, other.foreAfterMonitorStatusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransitMonitorIndex(");
    boolean first = true;

    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDate:");
    if (this.receDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentDate:");
    if (this.planRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDateDiff:");
    sb.append(this.repaymentDateDiff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentEndDate:");
    if (this.repaymentEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentEndDate:");
    if (this.planRepaymentEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAfterMonitorStatus:");
    sb.append(this.foreAfterMonitorStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentStatus:");
    sb.append(this.repaymentStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeLoansRes:");
    if (this.makeLoansRes == null) {
      sb.append("null");
    } else {
      sb.append(this.makeLoansRes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAfterMonitorStatusName:");
    if (this.foreAfterMonitorStatusName == null) {
      sb.append("null");
    } else {
      sb.append(this.foreAfterMonitorStatusName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransitMonitorIndexStandardSchemeFactory implements SchemeFactory {
    public TransitMonitorIndexStandardScheme getScheme() {
      return new TransitMonitorIndexStandardScheme();
    }
  }

  private static class TransitMonitorIndexStandardScheme extends StandardScheme<TransitMonitorIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransitMonitorIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDate = iprot.readString();
              struct.setReceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentDate = iprot.readString();
              struct.setPlanRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPAYMENT_DATE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentDateDiff = iprot.readI32();
              struct.setRepaymentDateDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAYMENT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentEndDate = iprot.readString();
              struct.setRepaymentEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PLAN_REPAYMENT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentEndDate = iprot.readString();
              struct.setPlanRepaymentEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FORE_AFTER_MONITOR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreAfterMonitorStatus = iprot.readI32();
              struct.setForeAfterMonitorStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REPAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentStatus = iprot.readI32();
              struct.setRepaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MAKE_LOANS_RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.makeLoansRes = iprot.readString();
              struct.setMakeLoansResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FORE_AFTER_MONITOR_STATUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreAfterMonitorStatusName = iprot.readString();
              struct.setForeAfterMonitorStatusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransitMonitorIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.receDate != null) {
        oprot.writeFieldBegin(RECE_DATE_FIELD_DESC);
        oprot.writeString(struct.receDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.planRepaymentDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_DATE_DIFF_FIELD_DESC);
      oprot.writeI32(struct.repaymentDateDiff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter3 : struct.userIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentEndDate != null) {
        oprot.writeFieldBegin(REPAYMENT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.planRepaymentEndDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORE_AFTER_MONITOR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreAfterMonitorStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.repaymentStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.makeLoansRes != null) {
        oprot.writeFieldBegin(MAKE_LOANS_RES_FIELD_DESC);
        oprot.writeString(struct.makeLoansRes);
        oprot.writeFieldEnd();
      }
      if (struct.foreAfterMonitorStatusName != null) {
        oprot.writeFieldBegin(FORE_AFTER_MONITOR_STATUS_NAME_FIELD_DESC);
        oprot.writeString(struct.foreAfterMonitorStatusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransitMonitorIndexTupleSchemeFactory implements SchemeFactory {
    public TransitMonitorIndexTupleScheme getScheme() {
      return new TransitMonitorIndexTupleScheme();
    }
  }

  private static class TransitMonitorIndexTupleScheme extends TupleScheme<TransitMonitorIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransitMonitorIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectName()) {
        optionals.set(0);
      }
      if (struct.isSetReceDate()) {
        optionals.set(1);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(2);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(4);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(5);
      }
      if (struct.isSetSellerName()) {
        optionals.set(6);
      }
      if (struct.isSetHouseName()) {
        optionals.set(7);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(8);
      }
      if (struct.isSetProductName()) {
        optionals.set(9);
      }
      if (struct.isSetPlanRepaymentDate()) {
        optionals.set(10);
      }
      if (struct.isSetRepaymentDateDiff()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      if (struct.isSetUserIds()) {
        optionals.set(14);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(15);
      }
      if (struct.isSetRepaymentEndDate()) {
        optionals.set(16);
      }
      if (struct.isSetPlanRepaymentEndDate()) {
        optionals.set(17);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        optionals.set(18);
      }
      if (struct.isSetRepaymentStatus()) {
        optionals.set(19);
      }
      if (struct.isSetProjectId()) {
        optionals.set(20);
      }
      if (struct.isSetMakeLoansRes()) {
        optionals.set(21);
      }
      if (struct.isSetForeAfterMonitorStatusName()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetReceDate()) {
        oprot.writeString(struct.receDate);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetPlanRepaymentDate()) {
        oprot.writeString(struct.planRepaymentDate);
      }
      if (struct.isSetRepaymentDateDiff()) {
        oprot.writeI32(struct.repaymentDateDiff);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter4 : struct.userIds)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetRepaymentEndDate()) {
        oprot.writeString(struct.repaymentEndDate);
      }
      if (struct.isSetPlanRepaymentEndDate()) {
        oprot.writeString(struct.planRepaymentEndDate);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        oprot.writeI32(struct.foreAfterMonitorStatus);
      }
      if (struct.isSetRepaymentStatus()) {
        oprot.writeI32(struct.repaymentStatus);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMakeLoansRes()) {
        oprot.writeString(struct.makeLoansRes);
      }
      if (struct.isSetForeAfterMonitorStatusName()) {
        oprot.writeString(struct.foreAfterMonitorStatusName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransitMonitorIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.receDate = iprot.readString();
        struct.setReceDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planRepaymentDate = iprot.readString();
        struct.setPlanRepaymentDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repaymentDateDiff = iprot.readI32();
        struct.setRepaymentDateDiffIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.userIds.add(_elem6);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.repaymentEndDate = iprot.readString();
        struct.setRepaymentEndDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.planRepaymentEndDate = iprot.readString();
        struct.setPlanRepaymentEndDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.foreAfterMonitorStatus = iprot.readI32();
        struct.setForeAfterMonitorStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.repaymentStatus = iprot.readI32();
        struct.setRepaymentStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.makeLoansRes = iprot.readString();
        struct.setMakeLoansResIsSet(true);
      }
      if (incoming.get(22)) {
        struct.foreAfterMonitorStatusName = iprot.readString();
        struct.setForeAfterMonitorStatusNameIsSet(true);
      }
    }
  }

}


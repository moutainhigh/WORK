/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class CostDerateTabulationView implements org.apache.thrift.TBase<CostDerateTabulationView, CostDerateTabulationView._Fields>, java.io.Serializable, Cloneable, Comparable<CostDerateTabulationView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CostDerateTabulationView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PMUSER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmuserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDtLast", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttmLast", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField COMPELTE_ADV_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("compelteAdvDttm", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CostDerateTabulationViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CostDerateTabulationViewTupleSchemeFactory());
  }

  public String pId; // required
  public String projectId; // required
  public String projectName; // required
  public String cusType; // required
  public double creditAmt; // required
  public String requestDttm; // required
  public String planRepayLoanDt; // required
  public String pmuserName; // required
  public String cusName; // required
  public String planRepayLoanDtLast; // required
  public String requestDttmLast; // required
  public String ecoTrade; // required
  public String planOutLoanDt; // required
  public String requestStatus; // required
  public int repayId; // required
  public int pmUserId; // required
  public String compelteAdvDttm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NAME((short)3, "projectName"),
    CUS_TYPE((short)4, "cusType"),
    CREDIT_AMT((short)5, "creditAmt"),
    REQUEST_DTTM((short)6, "requestDttm"),
    PLAN_REPAY_LOAN_DT((short)7, "planRepayLoanDt"),
    PMUSER_NAME((short)8, "pmuserName"),
    CUS_NAME((short)9, "cusName"),
    PLAN_REPAY_LOAN_DT_LAST((short)10, "planRepayLoanDtLast"),
    REQUEST_DTTM_LAST((short)11, "requestDttmLast"),
    ECO_TRADE((short)12, "ecoTrade"),
    PLAN_OUT_LOAN_DT((short)13, "planOutLoanDt"),
    REQUEST_STATUS((short)14, "requestStatus"),
    REPAY_ID((short)17, "repayId"),
    PM_USER_ID((short)16, "pmUserId"),
    COMPELTE_ADV_DTTM((short)18, "compelteAdvDttm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // CUS_TYPE
          return CUS_TYPE;
        case 5: // CREDIT_AMT
          return CREDIT_AMT;
        case 6: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 7: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 8: // PMUSER_NAME
          return PMUSER_NAME;
        case 9: // CUS_NAME
          return CUS_NAME;
        case 10: // PLAN_REPAY_LOAN_DT_LAST
          return PLAN_REPAY_LOAN_DT_LAST;
        case 11: // REQUEST_DTTM_LAST
          return REQUEST_DTTM_LAST;
        case 12: // ECO_TRADE
          return ECO_TRADE;
        case 13: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 14: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 17: // REPAY_ID
          return REPAY_ID;
        case 16: // PM_USER_ID
          return PM_USER_ID;
        case 18: // COMPELTE_ADV_DTTM
          return COMPELTE_ADV_DTTM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREDITAMT_ISSET_ID = 0;
  private static final int __REPAYID_ISSET_ID = 1;
  private static final int __PMUSERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PMUSER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmuserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT_LAST, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDtLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM_LAST, new org.apache.thrift.meta_data.FieldMetaData("requestDttmLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPELTE_ADV_DTTM, new org.apache.thrift.meta_data.FieldMetaData("compelteAdvDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CostDerateTabulationView.class, metaDataMap);
  }

  public CostDerateTabulationView() {
  }

  public CostDerateTabulationView(
    String pId,
    String projectId,
    String projectName,
    String cusType,
    double creditAmt,
    String requestDttm,
    String planRepayLoanDt,
    String pmuserName,
    String cusName,
    String planRepayLoanDtLast,
    String requestDttmLast,
    String ecoTrade,
    String planOutLoanDt,
    String requestStatus,
    int repayId,
    int pmUserId,
    String compelteAdvDttm)
  {
    this();
    this.pId = pId;
    this.projectId = projectId;
    this.projectName = projectName;
    this.cusType = cusType;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.requestDttm = requestDttm;
    this.planRepayLoanDt = planRepayLoanDt;
    this.pmuserName = pmuserName;
    this.cusName = cusName;
    this.planRepayLoanDtLast = planRepayLoanDtLast;
    this.requestDttmLast = requestDttmLast;
    this.ecoTrade = ecoTrade;
    this.planOutLoanDt = planOutLoanDt;
    this.requestStatus = requestStatus;
    this.repayId = repayId;
    setRepayIdIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.compelteAdvDttm = compelteAdvDttm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CostDerateTabulationView(CostDerateTabulationView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    this.creditAmt = other.creditAmt;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    if (other.isSetPmuserName()) {
      this.pmuserName = other.pmuserName;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetPlanRepayLoanDtLast()) {
      this.planRepayLoanDtLast = other.planRepayLoanDtLast;
    }
    if (other.isSetRequestDttmLast()) {
      this.requestDttmLast = other.requestDttmLast;
    }
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetRequestStatus()) {
      this.requestStatus = other.requestStatus;
    }
    this.repayId = other.repayId;
    this.pmUserId = other.pmUserId;
    if (other.isSetCompelteAdvDttm()) {
      this.compelteAdvDttm = other.compelteAdvDttm;
    }
  }

  public CostDerateTabulationView deepCopy() {
    return new CostDerateTabulationView(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    this.projectId = null;
    this.projectName = null;
    this.cusType = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.requestDttm = null;
    this.planRepayLoanDt = null;
    this.pmuserName = null;
    this.cusName = null;
    this.planRepayLoanDtLast = null;
    this.requestDttmLast = null;
    this.ecoTrade = null;
    this.planOutLoanDt = null;
    this.requestStatus = null;
    setRepayIdIsSet(false);
    this.repayId = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.compelteAdvDttm = null;
  }

  public String getPId() {
    return this.pId;
  }

  public CostDerateTabulationView setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public CostDerateTabulationView setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CostDerateTabulationView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public CostDerateTabulationView setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public CostDerateTabulationView setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public CostDerateTabulationView setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public CostDerateTabulationView setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public String getPmuserName() {
    return this.pmuserName;
  }

  public CostDerateTabulationView setPmuserName(String pmuserName) {
    this.pmuserName = pmuserName;
    return this;
  }

  public void unsetPmuserName() {
    this.pmuserName = null;
  }

  /** Returns true if field pmuserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmuserName() {
    return this.pmuserName != null;
  }

  public void setPmuserNameIsSet(boolean value) {
    if (!value) {
      this.pmuserName = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public CostDerateTabulationView setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getPlanRepayLoanDtLast() {
    return this.planRepayLoanDtLast;
  }

  public CostDerateTabulationView setPlanRepayLoanDtLast(String planRepayLoanDtLast) {
    this.planRepayLoanDtLast = planRepayLoanDtLast;
    return this;
  }

  public void unsetPlanRepayLoanDtLast() {
    this.planRepayLoanDtLast = null;
  }

  /** Returns true if field planRepayLoanDtLast is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDtLast() {
    return this.planRepayLoanDtLast != null;
  }

  public void setPlanRepayLoanDtLastIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDtLast = null;
    }
  }

  public String getRequestDttmLast() {
    return this.requestDttmLast;
  }

  public CostDerateTabulationView setRequestDttmLast(String requestDttmLast) {
    this.requestDttmLast = requestDttmLast;
    return this;
  }

  public void unsetRequestDttmLast() {
    this.requestDttmLast = null;
  }

  /** Returns true if field requestDttmLast is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttmLast() {
    return this.requestDttmLast != null;
  }

  public void setRequestDttmLastIsSet(boolean value) {
    if (!value) {
      this.requestDttmLast = null;
    }
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public CostDerateTabulationView setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public CostDerateTabulationView setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getRequestStatus() {
    return this.requestStatus;
  }

  public CostDerateTabulationView setRequestStatus(String requestStatus) {
    this.requestStatus = requestStatus;
    return this;
  }

  public void unsetRequestStatus() {
    this.requestStatus = null;
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return this.requestStatus != null;
  }

  public void setRequestStatusIsSet(boolean value) {
    if (!value) {
      this.requestStatus = null;
    }
  }

  public int getRepayId() {
    return this.repayId;
  }

  public CostDerateTabulationView setRepayId(int repayId) {
    this.repayId = repayId;
    setRepayIdIsSet(true);
    return this;
  }

  public void unsetRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  public void setRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public CostDerateTabulationView setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getCompelteAdvDttm() {
    return this.compelteAdvDttm;
  }

  public CostDerateTabulationView setCompelteAdvDttm(String compelteAdvDttm) {
    this.compelteAdvDttm = compelteAdvDttm;
    return this;
  }

  public void unsetCompelteAdvDttm() {
    this.compelteAdvDttm = null;
  }

  /** Returns true if field compelteAdvDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompelteAdvDttm() {
    return this.compelteAdvDttm != null;
  }

  public void setCompelteAdvDttmIsSet(boolean value) {
    if (!value) {
      this.compelteAdvDttm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case PMUSER_NAME:
      if (value == null) {
        unsetPmuserName();
      } else {
        setPmuserName((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT_LAST:
      if (value == null) {
        unsetPlanRepayLoanDtLast();
      } else {
        setPlanRepayLoanDtLast((String)value);
      }
      break;

    case REQUEST_DTTM_LAST:
      if (value == null) {
        unsetRequestDttmLast();
      } else {
        setRequestDttmLast((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((String)value);
      }
      break;

    case REPAY_ID:
      if (value == null) {
        unsetRepayId();
      } else {
        setRepayId((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case COMPELTE_ADV_DTTM:
      if (value == null) {
        unsetCompelteAdvDttm();
      } else {
        setCompelteAdvDttm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case PROJECT_ID:
      return getProjectId();

    case PROJECT_NAME:
      return getProjectName();

    case CUS_TYPE:
      return getCusType();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case REQUEST_DTTM:
      return getRequestDttm();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case PMUSER_NAME:
      return getPmuserName();

    case CUS_NAME:
      return getCusName();

    case PLAN_REPAY_LOAN_DT_LAST:
      return getPlanRepayLoanDtLast();

    case REQUEST_DTTM_LAST:
      return getRequestDttmLast();

    case ECO_TRADE:
      return getEcoTrade();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case REQUEST_STATUS:
      return getRequestStatus();

    case REPAY_ID:
      return Integer.valueOf(getRepayId());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case COMPELTE_ADV_DTTM:
      return getCompelteAdvDttm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case CUS_TYPE:
      return isSetCusType();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case PMUSER_NAME:
      return isSetPmuserName();
    case CUS_NAME:
      return isSetCusName();
    case PLAN_REPAY_LOAN_DT_LAST:
      return isSetPlanRepayLoanDtLast();
    case REQUEST_DTTM_LAST:
      return isSetRequestDttmLast();
    case ECO_TRADE:
      return isSetEcoTrade();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REPAY_ID:
      return isSetRepayId();
    case PM_USER_ID:
      return isSetPmUserId();
    case COMPELTE_ADV_DTTM:
      return isSetCompelteAdvDttm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CostDerateTabulationView)
      return this.equals((CostDerateTabulationView)that);
    return false;
  }

  public boolean equals(CostDerateTabulationView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_pmuserName = true && this.isSetPmuserName();
    boolean that_present_pmuserName = true && that.isSetPmuserName();
    if (this_present_pmuserName || that_present_pmuserName) {
      if (!(this_present_pmuserName && that_present_pmuserName))
        return false;
      if (!this.pmuserName.equals(that.pmuserName))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_planRepayLoanDtLast = true && this.isSetPlanRepayLoanDtLast();
    boolean that_present_planRepayLoanDtLast = true && that.isSetPlanRepayLoanDtLast();
    if (this_present_planRepayLoanDtLast || that_present_planRepayLoanDtLast) {
      if (!(this_present_planRepayLoanDtLast && that_present_planRepayLoanDtLast))
        return false;
      if (!this.planRepayLoanDtLast.equals(that.planRepayLoanDtLast))
        return false;
    }

    boolean this_present_requestDttmLast = true && this.isSetRequestDttmLast();
    boolean that_present_requestDttmLast = true && that.isSetRequestDttmLast();
    if (this_present_requestDttmLast || that_present_requestDttmLast) {
      if (!(this_present_requestDttmLast && that_present_requestDttmLast))
        return false;
      if (!this.requestDttmLast.equals(that.requestDttmLast))
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_requestStatus = true && this.isSetRequestStatus();
    boolean that_present_requestStatus = true && that.isSetRequestStatus();
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (!this.requestStatus.equals(that.requestStatus))
        return false;
    }

    boolean this_present_repayId = true;
    boolean that_present_repayId = true;
    if (this_present_repayId || that_present_repayId) {
      if (!(this_present_repayId && that_present_repayId))
        return false;
      if (this.repayId != that.repayId)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_compelteAdvDttm = true && this.isSetCompelteAdvDttm();
    boolean that_present_compelteAdvDttm = true && that.isSetCompelteAdvDttm();
    if (this_present_compelteAdvDttm || that_present_compelteAdvDttm) {
      if (!(this_present_compelteAdvDttm && that_present_compelteAdvDttm))
        return false;
      if (!this.compelteAdvDttm.equals(that.compelteAdvDttm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_pmuserName = true && (isSetPmuserName());
    list.add(present_pmuserName);
    if (present_pmuserName)
      list.add(pmuserName);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_planRepayLoanDtLast = true && (isSetPlanRepayLoanDtLast());
    list.add(present_planRepayLoanDtLast);
    if (present_planRepayLoanDtLast)
      list.add(planRepayLoanDtLast);

    boolean present_requestDttmLast = true && (isSetRequestDttmLast());
    list.add(present_requestDttmLast);
    if (present_requestDttmLast)
      list.add(requestDttmLast);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_requestStatus = true && (isSetRequestStatus());
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_repayId = true;
    list.add(present_repayId);
    if (present_repayId)
      list.add(repayId);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_compelteAdvDttm = true && (isSetCompelteAdvDttm());
    list.add(present_compelteAdvDttm);
    if (present_compelteAdvDttm)
      list.add(compelteAdvDttm);

    return list.hashCode();
  }

  @Override
  public int compareTo(CostDerateTabulationView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmuserName()).compareTo(other.isSetPmuserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmuserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmuserName, other.pmuserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDtLast()).compareTo(other.isSetPlanRepayLoanDtLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDtLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDtLast, other.planRepayLoanDtLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttmLast()).compareTo(other.isSetRequestDttmLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttmLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttmLast, other.requestDttmLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompelteAdvDttm()).compareTo(other.isSetCompelteAdvDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompelteAdvDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compelteAdvDttm, other.compelteAdvDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CostDerateTabulationView(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmuserName:");
    if (this.pmuserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmuserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDtLast:");
    if (this.planRepayLoanDtLast == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDtLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttmLast:");
    if (this.requestDttmLast == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttmLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    if (this.requestStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayId:");
    sb.append(this.repayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compelteAdvDttm:");
    if (this.compelteAdvDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.compelteAdvDttm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CostDerateTabulationViewStandardSchemeFactory implements SchemeFactory {
    public CostDerateTabulationViewStandardScheme getScheme() {
      return new CostDerateTabulationViewStandardScheme();
    }
  }

  private static class CostDerateTabulationViewStandardScheme extends StandardScheme<CostDerateTabulationView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CostDerateTabulationView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PMUSER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmuserName = iprot.readString();
              struct.setPmuserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAN_REPAY_LOAN_DT_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDtLast = iprot.readString();
              struct.setPlanRepayLoanDtLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_DTTM_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttmLast = iprot.readString();
              struct.setRequestDttmLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStatus = iprot.readString();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayId = iprot.readI32();
              struct.setRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COMPELTE_ADV_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compelteAdvDttm = iprot.readString();
              struct.setCompelteAdvDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CostDerateTabulationView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.pmuserName != null) {
        oprot.writeFieldBegin(PMUSER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmuserName);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDtLast != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_LAST_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDtLast);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttmLast != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_LAST_FIELD_DESC);
        oprot.writeString(struct.requestDttmLast);
        oprot.writeFieldEnd();
      }
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.requestStatus != null) {
        oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
        oprot.writeString(struct.requestStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.repayId);
      oprot.writeFieldEnd();
      if (struct.compelteAdvDttm != null) {
        oprot.writeFieldBegin(COMPELTE_ADV_DTTM_FIELD_DESC);
        oprot.writeString(struct.compelteAdvDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CostDerateTabulationViewTupleSchemeFactory implements SchemeFactory {
    public CostDerateTabulationViewTupleScheme getScheme() {
      return new CostDerateTabulationViewTupleScheme();
    }
  }

  private static class CostDerateTabulationViewTupleScheme extends TupleScheme<CostDerateTabulationView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CostDerateTabulationView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(4);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(5);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(6);
      }
      if (struct.isSetPmuserName()) {
        optionals.set(7);
      }
      if (struct.isSetCusName()) {
        optionals.set(8);
      }
      if (struct.isSetPlanRepayLoanDtLast()) {
        optionals.set(9);
      }
      if (struct.isSetRequestDttmLast()) {
        optionals.set(10);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(11);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(12);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(13);
      }
      if (struct.isSetRepayId()) {
        optionals.set(14);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(15);
      }
      if (struct.isSetCompelteAdvDttm()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetPmuserName()) {
        oprot.writeString(struct.pmuserName);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetPlanRepayLoanDtLast()) {
        oprot.writeString(struct.planRepayLoanDtLast);
      }
      if (struct.isSetRequestDttmLast()) {
        oprot.writeString(struct.requestDttmLast);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeString(struct.requestStatus);
      }
      if (struct.isSetRepayId()) {
        oprot.writeI32(struct.repayId);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetCompelteAdvDttm()) {
        oprot.writeString(struct.compelteAdvDttm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CostDerateTabulationView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pmuserName = iprot.readString();
        struct.setPmuserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.planRepayLoanDtLast = iprot.readString();
        struct.setPlanRepayLoanDtLastIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestDttmLast = iprot.readString();
        struct.setRequestDttmLastIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.requestStatus = iprot.readString();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.repayId = iprot.readI32();
        struct.setRepayIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.compelteAdvDttm = iprot.readString();
        struct.setCompelteAdvDttmIsSet(true);
      }
    }
  }

}


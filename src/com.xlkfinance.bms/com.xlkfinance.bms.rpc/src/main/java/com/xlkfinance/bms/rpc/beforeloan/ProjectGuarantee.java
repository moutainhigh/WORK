/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-19")
public class ProjectGuarantee implements org.apache.thrift.TBase<ProjectGuarantee, ProjectGuarantee._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectGuarantee> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectGuarantee");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GUARANTEE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField GUARANTEE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CHARGES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chargesType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DEPT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deptMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CHARGES_SUBSIDIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("chargesSubsidized", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("receMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PAY_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("payBank", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField TURNOVER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CHARGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTerm", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REPAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentType", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MORTGAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageRate", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanUsage", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PAYMENT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentSource", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MONTH_MAID_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthMaidRate", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PREPAYMENT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("prepaymentRate", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField RENT_RETRIAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentRetrialPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField CONTRACT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField DEBT_RADIO_FIELD_DESC = new org.apache.thrift.protocol.TField("debtRadio", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField LEASE_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseTerm", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField MONTHLY_RETURN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyReturnMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField LOAN_RADIO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRadio", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField ESTIMATE_MONTHLY_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("estimateMonthlyIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)34);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectGuaranteeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectGuaranteeTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public double guaranteeMoney; // required
  public double guaranteeFee; // required
  public double poundage; // required
  public int chargesType; // required
  public double loanMoney; // required
  public double deptMoney; // required
  public double chargesSubsidized; // required
  public double receMoney; // required
  public String payBank; // required
  public double feeRate; // required
  public double turnoverMoney; // required
  public double foreclosureMoney; // required
  public int chargeType; // required
  public int loanTerm; // required
  public String repaymentType; // required
  public double mortgageRate; // required
  public String loanUsage; // required
  public String paymentSource; // required
  public double monthMaidRate; // required
  public double overdueRate; // required
  public double prepaymentRate; // required
  public String createDate; // required
  public int createrId; // required
  public String updateDate; // required
  public int updateId; // required
  public double rentRetrialPrice; // required
  public double contractPrice; // required
  public double debtRadio; // required
  public double leaseTerm; // required
  public double monthlyReturnMoney; // required
  public double loanRadio; // required
  public double estimateMonthlyIncome; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    GUARANTEE_MONEY((short)3, "guaranteeMoney"),
    GUARANTEE_FEE((short)4, "guaranteeFee"),
    POUNDAGE((short)5, "poundage"),
    CHARGES_TYPE((short)6, "chargesType"),
    LOAN_MONEY((short)7, "loanMoney"),
    DEPT_MONEY((short)8, "deptMoney"),
    CHARGES_SUBSIDIZED((short)9, "chargesSubsidized"),
    RECE_MONEY((short)10, "receMoney"),
    PAY_BANK((short)11, "payBank"),
    FEE_RATE((short)12, "feeRate"),
    TURNOVER_MONEY((short)13, "turnoverMoney"),
    FORECLOSURE_MONEY((short)14, "foreclosureMoney"),
    CHARGE_TYPE((short)15, "chargeType"),
    LOAN_TERM((short)16, "loanTerm"),
    REPAYMENT_TYPE((short)17, "repaymentType"),
    MORTGAGE_RATE((short)18, "mortgageRate"),
    LOAN_USAGE((short)19, "loanUsage"),
    PAYMENT_SOURCE((short)20, "paymentSource"),
    MONTH_MAID_RATE((short)21, "monthMaidRate"),
    OVERDUE_RATE((short)22, "overdueRate"),
    PREPAYMENT_RATE((short)23, "prepaymentRate"),
    CREATE_DATE((short)24, "createDate"),
    CREATER_ID((short)25, "createrId"),
    UPDATE_DATE((short)26, "updateDate"),
    UPDATE_ID((short)27, "updateId"),
    RENT_RETRIAL_PRICE((short)28, "rentRetrialPrice"),
    CONTRACT_PRICE((short)29, "contractPrice"),
    DEBT_RADIO((short)30, "debtRadio"),
    LEASE_TERM((short)31, "leaseTerm"),
    MONTHLY_RETURN_MONEY((short)32, "monthlyReturnMoney"),
    LOAN_RADIO((short)33, "loanRadio"),
    ESTIMATE_MONTHLY_INCOME((short)34, "estimateMonthlyIncome");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // GUARANTEE_MONEY
          return GUARANTEE_MONEY;
        case 4: // GUARANTEE_FEE
          return GUARANTEE_FEE;
        case 5: // POUNDAGE
          return POUNDAGE;
        case 6: // CHARGES_TYPE
          return CHARGES_TYPE;
        case 7: // LOAN_MONEY
          return LOAN_MONEY;
        case 8: // DEPT_MONEY
          return DEPT_MONEY;
        case 9: // CHARGES_SUBSIDIZED
          return CHARGES_SUBSIDIZED;
        case 10: // RECE_MONEY
          return RECE_MONEY;
        case 11: // PAY_BANK
          return PAY_BANK;
        case 12: // FEE_RATE
          return FEE_RATE;
        case 13: // TURNOVER_MONEY
          return TURNOVER_MONEY;
        case 14: // FORECLOSURE_MONEY
          return FORECLOSURE_MONEY;
        case 15: // CHARGE_TYPE
          return CHARGE_TYPE;
        case 16: // LOAN_TERM
          return LOAN_TERM;
        case 17: // REPAYMENT_TYPE
          return REPAYMENT_TYPE;
        case 18: // MORTGAGE_RATE
          return MORTGAGE_RATE;
        case 19: // LOAN_USAGE
          return LOAN_USAGE;
        case 20: // PAYMENT_SOURCE
          return PAYMENT_SOURCE;
        case 21: // MONTH_MAID_RATE
          return MONTH_MAID_RATE;
        case 22: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 23: // PREPAYMENT_RATE
          return PREPAYMENT_RATE;
        case 24: // CREATE_DATE
          return CREATE_DATE;
        case 25: // CREATER_ID
          return CREATER_ID;
        case 26: // UPDATE_DATE
          return UPDATE_DATE;
        case 27: // UPDATE_ID
          return UPDATE_ID;
        case 28: // RENT_RETRIAL_PRICE
          return RENT_RETRIAL_PRICE;
        case 29: // CONTRACT_PRICE
          return CONTRACT_PRICE;
        case 30: // DEBT_RADIO
          return DEBT_RADIO;
        case 31: // LEASE_TERM
          return LEASE_TERM;
        case 32: // MONTHLY_RETURN_MONEY
          return MONTHLY_RETURN_MONEY;
        case 33: // LOAN_RADIO
          return LOAN_RADIO;
        case 34: // ESTIMATE_MONTHLY_INCOME
          return ESTIMATE_MONTHLY_INCOME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __GUARANTEEMONEY_ISSET_ID = 2;
  private static final int __GUARANTEEFEE_ISSET_ID = 3;
  private static final int __POUNDAGE_ISSET_ID = 4;
  private static final int __CHARGESTYPE_ISSET_ID = 5;
  private static final int __LOANMONEY_ISSET_ID = 6;
  private static final int __DEPTMONEY_ISSET_ID = 7;
  private static final int __CHARGESSUBSIDIZED_ISSET_ID = 8;
  private static final int __RECEMONEY_ISSET_ID = 9;
  private static final int __FEERATE_ISSET_ID = 10;
  private static final int __TURNOVERMONEY_ISSET_ID = 11;
  private static final int __FORECLOSUREMONEY_ISSET_ID = 12;
  private static final int __CHARGETYPE_ISSET_ID = 13;
  private static final int __LOANTERM_ISSET_ID = 14;
  private static final int __MORTGAGERATE_ISSET_ID = 15;
  private static final int __MONTHMAIDRATE_ISSET_ID = 16;
  private static final int __OVERDUERATE_ISSET_ID = 17;
  private static final int __PREPAYMENTRATE_ISSET_ID = 18;
  private static final int __CREATERID_ISSET_ID = 19;
  private static final int __UPDATEID_ISSET_ID = 20;
  private static final int __RENTRETRIALPRICE_ISSET_ID = 21;
  private static final int __CONTRACTPRICE_ISSET_ID = 22;
  private static final int __DEBTRADIO_ISSET_ID = 23;
  private static final int __LEASETERM_ISSET_ID = 24;
  private static final int __MONTHLYRETURNMONEY_ISSET_ID = 25;
  private static final int __LOANRADIO_ISSET_ID = 26;
  private static final int __ESTIMATEMONTHLYINCOME_ISSET_ID = 27;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUARANTEE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("guaranteeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GUARANTEE_FEE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chargesType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deptMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGES_SUBSIDIZED, new org.apache.thrift.meta_data.FieldMetaData("chargesSubsidized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("receMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_BANK, new org.apache.thrift.meta_data.FieldMetaData("payBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("feeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("turnoverMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("foreclosureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chargeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_TERM, new org.apache.thrift.meta_data.FieldMetaData("loanTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("loanUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("paymentSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_MAID_RATE, new org.apache.thrift.meta_data.FieldMetaData("monthMaidRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPAYMENT_RATE, new org.apache.thrift.meta_data.FieldMetaData("prepaymentRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RENT_RETRIAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentRetrialPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONTRACT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("contractPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBT_RADIO, new org.apache.thrift.meta_data.FieldMetaData("debtRadio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEASE_TERM, new org.apache.thrift.meta_data.FieldMetaData("leaseTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTHLY_RETURN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("monthlyReturnMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_RADIO, new org.apache.thrift.meta_data.FieldMetaData("loanRadio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ESTIMATE_MONTHLY_INCOME, new org.apache.thrift.meta_data.FieldMetaData("estimateMonthlyIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectGuarantee.class, metaDataMap);
  }

  public ProjectGuarantee() {
  }

  public ProjectGuarantee(
    int pid,
    int projectId,
    double guaranteeMoney,
    double guaranteeFee,
    double poundage,
    int chargesType,
    double loanMoney,
    double deptMoney,
    double chargesSubsidized,
    double receMoney,
    String payBank,
    double feeRate,
    double turnoverMoney,
    double foreclosureMoney,
    int chargeType,
    int loanTerm,
    String repaymentType,
    double mortgageRate,
    String loanUsage,
    String paymentSource,
    double monthMaidRate,
    double overdueRate,
    double prepaymentRate,
    String createDate,
    int createrId,
    String updateDate,
    int updateId,
    double rentRetrialPrice,
    double contractPrice,
    double debtRadio,
    double leaseTerm,
    double monthlyReturnMoney,
    double loanRadio,
    double estimateMonthlyIncome)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.guaranteeMoney = guaranteeMoney;
    setGuaranteeMoneyIsSet(true);
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.chargesType = chargesType;
    setChargesTypeIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.deptMoney = deptMoney;
    setDeptMoneyIsSet(true);
    this.chargesSubsidized = chargesSubsidized;
    setChargesSubsidizedIsSet(true);
    this.receMoney = receMoney;
    setReceMoneyIsSet(true);
    this.payBank = payBank;
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    this.turnoverMoney = turnoverMoney;
    setTurnoverMoneyIsSet(true);
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    this.chargeType = chargeType;
    setChargeTypeIsSet(true);
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    this.repaymentType = repaymentType;
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    this.loanUsage = loanUsage;
    this.paymentSource = paymentSource;
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.prepaymentRate = prepaymentRate;
    setPrepaymentRateIsSet(true);
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateDate = updateDate;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.rentRetrialPrice = rentRetrialPrice;
    setRentRetrialPriceIsSet(true);
    this.contractPrice = contractPrice;
    setContractPriceIsSet(true);
    this.debtRadio = debtRadio;
    setDebtRadioIsSet(true);
    this.leaseTerm = leaseTerm;
    setLeaseTermIsSet(true);
    this.monthlyReturnMoney = monthlyReturnMoney;
    setMonthlyReturnMoneyIsSet(true);
    this.loanRadio = loanRadio;
    setLoanRadioIsSet(true);
    this.estimateMonthlyIncome = estimateMonthlyIncome;
    setEstimateMonthlyIncomeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectGuarantee(ProjectGuarantee other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.guaranteeMoney = other.guaranteeMoney;
    this.guaranteeFee = other.guaranteeFee;
    this.poundage = other.poundage;
    this.chargesType = other.chargesType;
    this.loanMoney = other.loanMoney;
    this.deptMoney = other.deptMoney;
    this.chargesSubsidized = other.chargesSubsidized;
    this.receMoney = other.receMoney;
    if (other.isSetPayBank()) {
      this.payBank = other.payBank;
    }
    this.feeRate = other.feeRate;
    this.turnoverMoney = other.turnoverMoney;
    this.foreclosureMoney = other.foreclosureMoney;
    this.chargeType = other.chargeType;
    this.loanTerm = other.loanTerm;
    if (other.isSetRepaymentType()) {
      this.repaymentType = other.repaymentType;
    }
    this.mortgageRate = other.mortgageRate;
    if (other.isSetLoanUsage()) {
      this.loanUsage = other.loanUsage;
    }
    if (other.isSetPaymentSource()) {
      this.paymentSource = other.paymentSource;
    }
    this.monthMaidRate = other.monthMaidRate;
    this.overdueRate = other.overdueRate;
    this.prepaymentRate = other.prepaymentRate;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.updateId = other.updateId;
    this.rentRetrialPrice = other.rentRetrialPrice;
    this.contractPrice = other.contractPrice;
    this.debtRadio = other.debtRadio;
    this.leaseTerm = other.leaseTerm;
    this.monthlyReturnMoney = other.monthlyReturnMoney;
    this.loanRadio = other.loanRadio;
    this.estimateMonthlyIncome = other.estimateMonthlyIncome;
  }

  public ProjectGuarantee deepCopy() {
    return new ProjectGuarantee(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setGuaranteeMoneyIsSet(false);
    this.guaranteeMoney = 0.0;
    setGuaranteeFeeIsSet(false);
    this.guaranteeFee = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    setChargesTypeIsSet(false);
    this.chargesType = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setDeptMoneyIsSet(false);
    this.deptMoney = 0.0;
    setChargesSubsidizedIsSet(false);
    this.chargesSubsidized = 0.0;
    setReceMoneyIsSet(false);
    this.receMoney = 0.0;
    this.payBank = null;
    setFeeRateIsSet(false);
    this.feeRate = 0.0;
    setTurnoverMoneyIsSet(false);
    this.turnoverMoney = 0.0;
    setForeclosureMoneyIsSet(false);
    this.foreclosureMoney = 0.0;
    setChargeTypeIsSet(false);
    this.chargeType = 0;
    setLoanTermIsSet(false);
    this.loanTerm = 0;
    this.repaymentType = null;
    setMortgageRateIsSet(false);
    this.mortgageRate = 0.0;
    this.loanUsage = null;
    this.paymentSource = null;
    setMonthMaidRateIsSet(false);
    this.monthMaidRate = 0.0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setPrepaymentRateIsSet(false);
    this.prepaymentRate = 0.0;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.updateDate = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    setRentRetrialPriceIsSet(false);
    this.rentRetrialPrice = 0.0;
    setContractPriceIsSet(false);
    this.contractPrice = 0.0;
    setDebtRadioIsSet(false);
    this.debtRadio = 0.0;
    setLeaseTermIsSet(false);
    this.leaseTerm = 0.0;
    setMonthlyReturnMoneyIsSet(false);
    this.monthlyReturnMoney = 0.0;
    setLoanRadioIsSet(false);
    this.loanRadio = 0.0;
    setEstimateMonthlyIncomeIsSet(false);
    this.estimateMonthlyIncome = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectGuarantee setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectGuarantee setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getGuaranteeMoney() {
    return this.guaranteeMoney;
  }

  public ProjectGuarantee setGuaranteeMoney(double guaranteeMoney) {
    this.guaranteeMoney = guaranteeMoney;
    setGuaranteeMoneyIsSet(true);
    return this;
  }

  public void unsetGuaranteeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID);
  }

  /** Returns true if field guaranteeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID);
  }

  public void setGuaranteeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID, value);
  }

  public double getGuaranteeFee() {
    return this.guaranteeFee;
  }

  public ProjectGuarantee setGuaranteeFee(double guaranteeFee) {
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    return this;
  }

  public void unsetGuaranteeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  /** Returns true if field guaranteeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  public void setGuaranteeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public ProjectGuarantee setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public int getChargesType() {
    return this.chargesType;
  }

  public ProjectGuarantee setChargesType(int chargesType) {
    this.chargesType = chargesType;
    setChargesTypeIsSet(true);
    return this;
  }

  public void unsetChargesType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGESTYPE_ISSET_ID);
  }

  /** Returns true if field chargesType is set (has been assigned a value) and false otherwise */
  public boolean isSetChargesType() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGESTYPE_ISSET_ID);
  }

  public void setChargesTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGESTYPE_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public ProjectGuarantee setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public double getDeptMoney() {
    return this.deptMoney;
  }

  public ProjectGuarantee setDeptMoney(double deptMoney) {
    this.deptMoney = deptMoney;
    setDeptMoneyIsSet(true);
    return this;
  }

  public void unsetDeptMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTMONEY_ISSET_ID);
  }

  /** Returns true if field deptMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTMONEY_ISSET_ID);
  }

  public void setDeptMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTMONEY_ISSET_ID, value);
  }

  public double getChargesSubsidized() {
    return this.chargesSubsidized;
  }

  public ProjectGuarantee setChargesSubsidized(double chargesSubsidized) {
    this.chargesSubsidized = chargesSubsidized;
    setChargesSubsidizedIsSet(true);
    return this;
  }

  public void unsetChargesSubsidized() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGESSUBSIDIZED_ISSET_ID);
  }

  /** Returns true if field chargesSubsidized is set (has been assigned a value) and false otherwise */
  public boolean isSetChargesSubsidized() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGESSUBSIDIZED_ISSET_ID);
  }

  public void setChargesSubsidizedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGESSUBSIDIZED_ISSET_ID, value);
  }

  public double getReceMoney() {
    return this.receMoney;
  }

  public ProjectGuarantee setReceMoney(double receMoney) {
    this.receMoney = receMoney;
    setReceMoneyIsSet(true);
    return this;
  }

  public void unsetReceMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEMONEY_ISSET_ID);
  }

  /** Returns true if field receMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetReceMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEMONEY_ISSET_ID);
  }

  public void setReceMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEMONEY_ISSET_ID, value);
  }

  public String getPayBank() {
    return this.payBank;
  }

  public ProjectGuarantee setPayBank(String payBank) {
    this.payBank = payBank;
    return this;
  }

  public void unsetPayBank() {
    this.payBank = null;
  }

  /** Returns true if field payBank is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBank() {
    return this.payBank != null;
  }

  public void setPayBankIsSet(boolean value) {
    if (!value) {
      this.payBank = null;
    }
  }

  public double getFeeRate() {
    return this.feeRate;
  }

  public ProjectGuarantee setFeeRate(double feeRate) {
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    return this;
  }

  public void unsetFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  /** Returns true if field feeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  public void setFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEERATE_ISSET_ID, value);
  }

  public double getTurnoverMoney() {
    return this.turnoverMoney;
  }

  public ProjectGuarantee setTurnoverMoney(double turnoverMoney) {
    this.turnoverMoney = turnoverMoney;
    setTurnoverMoneyIsSet(true);
    return this;
  }

  public void unsetTurnoverMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVERMONEY_ISSET_ID);
  }

  /** Returns true if field turnoverMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnoverMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVERMONEY_ISSET_ID);
  }

  public void setTurnoverMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVERMONEY_ISSET_ID, value);
  }

  public double getForeclosureMoney() {
    return this.foreclosureMoney;
  }

  public ProjectGuarantee setForeclosureMoney(double foreclosureMoney) {
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    return this;
  }

  public void unsetForeclosureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  /** Returns true if field foreclosureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  public void setForeclosureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID, value);
  }

  public int getChargeType() {
    return this.chargeType;
  }

  public ProjectGuarantee setChargeType(int chargeType) {
    this.chargeType = chargeType;
    setChargeTypeIsSet(true);
    return this;
  }

  public void unsetChargeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGETYPE_ISSET_ID);
  }

  /** Returns true if field chargeType is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeType() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGETYPE_ISSET_ID);
  }

  public void setChargeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGETYPE_ISSET_ID, value);
  }

  public int getLoanTerm() {
    return this.loanTerm;
  }

  public ProjectGuarantee setLoanTerm(int loanTerm) {
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    return this;
  }

  public void unsetLoanTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  /** Returns true if field loanTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  public void setLoanTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTERM_ISSET_ID, value);
  }

  public String getRepaymentType() {
    return this.repaymentType;
  }

  public ProjectGuarantee setRepaymentType(String repaymentType) {
    this.repaymentType = repaymentType;
    return this;
  }

  public void unsetRepaymentType() {
    this.repaymentType = null;
  }

  /** Returns true if field repaymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentType() {
    return this.repaymentType != null;
  }

  public void setRepaymentTypeIsSet(boolean value) {
    if (!value) {
      this.repaymentType = null;
    }
  }

  public double getMortgageRate() {
    return this.mortgageRate;
  }

  public ProjectGuarantee setMortgageRate(double mortgageRate) {
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    return this;
  }

  public void unsetMortgageRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  /** Returns true if field mortgageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  public void setMortgageRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID, value);
  }

  public String getLoanUsage() {
    return this.loanUsage;
  }

  public ProjectGuarantee setLoanUsage(String loanUsage) {
    this.loanUsage = loanUsage;
    return this;
  }

  public void unsetLoanUsage() {
    this.loanUsage = null;
  }

  /** Returns true if field loanUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanUsage() {
    return this.loanUsage != null;
  }

  public void setLoanUsageIsSet(boolean value) {
    if (!value) {
      this.loanUsage = null;
    }
  }

  public String getPaymentSource() {
    return this.paymentSource;
  }

  public ProjectGuarantee setPaymentSource(String paymentSource) {
    this.paymentSource = paymentSource;
    return this;
  }

  public void unsetPaymentSource() {
    this.paymentSource = null;
  }

  /** Returns true if field paymentSource is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentSource() {
    return this.paymentSource != null;
  }

  public void setPaymentSourceIsSet(boolean value) {
    if (!value) {
      this.paymentSource = null;
    }
  }

  public double getMonthMaidRate() {
    return this.monthMaidRate;
  }

  public ProjectGuarantee setMonthMaidRate(double monthMaidRate) {
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    return this;
  }

  public void unsetMonthMaidRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  /** Returns true if field monthMaidRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthMaidRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  public void setMonthMaidRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public ProjectGuarantee setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public double getPrepaymentRate() {
    return this.prepaymentRate;
  }

  public ProjectGuarantee setPrepaymentRate(double prepaymentRate) {
    this.prepaymentRate = prepaymentRate;
    setPrepaymentRateIsSet(true);
    return this;
  }

  public void unsetPrepaymentRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID);
  }

  /** Returns true if field prepaymentRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepaymentRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID);
  }

  public void setPrepaymentRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public ProjectGuarantee setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public ProjectGuarantee setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public ProjectGuarantee setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public ProjectGuarantee setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public double getRentRetrialPrice() {
    return this.rentRetrialPrice;
  }

  public ProjectGuarantee setRentRetrialPrice(double rentRetrialPrice) {
    this.rentRetrialPrice = rentRetrialPrice;
    setRentRetrialPriceIsSet(true);
    return this;
  }

  public void unsetRentRetrialPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTRETRIALPRICE_ISSET_ID);
  }

  /** Returns true if field rentRetrialPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentRetrialPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTRETRIALPRICE_ISSET_ID);
  }

  public void setRentRetrialPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTRETRIALPRICE_ISSET_ID, value);
  }

  public double getContractPrice() {
    return this.contractPrice;
  }

  public ProjectGuarantee setContractPrice(double contractPrice) {
    this.contractPrice = contractPrice;
    setContractPriceIsSet(true);
    return this;
  }

  public void unsetContractPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTPRICE_ISSET_ID);
  }

  /** Returns true if field contractPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetContractPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTPRICE_ISSET_ID);
  }

  public void setContractPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTPRICE_ISSET_ID, value);
  }

  public double getDebtRadio() {
    return this.debtRadio;
  }

  public ProjectGuarantee setDebtRadio(double debtRadio) {
    this.debtRadio = debtRadio;
    setDebtRadioIsSet(true);
    return this;
  }

  public void unsetDebtRadio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBTRADIO_ISSET_ID);
  }

  /** Returns true if field debtRadio is set (has been assigned a value) and false otherwise */
  public boolean isSetDebtRadio() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBTRADIO_ISSET_ID);
  }

  public void setDebtRadioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBTRADIO_ISSET_ID, value);
  }

  public double getLeaseTerm() {
    return this.leaseTerm;
  }

  public ProjectGuarantee setLeaseTerm(double leaseTerm) {
    this.leaseTerm = leaseTerm;
    setLeaseTermIsSet(true);
    return this;
  }

  public void unsetLeaseTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEASETERM_ISSET_ID);
  }

  /** Returns true if field leaseTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LEASETERM_ISSET_ID);
  }

  public void setLeaseTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEASETERM_ISSET_ID, value);
  }

  public double getMonthlyReturnMoney() {
    return this.monthlyReturnMoney;
  }

  public ProjectGuarantee setMonthlyReturnMoney(double monthlyReturnMoney) {
    this.monthlyReturnMoney = monthlyReturnMoney;
    setMonthlyReturnMoneyIsSet(true);
    return this;
  }

  public void unsetMonthlyReturnMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLYRETURNMONEY_ISSET_ID);
  }

  /** Returns true if field monthlyReturnMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthlyReturnMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLYRETURNMONEY_ISSET_ID);
  }

  public void setMonthlyReturnMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLYRETURNMONEY_ISSET_ID, value);
  }

  public double getLoanRadio() {
    return this.loanRadio;
  }

  public ProjectGuarantee setLoanRadio(double loanRadio) {
    this.loanRadio = loanRadio;
    setLoanRadioIsSet(true);
    return this;
  }

  public void unsetLoanRadio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANRADIO_ISSET_ID);
  }

  /** Returns true if field loanRadio is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRadio() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANRADIO_ISSET_ID);
  }

  public void setLoanRadioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANRADIO_ISSET_ID, value);
  }

  public double getEstimateMonthlyIncome() {
    return this.estimateMonthlyIncome;
  }

  public ProjectGuarantee setEstimateMonthlyIncome(double estimateMonthlyIncome) {
    this.estimateMonthlyIncome = estimateMonthlyIncome;
    setEstimateMonthlyIncomeIsSet(true);
    return this;
  }

  public void unsetEstimateMonthlyIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEMONTHLYINCOME_ISSET_ID);
  }

  /** Returns true if field estimateMonthlyIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimateMonthlyIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTIMATEMONTHLYINCOME_ISSET_ID);
  }

  public void setEstimateMonthlyIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTIMATEMONTHLYINCOME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case GUARANTEE_MONEY:
      if (value == null) {
        unsetGuaranteeMoney();
      } else {
        setGuaranteeMoney((Double)value);
      }
      break;

    case GUARANTEE_FEE:
      if (value == null) {
        unsetGuaranteeFee();
      } else {
        setGuaranteeFee((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case CHARGES_TYPE:
      if (value == null) {
        unsetChargesType();
      } else {
        setChargesType((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case DEPT_MONEY:
      if (value == null) {
        unsetDeptMoney();
      } else {
        setDeptMoney((Double)value);
      }
      break;

    case CHARGES_SUBSIDIZED:
      if (value == null) {
        unsetChargesSubsidized();
      } else {
        setChargesSubsidized((Double)value);
      }
      break;

    case RECE_MONEY:
      if (value == null) {
        unsetReceMoney();
      } else {
        setReceMoney((Double)value);
      }
      break;

    case PAY_BANK:
      if (value == null) {
        unsetPayBank();
      } else {
        setPayBank((String)value);
      }
      break;

    case FEE_RATE:
      if (value == null) {
        unsetFeeRate();
      } else {
        setFeeRate((Double)value);
      }
      break;

    case TURNOVER_MONEY:
      if (value == null) {
        unsetTurnoverMoney();
      } else {
        setTurnoverMoney((Double)value);
      }
      break;

    case FORECLOSURE_MONEY:
      if (value == null) {
        unsetForeclosureMoney();
      } else {
        setForeclosureMoney((Double)value);
      }
      break;

    case CHARGE_TYPE:
      if (value == null) {
        unsetChargeType();
      } else {
        setChargeType((Integer)value);
      }
      break;

    case LOAN_TERM:
      if (value == null) {
        unsetLoanTerm();
      } else {
        setLoanTerm((Integer)value);
      }
      break;

    case REPAYMENT_TYPE:
      if (value == null) {
        unsetRepaymentType();
      } else {
        setRepaymentType((String)value);
      }
      break;

    case MORTGAGE_RATE:
      if (value == null) {
        unsetMortgageRate();
      } else {
        setMortgageRate((Double)value);
      }
      break;

    case LOAN_USAGE:
      if (value == null) {
        unsetLoanUsage();
      } else {
        setLoanUsage((String)value);
      }
      break;

    case PAYMENT_SOURCE:
      if (value == null) {
        unsetPaymentSource();
      } else {
        setPaymentSource((String)value);
      }
      break;

    case MONTH_MAID_RATE:
      if (value == null) {
        unsetMonthMaidRate();
      } else {
        setMonthMaidRate((Double)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case PREPAYMENT_RATE:
      if (value == null) {
        unsetPrepaymentRate();
      } else {
        setPrepaymentRate((Double)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case RENT_RETRIAL_PRICE:
      if (value == null) {
        unsetRentRetrialPrice();
      } else {
        setRentRetrialPrice((Double)value);
      }
      break;

    case CONTRACT_PRICE:
      if (value == null) {
        unsetContractPrice();
      } else {
        setContractPrice((Double)value);
      }
      break;

    case DEBT_RADIO:
      if (value == null) {
        unsetDebtRadio();
      } else {
        setDebtRadio((Double)value);
      }
      break;

    case LEASE_TERM:
      if (value == null) {
        unsetLeaseTerm();
      } else {
        setLeaseTerm((Double)value);
      }
      break;

    case MONTHLY_RETURN_MONEY:
      if (value == null) {
        unsetMonthlyReturnMoney();
      } else {
        setMonthlyReturnMoney((Double)value);
      }
      break;

    case LOAN_RADIO:
      if (value == null) {
        unsetLoanRadio();
      } else {
        setLoanRadio((Double)value);
      }
      break;

    case ESTIMATE_MONTHLY_INCOME:
      if (value == null) {
        unsetEstimateMonthlyIncome();
      } else {
        setEstimateMonthlyIncome((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case GUARANTEE_MONEY:
      return Double.valueOf(getGuaranteeMoney());

    case GUARANTEE_FEE:
      return Double.valueOf(getGuaranteeFee());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case CHARGES_TYPE:
      return Integer.valueOf(getChargesType());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case DEPT_MONEY:
      return Double.valueOf(getDeptMoney());

    case CHARGES_SUBSIDIZED:
      return Double.valueOf(getChargesSubsidized());

    case RECE_MONEY:
      return Double.valueOf(getReceMoney());

    case PAY_BANK:
      return getPayBank();

    case FEE_RATE:
      return Double.valueOf(getFeeRate());

    case TURNOVER_MONEY:
      return Double.valueOf(getTurnoverMoney());

    case FORECLOSURE_MONEY:
      return Double.valueOf(getForeclosureMoney());

    case CHARGE_TYPE:
      return Integer.valueOf(getChargeType());

    case LOAN_TERM:
      return Integer.valueOf(getLoanTerm());

    case REPAYMENT_TYPE:
      return getRepaymentType();

    case MORTGAGE_RATE:
      return Double.valueOf(getMortgageRate());

    case LOAN_USAGE:
      return getLoanUsage();

    case PAYMENT_SOURCE:
      return getPaymentSource();

    case MONTH_MAID_RATE:
      return Double.valueOf(getMonthMaidRate());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case PREPAYMENT_RATE:
      return Double.valueOf(getPrepaymentRate());

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_DATE:
      return getUpdateDate();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case RENT_RETRIAL_PRICE:
      return Double.valueOf(getRentRetrialPrice());

    case CONTRACT_PRICE:
      return Double.valueOf(getContractPrice());

    case DEBT_RADIO:
      return Double.valueOf(getDebtRadio());

    case LEASE_TERM:
      return Double.valueOf(getLeaseTerm());

    case MONTHLY_RETURN_MONEY:
      return Double.valueOf(getMonthlyReturnMoney());

    case LOAN_RADIO:
      return Double.valueOf(getLoanRadio());

    case ESTIMATE_MONTHLY_INCOME:
      return Double.valueOf(getEstimateMonthlyIncome());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case GUARANTEE_MONEY:
      return isSetGuaranteeMoney();
    case GUARANTEE_FEE:
      return isSetGuaranteeFee();
    case POUNDAGE:
      return isSetPoundage();
    case CHARGES_TYPE:
      return isSetChargesType();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case DEPT_MONEY:
      return isSetDeptMoney();
    case CHARGES_SUBSIDIZED:
      return isSetChargesSubsidized();
    case RECE_MONEY:
      return isSetReceMoney();
    case PAY_BANK:
      return isSetPayBank();
    case FEE_RATE:
      return isSetFeeRate();
    case TURNOVER_MONEY:
      return isSetTurnoverMoney();
    case FORECLOSURE_MONEY:
      return isSetForeclosureMoney();
    case CHARGE_TYPE:
      return isSetChargeType();
    case LOAN_TERM:
      return isSetLoanTerm();
    case REPAYMENT_TYPE:
      return isSetRepaymentType();
    case MORTGAGE_RATE:
      return isSetMortgageRate();
    case LOAN_USAGE:
      return isSetLoanUsage();
    case PAYMENT_SOURCE:
      return isSetPaymentSource();
    case MONTH_MAID_RATE:
      return isSetMonthMaidRate();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case PREPAYMENT_RATE:
      return isSetPrepaymentRate();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case RENT_RETRIAL_PRICE:
      return isSetRentRetrialPrice();
    case CONTRACT_PRICE:
      return isSetContractPrice();
    case DEBT_RADIO:
      return isSetDebtRadio();
    case LEASE_TERM:
      return isSetLeaseTerm();
    case MONTHLY_RETURN_MONEY:
      return isSetMonthlyReturnMoney();
    case LOAN_RADIO:
      return isSetLoanRadio();
    case ESTIMATE_MONTHLY_INCOME:
      return isSetEstimateMonthlyIncome();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectGuarantee)
      return this.equals((ProjectGuarantee)that);
    return false;
  }

  public boolean equals(ProjectGuarantee that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_guaranteeMoney = true;
    boolean that_present_guaranteeMoney = true;
    if (this_present_guaranteeMoney || that_present_guaranteeMoney) {
      if (!(this_present_guaranteeMoney && that_present_guaranteeMoney))
        return false;
      if (this.guaranteeMoney != that.guaranteeMoney)
        return false;
    }

    boolean this_present_guaranteeFee = true;
    boolean that_present_guaranteeFee = true;
    if (this_present_guaranteeFee || that_present_guaranteeFee) {
      if (!(this_present_guaranteeFee && that_present_guaranteeFee))
        return false;
      if (this.guaranteeFee != that.guaranteeFee)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_chargesType = true;
    boolean that_present_chargesType = true;
    if (this_present_chargesType || that_present_chargesType) {
      if (!(this_present_chargesType && that_present_chargesType))
        return false;
      if (this.chargesType != that.chargesType)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_deptMoney = true;
    boolean that_present_deptMoney = true;
    if (this_present_deptMoney || that_present_deptMoney) {
      if (!(this_present_deptMoney && that_present_deptMoney))
        return false;
      if (this.deptMoney != that.deptMoney)
        return false;
    }

    boolean this_present_chargesSubsidized = true;
    boolean that_present_chargesSubsidized = true;
    if (this_present_chargesSubsidized || that_present_chargesSubsidized) {
      if (!(this_present_chargesSubsidized && that_present_chargesSubsidized))
        return false;
      if (this.chargesSubsidized != that.chargesSubsidized)
        return false;
    }

    boolean this_present_receMoney = true;
    boolean that_present_receMoney = true;
    if (this_present_receMoney || that_present_receMoney) {
      if (!(this_present_receMoney && that_present_receMoney))
        return false;
      if (this.receMoney != that.receMoney)
        return false;
    }

    boolean this_present_payBank = true && this.isSetPayBank();
    boolean that_present_payBank = true && that.isSetPayBank();
    if (this_present_payBank || that_present_payBank) {
      if (!(this_present_payBank && that_present_payBank))
        return false;
      if (!this.payBank.equals(that.payBank))
        return false;
    }

    boolean this_present_feeRate = true;
    boolean that_present_feeRate = true;
    if (this_present_feeRate || that_present_feeRate) {
      if (!(this_present_feeRate && that_present_feeRate))
        return false;
      if (this.feeRate != that.feeRate)
        return false;
    }

    boolean this_present_turnoverMoney = true;
    boolean that_present_turnoverMoney = true;
    if (this_present_turnoverMoney || that_present_turnoverMoney) {
      if (!(this_present_turnoverMoney && that_present_turnoverMoney))
        return false;
      if (this.turnoverMoney != that.turnoverMoney)
        return false;
    }

    boolean this_present_foreclosureMoney = true;
    boolean that_present_foreclosureMoney = true;
    if (this_present_foreclosureMoney || that_present_foreclosureMoney) {
      if (!(this_present_foreclosureMoney && that_present_foreclosureMoney))
        return false;
      if (this.foreclosureMoney != that.foreclosureMoney)
        return false;
    }

    boolean this_present_chargeType = true;
    boolean that_present_chargeType = true;
    if (this_present_chargeType || that_present_chargeType) {
      if (!(this_present_chargeType && that_present_chargeType))
        return false;
      if (this.chargeType != that.chargeType)
        return false;
    }

    boolean this_present_loanTerm = true;
    boolean that_present_loanTerm = true;
    if (this_present_loanTerm || that_present_loanTerm) {
      if (!(this_present_loanTerm && that_present_loanTerm))
        return false;
      if (this.loanTerm != that.loanTerm)
        return false;
    }

    boolean this_present_repaymentType = true && this.isSetRepaymentType();
    boolean that_present_repaymentType = true && that.isSetRepaymentType();
    if (this_present_repaymentType || that_present_repaymentType) {
      if (!(this_present_repaymentType && that_present_repaymentType))
        return false;
      if (!this.repaymentType.equals(that.repaymentType))
        return false;
    }

    boolean this_present_mortgageRate = true;
    boolean that_present_mortgageRate = true;
    if (this_present_mortgageRate || that_present_mortgageRate) {
      if (!(this_present_mortgageRate && that_present_mortgageRate))
        return false;
      if (this.mortgageRate != that.mortgageRate)
        return false;
    }

    boolean this_present_loanUsage = true && this.isSetLoanUsage();
    boolean that_present_loanUsage = true && that.isSetLoanUsage();
    if (this_present_loanUsage || that_present_loanUsage) {
      if (!(this_present_loanUsage && that_present_loanUsage))
        return false;
      if (!this.loanUsage.equals(that.loanUsage))
        return false;
    }

    boolean this_present_paymentSource = true && this.isSetPaymentSource();
    boolean that_present_paymentSource = true && that.isSetPaymentSource();
    if (this_present_paymentSource || that_present_paymentSource) {
      if (!(this_present_paymentSource && that_present_paymentSource))
        return false;
      if (!this.paymentSource.equals(that.paymentSource))
        return false;
    }

    boolean this_present_monthMaidRate = true;
    boolean that_present_monthMaidRate = true;
    if (this_present_monthMaidRate || that_present_monthMaidRate) {
      if (!(this_present_monthMaidRate && that_present_monthMaidRate))
        return false;
      if (this.monthMaidRate != that.monthMaidRate)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_prepaymentRate = true;
    boolean that_present_prepaymentRate = true;
    if (this_present_prepaymentRate || that_present_prepaymentRate) {
      if (!(this_present_prepaymentRate && that_present_prepaymentRate))
        return false;
      if (this.prepaymentRate != that.prepaymentRate)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_rentRetrialPrice = true;
    boolean that_present_rentRetrialPrice = true;
    if (this_present_rentRetrialPrice || that_present_rentRetrialPrice) {
      if (!(this_present_rentRetrialPrice && that_present_rentRetrialPrice))
        return false;
      if (this.rentRetrialPrice != that.rentRetrialPrice)
        return false;
    }

    boolean this_present_contractPrice = true;
    boolean that_present_contractPrice = true;
    if (this_present_contractPrice || that_present_contractPrice) {
      if (!(this_present_contractPrice && that_present_contractPrice))
        return false;
      if (this.contractPrice != that.contractPrice)
        return false;
    }

    boolean this_present_debtRadio = true;
    boolean that_present_debtRadio = true;
    if (this_present_debtRadio || that_present_debtRadio) {
      if (!(this_present_debtRadio && that_present_debtRadio))
        return false;
      if (this.debtRadio != that.debtRadio)
        return false;
    }

    boolean this_present_leaseTerm = true;
    boolean that_present_leaseTerm = true;
    if (this_present_leaseTerm || that_present_leaseTerm) {
      if (!(this_present_leaseTerm && that_present_leaseTerm))
        return false;
      if (this.leaseTerm != that.leaseTerm)
        return false;
    }

    boolean this_present_monthlyReturnMoney = true;
    boolean that_present_monthlyReturnMoney = true;
    if (this_present_monthlyReturnMoney || that_present_monthlyReturnMoney) {
      if (!(this_present_monthlyReturnMoney && that_present_monthlyReturnMoney))
        return false;
      if (this.monthlyReturnMoney != that.monthlyReturnMoney)
        return false;
    }

    boolean this_present_loanRadio = true;
    boolean that_present_loanRadio = true;
    if (this_present_loanRadio || that_present_loanRadio) {
      if (!(this_present_loanRadio && that_present_loanRadio))
        return false;
      if (this.loanRadio != that.loanRadio)
        return false;
    }

    boolean this_present_estimateMonthlyIncome = true;
    boolean that_present_estimateMonthlyIncome = true;
    if (this_present_estimateMonthlyIncome || that_present_estimateMonthlyIncome) {
      if (!(this_present_estimateMonthlyIncome && that_present_estimateMonthlyIncome))
        return false;
      if (this.estimateMonthlyIncome != that.estimateMonthlyIncome)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_guaranteeMoney = true;
    list.add(present_guaranteeMoney);
    if (present_guaranteeMoney)
      list.add(guaranteeMoney);

    boolean present_guaranteeFee = true;
    list.add(present_guaranteeFee);
    if (present_guaranteeFee)
      list.add(guaranteeFee);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_chargesType = true;
    list.add(present_chargesType);
    if (present_chargesType)
      list.add(chargesType);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_deptMoney = true;
    list.add(present_deptMoney);
    if (present_deptMoney)
      list.add(deptMoney);

    boolean present_chargesSubsidized = true;
    list.add(present_chargesSubsidized);
    if (present_chargesSubsidized)
      list.add(chargesSubsidized);

    boolean present_receMoney = true;
    list.add(present_receMoney);
    if (present_receMoney)
      list.add(receMoney);

    boolean present_payBank = true && (isSetPayBank());
    list.add(present_payBank);
    if (present_payBank)
      list.add(payBank);

    boolean present_feeRate = true;
    list.add(present_feeRate);
    if (present_feeRate)
      list.add(feeRate);

    boolean present_turnoverMoney = true;
    list.add(present_turnoverMoney);
    if (present_turnoverMoney)
      list.add(turnoverMoney);

    boolean present_foreclosureMoney = true;
    list.add(present_foreclosureMoney);
    if (present_foreclosureMoney)
      list.add(foreclosureMoney);

    boolean present_chargeType = true;
    list.add(present_chargeType);
    if (present_chargeType)
      list.add(chargeType);

    boolean present_loanTerm = true;
    list.add(present_loanTerm);
    if (present_loanTerm)
      list.add(loanTerm);

    boolean present_repaymentType = true && (isSetRepaymentType());
    list.add(present_repaymentType);
    if (present_repaymentType)
      list.add(repaymentType);

    boolean present_mortgageRate = true;
    list.add(present_mortgageRate);
    if (present_mortgageRate)
      list.add(mortgageRate);

    boolean present_loanUsage = true && (isSetLoanUsage());
    list.add(present_loanUsage);
    if (present_loanUsage)
      list.add(loanUsage);

    boolean present_paymentSource = true && (isSetPaymentSource());
    list.add(present_paymentSource);
    if (present_paymentSource)
      list.add(paymentSource);

    boolean present_monthMaidRate = true;
    list.add(present_monthMaidRate);
    if (present_monthMaidRate)
      list.add(monthMaidRate);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_prepaymentRate = true;
    list.add(present_prepaymentRate);
    if (present_prepaymentRate)
      list.add(prepaymentRate);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_rentRetrialPrice = true;
    list.add(present_rentRetrialPrice);
    if (present_rentRetrialPrice)
      list.add(rentRetrialPrice);

    boolean present_contractPrice = true;
    list.add(present_contractPrice);
    if (present_contractPrice)
      list.add(contractPrice);

    boolean present_debtRadio = true;
    list.add(present_debtRadio);
    if (present_debtRadio)
      list.add(debtRadio);

    boolean present_leaseTerm = true;
    list.add(present_leaseTerm);
    if (present_leaseTerm)
      list.add(leaseTerm);

    boolean present_monthlyReturnMoney = true;
    list.add(present_monthlyReturnMoney);
    if (present_monthlyReturnMoney)
      list.add(monthlyReturnMoney);

    boolean present_loanRadio = true;
    list.add(present_loanRadio);
    if (present_loanRadio)
      list.add(loanRadio);

    boolean present_estimateMonthlyIncome = true;
    list.add(present_estimateMonthlyIncome);
    if (present_estimateMonthlyIncome)
      list.add(estimateMonthlyIncome);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectGuarantee other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeMoney()).compareTo(other.isSetGuaranteeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeMoney, other.guaranteeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeFee()).compareTo(other.isSetGuaranteeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeFee, other.guaranteeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargesType()).compareTo(other.isSetChargesType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargesType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargesType, other.chargesType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptMoney()).compareTo(other.isSetDeptMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptMoney, other.deptMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargesSubsidized()).compareTo(other.isSetChargesSubsidized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargesSubsidized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargesSubsidized, other.chargesSubsidized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceMoney()).compareTo(other.isSetReceMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receMoney, other.receMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBank()).compareTo(other.isSetPayBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBank, other.payBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeRate()).compareTo(other.isSetFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeRate, other.feeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnoverMoney()).compareTo(other.isSetTurnoverMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnoverMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverMoney, other.turnoverMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureMoney()).compareTo(other.isSetForeclosureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureMoney, other.foreclosureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeType()).compareTo(other.isSetChargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeType, other.chargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTerm()).compareTo(other.isSetLoanTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTerm, other.loanTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentType()).compareTo(other.isSetRepaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentType, other.repaymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageRate()).compareTo(other.isSetMortgageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageRate, other.mortgageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanUsage()).compareTo(other.isSetLoanUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanUsage, other.loanUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentSource()).compareTo(other.isSetPaymentSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentSource, other.paymentSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthMaidRate()).compareTo(other.isSetMonthMaidRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthMaidRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthMaidRate, other.monthMaidRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepaymentRate()).compareTo(other.isSetPrepaymentRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepaymentRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepaymentRate, other.prepaymentRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentRetrialPrice()).compareTo(other.isSetRentRetrialPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentRetrialPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentRetrialPrice, other.rentRetrialPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractPrice()).compareTo(other.isSetContractPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractPrice, other.contractPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebtRadio()).compareTo(other.isSetDebtRadio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebtRadio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debtRadio, other.debtRadio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseTerm()).compareTo(other.isSetLeaseTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseTerm, other.leaseTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthlyReturnMoney()).compareTo(other.isSetMonthlyReturnMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthlyReturnMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyReturnMoney, other.monthlyReturnMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRadio()).compareTo(other.isSetLoanRadio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRadio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRadio, other.loanRadio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimateMonthlyIncome()).compareTo(other.isSetEstimateMonthlyIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimateMonthlyIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimateMonthlyIncome, other.estimateMonthlyIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectGuarantee(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeMoney:");
    sb.append(this.guaranteeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeFee:");
    sb.append(this.guaranteeFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargesType:");
    sb.append(this.chargesType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptMoney:");
    sb.append(this.deptMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargesSubsidized:");
    sb.append(this.chargesSubsidized);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receMoney:");
    sb.append(this.receMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBank:");
    if (this.payBank == null) {
      sb.append("null");
    } else {
      sb.append(this.payBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeRate:");
    sb.append(this.feeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnoverMoney:");
    sb.append(this.turnoverMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureMoney:");
    sb.append(this.foreclosureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeType:");
    sb.append(this.chargeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTerm:");
    sb.append(this.loanTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentType:");
    if (this.repaymentType == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageRate:");
    sb.append(this.mortgageRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanUsage:");
    if (this.loanUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.loanUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentSource:");
    if (this.paymentSource == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthMaidRate:");
    sb.append(this.monthMaidRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepaymentRate:");
    sb.append(this.prepaymentRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentRetrialPrice:");
    sb.append(this.rentRetrialPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractPrice:");
    sb.append(this.contractPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debtRadio:");
    sb.append(this.debtRadio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseTerm:");
    sb.append(this.leaseTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthlyReturnMoney:");
    sb.append(this.monthlyReturnMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRadio:");
    sb.append(this.loanRadio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estimateMonthlyIncome:");
    sb.append(this.estimateMonthlyIncome);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectGuaranteeStandardSchemeFactory implements SchemeFactory {
    public ProjectGuaranteeStandardScheme getScheme() {
      return new ProjectGuaranteeStandardScheme();
    }
  }

  private static class ProjectGuaranteeStandardScheme extends StandardScheme<ProjectGuarantee> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectGuarantee struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GUARANTEE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeMoney = iprot.readDouble();
              struct.setGuaranteeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GUARANTEE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeFee = iprot.readDouble();
              struct.setGuaranteeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHARGES_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chargesType = iprot.readI32();
              struct.setChargesTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deptMoney = iprot.readDouble();
              struct.setDeptMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHARGES_SUBSIDIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargesSubsidized = iprot.readDouble();
              struct.setChargesSubsidizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receMoney = iprot.readDouble();
              struct.setReceMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAY_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBank = iprot.readString();
              struct.setPayBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeRate = iprot.readDouble();
              struct.setFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TURNOVER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnoverMoney = iprot.readDouble();
              struct.setTurnoverMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FORECLOSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreclosureMoney = iprot.readDouble();
              struct.setForeclosureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHARGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chargeType = iprot.readI32();
              struct.setChargeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanTerm = iprot.readI32();
              struct.setLoanTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentType = iprot.readString();
              struct.setRepaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MORTGAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgageRate = iprot.readDouble();
              struct.setMortgageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanUsage = iprot.readString();
              struct.setLoanUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAYMENT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentSource = iprot.readString();
              struct.setPaymentSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MONTH_MAID_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthMaidRate = iprot.readDouble();
              struct.setMonthMaidRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PREPAYMENT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepaymentRate = iprot.readDouble();
              struct.setPrepaymentRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // RENT_RETRIAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentRetrialPrice = iprot.readDouble();
              struct.setRentRetrialPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CONTRACT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractPrice = iprot.readDouble();
              struct.setContractPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DEBT_RADIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.debtRadio = iprot.readDouble();
              struct.setDebtRadioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LEASE_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leaseTerm = iprot.readDouble();
              struct.setLeaseTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MONTHLY_RETURN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthlyReturnMoney = iprot.readDouble();
              struct.setMonthlyReturnMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LOAN_RADIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanRadio = iprot.readDouble();
              struct.setLoanRadioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // ESTIMATE_MONTHLY_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.estimateMonthlyIncome = iprot.readDouble();
              struct.setEstimateMonthlyIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectGuarantee struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUARANTEE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUARANTEE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGES_TYPE_FIELD_DESC);
      oprot.writeI32(struct.chargesType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deptMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGES_SUBSIDIZED_FIELD_DESC);
      oprot.writeDouble(struct.chargesSubsidized);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.receMoney);
      oprot.writeFieldEnd();
      if (struct.payBank != null) {
        oprot.writeFieldBegin(PAY_BANK_FIELD_DESC);
        oprot.writeString(struct.payBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TURNOVER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.turnoverMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.foreclosureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.chargeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_TERM_FIELD_DESC);
      oprot.writeI32(struct.loanTerm);
      oprot.writeFieldEnd();
      if (struct.repaymentType != null) {
        oprot.writeFieldBegin(REPAYMENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.repaymentType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORTGAGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.mortgageRate);
      oprot.writeFieldEnd();
      if (struct.loanUsage != null) {
        oprot.writeFieldBegin(LOAN_USAGE_FIELD_DESC);
        oprot.writeString(struct.loanUsage);
        oprot.writeFieldEnd();
      }
      if (struct.paymentSource != null) {
        oprot.writeFieldBegin(PAYMENT_SOURCE_FIELD_DESC);
        oprot.writeString(struct.paymentSource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_MAID_RATE_FIELD_DESC);
      oprot.writeDouble(struct.monthMaidRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPAYMENT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.prepaymentRate);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENT_RETRIAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.rentRetrialPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.contractPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEBT_RADIO_FIELD_DESC);
      oprot.writeDouble(struct.debtRadio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEASE_TERM_FIELD_DESC);
      oprot.writeDouble(struct.leaseTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTHLY_RETURN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.monthlyReturnMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_RADIO_FIELD_DESC);
      oprot.writeDouble(struct.loanRadio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESTIMATE_MONTHLY_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.estimateMonthlyIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectGuaranteeTupleSchemeFactory implements SchemeFactory {
    public ProjectGuaranteeTupleScheme getScheme() {
      return new ProjectGuaranteeTupleScheme();
    }
  }

  private static class ProjectGuaranteeTupleScheme extends TupleScheme<ProjectGuarantee> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectGuarantee struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetGuaranteeMoney()) {
        optionals.set(2);
      }
      if (struct.isSetGuaranteeFee()) {
        optionals.set(3);
      }
      if (struct.isSetPoundage()) {
        optionals.set(4);
      }
      if (struct.isSetChargesType()) {
        optionals.set(5);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(6);
      }
      if (struct.isSetDeptMoney()) {
        optionals.set(7);
      }
      if (struct.isSetChargesSubsidized()) {
        optionals.set(8);
      }
      if (struct.isSetReceMoney()) {
        optionals.set(9);
      }
      if (struct.isSetPayBank()) {
        optionals.set(10);
      }
      if (struct.isSetFeeRate()) {
        optionals.set(11);
      }
      if (struct.isSetTurnoverMoney()) {
        optionals.set(12);
      }
      if (struct.isSetForeclosureMoney()) {
        optionals.set(13);
      }
      if (struct.isSetChargeType()) {
        optionals.set(14);
      }
      if (struct.isSetLoanTerm()) {
        optionals.set(15);
      }
      if (struct.isSetRepaymentType()) {
        optionals.set(16);
      }
      if (struct.isSetMortgageRate()) {
        optionals.set(17);
      }
      if (struct.isSetLoanUsage()) {
        optionals.set(18);
      }
      if (struct.isSetPaymentSource()) {
        optionals.set(19);
      }
      if (struct.isSetMonthMaidRate()) {
        optionals.set(20);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(21);
      }
      if (struct.isSetPrepaymentRate()) {
        optionals.set(22);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(23);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(24);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(25);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(26);
      }
      if (struct.isSetRentRetrialPrice()) {
        optionals.set(27);
      }
      if (struct.isSetContractPrice()) {
        optionals.set(28);
      }
      if (struct.isSetDebtRadio()) {
        optionals.set(29);
      }
      if (struct.isSetLeaseTerm()) {
        optionals.set(30);
      }
      if (struct.isSetMonthlyReturnMoney()) {
        optionals.set(31);
      }
      if (struct.isSetLoanRadio()) {
        optionals.set(32);
      }
      if (struct.isSetEstimateMonthlyIncome()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetGuaranteeMoney()) {
        oprot.writeDouble(struct.guaranteeMoney);
      }
      if (struct.isSetGuaranteeFee()) {
        oprot.writeDouble(struct.guaranteeFee);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetChargesType()) {
        oprot.writeI32(struct.chargesType);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetDeptMoney()) {
        oprot.writeDouble(struct.deptMoney);
      }
      if (struct.isSetChargesSubsidized()) {
        oprot.writeDouble(struct.chargesSubsidized);
      }
      if (struct.isSetReceMoney()) {
        oprot.writeDouble(struct.receMoney);
      }
      if (struct.isSetPayBank()) {
        oprot.writeString(struct.payBank);
      }
      if (struct.isSetFeeRate()) {
        oprot.writeDouble(struct.feeRate);
      }
      if (struct.isSetTurnoverMoney()) {
        oprot.writeDouble(struct.turnoverMoney);
      }
      if (struct.isSetForeclosureMoney()) {
        oprot.writeDouble(struct.foreclosureMoney);
      }
      if (struct.isSetChargeType()) {
        oprot.writeI32(struct.chargeType);
      }
      if (struct.isSetLoanTerm()) {
        oprot.writeI32(struct.loanTerm);
      }
      if (struct.isSetRepaymentType()) {
        oprot.writeString(struct.repaymentType);
      }
      if (struct.isSetMortgageRate()) {
        oprot.writeDouble(struct.mortgageRate);
      }
      if (struct.isSetLoanUsage()) {
        oprot.writeString(struct.loanUsage);
      }
      if (struct.isSetPaymentSource()) {
        oprot.writeString(struct.paymentSource);
      }
      if (struct.isSetMonthMaidRate()) {
        oprot.writeDouble(struct.monthMaidRate);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetPrepaymentRate()) {
        oprot.writeDouble(struct.prepaymentRate);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetRentRetrialPrice()) {
        oprot.writeDouble(struct.rentRetrialPrice);
      }
      if (struct.isSetContractPrice()) {
        oprot.writeDouble(struct.contractPrice);
      }
      if (struct.isSetDebtRadio()) {
        oprot.writeDouble(struct.debtRadio);
      }
      if (struct.isSetLeaseTerm()) {
        oprot.writeDouble(struct.leaseTerm);
      }
      if (struct.isSetMonthlyReturnMoney()) {
        oprot.writeDouble(struct.monthlyReturnMoney);
      }
      if (struct.isSetLoanRadio()) {
        oprot.writeDouble(struct.loanRadio);
      }
      if (struct.isSetEstimateMonthlyIncome()) {
        oprot.writeDouble(struct.estimateMonthlyIncome);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectGuarantee struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.guaranteeMoney = iprot.readDouble();
        struct.setGuaranteeMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.guaranteeFee = iprot.readDouble();
        struct.setGuaranteeFeeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.chargesType = iprot.readI32();
        struct.setChargesTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deptMoney = iprot.readDouble();
        struct.setDeptMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.chargesSubsidized = iprot.readDouble();
        struct.setChargesSubsidizedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.receMoney = iprot.readDouble();
        struct.setReceMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.payBank = iprot.readString();
        struct.setPayBankIsSet(true);
      }
      if (incoming.get(11)) {
        struct.feeRate = iprot.readDouble();
        struct.setFeeRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.turnoverMoney = iprot.readDouble();
        struct.setTurnoverMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.foreclosureMoney = iprot.readDouble();
        struct.setForeclosureMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.chargeType = iprot.readI32();
        struct.setChargeTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanTerm = iprot.readI32();
        struct.setLoanTermIsSet(true);
      }
      if (incoming.get(16)) {
        struct.repaymentType = iprot.readString();
        struct.setRepaymentTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.mortgageRate = iprot.readDouble();
        struct.setMortgageRateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanUsage = iprot.readString();
        struct.setLoanUsageIsSet(true);
      }
      if (incoming.get(19)) {
        struct.paymentSource = iprot.readString();
        struct.setPaymentSourceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.monthMaidRate = iprot.readDouble();
        struct.setMonthMaidRateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.prepaymentRate = iprot.readDouble();
        struct.setPrepaymentRateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(25)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.rentRetrialPrice = iprot.readDouble();
        struct.setRentRetrialPriceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.contractPrice = iprot.readDouble();
        struct.setContractPriceIsSet(true);
      }
      if (incoming.get(29)) {
        struct.debtRadio = iprot.readDouble();
        struct.setDebtRadioIsSet(true);
      }
      if (incoming.get(30)) {
        struct.leaseTerm = iprot.readDouble();
        struct.setLeaseTermIsSet(true);
      }
      if (incoming.get(31)) {
        struct.monthlyReturnMoney = iprot.readDouble();
        struct.setMonthlyReturnMoneyIsSet(true);
      }
      if (incoming.get(32)) {
        struct.loanRadio = iprot.readDouble();
        struct.setLoanRadioIsSet(true);
      }
      if (incoming.get(33)) {
        struct.estimateMonthlyIncome = iprot.readDouble();
        struct.setEstimateMonthlyIncomeIsSet(true);
      }
    }
  }

}


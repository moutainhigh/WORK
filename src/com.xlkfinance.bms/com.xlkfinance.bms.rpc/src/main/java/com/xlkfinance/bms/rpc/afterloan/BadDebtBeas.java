/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class BadDebtBeas implements org.apache.thrift.TBase<BadDebtBeas, BadDebtBeas._Fields>, java.io.Serializable, Cloneable, Comparable<BadDebtBeas> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BadDebtBeas");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BAD_SHOULD_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("badShouldAmt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BAD_LOSS_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("badLossAmt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BadDebtBeasStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BadDebtBeasTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectNumber; // required
  public String cusType; // required
  public String badShouldAmt; // required
  public String shouldDt; // required
  public String badLossAmt; // required
  public String reviewStatus; // required
  public String requestDttm; // required
  public int projectId; // required
  public int loanId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    CUS_TYPE((short)4, "cusType"),
    BAD_SHOULD_AMT((short)5, "badShouldAmt"),
    SHOULD_DT((short)6, "shouldDt"),
    BAD_LOSS_AMT((short)7, "badLossAmt"),
    REVIEW_STATUS((short)8, "reviewStatus"),
    REQUEST_DTTM((short)9, "requestDttm"),
    PROJECT_ID((short)10, "projectId"),
    LOAN_ID((short)11, "loanId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // CUS_TYPE
          return CUS_TYPE;
        case 5: // BAD_SHOULD_AMT
          return BAD_SHOULD_AMT;
        case 6: // SHOULD_DT
          return SHOULD_DT;
        case 7: // BAD_LOSS_AMT
          return BAD_LOSS_AMT;
        case 8: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 9: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 10: // PROJECT_ID
          return PROJECT_ID;
        case 11: // LOAN_ID
          return LOAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __LOANID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAD_SHOULD_AMT, new org.apache.thrift.meta_data.FieldMetaData("badShouldAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_DT, new org.apache.thrift.meta_data.FieldMetaData("shouldDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAD_LOSS_AMT, new org.apache.thrift.meta_data.FieldMetaData("badLossAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BadDebtBeas.class, metaDataMap);
  }

  public BadDebtBeas() {
  }

  public BadDebtBeas(
    int pid,
    String projectName,
    String projectNumber,
    String cusType,
    String badShouldAmt,
    String shouldDt,
    String badLossAmt,
    String reviewStatus,
    String requestDttm,
    int projectId,
    int loanId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.cusType = cusType;
    this.badShouldAmt = badShouldAmt;
    this.shouldDt = shouldDt;
    this.badLossAmt = badLossAmt;
    this.reviewStatus = reviewStatus;
    this.requestDttm = requestDttm;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BadDebtBeas(BadDebtBeas other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetBadShouldAmt()) {
      this.badShouldAmt = other.badShouldAmt;
    }
    if (other.isSetShouldDt()) {
      this.shouldDt = other.shouldDt;
    }
    if (other.isSetBadLossAmt()) {
      this.badLossAmt = other.badLossAmt;
    }
    if (other.isSetReviewStatus()) {
      this.reviewStatus = other.reviewStatus;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.projectId = other.projectId;
    this.loanId = other.loanId;
  }

  public BadDebtBeas deepCopy() {
    return new BadDebtBeas(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.cusType = null;
    this.badShouldAmt = null;
    this.shouldDt = null;
    this.badLossAmt = null;
    this.reviewStatus = null;
    this.requestDttm = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BadDebtBeas setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public BadDebtBeas setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public BadDebtBeas setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public BadDebtBeas setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getBadShouldAmt() {
    return this.badShouldAmt;
  }

  public BadDebtBeas setBadShouldAmt(String badShouldAmt) {
    this.badShouldAmt = badShouldAmt;
    return this;
  }

  public void unsetBadShouldAmt() {
    this.badShouldAmt = null;
  }

  /** Returns true if field badShouldAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBadShouldAmt() {
    return this.badShouldAmt != null;
  }

  public void setBadShouldAmtIsSet(boolean value) {
    if (!value) {
      this.badShouldAmt = null;
    }
  }

  public String getShouldDt() {
    return this.shouldDt;
  }

  public BadDebtBeas setShouldDt(String shouldDt) {
    this.shouldDt = shouldDt;
    return this;
  }

  public void unsetShouldDt() {
    this.shouldDt = null;
  }

  /** Returns true if field shouldDt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldDt() {
    return this.shouldDt != null;
  }

  public void setShouldDtIsSet(boolean value) {
    if (!value) {
      this.shouldDt = null;
    }
  }

  public String getBadLossAmt() {
    return this.badLossAmt;
  }

  public BadDebtBeas setBadLossAmt(String badLossAmt) {
    this.badLossAmt = badLossAmt;
    return this;
  }

  public void unsetBadLossAmt() {
    this.badLossAmt = null;
  }

  /** Returns true if field badLossAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBadLossAmt() {
    return this.badLossAmt != null;
  }

  public void setBadLossAmtIsSet(boolean value) {
    if (!value) {
      this.badLossAmt = null;
    }
  }

  public String getReviewStatus() {
    return this.reviewStatus;
  }

  public BadDebtBeas setReviewStatus(String reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  public void unsetReviewStatus() {
    this.reviewStatus = null;
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return this.reviewStatus != null;
  }

  public void setReviewStatusIsSet(boolean value) {
    if (!value) {
      this.reviewStatus = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public BadDebtBeas setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BadDebtBeas setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public BadDebtBeas setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case BAD_SHOULD_AMT:
      if (value == null) {
        unsetBadShouldAmt();
      } else {
        setBadShouldAmt((String)value);
      }
      break;

    case SHOULD_DT:
      if (value == null) {
        unsetShouldDt();
      } else {
        setShouldDt((String)value);
      }
      break;

    case BAD_LOSS_AMT:
      if (value == null) {
        unsetBadLossAmt();
      } else {
        setBadLossAmt((String)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUS_TYPE:
      return getCusType();

    case BAD_SHOULD_AMT:
      return getBadShouldAmt();

    case SHOULD_DT:
      return getShouldDt();

    case BAD_LOSS_AMT:
      return getBadLossAmt();

    case REVIEW_STATUS:
      return getReviewStatus();

    case REQUEST_DTTM:
      return getRequestDttm();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUS_TYPE:
      return isSetCusType();
    case BAD_SHOULD_AMT:
      return isSetBadShouldAmt();
    case SHOULD_DT:
      return isSetShouldDt();
    case BAD_LOSS_AMT:
      return isSetBadLossAmt();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_ID:
      return isSetLoanId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BadDebtBeas)
      return this.equals((BadDebtBeas)that);
    return false;
  }

  public boolean equals(BadDebtBeas that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_badShouldAmt = true && this.isSetBadShouldAmt();
    boolean that_present_badShouldAmt = true && that.isSetBadShouldAmt();
    if (this_present_badShouldAmt || that_present_badShouldAmt) {
      if (!(this_present_badShouldAmt && that_present_badShouldAmt))
        return false;
      if (!this.badShouldAmt.equals(that.badShouldAmt))
        return false;
    }

    boolean this_present_shouldDt = true && this.isSetShouldDt();
    boolean that_present_shouldDt = true && that.isSetShouldDt();
    if (this_present_shouldDt || that_present_shouldDt) {
      if (!(this_present_shouldDt && that_present_shouldDt))
        return false;
      if (!this.shouldDt.equals(that.shouldDt))
        return false;
    }

    boolean this_present_badLossAmt = true && this.isSetBadLossAmt();
    boolean that_present_badLossAmt = true && that.isSetBadLossAmt();
    if (this_present_badLossAmt || that_present_badLossAmt) {
      if (!(this_present_badLossAmt && that_present_badLossAmt))
        return false;
      if (!this.badLossAmt.equals(that.badLossAmt))
        return false;
    }

    boolean this_present_reviewStatus = true && this.isSetReviewStatus();
    boolean that_present_reviewStatus = true && that.isSetReviewStatus();
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (!this.reviewStatus.equals(that.reviewStatus))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_badShouldAmt = true && (isSetBadShouldAmt());
    list.add(present_badShouldAmt);
    if (present_badShouldAmt)
      list.add(badShouldAmt);

    boolean present_shouldDt = true && (isSetShouldDt());
    list.add(present_shouldDt);
    if (present_shouldDt)
      list.add(shouldDt);

    boolean present_badLossAmt = true && (isSetBadLossAmt());
    list.add(present_badLossAmt);
    if (present_badLossAmt)
      list.add(badLossAmt);

    boolean present_reviewStatus = true && (isSetReviewStatus());
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    return list.hashCode();
  }

  @Override
  public int compareTo(BadDebtBeas other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadShouldAmt()).compareTo(other.isSetBadShouldAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadShouldAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badShouldAmt, other.badShouldAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldDt()).compareTo(other.isSetShouldDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldDt, other.shouldDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadLossAmt()).compareTo(other.isSetBadLossAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadLossAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badLossAmt, other.badLossAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BadDebtBeas(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("badShouldAmt:");
    if (this.badShouldAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.badShouldAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldDt:");
    if (this.shouldDt == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("badLossAmt:");
    if (this.badLossAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.badLossAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    if (this.reviewStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BadDebtBeasStandardSchemeFactory implements SchemeFactory {
    public BadDebtBeasStandardScheme getScheme() {
      return new BadDebtBeasStandardScheme();
    }
  }

  private static class BadDebtBeasStandardScheme extends StandardScheme<BadDebtBeas> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BadDebtBeas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BAD_SHOULD_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.badShouldAmt = iprot.readString();
              struct.setBadShouldAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldDt = iprot.readString();
              struct.setShouldDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BAD_LOSS_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.badLossAmt = iprot.readString();
              struct.setBadLossAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewStatus = iprot.readString();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BadDebtBeas struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.badShouldAmt != null) {
        oprot.writeFieldBegin(BAD_SHOULD_AMT_FIELD_DESC);
        oprot.writeString(struct.badShouldAmt);
        oprot.writeFieldEnd();
      }
      if (struct.shouldDt != null) {
        oprot.writeFieldBegin(SHOULD_DT_FIELD_DESC);
        oprot.writeString(struct.shouldDt);
        oprot.writeFieldEnd();
      }
      if (struct.badLossAmt != null) {
        oprot.writeFieldBegin(BAD_LOSS_AMT_FIELD_DESC);
        oprot.writeString(struct.badLossAmt);
        oprot.writeFieldEnd();
      }
      if (struct.reviewStatus != null) {
        oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
        oprot.writeString(struct.reviewStatus);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BadDebtBeasTupleSchemeFactory implements SchemeFactory {
    public BadDebtBeasTupleScheme getScheme() {
      return new BadDebtBeasTupleScheme();
    }
  }

  private static class BadDebtBeasTupleScheme extends TupleScheme<BadDebtBeas> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BadDebtBeas struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetBadShouldAmt()) {
        optionals.set(4);
      }
      if (struct.isSetShouldDt()) {
        optionals.set(5);
      }
      if (struct.isSetBadLossAmt()) {
        optionals.set(6);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(7);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(8);
      }
      if (struct.isSetProjectId()) {
        optionals.set(9);
      }
      if (struct.isSetLoanId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetBadShouldAmt()) {
        oprot.writeString(struct.badShouldAmt);
      }
      if (struct.isSetShouldDt()) {
        oprot.writeString(struct.shouldDt);
      }
      if (struct.isSetBadLossAmt()) {
        oprot.writeString(struct.badLossAmt);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeString(struct.reviewStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BadDebtBeas struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.badShouldAmt = iprot.readString();
        struct.setBadShouldAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldDt = iprot.readString();
        struct.setShouldDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.badLossAmt = iprot.readString();
        struct.setBadLossAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reviewStatus = iprot.readString();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
    }
  }

}


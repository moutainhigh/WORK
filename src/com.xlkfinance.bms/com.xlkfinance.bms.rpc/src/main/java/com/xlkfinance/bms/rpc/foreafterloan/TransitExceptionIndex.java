/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.foreafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class TransitExceptionIndex implements org.apache.thrift.TBase<TransitExceptionIndex, TransitExceptionIndex._Fields>, java.io.Serializable, Cloneable, Comparable<TransitExceptionIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransitExceptionIndex");

  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDateDiff", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REPAYMENT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentEndDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PLAN_REPAYMENT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepaymentEndDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MONITOR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REPAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentStatus", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField DANGER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("dangerLevel", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField MAKE_LOANS_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("makeLoansRes", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField CPY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PARTNER_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerLoanDate", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField AVAILABLE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField SINGLE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUpperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField MONITOR_STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorStatusName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField DANGER_LEVEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dangerLevelName", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField RETURN_NORMAL_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("returnNormalRemark", org.apache.thrift.protocol.TType.STRING, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransitExceptionIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransitExceptionIndexTupleSchemeFactory());
  }

  public String projectName; // required
  public String receDate; // required
  public int loanDays; // required
  public double loanMoney; // required
  public String businessSourceStr; // required
  public String buyerName; // required
  public String sellerName; // required
  public String houseName; // required
  public String housePropertyCard; // required
  public String productName; // required
  public String planRepaymentDate; // required
  public int repaymentDateDiff; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String repaymentDate; // required
  public String repaymentEndDate; // required
  public String planRepaymentEndDate; // required
  public int monitorStatus; // required
  public int repaymentStatus; // required
  public int projectId; // required
  public String orgName; // required
  public int applyStatus; // required
  public int dangerLevel; // required
  public String remark; // required
  public String makeLoansRes; // required
  public int businessSource; // required
  public String cpyName; // required
  public String partnerLoanDate; // required
  public String updateDate; // required
  public String payDate; // required
  public int totalCount; // required
  public double totalMoney; // required
  public String certNumber; // required
  public String chinaName; // required
  public double availableLimit; // required
  public double singleUpperLimit; // required
  public double assureMoney; // required
  public String monitorStatusName; // required
  public String dangerLevelName; // required
  public String returnNormalRemark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_NAME((short)1, "projectName"),
    RECE_DATE((short)2, "receDate"),
    LOAN_DAYS((short)3, "loanDays"),
    LOAN_MONEY((short)4, "loanMoney"),
    BUSINESS_SOURCE_STR((short)5, "businessSourceStr"),
    BUYER_NAME((short)6, "buyerName"),
    SELLER_NAME((short)7, "sellerName"),
    HOUSE_NAME((short)8, "houseName"),
    HOUSE_PROPERTY_CARD((short)9, "housePropertyCard"),
    PRODUCT_NAME((short)10, "productName"),
    PLAN_REPAYMENT_DATE((short)11, "planRepaymentDate"),
    REPAYMENT_DATE_DIFF((short)12, "repaymentDateDiff"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows"),
    USER_IDS((short)15, "userIds"),
    REPAYMENT_DATE((short)16, "repaymentDate"),
    REPAYMENT_END_DATE((short)17, "repaymentEndDate"),
    PLAN_REPAYMENT_END_DATE((short)18, "planRepaymentEndDate"),
    MONITOR_STATUS((short)19, "monitorStatus"),
    REPAYMENT_STATUS((short)20, "repaymentStatus"),
    PROJECT_ID((short)21, "projectId"),
    ORG_NAME((short)22, "orgName"),
    APPLY_STATUS((short)23, "applyStatus"),
    DANGER_LEVEL((short)24, "dangerLevel"),
    REMARK((short)25, "remark"),
    MAKE_LOANS_RES((short)26, "makeLoansRes"),
    BUSINESS_SOURCE((short)27, "businessSource"),
    CPY_NAME((short)28, "cpyName"),
    PARTNER_LOAN_DATE((short)29, "partnerLoanDate"),
    UPDATE_DATE((short)30, "updateDate"),
    PAY_DATE((short)31, "payDate"),
    TOTAL_COUNT((short)32, "totalCount"),
    TOTAL_MONEY((short)33, "totalMoney"),
    CERT_NUMBER((short)34, "certNumber"),
    CHINA_NAME((short)35, "chinaName"),
    AVAILABLE_LIMIT((short)36, "availableLimit"),
    SINGLE_UPPER_LIMIT((short)37, "singleUpperLimit"),
    ASSURE_MONEY((short)38, "assureMoney"),
    MONITOR_STATUS_NAME((short)39, "monitorStatusName"),
    DANGER_LEVEL_NAME((short)40, "dangerLevelName"),
    RETURN_NORMAL_REMARK((short)41, "returnNormalRemark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_NAME
          return PROJECT_NAME;
        case 2: // RECE_DATE
          return RECE_DATE;
        case 3: // LOAN_DAYS
          return LOAN_DAYS;
        case 4: // LOAN_MONEY
          return LOAN_MONEY;
        case 5: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 6: // BUYER_NAME
          return BUYER_NAME;
        case 7: // SELLER_NAME
          return SELLER_NAME;
        case 8: // HOUSE_NAME
          return HOUSE_NAME;
        case 9: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 10: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 11: // PLAN_REPAYMENT_DATE
          return PLAN_REPAYMENT_DATE;
        case 12: // REPAYMENT_DATE_DIFF
          return REPAYMENT_DATE_DIFF;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        case 15: // USER_IDS
          return USER_IDS;
        case 16: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 17: // REPAYMENT_END_DATE
          return REPAYMENT_END_DATE;
        case 18: // PLAN_REPAYMENT_END_DATE
          return PLAN_REPAYMENT_END_DATE;
        case 19: // MONITOR_STATUS
          return MONITOR_STATUS;
        case 20: // REPAYMENT_STATUS
          return REPAYMENT_STATUS;
        case 21: // PROJECT_ID
          return PROJECT_ID;
        case 22: // ORG_NAME
          return ORG_NAME;
        case 23: // APPLY_STATUS
          return APPLY_STATUS;
        case 24: // DANGER_LEVEL
          return DANGER_LEVEL;
        case 25: // REMARK
          return REMARK;
        case 26: // MAKE_LOANS_RES
          return MAKE_LOANS_RES;
        case 27: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 28: // CPY_NAME
          return CPY_NAME;
        case 29: // PARTNER_LOAN_DATE
          return PARTNER_LOAN_DATE;
        case 30: // UPDATE_DATE
          return UPDATE_DATE;
        case 31: // PAY_DATE
          return PAY_DATE;
        case 32: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 33: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 34: // CERT_NUMBER
          return CERT_NUMBER;
        case 35: // CHINA_NAME
          return CHINA_NAME;
        case 36: // AVAILABLE_LIMIT
          return AVAILABLE_LIMIT;
        case 37: // SINGLE_UPPER_LIMIT
          return SINGLE_UPPER_LIMIT;
        case 38: // ASSURE_MONEY
          return ASSURE_MONEY;
        case 39: // MONITOR_STATUS_NAME
          return MONITOR_STATUS_NAME;
        case 40: // DANGER_LEVEL_NAME
          return DANGER_LEVEL_NAME;
        case 41: // RETURN_NORMAL_REMARK
          return RETURN_NORMAL_REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANDAYS_ISSET_ID = 0;
  private static final int __LOANMONEY_ISSET_ID = 1;
  private static final int __REPAYMENTDATEDIFF_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __MONITORSTATUS_ISSET_ID = 5;
  private static final int __REPAYMENTSTATUS_ISSET_ID = 6;
  private static final int __PROJECTID_ISSET_ID = 7;
  private static final int __APPLYSTATUS_ISSET_ID = 8;
  private static final int __DANGERLEVEL_ISSET_ID = 9;
  private static final int __BUSINESSSOURCE_ISSET_ID = 10;
  private static final int __TOTALCOUNT_ISSET_ID = 11;
  private static final int __TOTALMONEY_ISSET_ID = 12;
  private static final int __AVAILABLELIMIT_ISSET_ID = 13;
  private static final int __SINGLEUPPERLIMIT_ISSET_ID = 14;
  private static final int __ASSUREMONEY_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE, new org.apache.thrift.meta_data.FieldMetaData("receDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_DATE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("repaymentDateDiff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAYMENT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRepaymentEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("monitorStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DANGER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("dangerLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAKE_LOANS_RES, new org.apache.thrift.meta_data.FieldMetaData("makeLoansRes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("availableLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SINGLE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singleUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONITOR_STATUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("monitorStatusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DANGER_LEVEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("dangerLevelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_NORMAL_REMARK, new org.apache.thrift.meta_data.FieldMetaData("returnNormalRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransitExceptionIndex.class, metaDataMap);
  }

  public TransitExceptionIndex() {
    this.page = 1;

    this.rows = 10;

  }

  public TransitExceptionIndex(
    String projectName,
    String receDate,
    int loanDays,
    double loanMoney,
    String businessSourceStr,
    String buyerName,
    String sellerName,
    String houseName,
    String housePropertyCard,
    String productName,
    String planRepaymentDate,
    int repaymentDateDiff,
    int page,
    int rows,
    List<Integer> userIds,
    String repaymentDate,
    String repaymentEndDate,
    String planRepaymentEndDate,
    int monitorStatus,
    int repaymentStatus,
    int projectId,
    String orgName,
    int applyStatus,
    int dangerLevel,
    String remark,
    String makeLoansRes,
    int businessSource,
    String cpyName,
    String partnerLoanDate,
    String updateDate,
    String payDate,
    int totalCount,
    double totalMoney,
    String certNumber,
    String chinaName,
    double availableLimit,
    double singleUpperLimit,
    double assureMoney,
    String monitorStatusName,
    String dangerLevelName,
    String returnNormalRemark)
  {
    this();
    this.projectName = projectName;
    this.receDate = receDate;
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.businessSourceStr = businessSourceStr;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.houseName = houseName;
    this.housePropertyCard = housePropertyCard;
    this.productName = productName;
    this.planRepaymentDate = planRepaymentDate;
    this.repaymentDateDiff = repaymentDateDiff;
    setRepaymentDateDiffIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.repaymentDate = repaymentDate;
    this.repaymentEndDate = repaymentEndDate;
    this.planRepaymentEndDate = planRepaymentEndDate;
    this.monitorStatus = monitorStatus;
    setMonitorStatusIsSet(true);
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.orgName = orgName;
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.dangerLevel = dangerLevel;
    setDangerLevelIsSet(true);
    this.remark = remark;
    this.makeLoansRes = makeLoansRes;
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.cpyName = cpyName;
    this.partnerLoanDate = partnerLoanDate;
    this.updateDate = updateDate;
    this.payDate = payDate;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.certNumber = certNumber;
    this.chinaName = chinaName;
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    this.monitorStatusName = monitorStatusName;
    this.dangerLevelName = dangerLevelName;
    this.returnNormalRemark = returnNormalRemark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransitExceptionIndex(TransitExceptionIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetReceDate()) {
      this.receDate = other.receDate;
    }
    this.loanDays = other.loanDays;
    this.loanMoney = other.loanMoney;
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetPlanRepaymentDate()) {
      this.planRepaymentDate = other.planRepaymentDate;
    }
    this.repaymentDateDiff = other.repaymentDateDiff;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    if (other.isSetRepaymentEndDate()) {
      this.repaymentEndDate = other.repaymentEndDate;
    }
    if (other.isSetPlanRepaymentEndDate()) {
      this.planRepaymentEndDate = other.planRepaymentEndDate;
    }
    this.monitorStatus = other.monitorStatus;
    this.repaymentStatus = other.repaymentStatus;
    this.projectId = other.projectId;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.applyStatus = other.applyStatus;
    this.dangerLevel = other.dangerLevel;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetMakeLoansRes()) {
      this.makeLoansRes = other.makeLoansRes;
    }
    this.businessSource = other.businessSource;
    if (other.isSetCpyName()) {
      this.cpyName = other.cpyName;
    }
    if (other.isSetPartnerLoanDate()) {
      this.partnerLoanDate = other.partnerLoanDate;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetPayDate()) {
      this.payDate = other.payDate;
    }
    this.totalCount = other.totalCount;
    this.totalMoney = other.totalMoney;
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    this.availableLimit = other.availableLimit;
    this.singleUpperLimit = other.singleUpperLimit;
    this.assureMoney = other.assureMoney;
    if (other.isSetMonitorStatusName()) {
      this.monitorStatusName = other.monitorStatusName;
    }
    if (other.isSetDangerLevelName()) {
      this.dangerLevelName = other.dangerLevelName;
    }
    if (other.isSetReturnNormalRemark()) {
      this.returnNormalRemark = other.returnNormalRemark;
    }
  }

  public TransitExceptionIndex deepCopy() {
    return new TransitExceptionIndex(this);
  }

  @Override
  public void clear() {
    this.projectName = null;
    this.receDate = null;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.businessSourceStr = null;
    this.buyerName = null;
    this.sellerName = null;
    this.houseName = null;
    this.housePropertyCard = null;
    this.productName = null;
    this.planRepaymentDate = null;
    setRepaymentDateDiffIsSet(false);
    this.repaymentDateDiff = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.repaymentDate = null;
    this.repaymentEndDate = null;
    this.planRepaymentEndDate = null;
    setMonitorStatusIsSet(false);
    this.monitorStatus = 0;
    setRepaymentStatusIsSet(false);
    this.repaymentStatus = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.orgName = null;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    setDangerLevelIsSet(false);
    this.dangerLevel = 0;
    this.remark = null;
    this.makeLoansRes = null;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.cpyName = null;
    this.partnerLoanDate = null;
    this.updateDate = null;
    this.payDate = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    this.certNumber = null;
    this.chinaName = null;
    setAvailableLimitIsSet(false);
    this.availableLimit = 0.0;
    setSingleUpperLimitIsSet(false);
    this.singleUpperLimit = 0.0;
    setAssureMoneyIsSet(false);
    this.assureMoney = 0.0;
    this.monitorStatusName = null;
    this.dangerLevelName = null;
    this.returnNormalRemark = null;
  }

  public String getProjectName() {
    return this.projectName;
  }

  public TransitExceptionIndex setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getReceDate() {
    return this.receDate;
  }

  public TransitExceptionIndex setReceDate(String receDate) {
    this.receDate = receDate;
    return this;
  }

  public void unsetReceDate() {
    this.receDate = null;
  }

  /** Returns true if field receDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDate() {
    return this.receDate != null;
  }

  public void setReceDateIsSet(boolean value) {
    if (!value) {
      this.receDate = null;
    }
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public TransitExceptionIndex setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public TransitExceptionIndex setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public TransitExceptionIndex setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public TransitExceptionIndex setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public TransitExceptionIndex setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public TransitExceptionIndex setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public TransitExceptionIndex setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public TransitExceptionIndex setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getPlanRepaymentDate() {
    return this.planRepaymentDate;
  }

  public TransitExceptionIndex setPlanRepaymentDate(String planRepaymentDate) {
    this.planRepaymentDate = planRepaymentDate;
    return this;
  }

  public void unsetPlanRepaymentDate() {
    this.planRepaymentDate = null;
  }

  /** Returns true if field planRepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentDate() {
    return this.planRepaymentDate != null;
  }

  public void setPlanRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentDate = null;
    }
  }

  public int getRepaymentDateDiff() {
    return this.repaymentDateDiff;
  }

  public TransitExceptionIndex setRepaymentDateDiff(int repaymentDateDiff) {
    this.repaymentDateDiff = repaymentDateDiff;
    setRepaymentDateDiffIsSet(true);
    return this;
  }

  public void unsetRepaymentDateDiff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID);
  }

  /** Returns true if field repaymentDateDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDateDiff() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID);
  }

  public void setRepaymentDateDiffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTDATEDIFF_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TransitExceptionIndex setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TransitExceptionIndex setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public TransitExceptionIndex setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public TransitExceptionIndex setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public String getRepaymentEndDate() {
    return this.repaymentEndDate;
  }

  public TransitExceptionIndex setRepaymentEndDate(String repaymentEndDate) {
    this.repaymentEndDate = repaymentEndDate;
    return this;
  }

  public void unsetRepaymentEndDate() {
    this.repaymentEndDate = null;
  }

  /** Returns true if field repaymentEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentEndDate() {
    return this.repaymentEndDate != null;
  }

  public void setRepaymentEndDateIsSet(boolean value) {
    if (!value) {
      this.repaymentEndDate = null;
    }
  }

  public String getPlanRepaymentEndDate() {
    return this.planRepaymentEndDate;
  }

  public TransitExceptionIndex setPlanRepaymentEndDate(String planRepaymentEndDate) {
    this.planRepaymentEndDate = planRepaymentEndDate;
    return this;
  }

  public void unsetPlanRepaymentEndDate() {
    this.planRepaymentEndDate = null;
  }

  /** Returns true if field planRepaymentEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepaymentEndDate() {
    return this.planRepaymentEndDate != null;
  }

  public void setPlanRepaymentEndDateIsSet(boolean value) {
    if (!value) {
      this.planRepaymentEndDate = null;
    }
  }

  public int getMonitorStatus() {
    return this.monitorStatus;
  }

  public TransitExceptionIndex setMonitorStatus(int monitorStatus) {
    this.monitorStatus = monitorStatus;
    setMonitorStatusIsSet(true);
    return this;
  }

  public void unsetMonitorStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONITORSTATUS_ISSET_ID);
  }

  /** Returns true if field monitorStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MONITORSTATUS_ISSET_ID);
  }

  public void setMonitorStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONITORSTATUS_ISSET_ID, value);
  }

  public int getRepaymentStatus() {
    return this.repaymentStatus;
  }

  public TransitExceptionIndex setRepaymentStatus(int repaymentStatus) {
    this.repaymentStatus = repaymentStatus;
    setRepaymentStatusIsSet(true);
    return this;
  }

  public void unsetRepaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field repaymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID);
  }

  public void setRepaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTSTATUS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TransitExceptionIndex setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public TransitExceptionIndex setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public TransitExceptionIndex setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public int getDangerLevel() {
    return this.dangerLevel;
  }

  public TransitExceptionIndex setDangerLevel(int dangerLevel) {
    this.dangerLevel = dangerLevel;
    setDangerLevelIsSet(true);
    return this;
  }

  public void unsetDangerLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID);
  }

  /** Returns true if field dangerLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetDangerLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID);
  }

  public void setDangerLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DANGERLEVEL_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public TransitExceptionIndex setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getMakeLoansRes() {
    return this.makeLoansRes;
  }

  public TransitExceptionIndex setMakeLoansRes(String makeLoansRes) {
    this.makeLoansRes = makeLoansRes;
    return this;
  }

  public void unsetMakeLoansRes() {
    this.makeLoansRes = null;
  }

  /** Returns true if field makeLoansRes is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeLoansRes() {
    return this.makeLoansRes != null;
  }

  public void setMakeLoansResIsSet(boolean value) {
    if (!value) {
      this.makeLoansRes = null;
    }
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public TransitExceptionIndex setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getCpyName() {
    return this.cpyName;
  }

  public TransitExceptionIndex setCpyName(String cpyName) {
    this.cpyName = cpyName;
    return this;
  }

  public void unsetCpyName() {
    this.cpyName = null;
  }

  /** Returns true if field cpyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyName() {
    return this.cpyName != null;
  }

  public void setCpyNameIsSet(boolean value) {
    if (!value) {
      this.cpyName = null;
    }
  }

  public String getPartnerLoanDate() {
    return this.partnerLoanDate;
  }

  public TransitExceptionIndex setPartnerLoanDate(String partnerLoanDate) {
    this.partnerLoanDate = partnerLoanDate;
    return this;
  }

  public void unsetPartnerLoanDate() {
    this.partnerLoanDate = null;
  }

  /** Returns true if field partnerLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerLoanDate() {
    return this.partnerLoanDate != null;
  }

  public void setPartnerLoanDateIsSet(boolean value) {
    if (!value) {
      this.partnerLoanDate = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public TransitExceptionIndex setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getPayDate() {
    return this.payDate;
  }

  public TransitExceptionIndex setPayDate(String payDate) {
    this.payDate = payDate;
    return this;
  }

  public void unsetPayDate() {
    this.payDate = null;
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return this.payDate != null;
  }

  public void setPayDateIsSet(boolean value) {
    if (!value) {
      this.payDate = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public TransitExceptionIndex setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public double getTotalMoney() {
    return this.totalMoney;
  }

  public TransitExceptionIndex setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public TransitExceptionIndex setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public TransitExceptionIndex setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public double getAvailableLimit() {
    return this.availableLimit;
  }

  public TransitExceptionIndex setAvailableLimit(double availableLimit) {
    this.availableLimit = availableLimit;
    setAvailableLimitIsSet(true);
    return this;
  }

  public void unsetAvailableLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  /** Returns true if field availableLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID);
  }

  public void setAvailableLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLELIMIT_ISSET_ID, value);
  }

  public double getSingleUpperLimit() {
    return this.singleUpperLimit;
  }

  public TransitExceptionIndex setSingleUpperLimit(double singleUpperLimit) {
    this.singleUpperLimit = singleUpperLimit;
    setSingleUpperLimitIsSet(true);
    return this;
  }

  public void unsetSingleUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field singleUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID);
  }

  public void setSingleUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLEUPPERLIMIT_ISSET_ID, value);
  }

  public double getAssureMoney() {
    return this.assureMoney;
  }

  public TransitExceptionIndex setAssureMoney(double assureMoney) {
    this.assureMoney = assureMoney;
    setAssureMoneyIsSet(true);
    return this;
  }

  public void unsetAssureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  /** Returns true if field assureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID);
  }

  public void setAssureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSUREMONEY_ISSET_ID, value);
  }

  public String getMonitorStatusName() {
    return this.monitorStatusName;
  }

  public TransitExceptionIndex setMonitorStatusName(String monitorStatusName) {
    this.monitorStatusName = monitorStatusName;
    return this;
  }

  public void unsetMonitorStatusName() {
    this.monitorStatusName = null;
  }

  /** Returns true if field monitorStatusName is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorStatusName() {
    return this.monitorStatusName != null;
  }

  public void setMonitorStatusNameIsSet(boolean value) {
    if (!value) {
      this.monitorStatusName = null;
    }
  }

  public String getDangerLevelName() {
    return this.dangerLevelName;
  }

  public TransitExceptionIndex setDangerLevelName(String dangerLevelName) {
    this.dangerLevelName = dangerLevelName;
    return this;
  }

  public void unsetDangerLevelName() {
    this.dangerLevelName = null;
  }

  /** Returns true if field dangerLevelName is set (has been assigned a value) and false otherwise */
  public boolean isSetDangerLevelName() {
    return this.dangerLevelName != null;
  }

  public void setDangerLevelNameIsSet(boolean value) {
    if (!value) {
      this.dangerLevelName = null;
    }
  }

  public String getReturnNormalRemark() {
    return this.returnNormalRemark;
  }

  public TransitExceptionIndex setReturnNormalRemark(String returnNormalRemark) {
    this.returnNormalRemark = returnNormalRemark;
    return this;
  }

  public void unsetReturnNormalRemark() {
    this.returnNormalRemark = null;
  }

  /** Returns true if field returnNormalRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnNormalRemark() {
    return this.returnNormalRemark != null;
  }

  public void setReturnNormalRemarkIsSet(boolean value) {
    if (!value) {
      this.returnNormalRemark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case RECE_DATE:
      if (value == null) {
        unsetReceDate();
      } else {
        setReceDate((String)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PLAN_REPAYMENT_DATE:
      if (value == null) {
        unsetPlanRepaymentDate();
      } else {
        setPlanRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_DATE_DIFF:
      if (value == null) {
        unsetRepaymentDateDiff();
      } else {
        setRepaymentDateDiff((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_END_DATE:
      if (value == null) {
        unsetRepaymentEndDate();
      } else {
        setRepaymentEndDate((String)value);
      }
      break;

    case PLAN_REPAYMENT_END_DATE:
      if (value == null) {
        unsetPlanRepaymentEndDate();
      } else {
        setPlanRepaymentEndDate((String)value);
      }
      break;

    case MONITOR_STATUS:
      if (value == null) {
        unsetMonitorStatus();
      } else {
        setMonitorStatus((Integer)value);
      }
      break;

    case REPAYMENT_STATUS:
      if (value == null) {
        unsetRepaymentStatus();
      } else {
        setRepaymentStatus((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case DANGER_LEVEL:
      if (value == null) {
        unsetDangerLevel();
      } else {
        setDangerLevel((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case MAKE_LOANS_RES:
      if (value == null) {
        unsetMakeLoansRes();
      } else {
        setMakeLoansRes((String)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case CPY_NAME:
      if (value == null) {
        unsetCpyName();
      } else {
        setCpyName((String)value);
      }
      break;

    case PARTNER_LOAN_DATE:
      if (value == null) {
        unsetPartnerLoanDate();
      } else {
        setPartnerLoanDate((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((String)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case AVAILABLE_LIMIT:
      if (value == null) {
        unsetAvailableLimit();
      } else {
        setAvailableLimit((Double)value);
      }
      break;

    case SINGLE_UPPER_LIMIT:
      if (value == null) {
        unsetSingleUpperLimit();
      } else {
        setSingleUpperLimit((Double)value);
      }
      break;

    case ASSURE_MONEY:
      if (value == null) {
        unsetAssureMoney();
      } else {
        setAssureMoney((Double)value);
      }
      break;

    case MONITOR_STATUS_NAME:
      if (value == null) {
        unsetMonitorStatusName();
      } else {
        setMonitorStatusName((String)value);
      }
      break;

    case DANGER_LEVEL_NAME:
      if (value == null) {
        unsetDangerLevelName();
      } else {
        setDangerLevelName((String)value);
      }
      break;

    case RETURN_NORMAL_REMARK:
      if (value == null) {
        unsetReturnNormalRemark();
      } else {
        setReturnNormalRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_NAME:
      return getProjectName();

    case RECE_DATE:
      return getReceDate();

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case HOUSE_NAME:
      return getHouseName();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case PRODUCT_NAME:
      return getProductName();

    case PLAN_REPAYMENT_DATE:
      return getPlanRepaymentDate();

    case REPAYMENT_DATE_DIFF:
      return Integer.valueOf(getRepaymentDateDiff());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case REPAYMENT_END_DATE:
      return getRepaymentEndDate();

    case PLAN_REPAYMENT_END_DATE:
      return getPlanRepaymentEndDate();

    case MONITOR_STATUS:
      return Integer.valueOf(getMonitorStatus());

    case REPAYMENT_STATUS:
      return Integer.valueOf(getRepaymentStatus());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ORG_NAME:
      return getOrgName();

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case DANGER_LEVEL:
      return Integer.valueOf(getDangerLevel());

    case REMARK:
      return getRemark();

    case MAKE_LOANS_RES:
      return getMakeLoansRes();

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case CPY_NAME:
      return getCpyName();

    case PARTNER_LOAN_DATE:
      return getPartnerLoanDate();

    case UPDATE_DATE:
      return getUpdateDate();

    case PAY_DATE:
      return getPayDate();

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case TOTAL_MONEY:
      return Double.valueOf(getTotalMoney());

    case CERT_NUMBER:
      return getCertNumber();

    case CHINA_NAME:
      return getChinaName();

    case AVAILABLE_LIMIT:
      return Double.valueOf(getAvailableLimit());

    case SINGLE_UPPER_LIMIT:
      return Double.valueOf(getSingleUpperLimit());

    case ASSURE_MONEY:
      return Double.valueOf(getAssureMoney());

    case MONITOR_STATUS_NAME:
      return getMonitorStatusName();

    case DANGER_LEVEL_NAME:
      return getDangerLevelName();

    case RETURN_NORMAL_REMARK:
      return getReturnNormalRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_NAME:
      return isSetProjectName();
    case RECE_DATE:
      return isSetReceDate();
    case LOAN_DAYS:
      return isSetLoanDays();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case HOUSE_NAME:
      return isSetHouseName();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case PRODUCT_NAME:
      return isSetProductName();
    case PLAN_REPAYMENT_DATE:
      return isSetPlanRepaymentDate();
    case REPAYMENT_DATE_DIFF:
      return isSetRepaymentDateDiff();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case REPAYMENT_END_DATE:
      return isSetRepaymentEndDate();
    case PLAN_REPAYMENT_END_DATE:
      return isSetPlanRepaymentEndDate();
    case MONITOR_STATUS:
      return isSetMonitorStatus();
    case REPAYMENT_STATUS:
      return isSetRepaymentStatus();
    case PROJECT_ID:
      return isSetProjectId();
    case ORG_NAME:
      return isSetOrgName();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case DANGER_LEVEL:
      return isSetDangerLevel();
    case REMARK:
      return isSetRemark();
    case MAKE_LOANS_RES:
      return isSetMakeLoansRes();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case CPY_NAME:
      return isSetCpyName();
    case PARTNER_LOAN_DATE:
      return isSetPartnerLoanDate();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAY_DATE:
      return isSetPayDate();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case CERT_NUMBER:
      return isSetCertNumber();
    case CHINA_NAME:
      return isSetChinaName();
    case AVAILABLE_LIMIT:
      return isSetAvailableLimit();
    case SINGLE_UPPER_LIMIT:
      return isSetSingleUpperLimit();
    case ASSURE_MONEY:
      return isSetAssureMoney();
    case MONITOR_STATUS_NAME:
      return isSetMonitorStatusName();
    case DANGER_LEVEL_NAME:
      return isSetDangerLevelName();
    case RETURN_NORMAL_REMARK:
      return isSetReturnNormalRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransitExceptionIndex)
      return this.equals((TransitExceptionIndex)that);
    return false;
  }

  public boolean equals(TransitExceptionIndex that) {
    if (that == null)
      return false;

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_receDate = true && this.isSetReceDate();
    boolean that_present_receDate = true && that.isSetReceDate();
    if (this_present_receDate || that_present_receDate) {
      if (!(this_present_receDate && that_present_receDate))
        return false;
      if (!this.receDate.equals(that.receDate))
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_planRepaymentDate = true && this.isSetPlanRepaymentDate();
    boolean that_present_planRepaymentDate = true && that.isSetPlanRepaymentDate();
    if (this_present_planRepaymentDate || that_present_planRepaymentDate) {
      if (!(this_present_planRepaymentDate && that_present_planRepaymentDate))
        return false;
      if (!this.planRepaymentDate.equals(that.planRepaymentDate))
        return false;
    }

    boolean this_present_repaymentDateDiff = true;
    boolean that_present_repaymentDateDiff = true;
    if (this_present_repaymentDateDiff || that_present_repaymentDateDiff) {
      if (!(this_present_repaymentDateDiff && that_present_repaymentDateDiff))
        return false;
      if (this.repaymentDateDiff != that.repaymentDateDiff)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_repaymentEndDate = true && this.isSetRepaymentEndDate();
    boolean that_present_repaymentEndDate = true && that.isSetRepaymentEndDate();
    if (this_present_repaymentEndDate || that_present_repaymentEndDate) {
      if (!(this_present_repaymentEndDate && that_present_repaymentEndDate))
        return false;
      if (!this.repaymentEndDate.equals(that.repaymentEndDate))
        return false;
    }

    boolean this_present_planRepaymentEndDate = true && this.isSetPlanRepaymentEndDate();
    boolean that_present_planRepaymentEndDate = true && that.isSetPlanRepaymentEndDate();
    if (this_present_planRepaymentEndDate || that_present_planRepaymentEndDate) {
      if (!(this_present_planRepaymentEndDate && that_present_planRepaymentEndDate))
        return false;
      if (!this.planRepaymentEndDate.equals(that.planRepaymentEndDate))
        return false;
    }

    boolean this_present_monitorStatus = true;
    boolean that_present_monitorStatus = true;
    if (this_present_monitorStatus || that_present_monitorStatus) {
      if (!(this_present_monitorStatus && that_present_monitorStatus))
        return false;
      if (this.monitorStatus != that.monitorStatus)
        return false;
    }

    boolean this_present_repaymentStatus = true;
    boolean that_present_repaymentStatus = true;
    if (this_present_repaymentStatus || that_present_repaymentStatus) {
      if (!(this_present_repaymentStatus && that_present_repaymentStatus))
        return false;
      if (this.repaymentStatus != that.repaymentStatus)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_dangerLevel = true;
    boolean that_present_dangerLevel = true;
    if (this_present_dangerLevel || that_present_dangerLevel) {
      if (!(this_present_dangerLevel && that_present_dangerLevel))
        return false;
      if (this.dangerLevel != that.dangerLevel)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_makeLoansRes = true && this.isSetMakeLoansRes();
    boolean that_present_makeLoansRes = true && that.isSetMakeLoansRes();
    if (this_present_makeLoansRes || that_present_makeLoansRes) {
      if (!(this_present_makeLoansRes && that_present_makeLoansRes))
        return false;
      if (!this.makeLoansRes.equals(that.makeLoansRes))
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_cpyName = true && this.isSetCpyName();
    boolean that_present_cpyName = true && that.isSetCpyName();
    if (this_present_cpyName || that_present_cpyName) {
      if (!(this_present_cpyName && that_present_cpyName))
        return false;
      if (!this.cpyName.equals(that.cpyName))
        return false;
    }

    boolean this_present_partnerLoanDate = true && this.isSetPartnerLoanDate();
    boolean that_present_partnerLoanDate = true && that.isSetPartnerLoanDate();
    if (this_present_partnerLoanDate || that_present_partnerLoanDate) {
      if (!(this_present_partnerLoanDate && that_present_partnerLoanDate))
        return false;
      if (!this.partnerLoanDate.equals(that.partnerLoanDate))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_payDate = true && this.isSetPayDate();
    boolean that_present_payDate = true && that.isSetPayDate();
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (!this.payDate.equals(that.payDate))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_availableLimit = true;
    boolean that_present_availableLimit = true;
    if (this_present_availableLimit || that_present_availableLimit) {
      if (!(this_present_availableLimit && that_present_availableLimit))
        return false;
      if (this.availableLimit != that.availableLimit)
        return false;
    }

    boolean this_present_singleUpperLimit = true;
    boolean that_present_singleUpperLimit = true;
    if (this_present_singleUpperLimit || that_present_singleUpperLimit) {
      if (!(this_present_singleUpperLimit && that_present_singleUpperLimit))
        return false;
      if (this.singleUpperLimit != that.singleUpperLimit)
        return false;
    }

    boolean this_present_assureMoney = true;
    boolean that_present_assureMoney = true;
    if (this_present_assureMoney || that_present_assureMoney) {
      if (!(this_present_assureMoney && that_present_assureMoney))
        return false;
      if (this.assureMoney != that.assureMoney)
        return false;
    }

    boolean this_present_monitorStatusName = true && this.isSetMonitorStatusName();
    boolean that_present_monitorStatusName = true && that.isSetMonitorStatusName();
    if (this_present_monitorStatusName || that_present_monitorStatusName) {
      if (!(this_present_monitorStatusName && that_present_monitorStatusName))
        return false;
      if (!this.monitorStatusName.equals(that.monitorStatusName))
        return false;
    }

    boolean this_present_dangerLevelName = true && this.isSetDangerLevelName();
    boolean that_present_dangerLevelName = true && that.isSetDangerLevelName();
    if (this_present_dangerLevelName || that_present_dangerLevelName) {
      if (!(this_present_dangerLevelName && that_present_dangerLevelName))
        return false;
      if (!this.dangerLevelName.equals(that.dangerLevelName))
        return false;
    }

    boolean this_present_returnNormalRemark = true && this.isSetReturnNormalRemark();
    boolean that_present_returnNormalRemark = true && that.isSetReturnNormalRemark();
    if (this_present_returnNormalRemark || that_present_returnNormalRemark) {
      if (!(this_present_returnNormalRemark && that_present_returnNormalRemark))
        return false;
      if (!this.returnNormalRemark.equals(that.returnNormalRemark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_receDate = true && (isSetReceDate());
    list.add(present_receDate);
    if (present_receDate)
      list.add(receDate);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_planRepaymentDate = true && (isSetPlanRepaymentDate());
    list.add(present_planRepaymentDate);
    if (present_planRepaymentDate)
      list.add(planRepaymentDate);

    boolean present_repaymentDateDiff = true;
    list.add(present_repaymentDateDiff);
    if (present_repaymentDateDiff)
      list.add(repaymentDateDiff);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_repaymentEndDate = true && (isSetRepaymentEndDate());
    list.add(present_repaymentEndDate);
    if (present_repaymentEndDate)
      list.add(repaymentEndDate);

    boolean present_planRepaymentEndDate = true && (isSetPlanRepaymentEndDate());
    list.add(present_planRepaymentEndDate);
    if (present_planRepaymentEndDate)
      list.add(planRepaymentEndDate);

    boolean present_monitorStatus = true;
    list.add(present_monitorStatus);
    if (present_monitorStatus)
      list.add(monitorStatus);

    boolean present_repaymentStatus = true;
    list.add(present_repaymentStatus);
    if (present_repaymentStatus)
      list.add(repaymentStatus);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_dangerLevel = true;
    list.add(present_dangerLevel);
    if (present_dangerLevel)
      list.add(dangerLevel);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_makeLoansRes = true && (isSetMakeLoansRes());
    list.add(present_makeLoansRes);
    if (present_makeLoansRes)
      list.add(makeLoansRes);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_cpyName = true && (isSetCpyName());
    list.add(present_cpyName);
    if (present_cpyName)
      list.add(cpyName);

    boolean present_partnerLoanDate = true && (isSetPartnerLoanDate());
    list.add(present_partnerLoanDate);
    if (present_partnerLoanDate)
      list.add(partnerLoanDate);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_payDate = true && (isSetPayDate());
    list.add(present_payDate);
    if (present_payDate)
      list.add(payDate);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_totalMoney = true;
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_availableLimit = true;
    list.add(present_availableLimit);
    if (present_availableLimit)
      list.add(availableLimit);

    boolean present_singleUpperLimit = true;
    list.add(present_singleUpperLimit);
    if (present_singleUpperLimit)
      list.add(singleUpperLimit);

    boolean present_assureMoney = true;
    list.add(present_assureMoney);
    if (present_assureMoney)
      list.add(assureMoney);

    boolean present_monitorStatusName = true && (isSetMonitorStatusName());
    list.add(present_monitorStatusName);
    if (present_monitorStatusName)
      list.add(monitorStatusName);

    boolean present_dangerLevelName = true && (isSetDangerLevelName());
    list.add(present_dangerLevelName);
    if (present_dangerLevelName)
      list.add(dangerLevelName);

    boolean present_returnNormalRemark = true && (isSetReturnNormalRemark());
    list.add(present_returnNormalRemark);
    if (present_returnNormalRemark)
      list.add(returnNormalRemark);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransitExceptionIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDate()).compareTo(other.isSetReceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDate, other.receDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentDate()).compareTo(other.isSetPlanRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentDate, other.planRepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDateDiff()).compareTo(other.isSetRepaymentDateDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDateDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDateDiff, other.repaymentDateDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentEndDate()).compareTo(other.isSetRepaymentEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentEndDate, other.repaymentEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepaymentEndDate()).compareTo(other.isSetPlanRepaymentEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepaymentEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepaymentEndDate, other.planRepaymentEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorStatus()).compareTo(other.isSetMonitorStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorStatus, other.monitorStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentStatus()).compareTo(other.isSetRepaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentStatus, other.repaymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDangerLevel()).compareTo(other.isSetDangerLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDangerLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dangerLevel, other.dangerLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeLoansRes()).compareTo(other.isSetMakeLoansRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeLoansRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeLoansRes, other.makeLoansRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyName()).compareTo(other.isSetCpyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyName, other.cpyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerLoanDate()).compareTo(other.isSetPartnerLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerLoanDate, other.partnerLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableLimit()).compareTo(other.isSetAvailableLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableLimit, other.availableLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUpperLimit()).compareTo(other.isSetSingleUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUpperLimit, other.singleUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoney()).compareTo(other.isSetAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoney, other.assureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorStatusName()).compareTo(other.isSetMonitorStatusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorStatusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorStatusName, other.monitorStatusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDangerLevelName()).compareTo(other.isSetDangerLevelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDangerLevelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dangerLevelName, other.dangerLevelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnNormalRemark()).compareTo(other.isSetReturnNormalRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnNormalRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnNormalRemark, other.returnNormalRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransitExceptionIndex(");
    boolean first = true;

    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDate:");
    if (this.receDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentDate:");
    if (this.planRepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDateDiff:");
    sb.append(this.repaymentDateDiff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentEndDate:");
    if (this.repaymentEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepaymentEndDate:");
    if (this.planRepaymentEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepaymentEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorStatus:");
    sb.append(this.monitorStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentStatus:");
    sb.append(this.repaymentStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dangerLevel:");
    sb.append(this.dangerLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeLoansRes:");
    if (this.makeLoansRes == null) {
      sb.append("null");
    } else {
      sb.append(this.makeLoansRes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyName:");
    if (this.cpyName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerLoanDate:");
    if (this.partnerLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payDate:");
    if (this.payDate == null) {
      sb.append("null");
    } else {
      sb.append(this.payDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableLimit:");
    sb.append(this.availableLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleUpperLimit:");
    sb.append(this.singleUpperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoney:");
    sb.append(this.assureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorStatusName:");
    if (this.monitorStatusName == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorStatusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dangerLevelName:");
    if (this.dangerLevelName == null) {
      sb.append("null");
    } else {
      sb.append(this.dangerLevelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnNormalRemark:");
    if (this.returnNormalRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.returnNormalRemark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransitExceptionIndexStandardSchemeFactory implements SchemeFactory {
    public TransitExceptionIndexStandardScheme getScheme() {
      return new TransitExceptionIndexStandardScheme();
    }
  }

  private static class TransitExceptionIndexStandardScheme extends StandardScheme<TransitExceptionIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransitExceptionIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDate = iprot.readString();
              struct.setReceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentDate = iprot.readString();
              struct.setPlanRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPAYMENT_DATE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentDateDiff = iprot.readI32();
              struct.setRepaymentDateDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.userIds.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAYMENT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentEndDate = iprot.readString();
              struct.setRepaymentEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PLAN_REPAYMENT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepaymentEndDate = iprot.readString();
              struct.setPlanRepaymentEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MONITOR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monitorStatus = iprot.readI32();
              struct.setMonitorStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REPAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentStatus = iprot.readI32();
              struct.setRepaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DANGER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dangerLevel = iprot.readI32();
              struct.setDangerLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MAKE_LOANS_RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.makeLoansRes = iprot.readString();
              struct.setMakeLoansResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CPY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyName = iprot.readString();
              struct.setCpyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PARTNER_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerLoanDate = iprot.readString();
              struct.setPartnerLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payDate = iprot.readString();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalMoney = iprot.readDouble();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // AVAILABLE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableLimit = iprot.readDouble();
              struct.setAvailableLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SINGLE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.singleUpperLimit = iprot.readDouble();
              struct.setSingleUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assureMoney = iprot.readDouble();
              struct.setAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // MONITOR_STATUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorStatusName = iprot.readString();
              struct.setMonitorStatusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DANGER_LEVEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dangerLevelName = iprot.readString();
              struct.setDangerLevelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // RETURN_NORMAL_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnNormalRemark = iprot.readString();
              struct.setReturnNormalRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransitExceptionIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.receDate != null) {
        oprot.writeFieldBegin(RECE_DATE_FIELD_DESC);
        oprot.writeString(struct.receDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.planRepaymentDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_DATE_DIFF_FIELD_DESC);
      oprot.writeI32(struct.repaymentDateDiff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter11 : struct.userIds)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentEndDate != null) {
        oprot.writeFieldBegin(REPAYMENT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.planRepaymentEndDate != null) {
        oprot.writeFieldBegin(PLAN_REPAYMENT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.planRepaymentEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONITOR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.monitorStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.repaymentStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DANGER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.dangerLevel);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.makeLoansRes != null) {
        oprot.writeFieldBegin(MAKE_LOANS_RES_FIELD_DESC);
        oprot.writeString(struct.makeLoansRes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.cpyName != null) {
        oprot.writeFieldBegin(CPY_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyName);
        oprot.writeFieldEnd();
      }
      if (struct.partnerLoanDate != null) {
        oprot.writeFieldBegin(PARTNER_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.payDate != null) {
        oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.payDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalMoney);
      oprot.writeFieldEnd();
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AVAILABLE_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.availableLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINGLE_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.singleUpperLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assureMoney);
      oprot.writeFieldEnd();
      if (struct.monitorStatusName != null) {
        oprot.writeFieldBegin(MONITOR_STATUS_NAME_FIELD_DESC);
        oprot.writeString(struct.monitorStatusName);
        oprot.writeFieldEnd();
      }
      if (struct.dangerLevelName != null) {
        oprot.writeFieldBegin(DANGER_LEVEL_NAME_FIELD_DESC);
        oprot.writeString(struct.dangerLevelName);
        oprot.writeFieldEnd();
      }
      if (struct.returnNormalRemark != null) {
        oprot.writeFieldBegin(RETURN_NORMAL_REMARK_FIELD_DESC);
        oprot.writeString(struct.returnNormalRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransitExceptionIndexTupleSchemeFactory implements SchemeFactory {
    public TransitExceptionIndexTupleScheme getScheme() {
      return new TransitExceptionIndexTupleScheme();
    }
  }

  private static class TransitExceptionIndexTupleScheme extends TupleScheme<TransitExceptionIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransitExceptionIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectName()) {
        optionals.set(0);
      }
      if (struct.isSetReceDate()) {
        optionals.set(1);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(2);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(4);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(5);
      }
      if (struct.isSetSellerName()) {
        optionals.set(6);
      }
      if (struct.isSetHouseName()) {
        optionals.set(7);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(8);
      }
      if (struct.isSetProductName()) {
        optionals.set(9);
      }
      if (struct.isSetPlanRepaymentDate()) {
        optionals.set(10);
      }
      if (struct.isSetRepaymentDateDiff()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      if (struct.isSetUserIds()) {
        optionals.set(14);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(15);
      }
      if (struct.isSetRepaymentEndDate()) {
        optionals.set(16);
      }
      if (struct.isSetPlanRepaymentEndDate()) {
        optionals.set(17);
      }
      if (struct.isSetMonitorStatus()) {
        optionals.set(18);
      }
      if (struct.isSetRepaymentStatus()) {
        optionals.set(19);
      }
      if (struct.isSetProjectId()) {
        optionals.set(20);
      }
      if (struct.isSetOrgName()) {
        optionals.set(21);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(22);
      }
      if (struct.isSetDangerLevel()) {
        optionals.set(23);
      }
      if (struct.isSetRemark()) {
        optionals.set(24);
      }
      if (struct.isSetMakeLoansRes()) {
        optionals.set(25);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(26);
      }
      if (struct.isSetCpyName()) {
        optionals.set(27);
      }
      if (struct.isSetPartnerLoanDate()) {
        optionals.set(28);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(29);
      }
      if (struct.isSetPayDate()) {
        optionals.set(30);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(31);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(32);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(33);
      }
      if (struct.isSetChinaName()) {
        optionals.set(34);
      }
      if (struct.isSetAvailableLimit()) {
        optionals.set(35);
      }
      if (struct.isSetSingleUpperLimit()) {
        optionals.set(36);
      }
      if (struct.isSetAssureMoney()) {
        optionals.set(37);
      }
      if (struct.isSetMonitorStatusName()) {
        optionals.set(38);
      }
      if (struct.isSetDangerLevelName()) {
        optionals.set(39);
      }
      if (struct.isSetReturnNormalRemark()) {
        optionals.set(40);
      }
      oprot.writeBitSet(optionals, 41);
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetReceDate()) {
        oprot.writeString(struct.receDate);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetPlanRepaymentDate()) {
        oprot.writeString(struct.planRepaymentDate);
      }
      if (struct.isSetRepaymentDateDiff()) {
        oprot.writeI32(struct.repaymentDateDiff);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter12 : struct.userIds)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetRepaymentEndDate()) {
        oprot.writeString(struct.repaymentEndDate);
      }
      if (struct.isSetPlanRepaymentEndDate()) {
        oprot.writeString(struct.planRepaymentEndDate);
      }
      if (struct.isSetMonitorStatus()) {
        oprot.writeI32(struct.monitorStatus);
      }
      if (struct.isSetRepaymentStatus()) {
        oprot.writeI32(struct.repaymentStatus);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetDangerLevel()) {
        oprot.writeI32(struct.dangerLevel);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetMakeLoansRes()) {
        oprot.writeString(struct.makeLoansRes);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetCpyName()) {
        oprot.writeString(struct.cpyName);
      }
      if (struct.isSetPartnerLoanDate()) {
        oprot.writeString(struct.partnerLoanDate);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPayDate()) {
        oprot.writeString(struct.payDate);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeDouble(struct.totalMoney);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetAvailableLimit()) {
        oprot.writeDouble(struct.availableLimit);
      }
      if (struct.isSetSingleUpperLimit()) {
        oprot.writeDouble(struct.singleUpperLimit);
      }
      if (struct.isSetAssureMoney()) {
        oprot.writeDouble(struct.assureMoney);
      }
      if (struct.isSetMonitorStatusName()) {
        oprot.writeString(struct.monitorStatusName);
      }
      if (struct.isSetDangerLevelName()) {
        oprot.writeString(struct.dangerLevelName);
      }
      if (struct.isSetReturnNormalRemark()) {
        oprot.writeString(struct.returnNormalRemark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransitExceptionIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(41);
      if (incoming.get(0)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.receDate = iprot.readString();
        struct.setReceDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planRepaymentDate = iprot.readString();
        struct.setPlanRepaymentDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repaymentDateDiff = iprot.readI32();
        struct.setRepaymentDateDiffIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.userIds.add(_elem14);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.repaymentEndDate = iprot.readString();
        struct.setRepaymentEndDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.planRepaymentEndDate = iprot.readString();
        struct.setPlanRepaymentEndDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.monitorStatus = iprot.readI32();
        struct.setMonitorStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.repaymentStatus = iprot.readI32();
        struct.setRepaymentStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(23)) {
        struct.dangerLevel = iprot.readI32();
        struct.setDangerLevelIsSet(true);
      }
      if (incoming.get(24)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(25)) {
        struct.makeLoansRes = iprot.readString();
        struct.setMakeLoansResIsSet(true);
      }
      if (incoming.get(26)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.cpyName = iprot.readString();
        struct.setCpyNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.partnerLoanDate = iprot.readString();
        struct.setPartnerLoanDateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.payDate = iprot.readString();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(31)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(32)) {
        struct.totalMoney = iprot.readDouble();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(33)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(34)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(35)) {
        struct.availableLimit = iprot.readDouble();
        struct.setAvailableLimitIsSet(true);
      }
      if (incoming.get(36)) {
        struct.singleUpperLimit = iprot.readDouble();
        struct.setSingleUpperLimitIsSet(true);
      }
      if (incoming.get(37)) {
        struct.assureMoney = iprot.readDouble();
        struct.setAssureMoneyIsSet(true);
      }
      if (incoming.get(38)) {
        struct.monitorStatusName = iprot.readString();
        struct.setMonitorStatusNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.dangerLevelName = iprot.readString();
        struct.setDangerLevelNameIsSet(true);
      }
      if (incoming.get(40)) {
        struct.returnNormalRemark = iprot.readString();
        struct.setReturnNormalRemarkIsSet(true);
      }
    }
  }

}


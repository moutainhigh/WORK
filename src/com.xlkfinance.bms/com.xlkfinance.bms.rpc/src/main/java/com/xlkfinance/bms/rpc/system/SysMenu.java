/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysMenu implements org.apache.thrift.TBase<SysMenu, SysMenu._Fields>, java.io.Serializable, Cloneable, Comparable<SysMenu> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysMenu");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MENU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("menuName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ICON_CLS_FIELD_DESC = new org.apache.thrift.protocol.TField("iconCls", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MENU_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("menuUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MENU_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("menuIndex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysMenuStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysMenuTupleSchemeFactory());
  }

  public int pid; // required
  public int parentId; // required
  public String menuName; // required
  public String iconCls; // required
  public String menuUrl; // required
  public int status; // required
  public int menuIndex; // required
  public boolean open; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PARENT_ID((short)2, "parentId"),
    MENU_NAME((short)3, "menuName"),
    ICON_CLS((short)4, "iconCls"),
    MENU_URL((short)5, "menuUrl"),
    STATUS((short)6, "status"),
    MENU_INDEX((short)7, "menuIndex"),
    OPEN((short)8, "open");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // MENU_NAME
          return MENU_NAME;
        case 4: // ICON_CLS
          return ICON_CLS;
        case 5: // MENU_URL
          return MENU_URL;
        case 6: // STATUS
          return STATUS;
        case 7: // MENU_INDEX
          return MENU_INDEX;
        case 8: // OPEN
          return OPEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PARENTID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __MENUINDEX_ISSET_ID = 3;
  private static final int __OPEN_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENU_NAME, new org.apache.thrift.meta_data.FieldMetaData("menuName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_CLS, new org.apache.thrift.meta_data.FieldMetaData("iconCls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_URL, new org.apache.thrift.meta_data.FieldMetaData("menuUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENU_INDEX, new org.apache.thrift.meta_data.FieldMetaData("menuIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysMenu.class, metaDataMap);
  }

  public SysMenu() {
  }

  public SysMenu(
    int pid,
    int parentId,
    String menuName,
    String iconCls,
    String menuUrl,
    int status,
    int menuIndex,
    boolean open)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.menuName = menuName;
    this.iconCls = iconCls;
    this.menuUrl = menuUrl;
    this.status = status;
    setStatusIsSet(true);
    this.menuIndex = menuIndex;
    setMenuIndexIsSet(true);
    this.open = open;
    setOpenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysMenu(SysMenu other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.parentId = other.parentId;
    if (other.isSetMenuName()) {
      this.menuName = other.menuName;
    }
    if (other.isSetIconCls()) {
      this.iconCls = other.iconCls;
    }
    if (other.isSetMenuUrl()) {
      this.menuUrl = other.menuUrl;
    }
    this.status = other.status;
    this.menuIndex = other.menuIndex;
    this.open = other.open;
  }

  public SysMenu deepCopy() {
    return new SysMenu(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.menuName = null;
    this.iconCls = null;
    this.menuUrl = null;
    setStatusIsSet(false);
    this.status = 0;
    setMenuIndexIsSet(false);
    this.menuIndex = 0;
    setOpenIsSet(false);
    this.open = false;
  }

  public int getPid() {
    return this.pid;
  }

  public SysMenu setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public SysMenu setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public String getMenuName() {
    return this.menuName;
  }

  public SysMenu setMenuName(String menuName) {
    this.menuName = menuName;
    return this;
  }

  public void unsetMenuName() {
    this.menuName = null;
  }

  /** Returns true if field menuName is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuName() {
    return this.menuName != null;
  }

  public void setMenuNameIsSet(boolean value) {
    if (!value) {
      this.menuName = null;
    }
  }

  public String getIconCls() {
    return this.iconCls;
  }

  public SysMenu setIconCls(String iconCls) {
    this.iconCls = iconCls;
    return this;
  }

  public void unsetIconCls() {
    this.iconCls = null;
  }

  /** Returns true if field iconCls is set (has been assigned a value) and false otherwise */
  public boolean isSetIconCls() {
    return this.iconCls != null;
  }

  public void setIconClsIsSet(boolean value) {
    if (!value) {
      this.iconCls = null;
    }
  }

  public String getMenuUrl() {
    return this.menuUrl;
  }

  public SysMenu setMenuUrl(String menuUrl) {
    this.menuUrl = menuUrl;
    return this;
  }

  public void unsetMenuUrl() {
    this.menuUrl = null;
  }

  /** Returns true if field menuUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuUrl() {
    return this.menuUrl != null;
  }

  public void setMenuUrlIsSet(boolean value) {
    if (!value) {
      this.menuUrl = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysMenu setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getMenuIndex() {
    return this.menuIndex;
  }

  public SysMenu setMenuIndex(int menuIndex) {
    this.menuIndex = menuIndex;
    setMenuIndexIsSet(true);
    return this;
  }

  public void unsetMenuIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENUINDEX_ISSET_ID);
  }

  /** Returns true if field menuIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __MENUINDEX_ISSET_ID);
  }

  public void setMenuIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENUINDEX_ISSET_ID, value);
  }

  public boolean isOpen() {
    return this.open;
  }

  public SysMenu setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case MENU_NAME:
      if (value == null) {
        unsetMenuName();
      } else {
        setMenuName((String)value);
      }
      break;

    case ICON_CLS:
      if (value == null) {
        unsetIconCls();
      } else {
        setIconCls((String)value);
      }
      break;

    case MENU_URL:
      if (value == null) {
        unsetMenuUrl();
      } else {
        setMenuUrl((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MENU_INDEX:
      if (value == null) {
        unsetMenuIndex();
      } else {
        setMenuIndex((Integer)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case MENU_NAME:
      return getMenuName();

    case ICON_CLS:
      return getIconCls();

    case MENU_URL:
      return getMenuUrl();

    case STATUS:
      return Integer.valueOf(getStatus());

    case MENU_INDEX:
      return Integer.valueOf(getMenuIndex());

    case OPEN:
      return Boolean.valueOf(isOpen());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PARENT_ID:
      return isSetParentId();
    case MENU_NAME:
      return isSetMenuName();
    case ICON_CLS:
      return isSetIconCls();
    case MENU_URL:
      return isSetMenuUrl();
    case STATUS:
      return isSetStatus();
    case MENU_INDEX:
      return isSetMenuIndex();
    case OPEN:
      return isSetOpen();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysMenu)
      return this.equals((SysMenu)that);
    return false;
  }

  public boolean equals(SysMenu that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_menuName = true && this.isSetMenuName();
    boolean that_present_menuName = true && that.isSetMenuName();
    if (this_present_menuName || that_present_menuName) {
      if (!(this_present_menuName && that_present_menuName))
        return false;
      if (!this.menuName.equals(that.menuName))
        return false;
    }

    boolean this_present_iconCls = true && this.isSetIconCls();
    boolean that_present_iconCls = true && that.isSetIconCls();
    if (this_present_iconCls || that_present_iconCls) {
      if (!(this_present_iconCls && that_present_iconCls))
        return false;
      if (!this.iconCls.equals(that.iconCls))
        return false;
    }

    boolean this_present_menuUrl = true && this.isSetMenuUrl();
    boolean that_present_menuUrl = true && that.isSetMenuUrl();
    if (this_present_menuUrl || that_present_menuUrl) {
      if (!(this_present_menuUrl && that_present_menuUrl))
        return false;
      if (!this.menuUrl.equals(that.menuUrl))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_menuIndex = true;
    boolean that_present_menuIndex = true;
    if (this_present_menuIndex || that_present_menuIndex) {
      if (!(this_present_menuIndex && that_present_menuIndex))
        return false;
      if (this.menuIndex != that.menuIndex)
        return false;
    }

    boolean this_present_open = true;
    boolean that_present_open = true;
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_menuName = true && (isSetMenuName());
    list.add(present_menuName);
    if (present_menuName)
      list.add(menuName);

    boolean present_iconCls = true && (isSetIconCls());
    list.add(present_iconCls);
    if (present_iconCls)
      list.add(iconCls);

    boolean present_menuUrl = true && (isSetMenuUrl());
    list.add(present_menuUrl);
    if (present_menuUrl)
      list.add(menuUrl);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_menuIndex = true;
    list.add(present_menuIndex);
    if (present_menuIndex)
      list.add(menuIndex);

    boolean present_open = true;
    list.add(present_open);
    if (present_open)
      list.add(open);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysMenu other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuName()).compareTo(other.isSetMenuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuName, other.menuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconCls()).compareTo(other.isSetIconCls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconCls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconCls, other.iconCls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuUrl()).compareTo(other.isSetMenuUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuUrl, other.menuUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuIndex()).compareTo(other.isSetMenuIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuIndex, other.menuIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysMenu(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuName:");
    if (this.menuName == null) {
      sb.append("null");
    } else {
      sb.append(this.menuName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconCls:");
    if (this.iconCls == null) {
      sb.append("null");
    } else {
      sb.append(this.iconCls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuUrl:");
    if (this.menuUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.menuUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuIndex:");
    sb.append(this.menuIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("open:");
    sb.append(this.open);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysMenuStandardSchemeFactory implements SchemeFactory {
    public SysMenuStandardScheme getScheme() {
      return new SysMenuStandardScheme();
    }
  }

  private static class SysMenuStandardScheme extends StandardScheme<SysMenu> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysMenu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MENU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuName = iprot.readString();
              struct.setMenuNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ICON_CLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconCls = iprot.readString();
              struct.setIconClsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MENU_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuUrl = iprot.readString();
              struct.setMenuUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MENU_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuIndex = iprot.readI32();
              struct.setMenuIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysMenu struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.menuName != null) {
        oprot.writeFieldBegin(MENU_NAME_FIELD_DESC);
        oprot.writeString(struct.menuName);
        oprot.writeFieldEnd();
      }
      if (struct.iconCls != null) {
        oprot.writeFieldBegin(ICON_CLS_FIELD_DESC);
        oprot.writeString(struct.iconCls);
        oprot.writeFieldEnd();
      }
      if (struct.menuUrl != null) {
        oprot.writeFieldBegin(MENU_URL_FIELD_DESC);
        oprot.writeString(struct.menuUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MENU_INDEX_FIELD_DESC);
      oprot.writeI32(struct.menuIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_FIELD_DESC);
      oprot.writeBool(struct.open);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysMenuTupleSchemeFactory implements SchemeFactory {
    public SysMenuTupleScheme getScheme() {
      return new SysMenuTupleScheme();
    }
  }

  private static class SysMenuTupleScheme extends TupleScheme<SysMenu> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysMenu struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetParentId()) {
        optionals.set(1);
      }
      if (struct.isSetMenuName()) {
        optionals.set(2);
      }
      if (struct.isSetIconCls()) {
        optionals.set(3);
      }
      if (struct.isSetMenuUrl()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetMenuIndex()) {
        optionals.set(6);
      }
      if (struct.isSetOpen()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetMenuName()) {
        oprot.writeString(struct.menuName);
      }
      if (struct.isSetIconCls()) {
        oprot.writeString(struct.iconCls);
      }
      if (struct.isSetMenuUrl()) {
        oprot.writeString(struct.menuUrl);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMenuIndex()) {
        oprot.writeI32(struct.menuIndex);
      }
      if (struct.isSetOpen()) {
        oprot.writeBool(struct.open);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysMenu struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.menuName = iprot.readString();
        struct.setMenuNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.iconCls = iprot.readString();
        struct.setIconClsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.menuUrl = iprot.readString();
        struct.setMenuUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.menuIndex = iprot.readI32();
        struct.setMenuIndexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.open = iprot.readBool();
        struct.setOpenIsSet(true);
      }
    }
  }

}


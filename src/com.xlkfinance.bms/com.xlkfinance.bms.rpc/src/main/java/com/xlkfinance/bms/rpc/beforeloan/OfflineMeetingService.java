/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class OfflineMeetingService {

  public interface Iface {

    public int saveOrganizationCommission(OrganizationCommission organizationCommission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public BizProjectMeeting obtainBizProjectMeetingByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public BizProjectMeetingRST obtainBizProjectMeetingRSTByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<BizMeetingMinutesMember> obtainBizMeetingMinutesMemberByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteBizProjectMeetingByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deletteBizProjectMeetingRSTByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteBizMeetingMinutesMemberByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<com.xlkfinance.bms.rpc.system.BizFile> obtainBizFileForOfflineMeeting(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveOrganizationCommission(OrganizationCommission organizationCommission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBizProjectMeeting(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizProjectMeetingByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizProjectMeetingRSTByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizMeetingMinutesMemberByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizProjectMeeting(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizProjectMeetingByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deletteBizProjectMeetingRSTByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizMeetingMinutesMemberByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizFileForOfflineMeeting(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int saveOrganizationCommission(OrganizationCommission organizationCommission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveOrganizationCommission(organizationCommission);
      return recv_saveOrganizationCommission();
    }

    public void send_saveOrganizationCommission(OrganizationCommission organizationCommission) throws org.apache.thrift.TException
    {
      saveOrganizationCommission_args args = new saveOrganizationCommission_args();
      args.setOrganizationCommission(organizationCommission);
      sendBase("saveOrganizationCommission", args);
    }

    public int recv_saveOrganizationCommission() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveOrganizationCommission_result result = new saveOrganizationCommission_result();
      receiveBase(result, "saveOrganizationCommission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOrganizationCommission failed: unknown result");
    }

    public int saveBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizProjectMeeting(bizProjectMeeting);
      return recv_saveBizProjectMeeting();
    }

    public void send_saveBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws org.apache.thrift.TException
    {
      saveBizProjectMeeting_args args = new saveBizProjectMeeting_args();
      args.setBizProjectMeeting(bizProjectMeeting);
      sendBase("saveBizProjectMeeting", args);
    }

    public int recv_saveBizProjectMeeting() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizProjectMeeting_result result = new saveBizProjectMeeting_result();
      receiveBase(result, "saveBizProjectMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizProjectMeeting failed: unknown result");
    }

    public int saveBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizProjectMeetingRST(bizProjectMeetingRST);
      return recv_saveBizProjectMeetingRST();
    }

    public void send_saveBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws org.apache.thrift.TException
    {
      saveBizProjectMeetingRST_args args = new saveBizProjectMeetingRST_args();
      args.setBizProjectMeetingRST(bizProjectMeetingRST);
      sendBase("saveBizProjectMeetingRST", args);
    }

    public int recv_saveBizProjectMeetingRST() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizProjectMeetingRST_result result = new saveBizProjectMeetingRST_result();
      receiveBase(result, "saveBizProjectMeetingRST");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizProjectMeetingRST failed: unknown result");
    }

    public int saveBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizMeetingMinutesMember(bizMeetingMinutesMember);
      return recv_saveBizMeetingMinutesMember();
    }

    public void send_saveBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws org.apache.thrift.TException
    {
      saveBizMeetingMinutesMember_args args = new saveBizMeetingMinutesMember_args();
      args.setBizMeetingMinutesMember(bizMeetingMinutesMember);
      sendBase("saveBizMeetingMinutesMember", args);
    }

    public int recv_saveBizMeetingMinutesMember() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizMeetingMinutesMember_result result = new saveBizMeetingMinutesMember_result();
      receiveBase(result, "saveBizMeetingMinutesMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizMeetingMinutesMember failed: unknown result");
    }

    public int saveBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizMeetingMinutesFile(bizMeetingMinutesFile);
      return recv_saveBizMeetingMinutesFile();
    }

    public void send_saveBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile) throws org.apache.thrift.TException
    {
      saveBizMeetingMinutesFile_args args = new saveBizMeetingMinutesFile_args();
      args.setBizMeetingMinutesFile(bizMeetingMinutesFile);
      sendBase("saveBizMeetingMinutesFile", args);
    }

    public int recv_saveBizMeetingMinutesFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizMeetingMinutesFile_result result = new saveBizMeetingMinutesFile_result();
      receiveBase(result, "saveBizMeetingMinutesFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizMeetingMinutesFile failed: unknown result");
    }

    public BizProjectMeeting obtainBizProjectMeetingByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizProjectMeetingByProjectId(projectId);
      return recv_obtainBizProjectMeetingByProjectId();
    }

    public void send_obtainBizProjectMeetingByProjectId(int projectId) throws org.apache.thrift.TException
    {
      obtainBizProjectMeetingByProjectId_args args = new obtainBizProjectMeetingByProjectId_args();
      args.setProjectId(projectId);
      sendBase("obtainBizProjectMeetingByProjectId", args);
    }

    public BizProjectMeeting recv_obtainBizProjectMeetingByProjectId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizProjectMeetingByProjectId_result result = new obtainBizProjectMeetingByProjectId_result();
      receiveBase(result, "obtainBizProjectMeetingByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizProjectMeetingByProjectId failed: unknown result");
    }

    public BizProjectMeetingRST obtainBizProjectMeetingRSTByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizProjectMeetingRSTByMeetingId(meetingId);
      return recv_obtainBizProjectMeetingRSTByMeetingId();
    }

    public void send_obtainBizProjectMeetingRSTByMeetingId(int meetingId) throws org.apache.thrift.TException
    {
      obtainBizProjectMeetingRSTByMeetingId_args args = new obtainBizProjectMeetingRSTByMeetingId_args();
      args.setMeetingId(meetingId);
      sendBase("obtainBizProjectMeetingRSTByMeetingId", args);
    }

    public BizProjectMeetingRST recv_obtainBizProjectMeetingRSTByMeetingId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizProjectMeetingRSTByMeetingId_result result = new obtainBizProjectMeetingRSTByMeetingId_result();
      receiveBase(result, "obtainBizProjectMeetingRSTByMeetingId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizProjectMeetingRSTByMeetingId failed: unknown result");
    }

    public List<BizMeetingMinutesMember> obtainBizMeetingMinutesMemberByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizMeetingMinutesMemberByMeetingId(meetingId);
      return recv_obtainBizMeetingMinutesMemberByMeetingId();
    }

    public void send_obtainBizMeetingMinutesMemberByMeetingId(int meetingId) throws org.apache.thrift.TException
    {
      obtainBizMeetingMinutesMemberByMeetingId_args args = new obtainBizMeetingMinutesMemberByMeetingId_args();
      args.setMeetingId(meetingId);
      sendBase("obtainBizMeetingMinutesMemberByMeetingId", args);
    }

    public List<BizMeetingMinutesMember> recv_obtainBizMeetingMinutesMemberByMeetingId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizMeetingMinutesMemberByMeetingId_result result = new obtainBizMeetingMinutesMemberByMeetingId_result();
      receiveBase(result, "obtainBizMeetingMinutesMemberByMeetingId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizMeetingMinutesMemberByMeetingId failed: unknown result");
    }

    public int updateBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateBizProjectMeeting(bizProjectMeeting);
      return recv_updateBizProjectMeeting();
    }

    public void send_updateBizProjectMeeting(BizProjectMeeting bizProjectMeeting) throws org.apache.thrift.TException
    {
      updateBizProjectMeeting_args args = new updateBizProjectMeeting_args();
      args.setBizProjectMeeting(bizProjectMeeting);
      sendBase("updateBizProjectMeeting", args);
    }

    public int recv_updateBizProjectMeeting() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateBizProjectMeeting_result result = new updateBizProjectMeeting_result();
      receiveBase(result, "updateBizProjectMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizProjectMeeting failed: unknown result");
    }

    public int updateBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateBizProjectMeetingRST(bizProjectMeetingRST);
      return recv_updateBizProjectMeetingRST();
    }

    public void send_updateBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) throws org.apache.thrift.TException
    {
      updateBizProjectMeetingRST_args args = new updateBizProjectMeetingRST_args();
      args.setBizProjectMeetingRST(bizProjectMeetingRST);
      sendBase("updateBizProjectMeetingRST", args);
    }

    public int recv_updateBizProjectMeetingRST() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateBizProjectMeetingRST_result result = new updateBizProjectMeetingRST_result();
      receiveBase(result, "updateBizProjectMeetingRST");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizProjectMeetingRST failed: unknown result");
    }

    public int updateBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateBizMeetingMinutesMember(bizMeetingMinutesMember);
      return recv_updateBizMeetingMinutesMember();
    }

    public void send_updateBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) throws org.apache.thrift.TException
    {
      updateBizMeetingMinutesMember_args args = new updateBizMeetingMinutesMember_args();
      args.setBizMeetingMinutesMember(bizMeetingMinutesMember);
      sendBase("updateBizMeetingMinutesMember", args);
    }

    public int recv_updateBizMeetingMinutesMember() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateBizMeetingMinutesMember_result result = new updateBizMeetingMinutesMember_result();
      receiveBase(result, "updateBizMeetingMinutesMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizMeetingMinutesMember failed: unknown result");
    }

    public int deleteBizProjectMeetingByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteBizProjectMeetingByProjectId(projectId);
      return recv_deleteBizProjectMeetingByProjectId();
    }

    public void send_deleteBizProjectMeetingByProjectId(int projectId) throws org.apache.thrift.TException
    {
      deleteBizProjectMeetingByProjectId_args args = new deleteBizProjectMeetingByProjectId_args();
      args.setProjectId(projectId);
      sendBase("deleteBizProjectMeetingByProjectId", args);
    }

    public int recv_deleteBizProjectMeetingByProjectId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteBizProjectMeetingByProjectId_result result = new deleteBizProjectMeetingByProjectId_result();
      receiveBase(result, "deleteBizProjectMeetingByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizProjectMeetingByProjectId failed: unknown result");
    }

    public int deletteBizProjectMeetingRSTByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deletteBizProjectMeetingRSTByMeetingId(meetingId);
      return recv_deletteBizProjectMeetingRSTByMeetingId();
    }

    public void send_deletteBizProjectMeetingRSTByMeetingId(int meetingId) throws org.apache.thrift.TException
    {
      deletteBizProjectMeetingRSTByMeetingId_args args = new deletteBizProjectMeetingRSTByMeetingId_args();
      args.setMeetingId(meetingId);
      sendBase("deletteBizProjectMeetingRSTByMeetingId", args);
    }

    public int recv_deletteBizProjectMeetingRSTByMeetingId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deletteBizProjectMeetingRSTByMeetingId_result result = new deletteBizProjectMeetingRSTByMeetingId_result();
      receiveBase(result, "deletteBizProjectMeetingRSTByMeetingId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletteBizProjectMeetingRSTByMeetingId failed: unknown result");
    }

    public int deleteBizMeetingMinutesMemberByMeetingId(int meetingId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteBizMeetingMinutesMemberByMeetingId(meetingId);
      return recv_deleteBizMeetingMinutesMemberByMeetingId();
    }

    public void send_deleteBizMeetingMinutesMemberByMeetingId(int meetingId) throws org.apache.thrift.TException
    {
      deleteBizMeetingMinutesMemberByMeetingId_args args = new deleteBizMeetingMinutesMemberByMeetingId_args();
      args.setMeetingId(meetingId);
      sendBase("deleteBizMeetingMinutesMemberByMeetingId", args);
    }

    public int recv_deleteBizMeetingMinutesMemberByMeetingId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteBizMeetingMinutesMemberByMeetingId_result result = new deleteBizMeetingMinutesMemberByMeetingId_result();
      receiveBase(result, "deleteBizMeetingMinutesMemberByMeetingId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizMeetingMinutesMemberByMeetingId failed: unknown result");
    }

    public List<com.xlkfinance.bms.rpc.system.BizFile> obtainBizFileForOfflineMeeting(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizFileForOfflineMeeting(projectId);
      return recv_obtainBizFileForOfflineMeeting();
    }

    public void send_obtainBizFileForOfflineMeeting(int projectId) throws org.apache.thrift.TException
    {
      obtainBizFileForOfflineMeeting_args args = new obtainBizFileForOfflineMeeting_args();
      args.setProjectId(projectId);
      sendBase("obtainBizFileForOfflineMeeting", args);
    }

    public List<com.xlkfinance.bms.rpc.system.BizFile> recv_obtainBizFileForOfflineMeeting() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizFileForOfflineMeeting_result result = new obtainBizFileForOfflineMeeting_result();
      receiveBase(result, "obtainBizFileForOfflineMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizFileForOfflineMeeting failed: unknown result");
    }

    public int saveOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveOfflineMeetingInfo(bizProjectMeetingDTO);
      return recv_saveOfflineMeetingInfo();
    }

    public void send_saveOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws org.apache.thrift.TException
    {
      saveOfflineMeetingInfo_args args = new saveOfflineMeetingInfo_args();
      args.setBizProjectMeetingDTO(bizProjectMeetingDTO);
      sendBase("saveOfflineMeetingInfo", args);
    }

    public int recv_saveOfflineMeetingInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveOfflineMeetingInfo_result result = new saveOfflineMeetingInfo_result();
      receiveBase(result, "saveOfflineMeetingInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOfflineMeetingInfo failed: unknown result");
    }

    public int updateOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateOfflineMeetingInfo(bizProjectMeetingDTO);
      return recv_updateOfflineMeetingInfo();
    }

    public void send_updateOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO) throws org.apache.thrift.TException
    {
      updateOfflineMeetingInfo_args args = new updateOfflineMeetingInfo_args();
      args.setBizProjectMeetingDTO(bizProjectMeetingDTO);
      sendBase("updateOfflineMeetingInfo", args);
    }

    public int recv_updateOfflineMeetingInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateOfflineMeetingInfo_result result = new updateOfflineMeetingInfo_result();
      receiveBase(result, "updateOfflineMeetingInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOfflineMeetingInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveOrganizationCommission(OrganizationCommission organizationCommission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrganizationCommission_call method_call = new saveOrganizationCommission_call(organizationCommission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrganizationCommission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrganizationCommission organizationCommission;
      public saveOrganizationCommission_call(OrganizationCommission organizationCommission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.organizationCommission = organizationCommission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrganizationCommission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrganizationCommission_args args = new saveOrganizationCommission_args();
        args.setOrganizationCommission(organizationCommission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOrganizationCommission();
      }
    }

    public void saveBizProjectMeeting(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizProjectMeeting_call method_call = new saveBizProjectMeeting_call(bizProjectMeeting, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizProjectMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeeting bizProjectMeeting;
      public saveBizProjectMeeting_call(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeeting = bizProjectMeeting;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizProjectMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizProjectMeeting_args args = new saveBizProjectMeeting_args();
        args.setBizProjectMeeting(bizProjectMeeting);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizProjectMeeting();
      }
    }

    public void saveBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizProjectMeetingRST_call method_call = new saveBizProjectMeetingRST_call(bizProjectMeetingRST, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizProjectMeetingRST_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeetingRST bizProjectMeetingRST;
      public saveBizProjectMeetingRST_call(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeetingRST = bizProjectMeetingRST;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizProjectMeetingRST", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizProjectMeetingRST_args args = new saveBizProjectMeetingRST_args();
        args.setBizProjectMeetingRST(bizProjectMeetingRST);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizProjectMeetingRST();
      }
    }

    public void saveBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizMeetingMinutesMember_call method_call = new saveBizMeetingMinutesMember_call(bizMeetingMinutesMember, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizMeetingMinutesMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizMeetingMinutesMember bizMeetingMinutesMember;
      public saveBizMeetingMinutesMember_call(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizMeetingMinutesMember = bizMeetingMinutesMember;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizMeetingMinutesMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizMeetingMinutesMember_args args = new saveBizMeetingMinutesMember_args();
        args.setBizMeetingMinutesMember(bizMeetingMinutesMember);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizMeetingMinutesMember();
      }
    }

    public void saveBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizMeetingMinutesFile_call method_call = new saveBizMeetingMinutesFile_call(bizMeetingMinutesFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizMeetingMinutesFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizMeetingMinutesFile bizMeetingMinutesFile;
      public saveBizMeetingMinutesFile_call(BizMeetingMinutesFile bizMeetingMinutesFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizMeetingMinutesFile = bizMeetingMinutesFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizMeetingMinutesFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizMeetingMinutesFile_args args = new saveBizMeetingMinutesFile_args();
        args.setBizMeetingMinutesFile(bizMeetingMinutesFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizMeetingMinutesFile();
      }
    }

    public void obtainBizProjectMeetingByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizProjectMeetingByProjectId_call method_call = new obtainBizProjectMeetingByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizProjectMeetingByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public obtainBizProjectMeetingByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizProjectMeetingByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizProjectMeetingByProjectId_args args = new obtainBizProjectMeetingByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BizProjectMeeting getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizProjectMeetingByProjectId();
      }
    }

    public void obtainBizProjectMeetingRSTByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizProjectMeetingRSTByMeetingId_call method_call = new obtainBizProjectMeetingRSTByMeetingId_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizProjectMeetingRSTByMeetingId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int meetingId;
      public obtainBizProjectMeetingRSTByMeetingId_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizProjectMeetingRSTByMeetingId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizProjectMeetingRSTByMeetingId_args args = new obtainBizProjectMeetingRSTByMeetingId_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BizProjectMeetingRST getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizProjectMeetingRSTByMeetingId();
      }
    }

    public void obtainBizMeetingMinutesMemberByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizMeetingMinutesMemberByMeetingId_call method_call = new obtainBizMeetingMinutesMemberByMeetingId_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizMeetingMinutesMemberByMeetingId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int meetingId;
      public obtainBizMeetingMinutesMemberByMeetingId_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizMeetingMinutesMemberByMeetingId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizMeetingMinutesMemberByMeetingId_args args = new obtainBizMeetingMinutesMemberByMeetingId_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BizMeetingMinutesMember> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizMeetingMinutesMemberByMeetingId();
      }
    }

    public void updateBizProjectMeeting(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizProjectMeeting_call method_call = new updateBizProjectMeeting_call(bizProjectMeeting, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizProjectMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeeting bizProjectMeeting;
      public updateBizProjectMeeting_call(BizProjectMeeting bizProjectMeeting, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeeting = bizProjectMeeting;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizProjectMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizProjectMeeting_args args = new updateBizProjectMeeting_args();
        args.setBizProjectMeeting(bizProjectMeeting);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizProjectMeeting();
      }
    }

    public void updateBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizProjectMeetingRST_call method_call = new updateBizProjectMeetingRST_call(bizProjectMeetingRST, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizProjectMeetingRST_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeetingRST bizProjectMeetingRST;
      public updateBizProjectMeetingRST_call(BizProjectMeetingRST bizProjectMeetingRST, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeetingRST = bizProjectMeetingRST;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizProjectMeetingRST", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizProjectMeetingRST_args args = new updateBizProjectMeetingRST_args();
        args.setBizProjectMeetingRST(bizProjectMeetingRST);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizProjectMeetingRST();
      }
    }

    public void updateBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizMeetingMinutesMember_call method_call = new updateBizMeetingMinutesMember_call(bizMeetingMinutesMember, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizMeetingMinutesMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizMeetingMinutesMember bizMeetingMinutesMember;
      public updateBizMeetingMinutesMember_call(BizMeetingMinutesMember bizMeetingMinutesMember, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizMeetingMinutesMember = bizMeetingMinutesMember;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizMeetingMinutesMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizMeetingMinutesMember_args args = new updateBizMeetingMinutesMember_args();
        args.setBizMeetingMinutesMember(bizMeetingMinutesMember);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizMeetingMinutesMember();
      }
    }

    public void deleteBizProjectMeetingByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizProjectMeetingByProjectId_call method_call = new deleteBizProjectMeetingByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizProjectMeetingByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public deleteBizProjectMeetingByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizProjectMeetingByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizProjectMeetingByProjectId_args args = new deleteBizProjectMeetingByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizProjectMeetingByProjectId();
      }
    }

    public void deletteBizProjectMeetingRSTByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletteBizProjectMeetingRSTByMeetingId_call method_call = new deletteBizProjectMeetingRSTByMeetingId_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletteBizProjectMeetingRSTByMeetingId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int meetingId;
      public deletteBizProjectMeetingRSTByMeetingId_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletteBizProjectMeetingRSTByMeetingId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletteBizProjectMeetingRSTByMeetingId_args args = new deletteBizProjectMeetingRSTByMeetingId_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deletteBizProjectMeetingRSTByMeetingId();
      }
    }

    public void deleteBizMeetingMinutesMemberByMeetingId(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizMeetingMinutesMemberByMeetingId_call method_call = new deleteBizMeetingMinutesMemberByMeetingId_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizMeetingMinutesMemberByMeetingId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int meetingId;
      public deleteBizMeetingMinutesMemberByMeetingId_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizMeetingMinutesMemberByMeetingId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizMeetingMinutesMemberByMeetingId_args args = new deleteBizMeetingMinutesMemberByMeetingId_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizMeetingMinutesMemberByMeetingId();
      }
    }

    public void obtainBizFileForOfflineMeeting(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizFileForOfflineMeeting_call method_call = new obtainBizFileForOfflineMeeting_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizFileForOfflineMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public obtainBizFileForOfflineMeeting_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizFileForOfflineMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizFileForOfflineMeeting_args args = new obtainBizFileForOfflineMeeting_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.xlkfinance.bms.rpc.system.BizFile> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizFileForOfflineMeeting();
      }
    }

    public void saveOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOfflineMeetingInfo_call method_call = new saveOfflineMeetingInfo_call(bizProjectMeetingDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOfflineMeetingInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeetingDTO bizProjectMeetingDTO;
      public saveOfflineMeetingInfo_call(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeetingDTO = bizProjectMeetingDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOfflineMeetingInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOfflineMeetingInfo_args args = new saveOfflineMeetingInfo_args();
        args.setBizProjectMeetingDTO(bizProjectMeetingDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOfflineMeetingInfo();
      }
    }

    public void updateOfflineMeetingInfo(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOfflineMeetingInfo_call method_call = new updateOfflineMeetingInfo_call(bizProjectMeetingDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOfflineMeetingInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectMeetingDTO bizProjectMeetingDTO;
      public updateOfflineMeetingInfo_call(BizProjectMeetingDTO bizProjectMeetingDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectMeetingDTO = bizProjectMeetingDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOfflineMeetingInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOfflineMeetingInfo_args args = new updateOfflineMeetingInfo_args();
        args.setBizProjectMeetingDTO(bizProjectMeetingDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOfflineMeetingInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveOrganizationCommission", new saveOrganizationCommission());
      processMap.put("saveBizProjectMeeting", new saveBizProjectMeeting());
      processMap.put("saveBizProjectMeetingRST", new saveBizProjectMeetingRST());
      processMap.put("saveBizMeetingMinutesMember", new saveBizMeetingMinutesMember());
      processMap.put("saveBizMeetingMinutesFile", new saveBizMeetingMinutesFile());
      processMap.put("obtainBizProjectMeetingByProjectId", new obtainBizProjectMeetingByProjectId());
      processMap.put("obtainBizProjectMeetingRSTByMeetingId", new obtainBizProjectMeetingRSTByMeetingId());
      processMap.put("obtainBizMeetingMinutesMemberByMeetingId", new obtainBizMeetingMinutesMemberByMeetingId());
      processMap.put("updateBizProjectMeeting", new updateBizProjectMeeting());
      processMap.put("updateBizProjectMeetingRST", new updateBizProjectMeetingRST());
      processMap.put("updateBizMeetingMinutesMember", new updateBizMeetingMinutesMember());
      processMap.put("deleteBizProjectMeetingByProjectId", new deleteBizProjectMeetingByProjectId());
      processMap.put("deletteBizProjectMeetingRSTByMeetingId", new deletteBizProjectMeetingRSTByMeetingId());
      processMap.put("deleteBizMeetingMinutesMemberByMeetingId", new deleteBizMeetingMinutesMemberByMeetingId());
      processMap.put("obtainBizFileForOfflineMeeting", new obtainBizFileForOfflineMeeting());
      processMap.put("saveOfflineMeetingInfo", new saveOfflineMeetingInfo());
      processMap.put("updateOfflineMeetingInfo", new updateOfflineMeetingInfo());
      return processMap;
    }

    public static class saveOrganizationCommission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrganizationCommission_args> {
      public saveOrganizationCommission() {
        super("saveOrganizationCommission");
      }

      public saveOrganizationCommission_args getEmptyArgsInstance() {
        return new saveOrganizationCommission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOrganizationCommission_result getResult(I iface, saveOrganizationCommission_args args) throws org.apache.thrift.TException {
        saveOrganizationCommission_result result = new saveOrganizationCommission_result();
        try {
          result.success = iface.saveOrganizationCommission(args.organizationCommission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveBizProjectMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizProjectMeeting_args> {
      public saveBizProjectMeeting() {
        super("saveBizProjectMeeting");
      }

      public saveBizProjectMeeting_args getEmptyArgsInstance() {
        return new saveBizProjectMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizProjectMeeting_result getResult(I iface, saveBizProjectMeeting_args args) throws org.apache.thrift.TException {
        saveBizProjectMeeting_result result = new saveBizProjectMeeting_result();
        try {
          result.success = iface.saveBizProjectMeeting(args.bizProjectMeeting);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveBizProjectMeetingRST<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizProjectMeetingRST_args> {
      public saveBizProjectMeetingRST() {
        super("saveBizProjectMeetingRST");
      }

      public saveBizProjectMeetingRST_args getEmptyArgsInstance() {
        return new saveBizProjectMeetingRST_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizProjectMeetingRST_result getResult(I iface, saveBizProjectMeetingRST_args args) throws org.apache.thrift.TException {
        saveBizProjectMeetingRST_result result = new saveBizProjectMeetingRST_result();
        try {
          result.success = iface.saveBizProjectMeetingRST(args.bizProjectMeetingRST);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveBizMeetingMinutesMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizMeetingMinutesMember_args> {
      public saveBizMeetingMinutesMember() {
        super("saveBizMeetingMinutesMember");
      }

      public saveBizMeetingMinutesMember_args getEmptyArgsInstance() {
        return new saveBizMeetingMinutesMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizMeetingMinutesMember_result getResult(I iface, saveBizMeetingMinutesMember_args args) throws org.apache.thrift.TException {
        saveBizMeetingMinutesMember_result result = new saveBizMeetingMinutesMember_result();
        try {
          result.success = iface.saveBizMeetingMinutesMember(args.bizMeetingMinutesMember);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveBizMeetingMinutesFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizMeetingMinutesFile_args> {
      public saveBizMeetingMinutesFile() {
        super("saveBizMeetingMinutesFile");
      }

      public saveBizMeetingMinutesFile_args getEmptyArgsInstance() {
        return new saveBizMeetingMinutesFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizMeetingMinutesFile_result getResult(I iface, saveBizMeetingMinutesFile_args args) throws org.apache.thrift.TException {
        saveBizMeetingMinutesFile_result result = new saveBizMeetingMinutesFile_result();
        try {
          result.success = iface.saveBizMeetingMinutesFile(args.bizMeetingMinutesFile);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizProjectMeetingByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizProjectMeetingByProjectId_args> {
      public obtainBizProjectMeetingByProjectId() {
        super("obtainBizProjectMeetingByProjectId");
      }

      public obtainBizProjectMeetingByProjectId_args getEmptyArgsInstance() {
        return new obtainBizProjectMeetingByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizProjectMeetingByProjectId_result getResult(I iface, obtainBizProjectMeetingByProjectId_args args) throws org.apache.thrift.TException {
        obtainBizProjectMeetingByProjectId_result result = new obtainBizProjectMeetingByProjectId_result();
        try {
          result.success = iface.obtainBizProjectMeetingByProjectId(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizProjectMeetingRSTByMeetingId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizProjectMeetingRSTByMeetingId_args> {
      public obtainBizProjectMeetingRSTByMeetingId() {
        super("obtainBizProjectMeetingRSTByMeetingId");
      }

      public obtainBizProjectMeetingRSTByMeetingId_args getEmptyArgsInstance() {
        return new obtainBizProjectMeetingRSTByMeetingId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizProjectMeetingRSTByMeetingId_result getResult(I iface, obtainBizProjectMeetingRSTByMeetingId_args args) throws org.apache.thrift.TException {
        obtainBizProjectMeetingRSTByMeetingId_result result = new obtainBizProjectMeetingRSTByMeetingId_result();
        try {
          result.success = iface.obtainBizProjectMeetingRSTByMeetingId(args.meetingId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizMeetingMinutesMemberByMeetingId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizMeetingMinutesMemberByMeetingId_args> {
      public obtainBizMeetingMinutesMemberByMeetingId() {
        super("obtainBizMeetingMinutesMemberByMeetingId");
      }

      public obtainBizMeetingMinutesMemberByMeetingId_args getEmptyArgsInstance() {
        return new obtainBizMeetingMinutesMemberByMeetingId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizMeetingMinutesMemberByMeetingId_result getResult(I iface, obtainBizMeetingMinutesMemberByMeetingId_args args) throws org.apache.thrift.TException {
        obtainBizMeetingMinutesMemberByMeetingId_result result = new obtainBizMeetingMinutesMemberByMeetingId_result();
        try {
          result.success = iface.obtainBizMeetingMinutesMemberByMeetingId(args.meetingId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateBizProjectMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizProjectMeeting_args> {
      public updateBizProjectMeeting() {
        super("updateBizProjectMeeting");
      }

      public updateBizProjectMeeting_args getEmptyArgsInstance() {
        return new updateBizProjectMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizProjectMeeting_result getResult(I iface, updateBizProjectMeeting_args args) throws org.apache.thrift.TException {
        updateBizProjectMeeting_result result = new updateBizProjectMeeting_result();
        try {
          result.success = iface.updateBizProjectMeeting(args.bizProjectMeeting);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateBizProjectMeetingRST<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizProjectMeetingRST_args> {
      public updateBizProjectMeetingRST() {
        super("updateBizProjectMeetingRST");
      }

      public updateBizProjectMeetingRST_args getEmptyArgsInstance() {
        return new updateBizProjectMeetingRST_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizProjectMeetingRST_result getResult(I iface, updateBizProjectMeetingRST_args args) throws org.apache.thrift.TException {
        updateBizProjectMeetingRST_result result = new updateBizProjectMeetingRST_result();
        try {
          result.success = iface.updateBizProjectMeetingRST(args.bizProjectMeetingRST);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateBizMeetingMinutesMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizMeetingMinutesMember_args> {
      public updateBizMeetingMinutesMember() {
        super("updateBizMeetingMinutesMember");
      }

      public updateBizMeetingMinutesMember_args getEmptyArgsInstance() {
        return new updateBizMeetingMinutesMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizMeetingMinutesMember_result getResult(I iface, updateBizMeetingMinutesMember_args args) throws org.apache.thrift.TException {
        updateBizMeetingMinutesMember_result result = new updateBizMeetingMinutesMember_result();
        try {
          result.success = iface.updateBizMeetingMinutesMember(args.bizMeetingMinutesMember);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteBizProjectMeetingByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizProjectMeetingByProjectId_args> {
      public deleteBizProjectMeetingByProjectId() {
        super("deleteBizProjectMeetingByProjectId");
      }

      public deleteBizProjectMeetingByProjectId_args getEmptyArgsInstance() {
        return new deleteBizProjectMeetingByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizProjectMeetingByProjectId_result getResult(I iface, deleteBizProjectMeetingByProjectId_args args) throws org.apache.thrift.TException {
        deleteBizProjectMeetingByProjectId_result result = new deleteBizProjectMeetingByProjectId_result();
        try {
          result.success = iface.deleteBizProjectMeetingByProjectId(args.projectId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deletteBizProjectMeetingRSTByMeetingId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletteBizProjectMeetingRSTByMeetingId_args> {
      public deletteBizProjectMeetingRSTByMeetingId() {
        super("deletteBizProjectMeetingRSTByMeetingId");
      }

      public deletteBizProjectMeetingRSTByMeetingId_args getEmptyArgsInstance() {
        return new deletteBizProjectMeetingRSTByMeetingId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletteBizProjectMeetingRSTByMeetingId_result getResult(I iface, deletteBizProjectMeetingRSTByMeetingId_args args) throws org.apache.thrift.TException {
        deletteBizProjectMeetingRSTByMeetingId_result result = new deletteBizProjectMeetingRSTByMeetingId_result();
        try {
          result.success = iface.deletteBizProjectMeetingRSTByMeetingId(args.meetingId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteBizMeetingMinutesMemberByMeetingId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizMeetingMinutesMemberByMeetingId_args> {
      public deleteBizMeetingMinutesMemberByMeetingId() {
        super("deleteBizMeetingMinutesMemberByMeetingId");
      }

      public deleteBizMeetingMinutesMemberByMeetingId_args getEmptyArgsInstance() {
        return new deleteBizMeetingMinutesMemberByMeetingId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizMeetingMinutesMemberByMeetingId_result getResult(I iface, deleteBizMeetingMinutesMemberByMeetingId_args args) throws org.apache.thrift.TException {
        deleteBizMeetingMinutesMemberByMeetingId_result result = new deleteBizMeetingMinutesMemberByMeetingId_result();
        try {
          result.success = iface.deleteBizMeetingMinutesMemberByMeetingId(args.meetingId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizFileForOfflineMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizFileForOfflineMeeting_args> {
      public obtainBizFileForOfflineMeeting() {
        super("obtainBizFileForOfflineMeeting");
      }

      public obtainBizFileForOfflineMeeting_args getEmptyArgsInstance() {
        return new obtainBizFileForOfflineMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizFileForOfflineMeeting_result getResult(I iface, obtainBizFileForOfflineMeeting_args args) throws org.apache.thrift.TException {
        obtainBizFileForOfflineMeeting_result result = new obtainBizFileForOfflineMeeting_result();
        try {
          result.success = iface.obtainBizFileForOfflineMeeting(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveOfflineMeetingInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOfflineMeetingInfo_args> {
      public saveOfflineMeetingInfo() {
        super("saveOfflineMeetingInfo");
      }

      public saveOfflineMeetingInfo_args getEmptyArgsInstance() {
        return new saveOfflineMeetingInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOfflineMeetingInfo_result getResult(I iface, saveOfflineMeetingInfo_args args) throws org.apache.thrift.TException {
        saveOfflineMeetingInfo_result result = new saveOfflineMeetingInfo_result();
        try {
          result.success = iface.saveOfflineMeetingInfo(args.bizProjectMeetingDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateOfflineMeetingInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOfflineMeetingInfo_args> {
      public updateOfflineMeetingInfo() {
        super("updateOfflineMeetingInfo");
      }

      public updateOfflineMeetingInfo_args getEmptyArgsInstance() {
        return new updateOfflineMeetingInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOfflineMeetingInfo_result getResult(I iface, updateOfflineMeetingInfo_args args) throws org.apache.thrift.TException {
        updateOfflineMeetingInfo_result result = new updateOfflineMeetingInfo_result();
        try {
          result.success = iface.updateOfflineMeetingInfo(args.bizProjectMeetingDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveOrganizationCommission", new saveOrganizationCommission());
      processMap.put("saveBizProjectMeeting", new saveBizProjectMeeting());
      processMap.put("saveBizProjectMeetingRST", new saveBizProjectMeetingRST());
      processMap.put("saveBizMeetingMinutesMember", new saveBizMeetingMinutesMember());
      processMap.put("saveBizMeetingMinutesFile", new saveBizMeetingMinutesFile());
      processMap.put("obtainBizProjectMeetingByProjectId", new obtainBizProjectMeetingByProjectId());
      processMap.put("obtainBizProjectMeetingRSTByMeetingId", new obtainBizProjectMeetingRSTByMeetingId());
      processMap.put("obtainBizMeetingMinutesMemberByMeetingId", new obtainBizMeetingMinutesMemberByMeetingId());
      processMap.put("updateBizProjectMeeting", new updateBizProjectMeeting());
      processMap.put("updateBizProjectMeetingRST", new updateBizProjectMeetingRST());
      processMap.put("updateBizMeetingMinutesMember", new updateBizMeetingMinutesMember());
      processMap.put("deleteBizProjectMeetingByProjectId", new deleteBizProjectMeetingByProjectId());
      processMap.put("deletteBizProjectMeetingRSTByMeetingId", new deletteBizProjectMeetingRSTByMeetingId());
      processMap.put("deleteBizMeetingMinutesMemberByMeetingId", new deleteBizMeetingMinutesMemberByMeetingId());
      processMap.put("obtainBizFileForOfflineMeeting", new obtainBizFileForOfflineMeeting());
      processMap.put("saveOfflineMeetingInfo", new saveOfflineMeetingInfo());
      processMap.put("updateOfflineMeetingInfo", new updateOfflineMeetingInfo());
      return processMap;
    }

    public static class saveOrganizationCommission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOrganizationCommission_args, Integer> {
      public saveOrganizationCommission() {
        super("saveOrganizationCommission");
      }

      public saveOrganizationCommission_args getEmptyArgsInstance() {
        return new saveOrganizationCommission_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveOrganizationCommission_result result = new saveOrganizationCommission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOrganizationCommission_result result = new saveOrganizationCommission_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOrganizationCommission_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveOrganizationCommission(args.organizationCommission,resultHandler);
      }
    }

    public static class saveBizProjectMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizProjectMeeting_args, Integer> {
      public saveBizProjectMeeting() {
        super("saveBizProjectMeeting");
      }

      public saveBizProjectMeeting_args getEmptyArgsInstance() {
        return new saveBizProjectMeeting_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizProjectMeeting_result result = new saveBizProjectMeeting_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizProjectMeeting_result result = new saveBizProjectMeeting_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizProjectMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizProjectMeeting(args.bizProjectMeeting,resultHandler);
      }
    }

    public static class saveBizProjectMeetingRST<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizProjectMeetingRST_args, Integer> {
      public saveBizProjectMeetingRST() {
        super("saveBizProjectMeetingRST");
      }

      public saveBizProjectMeetingRST_args getEmptyArgsInstance() {
        return new saveBizProjectMeetingRST_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizProjectMeetingRST_result result = new saveBizProjectMeetingRST_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizProjectMeetingRST_result result = new saveBizProjectMeetingRST_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizProjectMeetingRST_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizProjectMeetingRST(args.bizProjectMeetingRST,resultHandler);
      }
    }

    public static class saveBizMeetingMinutesMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizMeetingMinutesMember_args, Integer> {
      public saveBizMeetingMinutesMember() {
        super("saveBizMeetingMinutesMember");
      }

      public saveBizMeetingMinutesMember_args getEmptyArgsInstance() {
        return new saveBizMeetingMinutesMember_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizMeetingMinutesMember_result result = new saveBizMeetingMinutesMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizMeetingMinutesMember_result result = new saveBizMeetingMinutesMember_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizMeetingMinutesMember_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizMeetingMinutesMember(args.bizMeetingMinutesMember,resultHandler);
      }
    }

    public static class saveBizMeetingMinutesFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizMeetingMinutesFile_args, Integer> {
      public saveBizMeetingMinutesFile() {
        super("saveBizMeetingMinutesFile");
      }

      public saveBizMeetingMinutesFile_args getEmptyArgsInstance() {
        return new saveBizMeetingMinutesFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizMeetingMinutesFile_result result = new saveBizMeetingMinutesFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizMeetingMinutesFile_result result = new saveBizMeetingMinutesFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizMeetingMinutesFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizMeetingMinutesFile(args.bizMeetingMinutesFile,resultHandler);
      }
    }

    public static class obtainBizProjectMeetingByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizProjectMeetingByProjectId_args, BizProjectMeeting> {
      public obtainBizProjectMeetingByProjectId() {
        super("obtainBizProjectMeetingByProjectId");
      }

      public obtainBizProjectMeetingByProjectId_args getEmptyArgsInstance() {
        return new obtainBizProjectMeetingByProjectId_args();
      }

      public AsyncMethodCallback<BizProjectMeeting> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BizProjectMeeting>() { 
          public void onComplete(BizProjectMeeting o) {
            obtainBizProjectMeetingByProjectId_result result = new obtainBizProjectMeetingByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizProjectMeetingByProjectId_result result = new obtainBizProjectMeetingByProjectId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizProjectMeetingByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<BizProjectMeeting> resultHandler) throws TException {
        iface.obtainBizProjectMeetingByProjectId(args.projectId,resultHandler);
      }
    }

    public static class obtainBizProjectMeetingRSTByMeetingId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizProjectMeetingRSTByMeetingId_args, BizProjectMeetingRST> {
      public obtainBizProjectMeetingRSTByMeetingId() {
        super("obtainBizProjectMeetingRSTByMeetingId");
      }

      public obtainBizProjectMeetingRSTByMeetingId_args getEmptyArgsInstance() {
        return new obtainBizProjectMeetingRSTByMeetingId_args();
      }

      public AsyncMethodCallback<BizProjectMeetingRST> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BizProjectMeetingRST>() { 
          public void onComplete(BizProjectMeetingRST o) {
            obtainBizProjectMeetingRSTByMeetingId_result result = new obtainBizProjectMeetingRSTByMeetingId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizProjectMeetingRSTByMeetingId_result result = new obtainBizProjectMeetingRSTByMeetingId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizProjectMeetingRSTByMeetingId_args args, org.apache.thrift.async.AsyncMethodCallback<BizProjectMeetingRST> resultHandler) throws TException {
        iface.obtainBizProjectMeetingRSTByMeetingId(args.meetingId,resultHandler);
      }
    }

    public static class obtainBizMeetingMinutesMemberByMeetingId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizMeetingMinutesMemberByMeetingId_args, List<BizMeetingMinutesMember>> {
      public obtainBizMeetingMinutesMemberByMeetingId() {
        super("obtainBizMeetingMinutesMemberByMeetingId");
      }

      public obtainBizMeetingMinutesMemberByMeetingId_args getEmptyArgsInstance() {
        return new obtainBizMeetingMinutesMemberByMeetingId_args();
      }

      public AsyncMethodCallback<List<BizMeetingMinutesMember>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BizMeetingMinutesMember>>() { 
          public void onComplete(List<BizMeetingMinutesMember> o) {
            obtainBizMeetingMinutesMemberByMeetingId_result result = new obtainBizMeetingMinutesMemberByMeetingId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizMeetingMinutesMemberByMeetingId_result result = new obtainBizMeetingMinutesMemberByMeetingId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizMeetingMinutesMemberByMeetingId_args args, org.apache.thrift.async.AsyncMethodCallback<List<BizMeetingMinutesMember>> resultHandler) throws TException {
        iface.obtainBizMeetingMinutesMemberByMeetingId(args.meetingId,resultHandler);
      }
    }

    public static class updateBizProjectMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizProjectMeeting_args, Integer> {
      public updateBizProjectMeeting() {
        super("updateBizProjectMeeting");
      }

      public updateBizProjectMeeting_args getEmptyArgsInstance() {
        return new updateBizProjectMeeting_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateBizProjectMeeting_result result = new updateBizProjectMeeting_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizProjectMeeting_result result = new updateBizProjectMeeting_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizProjectMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateBizProjectMeeting(args.bizProjectMeeting,resultHandler);
      }
    }

    public static class updateBizProjectMeetingRST<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizProjectMeetingRST_args, Integer> {
      public updateBizProjectMeetingRST() {
        super("updateBizProjectMeetingRST");
      }

      public updateBizProjectMeetingRST_args getEmptyArgsInstance() {
        return new updateBizProjectMeetingRST_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateBizProjectMeetingRST_result result = new updateBizProjectMeetingRST_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizProjectMeetingRST_result result = new updateBizProjectMeetingRST_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizProjectMeetingRST_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateBizProjectMeetingRST(args.bizProjectMeetingRST,resultHandler);
      }
    }

    public static class updateBizMeetingMinutesMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizMeetingMinutesMember_args, Integer> {
      public updateBizMeetingMinutesMember() {
        super("updateBizMeetingMinutesMember");
      }

      public updateBizMeetingMinutesMember_args getEmptyArgsInstance() {
        return new updateBizMeetingMinutesMember_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateBizMeetingMinutesMember_result result = new updateBizMeetingMinutesMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizMeetingMinutesMember_result result = new updateBizMeetingMinutesMember_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizMeetingMinutesMember_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateBizMeetingMinutesMember(args.bizMeetingMinutesMember,resultHandler);
      }
    }

    public static class deleteBizProjectMeetingByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizProjectMeetingByProjectId_args, Integer> {
      public deleteBizProjectMeetingByProjectId() {
        super("deleteBizProjectMeetingByProjectId");
      }

      public deleteBizProjectMeetingByProjectId_args getEmptyArgsInstance() {
        return new deleteBizProjectMeetingByProjectId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteBizProjectMeetingByProjectId_result result = new deleteBizProjectMeetingByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizProjectMeetingByProjectId_result result = new deleteBizProjectMeetingByProjectId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizProjectMeetingByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteBizProjectMeetingByProjectId(args.projectId,resultHandler);
      }
    }

    public static class deletteBizProjectMeetingRSTByMeetingId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletteBizProjectMeetingRSTByMeetingId_args, Integer> {
      public deletteBizProjectMeetingRSTByMeetingId() {
        super("deletteBizProjectMeetingRSTByMeetingId");
      }

      public deletteBizProjectMeetingRSTByMeetingId_args getEmptyArgsInstance() {
        return new deletteBizProjectMeetingRSTByMeetingId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deletteBizProjectMeetingRSTByMeetingId_result result = new deletteBizProjectMeetingRSTByMeetingId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deletteBizProjectMeetingRSTByMeetingId_result result = new deletteBizProjectMeetingRSTByMeetingId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletteBizProjectMeetingRSTByMeetingId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deletteBizProjectMeetingRSTByMeetingId(args.meetingId,resultHandler);
      }
    }

    public static class deleteBizMeetingMinutesMemberByMeetingId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizMeetingMinutesMemberByMeetingId_args, Integer> {
      public deleteBizMeetingMinutesMemberByMeetingId() {
        super("deleteBizMeetingMinutesMemberByMeetingId");
      }

      public deleteBizMeetingMinutesMemberByMeetingId_args getEmptyArgsInstance() {
        return new deleteBizMeetingMinutesMemberByMeetingId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteBizMeetingMinutesMemberByMeetingId_result result = new deleteBizMeetingMinutesMemberByMeetingId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizMeetingMinutesMemberByMeetingId_result result = new deleteBizMeetingMinutesMemberByMeetingId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizMeetingMinutesMemberByMeetingId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteBizMeetingMinutesMemberByMeetingId(args.meetingId,resultHandler);
      }
    }

    public static class obtainBizFileForOfflineMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizFileForOfflineMeeting_args, List<com.xlkfinance.bms.rpc.system.BizFile>> {
      public obtainBizFileForOfflineMeeting() {
        super("obtainBizFileForOfflineMeeting");
      }

      public obtainBizFileForOfflineMeeting_args getEmptyArgsInstance() {
        return new obtainBizFileForOfflineMeeting_args();
      }

      public AsyncMethodCallback<List<com.xlkfinance.bms.rpc.system.BizFile>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.xlkfinance.bms.rpc.system.BizFile>>() { 
          public void onComplete(List<com.xlkfinance.bms.rpc.system.BizFile> o) {
            obtainBizFileForOfflineMeeting_result result = new obtainBizFileForOfflineMeeting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizFileForOfflineMeeting_result result = new obtainBizFileForOfflineMeeting_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizFileForOfflineMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.xlkfinance.bms.rpc.system.BizFile>> resultHandler) throws TException {
        iface.obtainBizFileForOfflineMeeting(args.projectId,resultHandler);
      }
    }

    public static class saveOfflineMeetingInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOfflineMeetingInfo_args, Integer> {
      public saveOfflineMeetingInfo() {
        super("saveOfflineMeetingInfo");
      }

      public saveOfflineMeetingInfo_args getEmptyArgsInstance() {
        return new saveOfflineMeetingInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveOfflineMeetingInfo_result result = new saveOfflineMeetingInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOfflineMeetingInfo_result result = new saveOfflineMeetingInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOfflineMeetingInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveOfflineMeetingInfo(args.bizProjectMeetingDTO,resultHandler);
      }
    }

    public static class updateOfflineMeetingInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOfflineMeetingInfo_args, Integer> {
      public updateOfflineMeetingInfo() {
        super("updateOfflineMeetingInfo");
      }

      public updateOfflineMeetingInfo_args getEmptyArgsInstance() {
        return new updateOfflineMeetingInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateOfflineMeetingInfo_result result = new updateOfflineMeetingInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOfflineMeetingInfo_result result = new updateOfflineMeetingInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOfflineMeetingInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateOfflineMeetingInfo(args.bizProjectMeetingDTO,resultHandler);
      }
    }

  }

  public static class saveOrganizationCommission_args implements org.apache.thrift.TBase<saveOrganizationCommission_args, saveOrganizationCommission_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrganizationCommission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrganizationCommission_args");

    private static final org.apache.thrift.protocol.TField ORGANIZATION_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationCommission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrganizationCommission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrganizationCommission_argsTupleSchemeFactory());
    }

    public OrganizationCommission organizationCommission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORGANIZATION_COMMISSION((short)1, "organizationCommission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORGANIZATION_COMMISSION
            return ORGANIZATION_COMMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORGANIZATION_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("organizationCommission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrganizationCommission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrganizationCommission_args.class, metaDataMap);
    }

    public saveOrganizationCommission_args() {
    }

    public saveOrganizationCommission_args(
      OrganizationCommission organizationCommission)
    {
      this();
      this.organizationCommission = organizationCommission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrganizationCommission_args(saveOrganizationCommission_args other) {
      if (other.isSetOrganizationCommission()) {
        this.organizationCommission = new OrganizationCommission(other.organizationCommission);
      }
    }

    public saveOrganizationCommission_args deepCopy() {
      return new saveOrganizationCommission_args(this);
    }

    @Override
    public void clear() {
      this.organizationCommission = null;
    }

    public OrganizationCommission getOrganizationCommission() {
      return this.organizationCommission;
    }

    public saveOrganizationCommission_args setOrganizationCommission(OrganizationCommission organizationCommission) {
      this.organizationCommission = organizationCommission;
      return this;
    }

    public void unsetOrganizationCommission() {
      this.organizationCommission = null;
    }

    /** Returns true if field organizationCommission is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganizationCommission() {
      return this.organizationCommission != null;
    }

    public void setOrganizationCommissionIsSet(boolean value) {
      if (!value) {
        this.organizationCommission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORGANIZATION_COMMISSION:
        if (value == null) {
          unsetOrganizationCommission();
        } else {
          setOrganizationCommission((OrganizationCommission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORGANIZATION_COMMISSION:
        return getOrganizationCommission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORGANIZATION_COMMISSION:
        return isSetOrganizationCommission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrganizationCommission_args)
        return this.equals((saveOrganizationCommission_args)that);
      return false;
    }

    public boolean equals(saveOrganizationCommission_args that) {
      if (that == null)
        return false;

      boolean this_present_organizationCommission = true && this.isSetOrganizationCommission();
      boolean that_present_organizationCommission = true && that.isSetOrganizationCommission();
      if (this_present_organizationCommission || that_present_organizationCommission) {
        if (!(this_present_organizationCommission && that_present_organizationCommission))
          return false;
        if (!this.organizationCommission.equals(that.organizationCommission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_organizationCommission = true && (isSetOrganizationCommission());
      list.add(present_organizationCommission);
      if (present_organizationCommission)
        list.add(organizationCommission);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOrganizationCommission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrganizationCommission()).compareTo(other.isSetOrganizationCommission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganizationCommission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationCommission, other.organizationCommission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrganizationCommission_args(");
      boolean first = true;

      sb.append("organizationCommission:");
      if (this.organizationCommission == null) {
        sb.append("null");
      } else {
        sb.append(this.organizationCommission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (organizationCommission != null) {
        organizationCommission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrganizationCommission_argsStandardSchemeFactory implements SchemeFactory {
      public saveOrganizationCommission_argsStandardScheme getScheme() {
        return new saveOrganizationCommission_argsStandardScheme();
      }
    }

    private static class saveOrganizationCommission_argsStandardScheme extends StandardScheme<saveOrganizationCommission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrganizationCommission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORGANIZATION_COMMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.organizationCommission = new OrganizationCommission();
                struct.organizationCommission.read(iprot);
                struct.setOrganizationCommissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrganizationCommission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.organizationCommission != null) {
          oprot.writeFieldBegin(ORGANIZATION_COMMISSION_FIELD_DESC);
          struct.organizationCommission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrganizationCommission_argsTupleSchemeFactory implements SchemeFactory {
      public saveOrganizationCommission_argsTupleScheme getScheme() {
        return new saveOrganizationCommission_argsTupleScheme();
      }
    }

    private static class saveOrganizationCommission_argsTupleScheme extends TupleScheme<saveOrganizationCommission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrganizationCommission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrganizationCommission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrganizationCommission()) {
          struct.organizationCommission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrganizationCommission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.organizationCommission = new OrganizationCommission();
          struct.organizationCommission.read(iprot);
          struct.setOrganizationCommissionIsSet(true);
        }
      }
    }

  }

  public static class saveOrganizationCommission_result implements org.apache.thrift.TBase<saveOrganizationCommission_result, saveOrganizationCommission_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrganizationCommission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrganizationCommission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrganizationCommission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrganizationCommission_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrganizationCommission_result.class, metaDataMap);
    }

    public saveOrganizationCommission_result() {
    }

    public saveOrganizationCommission_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrganizationCommission_result(saveOrganizationCommission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveOrganizationCommission_result deepCopy() {
      return new saveOrganizationCommission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveOrganizationCommission_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveOrganizationCommission_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrganizationCommission_result)
        return this.equals((saveOrganizationCommission_result)that);
      return false;
    }

    public boolean equals(saveOrganizationCommission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOrganizationCommission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrganizationCommission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrganizationCommission_resultStandardSchemeFactory implements SchemeFactory {
      public saveOrganizationCommission_resultStandardScheme getScheme() {
        return new saveOrganizationCommission_resultStandardScheme();
      }
    }

    private static class saveOrganizationCommission_resultStandardScheme extends StandardScheme<saveOrganizationCommission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrganizationCommission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrganizationCommission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrganizationCommission_resultTupleSchemeFactory implements SchemeFactory {
      public saveOrganizationCommission_resultTupleScheme getScheme() {
        return new saveOrganizationCommission_resultTupleScheme();
      }
    }

    private static class saveOrganizationCommission_resultTupleScheme extends TupleScheme<saveOrganizationCommission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrganizationCommission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrganizationCommission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectMeeting_args implements org.apache.thrift.TBase<saveBizProjectMeeting_args, saveBizProjectMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectMeeting_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeeting", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectMeeting_argsTupleSchemeFactory());
    }

    public BizProjectMeeting bizProjectMeeting; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING((short)1, "bizProjectMeeting");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING
            return BIZ_PROJECT_MEETING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeeting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeeting.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectMeeting_args.class, metaDataMap);
    }

    public saveBizProjectMeeting_args() {
    }

    public saveBizProjectMeeting_args(
      BizProjectMeeting bizProjectMeeting)
    {
      this();
      this.bizProjectMeeting = bizProjectMeeting;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectMeeting_args(saveBizProjectMeeting_args other) {
      if (other.isSetBizProjectMeeting()) {
        this.bizProjectMeeting = new BizProjectMeeting(other.bizProjectMeeting);
      }
    }

    public saveBizProjectMeeting_args deepCopy() {
      return new saveBizProjectMeeting_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeeting = null;
    }

    public BizProjectMeeting getBizProjectMeeting() {
      return this.bizProjectMeeting;
    }

    public saveBizProjectMeeting_args setBizProjectMeeting(BizProjectMeeting bizProjectMeeting) {
      this.bizProjectMeeting = bizProjectMeeting;
      return this;
    }

    public void unsetBizProjectMeeting() {
      this.bizProjectMeeting = null;
    }

    /** Returns true if field bizProjectMeeting is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeeting() {
      return this.bizProjectMeeting != null;
    }

    public void setBizProjectMeetingIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeeting = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING:
        if (value == null) {
          unsetBizProjectMeeting();
        } else {
          setBizProjectMeeting((BizProjectMeeting)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING:
        return getBizProjectMeeting();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING:
        return isSetBizProjectMeeting();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectMeeting_args)
        return this.equals((saveBizProjectMeeting_args)that);
      return false;
    }

    public boolean equals(saveBizProjectMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeeting = true && this.isSetBizProjectMeeting();
      boolean that_present_bizProjectMeeting = true && that.isSetBizProjectMeeting();
      if (this_present_bizProjectMeeting || that_present_bizProjectMeeting) {
        if (!(this_present_bizProjectMeeting && that_present_bizProjectMeeting))
          return false;
        if (!this.bizProjectMeeting.equals(that.bizProjectMeeting))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeeting = true && (isSetBizProjectMeeting());
      list.add(present_bizProjectMeeting);
      if (present_bizProjectMeeting)
        list.add(bizProjectMeeting);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeeting()).compareTo(other.isSetBizProjectMeeting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeeting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeeting, other.bizProjectMeeting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectMeeting_args(");
      boolean first = true;

      sb.append("bizProjectMeeting:");
      if (this.bizProjectMeeting == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeeting);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeeting != null) {
        bizProjectMeeting.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectMeeting_argsStandardScheme getScheme() {
        return new saveBizProjectMeeting_argsStandardScheme();
      }
    }

    private static class saveBizProjectMeeting_argsStandardScheme extends StandardScheme<saveBizProjectMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeeting = new BizProjectMeeting();
                struct.bizProjectMeeting.read(iprot);
                struct.setBizProjectMeetingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeeting != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_FIELD_DESC);
          struct.bizProjectMeeting.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectMeeting_argsTupleScheme getScheme() {
        return new saveBizProjectMeeting_argsTupleScheme();
      }
    }

    private static class saveBizProjectMeeting_argsTupleScheme extends TupleScheme<saveBizProjectMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeeting()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeeting()) {
          struct.bizProjectMeeting.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeeting = new BizProjectMeeting();
          struct.bizProjectMeeting.read(iprot);
          struct.setBizProjectMeetingIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectMeeting_result implements org.apache.thrift.TBase<saveBizProjectMeeting_result, saveBizProjectMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectMeeting_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectMeeting_result.class, metaDataMap);
    }

    public saveBizProjectMeeting_result() {
    }

    public saveBizProjectMeeting_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectMeeting_result(saveBizProjectMeeting_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizProjectMeeting_result deepCopy() {
      return new saveBizProjectMeeting_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizProjectMeeting_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizProjectMeeting_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectMeeting_result)
        return this.equals((saveBizProjectMeeting_result)that);
      return false;
    }

    public boolean equals(saveBizProjectMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectMeeting_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectMeeting_resultStandardScheme getScheme() {
        return new saveBizProjectMeeting_resultStandardScheme();
      }
    }

    private static class saveBizProjectMeeting_resultStandardScheme extends StandardScheme<saveBizProjectMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectMeeting_resultTupleScheme getScheme() {
        return new saveBizProjectMeeting_resultTupleScheme();
      }
    }

    private static class saveBizProjectMeeting_resultTupleScheme extends TupleScheme<saveBizProjectMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectMeetingRST_args implements org.apache.thrift.TBase<saveBizProjectMeetingRST_args, saveBizProjectMeetingRST_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectMeetingRST_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectMeetingRST_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_RST_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeetingRST", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectMeetingRST_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectMeetingRST_argsTupleSchemeFactory());
    }

    public BizProjectMeetingRST bizProjectMeetingRST; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING_RST((short)1, "bizProjectMeetingRST");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING_RST
            return BIZ_PROJECT_MEETING_RST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING_RST, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeetingRST", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeetingRST.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectMeetingRST_args.class, metaDataMap);
    }

    public saveBizProjectMeetingRST_args() {
    }

    public saveBizProjectMeetingRST_args(
      BizProjectMeetingRST bizProjectMeetingRST)
    {
      this();
      this.bizProjectMeetingRST = bizProjectMeetingRST;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectMeetingRST_args(saveBizProjectMeetingRST_args other) {
      if (other.isSetBizProjectMeetingRST()) {
        this.bizProjectMeetingRST = new BizProjectMeetingRST(other.bizProjectMeetingRST);
      }
    }

    public saveBizProjectMeetingRST_args deepCopy() {
      return new saveBizProjectMeetingRST_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeetingRST = null;
    }

    public BizProjectMeetingRST getBizProjectMeetingRST() {
      return this.bizProjectMeetingRST;
    }

    public saveBizProjectMeetingRST_args setBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) {
      this.bizProjectMeetingRST = bizProjectMeetingRST;
      return this;
    }

    public void unsetBizProjectMeetingRST() {
      this.bizProjectMeetingRST = null;
    }

    /** Returns true if field bizProjectMeetingRST is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeetingRST() {
      return this.bizProjectMeetingRST != null;
    }

    public void setBizProjectMeetingRSTIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeetingRST = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        if (value == null) {
          unsetBizProjectMeetingRST();
        } else {
          setBizProjectMeetingRST((BizProjectMeetingRST)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        return getBizProjectMeetingRST();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        return isSetBizProjectMeetingRST();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectMeetingRST_args)
        return this.equals((saveBizProjectMeetingRST_args)that);
      return false;
    }

    public boolean equals(saveBizProjectMeetingRST_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeetingRST = true && this.isSetBizProjectMeetingRST();
      boolean that_present_bizProjectMeetingRST = true && that.isSetBizProjectMeetingRST();
      if (this_present_bizProjectMeetingRST || that_present_bizProjectMeetingRST) {
        if (!(this_present_bizProjectMeetingRST && that_present_bizProjectMeetingRST))
          return false;
        if (!this.bizProjectMeetingRST.equals(that.bizProjectMeetingRST))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeetingRST = true && (isSetBizProjectMeetingRST());
      list.add(present_bizProjectMeetingRST);
      if (present_bizProjectMeetingRST)
        list.add(bizProjectMeetingRST);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectMeetingRST_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeetingRST()).compareTo(other.isSetBizProjectMeetingRST());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeetingRST()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeetingRST, other.bizProjectMeetingRST);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectMeetingRST_args(");
      boolean first = true;

      sb.append("bizProjectMeetingRST:");
      if (this.bizProjectMeetingRST == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeetingRST);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeetingRST != null) {
        bizProjectMeetingRST.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectMeetingRST_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectMeetingRST_argsStandardScheme getScheme() {
        return new saveBizProjectMeetingRST_argsStandardScheme();
      }
    }

    private static class saveBizProjectMeetingRST_argsStandardScheme extends StandardScheme<saveBizProjectMeetingRST_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING_RST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeetingRST = new BizProjectMeetingRST();
                struct.bizProjectMeetingRST.read(iprot);
                struct.setBizProjectMeetingRSTIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeetingRST != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_RST_FIELD_DESC);
          struct.bizProjectMeetingRST.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectMeetingRST_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectMeetingRST_argsTupleScheme getScheme() {
        return new saveBizProjectMeetingRST_argsTupleScheme();
      }
    }

    private static class saveBizProjectMeetingRST_argsTupleScheme extends TupleScheme<saveBizProjectMeetingRST_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeetingRST()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeetingRST()) {
          struct.bizProjectMeetingRST.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeetingRST = new BizProjectMeetingRST();
          struct.bizProjectMeetingRST.read(iprot);
          struct.setBizProjectMeetingRSTIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectMeetingRST_result implements org.apache.thrift.TBase<saveBizProjectMeetingRST_result, saveBizProjectMeetingRST_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectMeetingRST_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectMeetingRST_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectMeetingRST_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectMeetingRST_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectMeetingRST_result.class, metaDataMap);
    }

    public saveBizProjectMeetingRST_result() {
    }

    public saveBizProjectMeetingRST_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectMeetingRST_result(saveBizProjectMeetingRST_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizProjectMeetingRST_result deepCopy() {
      return new saveBizProjectMeetingRST_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizProjectMeetingRST_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizProjectMeetingRST_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectMeetingRST_result)
        return this.equals((saveBizProjectMeetingRST_result)that);
      return false;
    }

    public boolean equals(saveBizProjectMeetingRST_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectMeetingRST_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectMeetingRST_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectMeetingRST_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectMeetingRST_resultStandardScheme getScheme() {
        return new saveBizProjectMeetingRST_resultStandardScheme();
      }
    }

    private static class saveBizProjectMeetingRST_resultStandardScheme extends StandardScheme<saveBizProjectMeetingRST_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectMeetingRST_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectMeetingRST_resultTupleScheme getScheme() {
        return new saveBizProjectMeetingRST_resultTupleScheme();
      }
    }

    private static class saveBizProjectMeetingRST_resultTupleScheme extends TupleScheme<saveBizProjectMeetingRST_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveBizMeetingMinutesMember_args implements org.apache.thrift.TBase<saveBizMeetingMinutesMember_args, saveBizMeetingMinutesMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizMeetingMinutesMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizMeetingMinutesMember_args");

    private static final org.apache.thrift.protocol.TField BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("bizMeetingMinutesMember", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizMeetingMinutesMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizMeetingMinutesMember_argsTupleSchemeFactory());
    }

    public BizMeetingMinutesMember bizMeetingMinutesMember; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_MEETING_MINUTES_MEMBER((short)1, "bizMeetingMinutesMember");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_MEETING_MINUTES_MEMBER
            return BIZ_MEETING_MINUTES_MEMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_MEETING_MINUTES_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("bizMeetingMinutesMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizMeetingMinutesMember.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizMeetingMinutesMember_args.class, metaDataMap);
    }

    public saveBizMeetingMinutesMember_args() {
    }

    public saveBizMeetingMinutesMember_args(
      BizMeetingMinutesMember bizMeetingMinutesMember)
    {
      this();
      this.bizMeetingMinutesMember = bizMeetingMinutesMember;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizMeetingMinutesMember_args(saveBizMeetingMinutesMember_args other) {
      if (other.isSetBizMeetingMinutesMember()) {
        this.bizMeetingMinutesMember = new BizMeetingMinutesMember(other.bizMeetingMinutesMember);
      }
    }

    public saveBizMeetingMinutesMember_args deepCopy() {
      return new saveBizMeetingMinutesMember_args(this);
    }

    @Override
    public void clear() {
      this.bizMeetingMinutesMember = null;
    }

    public BizMeetingMinutesMember getBizMeetingMinutesMember() {
      return this.bizMeetingMinutesMember;
    }

    public saveBizMeetingMinutesMember_args setBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) {
      this.bizMeetingMinutesMember = bizMeetingMinutesMember;
      return this;
    }

    public void unsetBizMeetingMinutesMember() {
      this.bizMeetingMinutesMember = null;
    }

    /** Returns true if field bizMeetingMinutesMember is set (has been assigned a value) and false otherwise */
    public boolean isSetBizMeetingMinutesMember() {
      return this.bizMeetingMinutesMember != null;
    }

    public void setBizMeetingMinutesMemberIsSet(boolean value) {
      if (!value) {
        this.bizMeetingMinutesMember = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        if (value == null) {
          unsetBizMeetingMinutesMember();
        } else {
          setBizMeetingMinutesMember((BizMeetingMinutesMember)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        return getBizMeetingMinutesMember();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        return isSetBizMeetingMinutesMember();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizMeetingMinutesMember_args)
        return this.equals((saveBizMeetingMinutesMember_args)that);
      return false;
    }

    public boolean equals(saveBizMeetingMinutesMember_args that) {
      if (that == null)
        return false;

      boolean this_present_bizMeetingMinutesMember = true && this.isSetBizMeetingMinutesMember();
      boolean that_present_bizMeetingMinutesMember = true && that.isSetBizMeetingMinutesMember();
      if (this_present_bizMeetingMinutesMember || that_present_bizMeetingMinutesMember) {
        if (!(this_present_bizMeetingMinutesMember && that_present_bizMeetingMinutesMember))
          return false;
        if (!this.bizMeetingMinutesMember.equals(that.bizMeetingMinutesMember))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizMeetingMinutesMember = true && (isSetBizMeetingMinutesMember());
      list.add(present_bizMeetingMinutesMember);
      if (present_bizMeetingMinutesMember)
        list.add(bizMeetingMinutesMember);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizMeetingMinutesMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizMeetingMinutesMember()).compareTo(other.isSetBizMeetingMinutesMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizMeetingMinutesMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizMeetingMinutesMember, other.bizMeetingMinutesMember);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizMeetingMinutesMember_args(");
      boolean first = true;

      sb.append("bizMeetingMinutesMember:");
      if (this.bizMeetingMinutesMember == null) {
        sb.append("null");
      } else {
        sb.append(this.bizMeetingMinutesMember);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizMeetingMinutesMember != null) {
        bizMeetingMinutesMember.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizMeetingMinutesMember_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesMember_argsStandardScheme getScheme() {
        return new saveBizMeetingMinutesMember_argsStandardScheme();
      }
    }

    private static class saveBizMeetingMinutesMember_argsStandardScheme extends StandardScheme<saveBizMeetingMinutesMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_MEETING_MINUTES_MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizMeetingMinutesMember = new BizMeetingMinutesMember();
                struct.bizMeetingMinutesMember.read(iprot);
                struct.setBizMeetingMinutesMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizMeetingMinutesMember != null) {
          oprot.writeFieldBegin(BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC);
          struct.bizMeetingMinutesMember.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizMeetingMinutesMember_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesMember_argsTupleScheme getScheme() {
        return new saveBizMeetingMinutesMember_argsTupleScheme();
      }
    }

    private static class saveBizMeetingMinutesMember_argsTupleScheme extends TupleScheme<saveBizMeetingMinutesMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizMeetingMinutesMember()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizMeetingMinutesMember()) {
          struct.bizMeetingMinutesMember.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizMeetingMinutesMember = new BizMeetingMinutesMember();
          struct.bizMeetingMinutesMember.read(iprot);
          struct.setBizMeetingMinutesMemberIsSet(true);
        }
      }
    }

  }

  public static class saveBizMeetingMinutesMember_result implements org.apache.thrift.TBase<saveBizMeetingMinutesMember_result, saveBizMeetingMinutesMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizMeetingMinutesMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizMeetingMinutesMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizMeetingMinutesMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizMeetingMinutesMember_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizMeetingMinutesMember_result.class, metaDataMap);
    }

    public saveBizMeetingMinutesMember_result() {
    }

    public saveBizMeetingMinutesMember_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizMeetingMinutesMember_result(saveBizMeetingMinutesMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizMeetingMinutesMember_result deepCopy() {
      return new saveBizMeetingMinutesMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizMeetingMinutesMember_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizMeetingMinutesMember_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizMeetingMinutesMember_result)
        return this.equals((saveBizMeetingMinutesMember_result)that);
      return false;
    }

    public boolean equals(saveBizMeetingMinutesMember_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizMeetingMinutesMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizMeetingMinutesMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizMeetingMinutesMember_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesMember_resultStandardScheme getScheme() {
        return new saveBizMeetingMinutesMember_resultStandardScheme();
      }
    }

    private static class saveBizMeetingMinutesMember_resultStandardScheme extends StandardScheme<saveBizMeetingMinutesMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizMeetingMinutesMember_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesMember_resultTupleScheme getScheme() {
        return new saveBizMeetingMinutesMember_resultTupleScheme();
      }
    }

    private static class saveBizMeetingMinutesMember_resultTupleScheme extends TupleScheme<saveBizMeetingMinutesMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveBizMeetingMinutesFile_args implements org.apache.thrift.TBase<saveBizMeetingMinutesFile_args, saveBizMeetingMinutesFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizMeetingMinutesFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizMeetingMinutesFile_args");

    private static final org.apache.thrift.protocol.TField BIZ_MEETING_MINUTES_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizMeetingMinutesFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizMeetingMinutesFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizMeetingMinutesFile_argsTupleSchemeFactory());
    }

    public BizMeetingMinutesFile bizMeetingMinutesFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_MEETING_MINUTES_FILE((short)1, "bizMeetingMinutesFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_MEETING_MINUTES_FILE
            return BIZ_MEETING_MINUTES_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_MEETING_MINUTES_FILE, new org.apache.thrift.meta_data.FieldMetaData("bizMeetingMinutesFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizMeetingMinutesFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizMeetingMinutesFile_args.class, metaDataMap);
    }

    public saveBizMeetingMinutesFile_args() {
    }

    public saveBizMeetingMinutesFile_args(
      BizMeetingMinutesFile bizMeetingMinutesFile)
    {
      this();
      this.bizMeetingMinutesFile = bizMeetingMinutesFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizMeetingMinutesFile_args(saveBizMeetingMinutesFile_args other) {
      if (other.isSetBizMeetingMinutesFile()) {
        this.bizMeetingMinutesFile = new BizMeetingMinutesFile(other.bizMeetingMinutesFile);
      }
    }

    public saveBizMeetingMinutesFile_args deepCopy() {
      return new saveBizMeetingMinutesFile_args(this);
    }

    @Override
    public void clear() {
      this.bizMeetingMinutesFile = null;
    }

    public BizMeetingMinutesFile getBizMeetingMinutesFile() {
      return this.bizMeetingMinutesFile;
    }

    public saveBizMeetingMinutesFile_args setBizMeetingMinutesFile(BizMeetingMinutesFile bizMeetingMinutesFile) {
      this.bizMeetingMinutesFile = bizMeetingMinutesFile;
      return this;
    }

    public void unsetBizMeetingMinutesFile() {
      this.bizMeetingMinutesFile = null;
    }

    /** Returns true if field bizMeetingMinutesFile is set (has been assigned a value) and false otherwise */
    public boolean isSetBizMeetingMinutesFile() {
      return this.bizMeetingMinutesFile != null;
    }

    public void setBizMeetingMinutesFileIsSet(boolean value) {
      if (!value) {
        this.bizMeetingMinutesFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_MEETING_MINUTES_FILE:
        if (value == null) {
          unsetBizMeetingMinutesFile();
        } else {
          setBizMeetingMinutesFile((BizMeetingMinutesFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_MEETING_MINUTES_FILE:
        return getBizMeetingMinutesFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_MEETING_MINUTES_FILE:
        return isSetBizMeetingMinutesFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizMeetingMinutesFile_args)
        return this.equals((saveBizMeetingMinutesFile_args)that);
      return false;
    }

    public boolean equals(saveBizMeetingMinutesFile_args that) {
      if (that == null)
        return false;

      boolean this_present_bizMeetingMinutesFile = true && this.isSetBizMeetingMinutesFile();
      boolean that_present_bizMeetingMinutesFile = true && that.isSetBizMeetingMinutesFile();
      if (this_present_bizMeetingMinutesFile || that_present_bizMeetingMinutesFile) {
        if (!(this_present_bizMeetingMinutesFile && that_present_bizMeetingMinutesFile))
          return false;
        if (!this.bizMeetingMinutesFile.equals(that.bizMeetingMinutesFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizMeetingMinutesFile = true && (isSetBizMeetingMinutesFile());
      list.add(present_bizMeetingMinutesFile);
      if (present_bizMeetingMinutesFile)
        list.add(bizMeetingMinutesFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizMeetingMinutesFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizMeetingMinutesFile()).compareTo(other.isSetBizMeetingMinutesFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizMeetingMinutesFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizMeetingMinutesFile, other.bizMeetingMinutesFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizMeetingMinutesFile_args(");
      boolean first = true;

      sb.append("bizMeetingMinutesFile:");
      if (this.bizMeetingMinutesFile == null) {
        sb.append("null");
      } else {
        sb.append(this.bizMeetingMinutesFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizMeetingMinutesFile != null) {
        bizMeetingMinutesFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizMeetingMinutesFile_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesFile_argsStandardScheme getScheme() {
        return new saveBizMeetingMinutesFile_argsStandardScheme();
      }
    }

    private static class saveBizMeetingMinutesFile_argsStandardScheme extends StandardScheme<saveBizMeetingMinutesFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizMeetingMinutesFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_MEETING_MINUTES_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizMeetingMinutesFile = new BizMeetingMinutesFile();
                struct.bizMeetingMinutesFile.read(iprot);
                struct.setBizMeetingMinutesFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizMeetingMinutesFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizMeetingMinutesFile != null) {
          oprot.writeFieldBegin(BIZ_MEETING_MINUTES_FILE_FIELD_DESC);
          struct.bizMeetingMinutesFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizMeetingMinutesFile_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesFile_argsTupleScheme getScheme() {
        return new saveBizMeetingMinutesFile_argsTupleScheme();
      }
    }

    private static class saveBizMeetingMinutesFile_argsTupleScheme extends TupleScheme<saveBizMeetingMinutesFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizMeetingMinutesFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizMeetingMinutesFile()) {
          struct.bizMeetingMinutesFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizMeetingMinutesFile = new BizMeetingMinutesFile();
          struct.bizMeetingMinutesFile.read(iprot);
          struct.setBizMeetingMinutesFileIsSet(true);
        }
      }
    }

  }

  public static class saveBizMeetingMinutesFile_result implements org.apache.thrift.TBase<saveBizMeetingMinutesFile_result, saveBizMeetingMinutesFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizMeetingMinutesFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizMeetingMinutesFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizMeetingMinutesFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizMeetingMinutesFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizMeetingMinutesFile_result.class, metaDataMap);
    }

    public saveBizMeetingMinutesFile_result() {
    }

    public saveBizMeetingMinutesFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizMeetingMinutesFile_result(saveBizMeetingMinutesFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizMeetingMinutesFile_result deepCopy() {
      return new saveBizMeetingMinutesFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizMeetingMinutesFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizMeetingMinutesFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizMeetingMinutesFile_result)
        return this.equals((saveBizMeetingMinutesFile_result)that);
      return false;
    }

    public boolean equals(saveBizMeetingMinutesFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizMeetingMinutesFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizMeetingMinutesFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizMeetingMinutesFile_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesFile_resultStandardScheme getScheme() {
        return new saveBizMeetingMinutesFile_resultStandardScheme();
      }
    }

    private static class saveBizMeetingMinutesFile_resultStandardScheme extends StandardScheme<saveBizMeetingMinutesFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizMeetingMinutesFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizMeetingMinutesFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizMeetingMinutesFile_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizMeetingMinutesFile_resultTupleScheme getScheme() {
        return new saveBizMeetingMinutesFile_resultTupleScheme();
      }
    }

    private static class saveBizMeetingMinutesFile_resultTupleScheme extends TupleScheme<saveBizMeetingMinutesFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizMeetingMinutesFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectMeetingByProjectId_args implements org.apache.thrift.TBase<obtainBizProjectMeetingByProjectId_args, obtainBizProjectMeetingByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectMeetingByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectMeetingByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectMeetingByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectMeetingByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectMeetingByProjectId_args.class, metaDataMap);
    }

    public obtainBizProjectMeetingByProjectId_args() {
    }

    public obtainBizProjectMeetingByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectMeetingByProjectId_args(obtainBizProjectMeetingByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public obtainBizProjectMeetingByProjectId_args deepCopy() {
      return new obtainBizProjectMeetingByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public obtainBizProjectMeetingByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectMeetingByProjectId_args)
        return this.equals((obtainBizProjectMeetingByProjectId_args)that);
      return false;
    }

    public boolean equals(obtainBizProjectMeetingByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectMeetingByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectMeetingByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectMeetingByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingByProjectId_argsStandardScheme getScheme() {
        return new obtainBizProjectMeetingByProjectId_argsStandardScheme();
      }
    }

    private static class obtainBizProjectMeetingByProjectId_argsStandardScheme extends StandardScheme<obtainBizProjectMeetingByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectMeetingByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingByProjectId_argsTupleScheme getScheme() {
        return new obtainBizProjectMeetingByProjectId_argsTupleScheme();
      }
    }

    private static class obtainBizProjectMeetingByProjectId_argsTupleScheme extends TupleScheme<obtainBizProjectMeetingByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectMeetingByProjectId_result implements org.apache.thrift.TBase<obtainBizProjectMeetingByProjectId_result, obtainBizProjectMeetingByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectMeetingByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectMeetingByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectMeetingByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectMeetingByProjectId_resultTupleSchemeFactory());
    }

    public BizProjectMeeting success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeeting.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectMeetingByProjectId_result.class, metaDataMap);
    }

    public obtainBizProjectMeetingByProjectId_result() {
    }

    public obtainBizProjectMeetingByProjectId_result(
      BizProjectMeeting success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectMeetingByProjectId_result(obtainBizProjectMeetingByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new BizProjectMeeting(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizProjectMeetingByProjectId_result deepCopy() {
      return new obtainBizProjectMeetingByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BizProjectMeeting getSuccess() {
      return this.success;
    }

    public obtainBizProjectMeetingByProjectId_result setSuccess(BizProjectMeeting success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizProjectMeetingByProjectId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BizProjectMeeting)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectMeetingByProjectId_result)
        return this.equals((obtainBizProjectMeetingByProjectId_result)that);
      return false;
    }

    public boolean equals(obtainBizProjectMeetingByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectMeetingByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectMeetingByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectMeetingByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingByProjectId_resultStandardScheme getScheme() {
        return new obtainBizProjectMeetingByProjectId_resultStandardScheme();
      }
    }

    private static class obtainBizProjectMeetingByProjectId_resultStandardScheme extends StandardScheme<obtainBizProjectMeetingByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BizProjectMeeting();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectMeetingByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingByProjectId_resultTupleScheme getScheme() {
        return new obtainBizProjectMeetingByProjectId_resultTupleScheme();
      }
    }

    private static class obtainBizProjectMeetingByProjectId_resultTupleScheme extends TupleScheme<obtainBizProjectMeetingByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BizProjectMeeting();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectMeetingRSTByMeetingId_args implements org.apache.thrift.TBase<obtainBizProjectMeetingRSTByMeetingId_args, obtainBizProjectMeetingRSTByMeetingId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectMeetingRSTByMeetingId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectMeetingRSTByMeetingId_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectMeetingRSTByMeetingId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectMeetingRSTByMeetingId_argsTupleSchemeFactory());
    }

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectMeetingRSTByMeetingId_args.class, metaDataMap);
    }

    public obtainBizProjectMeetingRSTByMeetingId_args() {
    }

    public obtainBizProjectMeetingRSTByMeetingId_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectMeetingRSTByMeetingId_args(obtainBizProjectMeetingRSTByMeetingId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    public obtainBizProjectMeetingRSTByMeetingId_args deepCopy() {
      return new obtainBizProjectMeetingRSTByMeetingId_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public obtainBizProjectMeetingRSTByMeetingId_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return Integer.valueOf(getMeetingId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectMeetingRSTByMeetingId_args)
        return this.equals((obtainBizProjectMeetingRSTByMeetingId_args)that);
      return false;
    }

    public boolean equals(obtainBizProjectMeetingRSTByMeetingId_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true;
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectMeetingRSTByMeetingId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectMeetingRSTByMeetingId_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingRSTByMeetingId_argsStandardScheme getScheme() {
        return new obtainBizProjectMeetingRSTByMeetingId_argsStandardScheme();
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_argsStandardScheme extends StandardScheme<obtainBizProjectMeetingRSTByMeetingId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectMeetingRSTByMeetingId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingRSTByMeetingId_argsTupleScheme getScheme() {
        return new obtainBizProjectMeetingRSTByMeetingId_argsTupleScheme();
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_argsTupleScheme extends TupleScheme<obtainBizProjectMeetingRSTByMeetingId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectMeetingRSTByMeetingId_result implements org.apache.thrift.TBase<obtainBizProjectMeetingRSTByMeetingId_result, obtainBizProjectMeetingRSTByMeetingId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectMeetingRSTByMeetingId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectMeetingRSTByMeetingId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectMeetingRSTByMeetingId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectMeetingRSTByMeetingId_resultTupleSchemeFactory());
    }

    public BizProjectMeetingRST success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeetingRST.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectMeetingRSTByMeetingId_result.class, metaDataMap);
    }

    public obtainBizProjectMeetingRSTByMeetingId_result() {
    }

    public obtainBizProjectMeetingRSTByMeetingId_result(
      BizProjectMeetingRST success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectMeetingRSTByMeetingId_result(obtainBizProjectMeetingRSTByMeetingId_result other) {
      if (other.isSetSuccess()) {
        this.success = new BizProjectMeetingRST(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizProjectMeetingRSTByMeetingId_result deepCopy() {
      return new obtainBizProjectMeetingRSTByMeetingId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BizProjectMeetingRST getSuccess() {
      return this.success;
    }

    public obtainBizProjectMeetingRSTByMeetingId_result setSuccess(BizProjectMeetingRST success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizProjectMeetingRSTByMeetingId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BizProjectMeetingRST)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectMeetingRSTByMeetingId_result)
        return this.equals((obtainBizProjectMeetingRSTByMeetingId_result)that);
      return false;
    }

    public boolean equals(obtainBizProjectMeetingRSTByMeetingId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectMeetingRSTByMeetingId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectMeetingRSTByMeetingId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingRSTByMeetingId_resultStandardScheme getScheme() {
        return new obtainBizProjectMeetingRSTByMeetingId_resultStandardScheme();
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_resultStandardScheme extends StandardScheme<obtainBizProjectMeetingRSTByMeetingId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BizProjectMeetingRST();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectMeetingRSTByMeetingId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectMeetingRSTByMeetingId_resultTupleScheme getScheme() {
        return new obtainBizProjectMeetingRSTByMeetingId_resultTupleScheme();
      }
    }

    private static class obtainBizProjectMeetingRSTByMeetingId_resultTupleScheme extends TupleScheme<obtainBizProjectMeetingRSTByMeetingId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BizProjectMeetingRST();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizMeetingMinutesMemberByMeetingId_args implements org.apache.thrift.TBase<obtainBizMeetingMinutesMemberByMeetingId_args, obtainBizMeetingMinutesMemberByMeetingId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizMeetingMinutesMemberByMeetingId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizMeetingMinutesMemberByMeetingId_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizMeetingMinutesMemberByMeetingId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizMeetingMinutesMemberByMeetingId_argsTupleSchemeFactory());
    }

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizMeetingMinutesMemberByMeetingId_args.class, metaDataMap);
    }

    public obtainBizMeetingMinutesMemberByMeetingId_args() {
    }

    public obtainBizMeetingMinutesMemberByMeetingId_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizMeetingMinutesMemberByMeetingId_args(obtainBizMeetingMinutesMemberByMeetingId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    public obtainBizMeetingMinutesMemberByMeetingId_args deepCopy() {
      return new obtainBizMeetingMinutesMemberByMeetingId_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public obtainBizMeetingMinutesMemberByMeetingId_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return Integer.valueOf(getMeetingId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizMeetingMinutesMemberByMeetingId_args)
        return this.equals((obtainBizMeetingMinutesMemberByMeetingId_args)that);
      return false;
    }

    public boolean equals(obtainBizMeetingMinutesMemberByMeetingId_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true;
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizMeetingMinutesMemberByMeetingId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizMeetingMinutesMemberByMeetingId_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizMeetingMinutesMemberByMeetingId_argsStandardScheme getScheme() {
        return new obtainBizMeetingMinutesMemberByMeetingId_argsStandardScheme();
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_argsStandardScheme extends StandardScheme<obtainBizMeetingMinutesMemberByMeetingId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizMeetingMinutesMemberByMeetingId_argsTupleScheme getScheme() {
        return new obtainBizMeetingMinutesMemberByMeetingId_argsTupleScheme();
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_argsTupleScheme extends TupleScheme<obtainBizMeetingMinutesMemberByMeetingId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizMeetingMinutesMemberByMeetingId_result implements org.apache.thrift.TBase<obtainBizMeetingMinutesMemberByMeetingId_result, obtainBizMeetingMinutesMemberByMeetingId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizMeetingMinutesMemberByMeetingId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizMeetingMinutesMemberByMeetingId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizMeetingMinutesMemberByMeetingId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizMeetingMinutesMemberByMeetingId_resultTupleSchemeFactory());
    }

    public List<BizMeetingMinutesMember> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizMeetingMinutesMember.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizMeetingMinutesMemberByMeetingId_result.class, metaDataMap);
    }

    public obtainBizMeetingMinutesMemberByMeetingId_result() {
    }

    public obtainBizMeetingMinutesMemberByMeetingId_result(
      List<BizMeetingMinutesMember> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizMeetingMinutesMemberByMeetingId_result(obtainBizMeetingMinutesMemberByMeetingId_result other) {
      if (other.isSetSuccess()) {
        List<BizMeetingMinutesMember> __this__success = new ArrayList<BizMeetingMinutesMember>(other.success.size());
        for (BizMeetingMinutesMember other_element : other.success) {
          __this__success.add(new BizMeetingMinutesMember(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizMeetingMinutesMemberByMeetingId_result deepCopy() {
      return new obtainBizMeetingMinutesMemberByMeetingId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BizMeetingMinutesMember> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BizMeetingMinutesMember elem) {
      if (this.success == null) {
        this.success = new ArrayList<BizMeetingMinutesMember>();
      }
      this.success.add(elem);
    }

    public List<BizMeetingMinutesMember> getSuccess() {
      return this.success;
    }

    public obtainBizMeetingMinutesMemberByMeetingId_result setSuccess(List<BizMeetingMinutesMember> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizMeetingMinutesMemberByMeetingId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BizMeetingMinutesMember>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizMeetingMinutesMemberByMeetingId_result)
        return this.equals((obtainBizMeetingMinutesMemberByMeetingId_result)that);
      return false;
    }

    public boolean equals(obtainBizMeetingMinutesMemberByMeetingId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizMeetingMinutesMemberByMeetingId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizMeetingMinutesMemberByMeetingId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizMeetingMinutesMemberByMeetingId_resultStandardScheme getScheme() {
        return new obtainBizMeetingMinutesMemberByMeetingId_resultStandardScheme();
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_resultStandardScheme extends StandardScheme<obtainBizMeetingMinutesMemberByMeetingId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.success = new ArrayList<BizMeetingMinutesMember>(_list296.size);
                  BizMeetingMinutesMember _elem297;
                  for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                  {
                    _elem297 = new BizMeetingMinutesMember();
                    _elem297.read(iprot);
                    struct.success.add(_elem297);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BizMeetingMinutesMember _iter299 : struct.success)
            {
              _iter299.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizMeetingMinutesMemberByMeetingId_resultTupleScheme getScheme() {
        return new obtainBizMeetingMinutesMemberByMeetingId_resultTupleScheme();
      }
    }

    private static class obtainBizMeetingMinutesMemberByMeetingId_resultTupleScheme extends TupleScheme<obtainBizMeetingMinutesMemberByMeetingId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BizMeetingMinutesMember _iter300 : struct.success)
            {
              _iter300.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BizMeetingMinutesMember>(_list301.size);
            BizMeetingMinutesMember _elem302;
            for (int _i303 = 0; _i303 < _list301.size; ++_i303)
            {
              _elem302 = new BizMeetingMinutesMember();
              _elem302.read(iprot);
              struct.success.add(_elem302);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectMeeting_args implements org.apache.thrift.TBase<updateBizProjectMeeting_args, updateBizProjectMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectMeeting_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeeting", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectMeeting_argsTupleSchemeFactory());
    }

    public BizProjectMeeting bizProjectMeeting; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING((short)1, "bizProjectMeeting");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING
            return BIZ_PROJECT_MEETING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeeting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeeting.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectMeeting_args.class, metaDataMap);
    }

    public updateBizProjectMeeting_args() {
    }

    public updateBizProjectMeeting_args(
      BizProjectMeeting bizProjectMeeting)
    {
      this();
      this.bizProjectMeeting = bizProjectMeeting;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectMeeting_args(updateBizProjectMeeting_args other) {
      if (other.isSetBizProjectMeeting()) {
        this.bizProjectMeeting = new BizProjectMeeting(other.bizProjectMeeting);
      }
    }

    public updateBizProjectMeeting_args deepCopy() {
      return new updateBizProjectMeeting_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeeting = null;
    }

    public BizProjectMeeting getBizProjectMeeting() {
      return this.bizProjectMeeting;
    }

    public updateBizProjectMeeting_args setBizProjectMeeting(BizProjectMeeting bizProjectMeeting) {
      this.bizProjectMeeting = bizProjectMeeting;
      return this;
    }

    public void unsetBizProjectMeeting() {
      this.bizProjectMeeting = null;
    }

    /** Returns true if field bizProjectMeeting is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeeting() {
      return this.bizProjectMeeting != null;
    }

    public void setBizProjectMeetingIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeeting = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING:
        if (value == null) {
          unsetBizProjectMeeting();
        } else {
          setBizProjectMeeting((BizProjectMeeting)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING:
        return getBizProjectMeeting();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING:
        return isSetBizProjectMeeting();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectMeeting_args)
        return this.equals((updateBizProjectMeeting_args)that);
      return false;
    }

    public boolean equals(updateBizProjectMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeeting = true && this.isSetBizProjectMeeting();
      boolean that_present_bizProjectMeeting = true && that.isSetBizProjectMeeting();
      if (this_present_bizProjectMeeting || that_present_bizProjectMeeting) {
        if (!(this_present_bizProjectMeeting && that_present_bizProjectMeeting))
          return false;
        if (!this.bizProjectMeeting.equals(that.bizProjectMeeting))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeeting = true && (isSetBizProjectMeeting());
      list.add(present_bizProjectMeeting);
      if (present_bizProjectMeeting)
        list.add(bizProjectMeeting);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeeting()).compareTo(other.isSetBizProjectMeeting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeeting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeeting, other.bizProjectMeeting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectMeeting_args(");
      boolean first = true;

      sb.append("bizProjectMeeting:");
      if (this.bizProjectMeeting == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeeting);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeeting != null) {
        bizProjectMeeting.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectMeeting_argsStandardScheme getScheme() {
        return new updateBizProjectMeeting_argsStandardScheme();
      }
    }

    private static class updateBizProjectMeeting_argsStandardScheme extends StandardScheme<updateBizProjectMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeeting = new BizProjectMeeting();
                struct.bizProjectMeeting.read(iprot);
                struct.setBizProjectMeetingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeeting != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_FIELD_DESC);
          struct.bizProjectMeeting.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectMeeting_argsTupleScheme getScheme() {
        return new updateBizProjectMeeting_argsTupleScheme();
      }
    }

    private static class updateBizProjectMeeting_argsTupleScheme extends TupleScheme<updateBizProjectMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeeting()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeeting()) {
          struct.bizProjectMeeting.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeeting = new BizProjectMeeting();
          struct.bizProjectMeeting.read(iprot);
          struct.setBizProjectMeetingIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectMeeting_result implements org.apache.thrift.TBase<updateBizProjectMeeting_result, updateBizProjectMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectMeeting_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectMeeting_result.class, metaDataMap);
    }

    public updateBizProjectMeeting_result() {
    }

    public updateBizProjectMeeting_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectMeeting_result(updateBizProjectMeeting_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateBizProjectMeeting_result deepCopy() {
      return new updateBizProjectMeeting_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateBizProjectMeeting_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateBizProjectMeeting_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectMeeting_result)
        return this.equals((updateBizProjectMeeting_result)that);
      return false;
    }

    public boolean equals(updateBizProjectMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectMeeting_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectMeeting_resultStandardScheme getScheme() {
        return new updateBizProjectMeeting_resultStandardScheme();
      }
    }

    private static class updateBizProjectMeeting_resultStandardScheme extends StandardScheme<updateBizProjectMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectMeeting_resultTupleScheme getScheme() {
        return new updateBizProjectMeeting_resultTupleScheme();
      }
    }

    private static class updateBizProjectMeeting_resultTupleScheme extends TupleScheme<updateBizProjectMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectMeetingRST_args implements org.apache.thrift.TBase<updateBizProjectMeetingRST_args, updateBizProjectMeetingRST_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectMeetingRST_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectMeetingRST_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_RST_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeetingRST", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectMeetingRST_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectMeetingRST_argsTupleSchemeFactory());
    }

    public BizProjectMeetingRST bizProjectMeetingRST; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING_RST((short)1, "bizProjectMeetingRST");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING_RST
            return BIZ_PROJECT_MEETING_RST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING_RST, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeetingRST", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeetingRST.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectMeetingRST_args.class, metaDataMap);
    }

    public updateBizProjectMeetingRST_args() {
    }

    public updateBizProjectMeetingRST_args(
      BizProjectMeetingRST bizProjectMeetingRST)
    {
      this();
      this.bizProjectMeetingRST = bizProjectMeetingRST;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectMeetingRST_args(updateBizProjectMeetingRST_args other) {
      if (other.isSetBizProjectMeetingRST()) {
        this.bizProjectMeetingRST = new BizProjectMeetingRST(other.bizProjectMeetingRST);
      }
    }

    public updateBizProjectMeetingRST_args deepCopy() {
      return new updateBizProjectMeetingRST_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeetingRST = null;
    }

    public BizProjectMeetingRST getBizProjectMeetingRST() {
      return this.bizProjectMeetingRST;
    }

    public updateBizProjectMeetingRST_args setBizProjectMeetingRST(BizProjectMeetingRST bizProjectMeetingRST) {
      this.bizProjectMeetingRST = bizProjectMeetingRST;
      return this;
    }

    public void unsetBizProjectMeetingRST() {
      this.bizProjectMeetingRST = null;
    }

    /** Returns true if field bizProjectMeetingRST is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeetingRST() {
      return this.bizProjectMeetingRST != null;
    }

    public void setBizProjectMeetingRSTIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeetingRST = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        if (value == null) {
          unsetBizProjectMeetingRST();
        } else {
          setBizProjectMeetingRST((BizProjectMeetingRST)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        return getBizProjectMeetingRST();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING_RST:
        return isSetBizProjectMeetingRST();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectMeetingRST_args)
        return this.equals((updateBizProjectMeetingRST_args)that);
      return false;
    }

    public boolean equals(updateBizProjectMeetingRST_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeetingRST = true && this.isSetBizProjectMeetingRST();
      boolean that_present_bizProjectMeetingRST = true && that.isSetBizProjectMeetingRST();
      if (this_present_bizProjectMeetingRST || that_present_bizProjectMeetingRST) {
        if (!(this_present_bizProjectMeetingRST && that_present_bizProjectMeetingRST))
          return false;
        if (!this.bizProjectMeetingRST.equals(that.bizProjectMeetingRST))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeetingRST = true && (isSetBizProjectMeetingRST());
      list.add(present_bizProjectMeetingRST);
      if (present_bizProjectMeetingRST)
        list.add(bizProjectMeetingRST);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectMeetingRST_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeetingRST()).compareTo(other.isSetBizProjectMeetingRST());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeetingRST()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeetingRST, other.bizProjectMeetingRST);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectMeetingRST_args(");
      boolean first = true;

      sb.append("bizProjectMeetingRST:");
      if (this.bizProjectMeetingRST == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeetingRST);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeetingRST != null) {
        bizProjectMeetingRST.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectMeetingRST_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectMeetingRST_argsStandardScheme getScheme() {
        return new updateBizProjectMeetingRST_argsStandardScheme();
      }
    }

    private static class updateBizProjectMeetingRST_argsStandardScheme extends StandardScheme<updateBizProjectMeetingRST_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING_RST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeetingRST = new BizProjectMeetingRST();
                struct.bizProjectMeetingRST.read(iprot);
                struct.setBizProjectMeetingRSTIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeetingRST != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_RST_FIELD_DESC);
          struct.bizProjectMeetingRST.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectMeetingRST_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectMeetingRST_argsTupleScheme getScheme() {
        return new updateBizProjectMeetingRST_argsTupleScheme();
      }
    }

    private static class updateBizProjectMeetingRST_argsTupleScheme extends TupleScheme<updateBizProjectMeetingRST_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeetingRST()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeetingRST()) {
          struct.bizProjectMeetingRST.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeetingRST_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeetingRST = new BizProjectMeetingRST();
          struct.bizProjectMeetingRST.read(iprot);
          struct.setBizProjectMeetingRSTIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectMeetingRST_result implements org.apache.thrift.TBase<updateBizProjectMeetingRST_result, updateBizProjectMeetingRST_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectMeetingRST_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectMeetingRST_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectMeetingRST_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectMeetingRST_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectMeetingRST_result.class, metaDataMap);
    }

    public updateBizProjectMeetingRST_result() {
    }

    public updateBizProjectMeetingRST_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectMeetingRST_result(updateBizProjectMeetingRST_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateBizProjectMeetingRST_result deepCopy() {
      return new updateBizProjectMeetingRST_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateBizProjectMeetingRST_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateBizProjectMeetingRST_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectMeetingRST_result)
        return this.equals((updateBizProjectMeetingRST_result)that);
      return false;
    }

    public boolean equals(updateBizProjectMeetingRST_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectMeetingRST_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectMeetingRST_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectMeetingRST_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectMeetingRST_resultStandardScheme getScheme() {
        return new updateBizProjectMeetingRST_resultStandardScheme();
      }
    }

    private static class updateBizProjectMeetingRST_resultStandardScheme extends StandardScheme<updateBizProjectMeetingRST_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectMeetingRST_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectMeetingRST_resultTupleScheme getScheme() {
        return new updateBizProjectMeetingRST_resultTupleScheme();
      }
    }

    private static class updateBizProjectMeetingRST_resultTupleScheme extends TupleScheme<updateBizProjectMeetingRST_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectMeetingRST_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateBizMeetingMinutesMember_args implements org.apache.thrift.TBase<updateBizMeetingMinutesMember_args, updateBizMeetingMinutesMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizMeetingMinutesMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizMeetingMinutesMember_args");

    private static final org.apache.thrift.protocol.TField BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("bizMeetingMinutesMember", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizMeetingMinutesMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizMeetingMinutesMember_argsTupleSchemeFactory());
    }

    public BizMeetingMinutesMember bizMeetingMinutesMember; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_MEETING_MINUTES_MEMBER((short)1, "bizMeetingMinutesMember");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_MEETING_MINUTES_MEMBER
            return BIZ_MEETING_MINUTES_MEMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_MEETING_MINUTES_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("bizMeetingMinutesMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizMeetingMinutesMember.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizMeetingMinutesMember_args.class, metaDataMap);
    }

    public updateBizMeetingMinutesMember_args() {
    }

    public updateBizMeetingMinutesMember_args(
      BizMeetingMinutesMember bizMeetingMinutesMember)
    {
      this();
      this.bizMeetingMinutesMember = bizMeetingMinutesMember;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizMeetingMinutesMember_args(updateBizMeetingMinutesMember_args other) {
      if (other.isSetBizMeetingMinutesMember()) {
        this.bizMeetingMinutesMember = new BizMeetingMinutesMember(other.bizMeetingMinutesMember);
      }
    }

    public updateBizMeetingMinutesMember_args deepCopy() {
      return new updateBizMeetingMinutesMember_args(this);
    }

    @Override
    public void clear() {
      this.bizMeetingMinutesMember = null;
    }

    public BizMeetingMinutesMember getBizMeetingMinutesMember() {
      return this.bizMeetingMinutesMember;
    }

    public updateBizMeetingMinutesMember_args setBizMeetingMinutesMember(BizMeetingMinutesMember bizMeetingMinutesMember) {
      this.bizMeetingMinutesMember = bizMeetingMinutesMember;
      return this;
    }

    public void unsetBizMeetingMinutesMember() {
      this.bizMeetingMinutesMember = null;
    }

    /** Returns true if field bizMeetingMinutesMember is set (has been assigned a value) and false otherwise */
    public boolean isSetBizMeetingMinutesMember() {
      return this.bizMeetingMinutesMember != null;
    }

    public void setBizMeetingMinutesMemberIsSet(boolean value) {
      if (!value) {
        this.bizMeetingMinutesMember = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        if (value == null) {
          unsetBizMeetingMinutesMember();
        } else {
          setBizMeetingMinutesMember((BizMeetingMinutesMember)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        return getBizMeetingMinutesMember();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_MEETING_MINUTES_MEMBER:
        return isSetBizMeetingMinutesMember();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizMeetingMinutesMember_args)
        return this.equals((updateBizMeetingMinutesMember_args)that);
      return false;
    }

    public boolean equals(updateBizMeetingMinutesMember_args that) {
      if (that == null)
        return false;

      boolean this_present_bizMeetingMinutesMember = true && this.isSetBizMeetingMinutesMember();
      boolean that_present_bizMeetingMinutesMember = true && that.isSetBizMeetingMinutesMember();
      if (this_present_bizMeetingMinutesMember || that_present_bizMeetingMinutesMember) {
        if (!(this_present_bizMeetingMinutesMember && that_present_bizMeetingMinutesMember))
          return false;
        if (!this.bizMeetingMinutesMember.equals(that.bizMeetingMinutesMember))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizMeetingMinutesMember = true && (isSetBizMeetingMinutesMember());
      list.add(present_bizMeetingMinutesMember);
      if (present_bizMeetingMinutesMember)
        list.add(bizMeetingMinutesMember);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizMeetingMinutesMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizMeetingMinutesMember()).compareTo(other.isSetBizMeetingMinutesMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizMeetingMinutesMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizMeetingMinutesMember, other.bizMeetingMinutesMember);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizMeetingMinutesMember_args(");
      boolean first = true;

      sb.append("bizMeetingMinutesMember:");
      if (this.bizMeetingMinutesMember == null) {
        sb.append("null");
      } else {
        sb.append(this.bizMeetingMinutesMember);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizMeetingMinutesMember != null) {
        bizMeetingMinutesMember.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizMeetingMinutesMember_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizMeetingMinutesMember_argsStandardScheme getScheme() {
        return new updateBizMeetingMinutesMember_argsStandardScheme();
      }
    }

    private static class updateBizMeetingMinutesMember_argsStandardScheme extends StandardScheme<updateBizMeetingMinutesMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_MEETING_MINUTES_MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizMeetingMinutesMember = new BizMeetingMinutesMember();
                struct.bizMeetingMinutesMember.read(iprot);
                struct.setBizMeetingMinutesMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizMeetingMinutesMember != null) {
          oprot.writeFieldBegin(BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC);
          struct.bizMeetingMinutesMember.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizMeetingMinutesMember_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizMeetingMinutesMember_argsTupleScheme getScheme() {
        return new updateBizMeetingMinutesMember_argsTupleScheme();
      }
    }

    private static class updateBizMeetingMinutesMember_argsTupleScheme extends TupleScheme<updateBizMeetingMinutesMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizMeetingMinutesMember()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizMeetingMinutesMember()) {
          struct.bizMeetingMinutesMember.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizMeetingMinutesMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizMeetingMinutesMember = new BizMeetingMinutesMember();
          struct.bizMeetingMinutesMember.read(iprot);
          struct.setBizMeetingMinutesMemberIsSet(true);
        }
      }
    }

  }

  public static class updateBizMeetingMinutesMember_result implements org.apache.thrift.TBase<updateBizMeetingMinutesMember_result, updateBizMeetingMinutesMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizMeetingMinutesMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizMeetingMinutesMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizMeetingMinutesMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizMeetingMinutesMember_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizMeetingMinutesMember_result.class, metaDataMap);
    }

    public updateBizMeetingMinutesMember_result() {
    }

    public updateBizMeetingMinutesMember_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizMeetingMinutesMember_result(updateBizMeetingMinutesMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateBizMeetingMinutesMember_result deepCopy() {
      return new updateBizMeetingMinutesMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateBizMeetingMinutesMember_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateBizMeetingMinutesMember_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizMeetingMinutesMember_result)
        return this.equals((updateBizMeetingMinutesMember_result)that);
      return false;
    }

    public boolean equals(updateBizMeetingMinutesMember_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizMeetingMinutesMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizMeetingMinutesMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizMeetingMinutesMember_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizMeetingMinutesMember_resultStandardScheme getScheme() {
        return new updateBizMeetingMinutesMember_resultStandardScheme();
      }
    }

    private static class updateBizMeetingMinutesMember_resultStandardScheme extends StandardScheme<updateBizMeetingMinutesMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizMeetingMinutesMember_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizMeetingMinutesMember_resultTupleScheme getScheme() {
        return new updateBizMeetingMinutesMember_resultTupleScheme();
      }
    }

    private static class updateBizMeetingMinutesMember_resultTupleScheme extends TupleScheme<updateBizMeetingMinutesMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizMeetingMinutesMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectMeetingByProjectId_args implements org.apache.thrift.TBase<deleteBizProjectMeetingByProjectId_args, deleteBizProjectMeetingByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectMeetingByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectMeetingByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectMeetingByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectMeetingByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectMeetingByProjectId_args.class, metaDataMap);
    }

    public deleteBizProjectMeetingByProjectId_args() {
    }

    public deleteBizProjectMeetingByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectMeetingByProjectId_args(deleteBizProjectMeetingByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public deleteBizProjectMeetingByProjectId_args deepCopy() {
      return new deleteBizProjectMeetingByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public deleteBizProjectMeetingByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectMeetingByProjectId_args)
        return this.equals((deleteBizProjectMeetingByProjectId_args)that);
      return false;
    }

    public boolean equals(deleteBizProjectMeetingByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectMeetingByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectMeetingByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectMeetingByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectMeetingByProjectId_argsStandardScheme getScheme() {
        return new deleteBizProjectMeetingByProjectId_argsStandardScheme();
      }
    }

    private static class deleteBizProjectMeetingByProjectId_argsStandardScheme extends StandardScheme<deleteBizProjectMeetingByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectMeetingByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectMeetingByProjectId_argsTupleScheme getScheme() {
        return new deleteBizProjectMeetingByProjectId_argsTupleScheme();
      }
    }

    private static class deleteBizProjectMeetingByProjectId_argsTupleScheme extends TupleScheme<deleteBizProjectMeetingByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectMeetingByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectMeetingByProjectId_result implements org.apache.thrift.TBase<deleteBizProjectMeetingByProjectId_result, deleteBizProjectMeetingByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectMeetingByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectMeetingByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectMeetingByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectMeetingByProjectId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectMeetingByProjectId_result.class, metaDataMap);
    }

    public deleteBizProjectMeetingByProjectId_result() {
    }

    public deleteBizProjectMeetingByProjectId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectMeetingByProjectId_result(deleteBizProjectMeetingByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteBizProjectMeetingByProjectId_result deepCopy() {
      return new deleteBizProjectMeetingByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteBizProjectMeetingByProjectId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteBizProjectMeetingByProjectId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectMeetingByProjectId_result)
        return this.equals((deleteBizProjectMeetingByProjectId_result)that);
      return false;
    }

    public boolean equals(deleteBizProjectMeetingByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectMeetingByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectMeetingByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectMeetingByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectMeetingByProjectId_resultStandardScheme getScheme() {
        return new deleteBizProjectMeetingByProjectId_resultStandardScheme();
      }
    }

    private static class deleteBizProjectMeetingByProjectId_resultStandardScheme extends StandardScheme<deleteBizProjectMeetingByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectMeetingByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectMeetingByProjectId_resultTupleScheme getScheme() {
        return new deleteBizProjectMeetingByProjectId_resultTupleScheme();
      }
    }

    private static class deleteBizProjectMeetingByProjectId_resultTupleScheme extends TupleScheme<deleteBizProjectMeetingByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectMeetingByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deletteBizProjectMeetingRSTByMeetingId_args implements org.apache.thrift.TBase<deletteBizProjectMeetingRSTByMeetingId_args, deletteBizProjectMeetingRSTByMeetingId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletteBizProjectMeetingRSTByMeetingId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletteBizProjectMeetingRSTByMeetingId_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletteBizProjectMeetingRSTByMeetingId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletteBizProjectMeetingRSTByMeetingId_argsTupleSchemeFactory());
    }

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletteBizProjectMeetingRSTByMeetingId_args.class, metaDataMap);
    }

    public deletteBizProjectMeetingRSTByMeetingId_args() {
    }

    public deletteBizProjectMeetingRSTByMeetingId_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletteBizProjectMeetingRSTByMeetingId_args(deletteBizProjectMeetingRSTByMeetingId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    public deletteBizProjectMeetingRSTByMeetingId_args deepCopy() {
      return new deletteBizProjectMeetingRSTByMeetingId_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public deletteBizProjectMeetingRSTByMeetingId_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return Integer.valueOf(getMeetingId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletteBizProjectMeetingRSTByMeetingId_args)
        return this.equals((deletteBizProjectMeetingRSTByMeetingId_args)that);
      return false;
    }

    public boolean equals(deletteBizProjectMeetingRSTByMeetingId_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true;
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletteBizProjectMeetingRSTByMeetingId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletteBizProjectMeetingRSTByMeetingId_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_argsStandardSchemeFactory implements SchemeFactory {
      public deletteBizProjectMeetingRSTByMeetingId_argsStandardScheme getScheme() {
        return new deletteBizProjectMeetingRSTByMeetingId_argsStandardScheme();
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_argsStandardScheme extends StandardScheme<deletteBizProjectMeetingRSTByMeetingId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletteBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletteBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletteBizProjectMeetingRSTByMeetingId_argsTupleSchemeFactory implements SchemeFactory {
      public deletteBizProjectMeetingRSTByMeetingId_argsTupleScheme getScheme() {
        return new deletteBizProjectMeetingRSTByMeetingId_argsTupleScheme();
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_argsTupleScheme extends TupleScheme<deletteBizProjectMeetingRSTByMeetingId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletteBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletteBizProjectMeetingRSTByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class deletteBizProjectMeetingRSTByMeetingId_result implements org.apache.thrift.TBase<deletteBizProjectMeetingRSTByMeetingId_result, deletteBizProjectMeetingRSTByMeetingId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletteBizProjectMeetingRSTByMeetingId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletteBizProjectMeetingRSTByMeetingId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletteBizProjectMeetingRSTByMeetingId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletteBizProjectMeetingRSTByMeetingId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletteBizProjectMeetingRSTByMeetingId_result.class, metaDataMap);
    }

    public deletteBizProjectMeetingRSTByMeetingId_result() {
    }

    public deletteBizProjectMeetingRSTByMeetingId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletteBizProjectMeetingRSTByMeetingId_result(deletteBizProjectMeetingRSTByMeetingId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deletteBizProjectMeetingRSTByMeetingId_result deepCopy() {
      return new deletteBizProjectMeetingRSTByMeetingId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deletteBizProjectMeetingRSTByMeetingId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deletteBizProjectMeetingRSTByMeetingId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletteBizProjectMeetingRSTByMeetingId_result)
        return this.equals((deletteBizProjectMeetingRSTByMeetingId_result)that);
      return false;
    }

    public boolean equals(deletteBizProjectMeetingRSTByMeetingId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletteBizProjectMeetingRSTByMeetingId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletteBizProjectMeetingRSTByMeetingId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_resultStandardSchemeFactory implements SchemeFactory {
      public deletteBizProjectMeetingRSTByMeetingId_resultStandardScheme getScheme() {
        return new deletteBizProjectMeetingRSTByMeetingId_resultStandardScheme();
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_resultStandardScheme extends StandardScheme<deletteBizProjectMeetingRSTByMeetingId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletteBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletteBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletteBizProjectMeetingRSTByMeetingId_resultTupleSchemeFactory implements SchemeFactory {
      public deletteBizProjectMeetingRSTByMeetingId_resultTupleScheme getScheme() {
        return new deletteBizProjectMeetingRSTByMeetingId_resultTupleScheme();
      }
    }

    private static class deletteBizProjectMeetingRSTByMeetingId_resultTupleScheme extends TupleScheme<deletteBizProjectMeetingRSTByMeetingId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletteBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletteBizProjectMeetingRSTByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteBizMeetingMinutesMemberByMeetingId_args implements org.apache.thrift.TBase<deleteBizMeetingMinutesMemberByMeetingId_args, deleteBizMeetingMinutesMemberByMeetingId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizMeetingMinutesMemberByMeetingId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizMeetingMinutesMemberByMeetingId_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizMeetingMinutesMemberByMeetingId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizMeetingMinutesMemberByMeetingId_argsTupleSchemeFactory());
    }

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizMeetingMinutesMemberByMeetingId_args.class, metaDataMap);
    }

    public deleteBizMeetingMinutesMemberByMeetingId_args() {
    }

    public deleteBizMeetingMinutesMemberByMeetingId_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizMeetingMinutesMemberByMeetingId_args(deleteBizMeetingMinutesMemberByMeetingId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    public deleteBizMeetingMinutesMemberByMeetingId_args deepCopy() {
      return new deleteBizMeetingMinutesMemberByMeetingId_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public deleteBizMeetingMinutesMemberByMeetingId_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return Integer.valueOf(getMeetingId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizMeetingMinutesMemberByMeetingId_args)
        return this.equals((deleteBizMeetingMinutesMemberByMeetingId_args)that);
      return false;
    }

    public boolean equals(deleteBizMeetingMinutesMemberByMeetingId_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true;
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizMeetingMinutesMemberByMeetingId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizMeetingMinutesMemberByMeetingId_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizMeetingMinutesMemberByMeetingId_argsStandardScheme getScheme() {
        return new deleteBizMeetingMinutesMemberByMeetingId_argsStandardScheme();
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_argsStandardScheme extends StandardScheme<deleteBizMeetingMinutesMemberByMeetingId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizMeetingMinutesMemberByMeetingId_argsTupleScheme getScheme() {
        return new deleteBizMeetingMinutesMemberByMeetingId_argsTupleScheme();
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_argsTupleScheme extends TupleScheme<deleteBizMeetingMinutesMemberByMeetingId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizMeetingMinutesMemberByMeetingId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class deleteBizMeetingMinutesMemberByMeetingId_result implements org.apache.thrift.TBase<deleteBizMeetingMinutesMemberByMeetingId_result, deleteBizMeetingMinutesMemberByMeetingId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizMeetingMinutesMemberByMeetingId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizMeetingMinutesMemberByMeetingId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizMeetingMinutesMemberByMeetingId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizMeetingMinutesMemberByMeetingId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizMeetingMinutesMemberByMeetingId_result.class, metaDataMap);
    }

    public deleteBizMeetingMinutesMemberByMeetingId_result() {
    }

    public deleteBizMeetingMinutesMemberByMeetingId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizMeetingMinutesMemberByMeetingId_result(deleteBizMeetingMinutesMemberByMeetingId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteBizMeetingMinutesMemberByMeetingId_result deepCopy() {
      return new deleteBizMeetingMinutesMemberByMeetingId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteBizMeetingMinutesMemberByMeetingId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteBizMeetingMinutesMemberByMeetingId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizMeetingMinutesMemberByMeetingId_result)
        return this.equals((deleteBizMeetingMinutesMemberByMeetingId_result)that);
      return false;
    }

    public boolean equals(deleteBizMeetingMinutesMemberByMeetingId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizMeetingMinutesMemberByMeetingId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizMeetingMinutesMemberByMeetingId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizMeetingMinutesMemberByMeetingId_resultStandardScheme getScheme() {
        return new deleteBizMeetingMinutesMemberByMeetingId_resultStandardScheme();
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_resultStandardScheme extends StandardScheme<deleteBizMeetingMinutesMemberByMeetingId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizMeetingMinutesMemberByMeetingId_resultTupleScheme getScheme() {
        return new deleteBizMeetingMinutesMemberByMeetingId_resultTupleScheme();
      }
    }

    private static class deleteBizMeetingMinutesMemberByMeetingId_resultTupleScheme extends TupleScheme<deleteBizMeetingMinutesMemberByMeetingId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizMeetingMinutesMemberByMeetingId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizFileForOfflineMeeting_args implements org.apache.thrift.TBase<obtainBizFileForOfflineMeeting_args, obtainBizFileForOfflineMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizFileForOfflineMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizFileForOfflineMeeting_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizFileForOfflineMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizFileForOfflineMeeting_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizFileForOfflineMeeting_args.class, metaDataMap);
    }

    public obtainBizFileForOfflineMeeting_args() {
    }

    public obtainBizFileForOfflineMeeting_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizFileForOfflineMeeting_args(obtainBizFileForOfflineMeeting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public obtainBizFileForOfflineMeeting_args deepCopy() {
      return new obtainBizFileForOfflineMeeting_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public obtainBizFileForOfflineMeeting_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizFileForOfflineMeeting_args)
        return this.equals((obtainBizFileForOfflineMeeting_args)that);
      return false;
    }

    public boolean equals(obtainBizFileForOfflineMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizFileForOfflineMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizFileForOfflineMeeting_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizFileForOfflineMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizFileForOfflineMeeting_argsStandardScheme getScheme() {
        return new obtainBizFileForOfflineMeeting_argsStandardScheme();
      }
    }

    private static class obtainBizFileForOfflineMeeting_argsStandardScheme extends StandardScheme<obtainBizFileForOfflineMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizFileForOfflineMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizFileForOfflineMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizFileForOfflineMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizFileForOfflineMeeting_argsTupleScheme getScheme() {
        return new obtainBizFileForOfflineMeeting_argsTupleScheme();
      }
    }

    private static class obtainBizFileForOfflineMeeting_argsTupleScheme extends TupleScheme<obtainBizFileForOfflineMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizFileForOfflineMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizFileForOfflineMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizFileForOfflineMeeting_result implements org.apache.thrift.TBase<obtainBizFileForOfflineMeeting_result, obtainBizFileForOfflineMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizFileForOfflineMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizFileForOfflineMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizFileForOfflineMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizFileForOfflineMeeting_resultTupleSchemeFactory());
    }

    public List<com.xlkfinance.bms.rpc.system.BizFile> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.system.BizFile.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizFileForOfflineMeeting_result.class, metaDataMap);
    }

    public obtainBizFileForOfflineMeeting_result() {
    }

    public obtainBizFileForOfflineMeeting_result(
      List<com.xlkfinance.bms.rpc.system.BizFile> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizFileForOfflineMeeting_result(obtainBizFileForOfflineMeeting_result other) {
      if (other.isSetSuccess()) {
        List<com.xlkfinance.bms.rpc.system.BizFile> __this__success = new ArrayList<com.xlkfinance.bms.rpc.system.BizFile>(other.success.size());
        for (com.xlkfinance.bms.rpc.system.BizFile other_element : other.success) {
          __this__success.add(new com.xlkfinance.bms.rpc.system.BizFile(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizFileForOfflineMeeting_result deepCopy() {
      return new obtainBizFileForOfflineMeeting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.xlkfinance.bms.rpc.system.BizFile> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.xlkfinance.bms.rpc.system.BizFile elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.xlkfinance.bms.rpc.system.BizFile>();
      }
      this.success.add(elem);
    }

    public List<com.xlkfinance.bms.rpc.system.BizFile> getSuccess() {
      return this.success;
    }

    public obtainBizFileForOfflineMeeting_result setSuccess(List<com.xlkfinance.bms.rpc.system.BizFile> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizFileForOfflineMeeting_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.xlkfinance.bms.rpc.system.BizFile>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizFileForOfflineMeeting_result)
        return this.equals((obtainBizFileForOfflineMeeting_result)that);
      return false;
    }

    public boolean equals(obtainBizFileForOfflineMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizFileForOfflineMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizFileForOfflineMeeting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizFileForOfflineMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizFileForOfflineMeeting_resultStandardScheme getScheme() {
        return new obtainBizFileForOfflineMeeting_resultStandardScheme();
      }
    }

    private static class obtainBizFileForOfflineMeeting_resultStandardScheme extends StandardScheme<obtainBizFileForOfflineMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizFileForOfflineMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new ArrayList<com.xlkfinance.bms.rpc.system.BizFile>(_list304.size);
                  com.xlkfinance.bms.rpc.system.BizFile _elem305;
                  for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                  {
                    _elem305 = new com.xlkfinance.bms.rpc.system.BizFile();
                    _elem305.read(iprot);
                    struct.success.add(_elem305);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizFileForOfflineMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.xlkfinance.bms.rpc.system.BizFile _iter307 : struct.success)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizFileForOfflineMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizFileForOfflineMeeting_resultTupleScheme getScheme() {
        return new obtainBizFileForOfflineMeeting_resultTupleScheme();
      }
    }

    private static class obtainBizFileForOfflineMeeting_resultTupleScheme extends TupleScheme<obtainBizFileForOfflineMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizFileForOfflineMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.xlkfinance.bms.rpc.system.BizFile _iter308 : struct.success)
            {
              _iter308.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizFileForOfflineMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.xlkfinance.bms.rpc.system.BizFile>(_list309.size);
            com.xlkfinance.bms.rpc.system.BizFile _elem310;
            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
            {
              _elem310 = new com.xlkfinance.bms.rpc.system.BizFile();
              _elem310.read(iprot);
              struct.success.add(_elem310);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveOfflineMeetingInfo_args implements org.apache.thrift.TBase<saveOfflineMeetingInfo_args, saveOfflineMeetingInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOfflineMeetingInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOfflineMeetingInfo_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeetingDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOfflineMeetingInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOfflineMeetingInfo_argsTupleSchemeFactory());
    }

    public BizProjectMeetingDTO bizProjectMeetingDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING_DTO((short)1, "bizProjectMeetingDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING_DTO
            return BIZ_PROJECT_MEETING_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING_DTO, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeetingDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeetingDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOfflineMeetingInfo_args.class, metaDataMap);
    }

    public saveOfflineMeetingInfo_args() {
    }

    public saveOfflineMeetingInfo_args(
      BizProjectMeetingDTO bizProjectMeetingDTO)
    {
      this();
      this.bizProjectMeetingDTO = bizProjectMeetingDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOfflineMeetingInfo_args(saveOfflineMeetingInfo_args other) {
      if (other.isSetBizProjectMeetingDTO()) {
        this.bizProjectMeetingDTO = new BizProjectMeetingDTO(other.bizProjectMeetingDTO);
      }
    }

    public saveOfflineMeetingInfo_args deepCopy() {
      return new saveOfflineMeetingInfo_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeetingDTO = null;
    }

    public BizProjectMeetingDTO getBizProjectMeetingDTO() {
      return this.bizProjectMeetingDTO;
    }

    public saveOfflineMeetingInfo_args setBizProjectMeetingDTO(BizProjectMeetingDTO bizProjectMeetingDTO) {
      this.bizProjectMeetingDTO = bizProjectMeetingDTO;
      return this;
    }

    public void unsetBizProjectMeetingDTO() {
      this.bizProjectMeetingDTO = null;
    }

    /** Returns true if field bizProjectMeetingDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeetingDTO() {
      return this.bizProjectMeetingDTO != null;
    }

    public void setBizProjectMeetingDTOIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeetingDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        if (value == null) {
          unsetBizProjectMeetingDTO();
        } else {
          setBizProjectMeetingDTO((BizProjectMeetingDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        return getBizProjectMeetingDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        return isSetBizProjectMeetingDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOfflineMeetingInfo_args)
        return this.equals((saveOfflineMeetingInfo_args)that);
      return false;
    }

    public boolean equals(saveOfflineMeetingInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeetingDTO = true && this.isSetBizProjectMeetingDTO();
      boolean that_present_bizProjectMeetingDTO = true && that.isSetBizProjectMeetingDTO();
      if (this_present_bizProjectMeetingDTO || that_present_bizProjectMeetingDTO) {
        if (!(this_present_bizProjectMeetingDTO && that_present_bizProjectMeetingDTO))
          return false;
        if (!this.bizProjectMeetingDTO.equals(that.bizProjectMeetingDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeetingDTO = true && (isSetBizProjectMeetingDTO());
      list.add(present_bizProjectMeetingDTO);
      if (present_bizProjectMeetingDTO)
        list.add(bizProjectMeetingDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOfflineMeetingInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeetingDTO()).compareTo(other.isSetBizProjectMeetingDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeetingDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeetingDTO, other.bizProjectMeetingDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOfflineMeetingInfo_args(");
      boolean first = true;

      sb.append("bizProjectMeetingDTO:");
      if (this.bizProjectMeetingDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeetingDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeetingDTO != null) {
        bizProjectMeetingDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOfflineMeetingInfo_argsStandardSchemeFactory implements SchemeFactory {
      public saveOfflineMeetingInfo_argsStandardScheme getScheme() {
        return new saveOfflineMeetingInfo_argsStandardScheme();
      }
    }

    private static class saveOfflineMeetingInfo_argsStandardScheme extends StandardScheme<saveOfflineMeetingInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeetingDTO = new BizProjectMeetingDTO();
                struct.bizProjectMeetingDTO.read(iprot);
                struct.setBizProjectMeetingDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeetingDTO != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_DTO_FIELD_DESC);
          struct.bizProjectMeetingDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOfflineMeetingInfo_argsTupleSchemeFactory implements SchemeFactory {
      public saveOfflineMeetingInfo_argsTupleScheme getScheme() {
        return new saveOfflineMeetingInfo_argsTupleScheme();
      }
    }

    private static class saveOfflineMeetingInfo_argsTupleScheme extends TupleScheme<saveOfflineMeetingInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeetingDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeetingDTO()) {
          struct.bizProjectMeetingDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeetingDTO = new BizProjectMeetingDTO();
          struct.bizProjectMeetingDTO.read(iprot);
          struct.setBizProjectMeetingDTOIsSet(true);
        }
      }
    }

  }

  public static class saveOfflineMeetingInfo_result implements org.apache.thrift.TBase<saveOfflineMeetingInfo_result, saveOfflineMeetingInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOfflineMeetingInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOfflineMeetingInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOfflineMeetingInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOfflineMeetingInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOfflineMeetingInfo_result.class, metaDataMap);
    }

    public saveOfflineMeetingInfo_result() {
    }

    public saveOfflineMeetingInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOfflineMeetingInfo_result(saveOfflineMeetingInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveOfflineMeetingInfo_result deepCopy() {
      return new saveOfflineMeetingInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveOfflineMeetingInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveOfflineMeetingInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOfflineMeetingInfo_result)
        return this.equals((saveOfflineMeetingInfo_result)that);
      return false;
    }

    public boolean equals(saveOfflineMeetingInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveOfflineMeetingInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOfflineMeetingInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOfflineMeetingInfo_resultStandardSchemeFactory implements SchemeFactory {
      public saveOfflineMeetingInfo_resultStandardScheme getScheme() {
        return new saveOfflineMeetingInfo_resultStandardScheme();
      }
    }

    private static class saveOfflineMeetingInfo_resultStandardScheme extends StandardScheme<saveOfflineMeetingInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOfflineMeetingInfo_resultTupleSchemeFactory implements SchemeFactory {
      public saveOfflineMeetingInfo_resultTupleScheme getScheme() {
        return new saveOfflineMeetingInfo_resultTupleScheme();
      }
    }

    private static class saveOfflineMeetingInfo_resultTupleScheme extends TupleScheme<saveOfflineMeetingInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateOfflineMeetingInfo_args implements org.apache.thrift.TBase<updateOfflineMeetingInfo_args, updateOfflineMeetingInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOfflineMeetingInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOfflineMeetingInfo_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_MEETING_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectMeetingDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOfflineMeetingInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOfflineMeetingInfo_argsTupleSchemeFactory());
    }

    public BizProjectMeetingDTO bizProjectMeetingDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_MEETING_DTO((short)1, "bizProjectMeetingDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_MEETING_DTO
            return BIZ_PROJECT_MEETING_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_MEETING_DTO, new org.apache.thrift.meta_data.FieldMetaData("bizProjectMeetingDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectMeetingDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOfflineMeetingInfo_args.class, metaDataMap);
    }

    public updateOfflineMeetingInfo_args() {
    }

    public updateOfflineMeetingInfo_args(
      BizProjectMeetingDTO bizProjectMeetingDTO)
    {
      this();
      this.bizProjectMeetingDTO = bizProjectMeetingDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOfflineMeetingInfo_args(updateOfflineMeetingInfo_args other) {
      if (other.isSetBizProjectMeetingDTO()) {
        this.bizProjectMeetingDTO = new BizProjectMeetingDTO(other.bizProjectMeetingDTO);
      }
    }

    public updateOfflineMeetingInfo_args deepCopy() {
      return new updateOfflineMeetingInfo_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectMeetingDTO = null;
    }

    public BizProjectMeetingDTO getBizProjectMeetingDTO() {
      return this.bizProjectMeetingDTO;
    }

    public updateOfflineMeetingInfo_args setBizProjectMeetingDTO(BizProjectMeetingDTO bizProjectMeetingDTO) {
      this.bizProjectMeetingDTO = bizProjectMeetingDTO;
      return this;
    }

    public void unsetBizProjectMeetingDTO() {
      this.bizProjectMeetingDTO = null;
    }

    /** Returns true if field bizProjectMeetingDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectMeetingDTO() {
      return this.bizProjectMeetingDTO != null;
    }

    public void setBizProjectMeetingDTOIsSet(boolean value) {
      if (!value) {
        this.bizProjectMeetingDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        if (value == null) {
          unsetBizProjectMeetingDTO();
        } else {
          setBizProjectMeetingDTO((BizProjectMeetingDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        return getBizProjectMeetingDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_MEETING_DTO:
        return isSetBizProjectMeetingDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOfflineMeetingInfo_args)
        return this.equals((updateOfflineMeetingInfo_args)that);
      return false;
    }

    public boolean equals(updateOfflineMeetingInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectMeetingDTO = true && this.isSetBizProjectMeetingDTO();
      boolean that_present_bizProjectMeetingDTO = true && that.isSetBizProjectMeetingDTO();
      if (this_present_bizProjectMeetingDTO || that_present_bizProjectMeetingDTO) {
        if (!(this_present_bizProjectMeetingDTO && that_present_bizProjectMeetingDTO))
          return false;
        if (!this.bizProjectMeetingDTO.equals(that.bizProjectMeetingDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectMeetingDTO = true && (isSetBizProjectMeetingDTO());
      list.add(present_bizProjectMeetingDTO);
      if (present_bizProjectMeetingDTO)
        list.add(bizProjectMeetingDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOfflineMeetingInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectMeetingDTO()).compareTo(other.isSetBizProjectMeetingDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectMeetingDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectMeetingDTO, other.bizProjectMeetingDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOfflineMeetingInfo_args(");
      boolean first = true;

      sb.append("bizProjectMeetingDTO:");
      if (this.bizProjectMeetingDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectMeetingDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectMeetingDTO != null) {
        bizProjectMeetingDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOfflineMeetingInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateOfflineMeetingInfo_argsStandardScheme getScheme() {
        return new updateOfflineMeetingInfo_argsStandardScheme();
      }
    }

    private static class updateOfflineMeetingInfo_argsStandardScheme extends StandardScheme<updateOfflineMeetingInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_MEETING_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectMeetingDTO = new BizProjectMeetingDTO();
                struct.bizProjectMeetingDTO.read(iprot);
                struct.setBizProjectMeetingDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectMeetingDTO != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_MEETING_DTO_FIELD_DESC);
          struct.bizProjectMeetingDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOfflineMeetingInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateOfflineMeetingInfo_argsTupleScheme getScheme() {
        return new updateOfflineMeetingInfo_argsTupleScheme();
      }
    }

    private static class updateOfflineMeetingInfo_argsTupleScheme extends TupleScheme<updateOfflineMeetingInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectMeetingDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectMeetingDTO()) {
          struct.bizProjectMeetingDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOfflineMeetingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectMeetingDTO = new BizProjectMeetingDTO();
          struct.bizProjectMeetingDTO.read(iprot);
          struct.setBizProjectMeetingDTOIsSet(true);
        }
      }
    }

  }

  public static class updateOfflineMeetingInfo_result implements org.apache.thrift.TBase<updateOfflineMeetingInfo_result, updateOfflineMeetingInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOfflineMeetingInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOfflineMeetingInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOfflineMeetingInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOfflineMeetingInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOfflineMeetingInfo_result.class, metaDataMap);
    }

    public updateOfflineMeetingInfo_result() {
    }

    public updateOfflineMeetingInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOfflineMeetingInfo_result(updateOfflineMeetingInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateOfflineMeetingInfo_result deepCopy() {
      return new updateOfflineMeetingInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateOfflineMeetingInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateOfflineMeetingInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOfflineMeetingInfo_result)
        return this.equals((updateOfflineMeetingInfo_result)that);
      return false;
    }

    public boolean equals(updateOfflineMeetingInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOfflineMeetingInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOfflineMeetingInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOfflineMeetingInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateOfflineMeetingInfo_resultStandardScheme getScheme() {
        return new updateOfflineMeetingInfo_resultStandardScheme();
      }
    }

    private static class updateOfflineMeetingInfo_resultStandardScheme extends StandardScheme<updateOfflineMeetingInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOfflineMeetingInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateOfflineMeetingInfo_resultTupleScheme getScheme() {
        return new updateOfflineMeetingInfo_resultTupleScheme();
      }
    }

    private static class updateOfflineMeetingInfo_resultTupleScheme extends TupleScheme<updateOfflineMeetingInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOfflineMeetingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

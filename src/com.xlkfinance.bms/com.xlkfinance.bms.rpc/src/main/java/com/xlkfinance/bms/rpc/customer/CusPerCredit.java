/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerCredit implements org.apache.thrift.TBase<CusPerCredit, CusPerCredit._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerCredit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerCredit");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CRE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("creNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REP_QUERY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repQueryDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CRE_ACC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("creAccNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CRE_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("creQuota", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_SURP_FIELD_DESC = new org.apache.thrift.protocol.TField("loanSurp", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CLEAR_ACC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("clearAccNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPEN_ACC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("openAccNum", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OTHER_ACC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("otherAccNum", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CREDIT_USED_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditUsedLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerCreditStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerCreditTupleSchemeFactory());
  }

  public int pid; // required
  public CusPerBase cusPerBase; // required
  public String creNo; // required
  public String queryDate; // required
  public String repQueryDate; // required
  public int creAccNum; // required
  public double creQuota; // required
  public double loanSurp; // required
  public int clearAccNum; // required
  public int openAccNum; // required
  public int otherAccNum; // required
  public int status; // required
  public double creditLimit; // required
  public double creditUsedLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_PER_BASE((short)2, "cusPerBase"),
    CRE_NO((short)3, "creNo"),
    QUERY_DATE((short)4, "queryDate"),
    REP_QUERY_DATE((short)5, "repQueryDate"),
    CRE_ACC_NUM((short)6, "creAccNum"),
    CRE_QUOTA((short)7, "creQuota"),
    LOAN_SURP((short)8, "loanSurp"),
    CLEAR_ACC_NUM((short)9, "clearAccNum"),
    OPEN_ACC_NUM((short)10, "openAccNum"),
    OTHER_ACC_NUM((short)11, "otherAccNum"),
    STATUS((short)12, "status"),
    CREDIT_LIMIT((short)13, "creditLimit"),
    CREDIT_USED_LIMIT((short)14, "creditUsedLimit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_PER_BASE
          return CUS_PER_BASE;
        case 3: // CRE_NO
          return CRE_NO;
        case 4: // QUERY_DATE
          return QUERY_DATE;
        case 5: // REP_QUERY_DATE
          return REP_QUERY_DATE;
        case 6: // CRE_ACC_NUM
          return CRE_ACC_NUM;
        case 7: // CRE_QUOTA
          return CRE_QUOTA;
        case 8: // LOAN_SURP
          return LOAN_SURP;
        case 9: // CLEAR_ACC_NUM
          return CLEAR_ACC_NUM;
        case 10: // OPEN_ACC_NUM
          return OPEN_ACC_NUM;
        case 11: // OTHER_ACC_NUM
          return OTHER_ACC_NUM;
        case 12: // STATUS
          return STATUS;
        case 13: // CREDIT_LIMIT
          return CREDIT_LIMIT;
        case 14: // CREDIT_USED_LIMIT
          return CREDIT_USED_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREACCNUM_ISSET_ID = 1;
  private static final int __CREQUOTA_ISSET_ID = 2;
  private static final int __LOANSURP_ISSET_ID = 3;
  private static final int __CLEARACCNUM_ISSET_ID = 4;
  private static final int __OPENACCNUM_ISSET_ID = 5;
  private static final int __OTHERACCNUM_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __CREDITLIMIT_ISSET_ID = 8;
  private static final int __CREDITUSEDLIMIT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusPerBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerBase.class)));
    tmpMap.put(_Fields.CRE_NO, new org.apache.thrift.meta_data.FieldMetaData("creNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_DATE, new org.apache.thrift.meta_data.FieldMetaData("queryDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REP_QUERY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repQueryDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRE_ACC_NUM, new org.apache.thrift.meta_data.FieldMetaData("creAccNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRE_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("creQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_SURP, new org.apache.thrift.meta_data.FieldMetaData("loanSurp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLEAR_ACC_NUM, new org.apache.thrift.meta_data.FieldMetaData("clearAccNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_ACC_NUM, new org.apache.thrift.meta_data.FieldMetaData("openAccNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OTHER_ACC_NUM, new org.apache.thrift.meta_data.FieldMetaData("otherAccNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREDIT_USED_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditUsedLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerCredit.class, metaDataMap);
  }

  public CusPerCredit() {
  }

  public CusPerCredit(
    int pid,
    CusPerBase cusPerBase,
    String creNo,
    String queryDate,
    String repQueryDate,
    int creAccNum,
    double creQuota,
    double loanSurp,
    int clearAccNum,
    int openAccNum,
    int otherAccNum,
    int status,
    double creditLimit,
    double creditUsedLimit)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusPerBase = cusPerBase;
    this.creNo = creNo;
    this.queryDate = queryDate;
    this.repQueryDate = repQueryDate;
    this.creAccNum = creAccNum;
    setCreAccNumIsSet(true);
    this.creQuota = creQuota;
    setCreQuotaIsSet(true);
    this.loanSurp = loanSurp;
    setLoanSurpIsSet(true);
    this.clearAccNum = clearAccNum;
    setClearAccNumIsSet(true);
    this.openAccNum = openAccNum;
    setOpenAccNumIsSet(true);
    this.otherAccNum = otherAccNum;
    setOtherAccNumIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    this.creditUsedLimit = creditUsedLimit;
    setCreditUsedLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerCredit(CusPerCredit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusPerBase()) {
      this.cusPerBase = new CusPerBase(other.cusPerBase);
    }
    if (other.isSetCreNo()) {
      this.creNo = other.creNo;
    }
    if (other.isSetQueryDate()) {
      this.queryDate = other.queryDate;
    }
    if (other.isSetRepQueryDate()) {
      this.repQueryDate = other.repQueryDate;
    }
    this.creAccNum = other.creAccNum;
    this.creQuota = other.creQuota;
    this.loanSurp = other.loanSurp;
    this.clearAccNum = other.clearAccNum;
    this.openAccNum = other.openAccNum;
    this.otherAccNum = other.otherAccNum;
    this.status = other.status;
    this.creditLimit = other.creditLimit;
    this.creditUsedLimit = other.creditUsedLimit;
  }

  public CusPerCredit deepCopy() {
    return new CusPerCredit(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusPerBase = null;
    this.creNo = null;
    this.queryDate = null;
    this.repQueryDate = null;
    setCreAccNumIsSet(false);
    this.creAccNum = 0;
    setCreQuotaIsSet(false);
    this.creQuota = 0.0;
    setLoanSurpIsSet(false);
    this.loanSurp = 0.0;
    setClearAccNumIsSet(false);
    this.clearAccNum = 0;
    setOpenAccNumIsSet(false);
    this.openAccNum = 0;
    setOtherAccNumIsSet(false);
    this.otherAccNum = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCreditLimitIsSet(false);
    this.creditLimit = 0.0;
    setCreditUsedLimitIsSet(false);
    this.creditUsedLimit = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerCredit setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusPerBase getCusPerBase() {
    return this.cusPerBase;
  }

  public CusPerCredit setCusPerBase(CusPerBase cusPerBase) {
    this.cusPerBase = cusPerBase;
    return this;
  }

  public void unsetCusPerBase() {
    this.cusPerBase = null;
  }

  /** Returns true if field cusPerBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerBase() {
    return this.cusPerBase != null;
  }

  public void setCusPerBaseIsSet(boolean value) {
    if (!value) {
      this.cusPerBase = null;
    }
  }

  public String getCreNo() {
    return this.creNo;
  }

  public CusPerCredit setCreNo(String creNo) {
    this.creNo = creNo;
    return this;
  }

  public void unsetCreNo() {
    this.creNo = null;
  }

  /** Returns true if field creNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCreNo() {
    return this.creNo != null;
  }

  public void setCreNoIsSet(boolean value) {
    if (!value) {
      this.creNo = null;
    }
  }

  public String getQueryDate() {
    return this.queryDate;
  }

  public CusPerCredit setQueryDate(String queryDate) {
    this.queryDate = queryDate;
    return this;
  }

  public void unsetQueryDate() {
    this.queryDate = null;
  }

  /** Returns true if field queryDate is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryDate() {
    return this.queryDate != null;
  }

  public void setQueryDateIsSet(boolean value) {
    if (!value) {
      this.queryDate = null;
    }
  }

  public String getRepQueryDate() {
    return this.repQueryDate;
  }

  public CusPerCredit setRepQueryDate(String repQueryDate) {
    this.repQueryDate = repQueryDate;
    return this;
  }

  public void unsetRepQueryDate() {
    this.repQueryDate = null;
  }

  /** Returns true if field repQueryDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepQueryDate() {
    return this.repQueryDate != null;
  }

  public void setRepQueryDateIsSet(boolean value) {
    if (!value) {
      this.repQueryDate = null;
    }
  }

  public int getCreAccNum() {
    return this.creAccNum;
  }

  public CusPerCredit setCreAccNum(int creAccNum) {
    this.creAccNum = creAccNum;
    setCreAccNumIsSet(true);
    return this;
  }

  public void unsetCreAccNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREACCNUM_ISSET_ID);
  }

  /** Returns true if field creAccNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCreAccNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CREACCNUM_ISSET_ID);
  }

  public void setCreAccNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREACCNUM_ISSET_ID, value);
  }

  public double getCreQuota() {
    return this.creQuota;
  }

  public CusPerCredit setCreQuota(double creQuota) {
    this.creQuota = creQuota;
    setCreQuotaIsSet(true);
    return this;
  }

  public void unsetCreQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREQUOTA_ISSET_ID);
  }

  /** Returns true if field creQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetCreQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __CREQUOTA_ISSET_ID);
  }

  public void setCreQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREQUOTA_ISSET_ID, value);
  }

  public double getLoanSurp() {
    return this.loanSurp;
  }

  public CusPerCredit setLoanSurp(double loanSurp) {
    this.loanSurp = loanSurp;
    setLoanSurpIsSet(true);
    return this;
  }

  public void unsetLoanSurp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANSURP_ISSET_ID);
  }

  /** Returns true if field loanSurp is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanSurp() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANSURP_ISSET_ID);
  }

  public void setLoanSurpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANSURP_ISSET_ID, value);
  }

  public int getClearAccNum() {
    return this.clearAccNum;
  }

  public CusPerCredit setClearAccNum(int clearAccNum) {
    this.clearAccNum = clearAccNum;
    setClearAccNumIsSet(true);
    return this;
  }

  public void unsetClearAccNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEARACCNUM_ISSET_ID);
  }

  /** Returns true if field clearAccNum is set (has been assigned a value) and false otherwise */
  public boolean isSetClearAccNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEARACCNUM_ISSET_ID);
  }

  public void setClearAccNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEARACCNUM_ISSET_ID, value);
  }

  public int getOpenAccNum() {
    return this.openAccNum;
  }

  public CusPerCredit setOpenAccNum(int openAccNum) {
    this.openAccNum = openAccNum;
    setOpenAccNumIsSet(true);
    return this;
  }

  public void unsetOpenAccNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENACCNUM_ISSET_ID);
  }

  /** Returns true if field openAccNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenAccNum() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENACCNUM_ISSET_ID);
  }

  public void setOpenAccNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENACCNUM_ISSET_ID, value);
  }

  public int getOtherAccNum() {
    return this.otherAccNum;
  }

  public CusPerCredit setOtherAccNum(int otherAccNum) {
    this.otherAccNum = otherAccNum;
    setOtherAccNumIsSet(true);
    return this;
  }

  public void unsetOtherAccNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERACCNUM_ISSET_ID);
  }

  /** Returns true if field otherAccNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherAccNum() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERACCNUM_ISSET_ID);
  }

  public void setOtherAccNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERACCNUM_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerCredit setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getCreditLimit() {
    return this.creditLimit;
  }

  public CusPerCredit setCreditLimit(double creditLimit) {
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    return this;
  }

  public void unsetCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  public void setCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
  }

  public double getCreditUsedLimit() {
    return this.creditUsedLimit;
  }

  public CusPerCredit setCreditUsedLimit(double creditUsedLimit) {
    this.creditUsedLimit = creditUsedLimit;
    setCreditUsedLimitIsSet(true);
    return this;
  }

  public void unsetCreditUsedLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITUSEDLIMIT_ISSET_ID);
  }

  /** Returns true if field creditUsedLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditUsedLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITUSEDLIMIT_ISSET_ID);
  }

  public void setCreditUsedLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITUSEDLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_PER_BASE:
      if (value == null) {
        unsetCusPerBase();
      } else {
        setCusPerBase((CusPerBase)value);
      }
      break;

    case CRE_NO:
      if (value == null) {
        unsetCreNo();
      } else {
        setCreNo((String)value);
      }
      break;

    case QUERY_DATE:
      if (value == null) {
        unsetQueryDate();
      } else {
        setQueryDate((String)value);
      }
      break;

    case REP_QUERY_DATE:
      if (value == null) {
        unsetRepQueryDate();
      } else {
        setRepQueryDate((String)value);
      }
      break;

    case CRE_ACC_NUM:
      if (value == null) {
        unsetCreAccNum();
      } else {
        setCreAccNum((Integer)value);
      }
      break;

    case CRE_QUOTA:
      if (value == null) {
        unsetCreQuota();
      } else {
        setCreQuota((Double)value);
      }
      break;

    case LOAN_SURP:
      if (value == null) {
        unsetLoanSurp();
      } else {
        setLoanSurp((Double)value);
      }
      break;

    case CLEAR_ACC_NUM:
      if (value == null) {
        unsetClearAccNum();
      } else {
        setClearAccNum((Integer)value);
      }
      break;

    case OPEN_ACC_NUM:
      if (value == null) {
        unsetOpenAccNum();
      } else {
        setOpenAccNum((Integer)value);
      }
      break;

    case OTHER_ACC_NUM:
      if (value == null) {
        unsetOtherAccNum();
      } else {
        setOtherAccNum((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREDIT_LIMIT:
      if (value == null) {
        unsetCreditLimit();
      } else {
        setCreditLimit((Double)value);
      }
      break;

    case CREDIT_USED_LIMIT:
      if (value == null) {
        unsetCreditUsedLimit();
      } else {
        setCreditUsedLimit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_PER_BASE:
      return getCusPerBase();

    case CRE_NO:
      return getCreNo();

    case QUERY_DATE:
      return getQueryDate();

    case REP_QUERY_DATE:
      return getRepQueryDate();

    case CRE_ACC_NUM:
      return Integer.valueOf(getCreAccNum());

    case CRE_QUOTA:
      return Double.valueOf(getCreQuota());

    case LOAN_SURP:
      return Double.valueOf(getLoanSurp());

    case CLEAR_ACC_NUM:
      return Integer.valueOf(getClearAccNum());

    case OPEN_ACC_NUM:
      return Integer.valueOf(getOpenAccNum());

    case OTHER_ACC_NUM:
      return Integer.valueOf(getOtherAccNum());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREDIT_LIMIT:
      return Double.valueOf(getCreditLimit());

    case CREDIT_USED_LIMIT:
      return Double.valueOf(getCreditUsedLimit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_PER_BASE:
      return isSetCusPerBase();
    case CRE_NO:
      return isSetCreNo();
    case QUERY_DATE:
      return isSetQueryDate();
    case REP_QUERY_DATE:
      return isSetRepQueryDate();
    case CRE_ACC_NUM:
      return isSetCreAccNum();
    case CRE_QUOTA:
      return isSetCreQuota();
    case LOAN_SURP:
      return isSetLoanSurp();
    case CLEAR_ACC_NUM:
      return isSetClearAccNum();
    case OPEN_ACC_NUM:
      return isSetOpenAccNum();
    case OTHER_ACC_NUM:
      return isSetOtherAccNum();
    case STATUS:
      return isSetStatus();
    case CREDIT_LIMIT:
      return isSetCreditLimit();
    case CREDIT_USED_LIMIT:
      return isSetCreditUsedLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerCredit)
      return this.equals((CusPerCredit)that);
    return false;
  }

  public boolean equals(CusPerCredit that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusPerBase = true && this.isSetCusPerBase();
    boolean that_present_cusPerBase = true && that.isSetCusPerBase();
    if (this_present_cusPerBase || that_present_cusPerBase) {
      if (!(this_present_cusPerBase && that_present_cusPerBase))
        return false;
      if (!this.cusPerBase.equals(that.cusPerBase))
        return false;
    }

    boolean this_present_creNo = true && this.isSetCreNo();
    boolean that_present_creNo = true && that.isSetCreNo();
    if (this_present_creNo || that_present_creNo) {
      if (!(this_present_creNo && that_present_creNo))
        return false;
      if (!this.creNo.equals(that.creNo))
        return false;
    }

    boolean this_present_queryDate = true && this.isSetQueryDate();
    boolean that_present_queryDate = true && that.isSetQueryDate();
    if (this_present_queryDate || that_present_queryDate) {
      if (!(this_present_queryDate && that_present_queryDate))
        return false;
      if (!this.queryDate.equals(that.queryDate))
        return false;
    }

    boolean this_present_repQueryDate = true && this.isSetRepQueryDate();
    boolean that_present_repQueryDate = true && that.isSetRepQueryDate();
    if (this_present_repQueryDate || that_present_repQueryDate) {
      if (!(this_present_repQueryDate && that_present_repQueryDate))
        return false;
      if (!this.repQueryDate.equals(that.repQueryDate))
        return false;
    }

    boolean this_present_creAccNum = true;
    boolean that_present_creAccNum = true;
    if (this_present_creAccNum || that_present_creAccNum) {
      if (!(this_present_creAccNum && that_present_creAccNum))
        return false;
      if (this.creAccNum != that.creAccNum)
        return false;
    }

    boolean this_present_creQuota = true;
    boolean that_present_creQuota = true;
    if (this_present_creQuota || that_present_creQuota) {
      if (!(this_present_creQuota && that_present_creQuota))
        return false;
      if (this.creQuota != that.creQuota)
        return false;
    }

    boolean this_present_loanSurp = true;
    boolean that_present_loanSurp = true;
    if (this_present_loanSurp || that_present_loanSurp) {
      if (!(this_present_loanSurp && that_present_loanSurp))
        return false;
      if (this.loanSurp != that.loanSurp)
        return false;
    }

    boolean this_present_clearAccNum = true;
    boolean that_present_clearAccNum = true;
    if (this_present_clearAccNum || that_present_clearAccNum) {
      if (!(this_present_clearAccNum && that_present_clearAccNum))
        return false;
      if (this.clearAccNum != that.clearAccNum)
        return false;
    }

    boolean this_present_openAccNum = true;
    boolean that_present_openAccNum = true;
    if (this_present_openAccNum || that_present_openAccNum) {
      if (!(this_present_openAccNum && that_present_openAccNum))
        return false;
      if (this.openAccNum != that.openAccNum)
        return false;
    }

    boolean this_present_otherAccNum = true;
    boolean that_present_otherAccNum = true;
    if (this_present_otherAccNum || that_present_otherAccNum) {
      if (!(this_present_otherAccNum && that_present_otherAccNum))
        return false;
      if (this.otherAccNum != that.otherAccNum)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_creditLimit = true;
    boolean that_present_creditLimit = true;
    if (this_present_creditLimit || that_present_creditLimit) {
      if (!(this_present_creditLimit && that_present_creditLimit))
        return false;
      if (this.creditLimit != that.creditLimit)
        return false;
    }

    boolean this_present_creditUsedLimit = true;
    boolean that_present_creditUsedLimit = true;
    if (this_present_creditUsedLimit || that_present_creditUsedLimit) {
      if (!(this_present_creditUsedLimit && that_present_creditUsedLimit))
        return false;
      if (this.creditUsedLimit != that.creditUsedLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusPerBase = true && (isSetCusPerBase());
    list.add(present_cusPerBase);
    if (present_cusPerBase)
      list.add(cusPerBase);

    boolean present_creNo = true && (isSetCreNo());
    list.add(present_creNo);
    if (present_creNo)
      list.add(creNo);

    boolean present_queryDate = true && (isSetQueryDate());
    list.add(present_queryDate);
    if (present_queryDate)
      list.add(queryDate);

    boolean present_repQueryDate = true && (isSetRepQueryDate());
    list.add(present_repQueryDate);
    if (present_repQueryDate)
      list.add(repQueryDate);

    boolean present_creAccNum = true;
    list.add(present_creAccNum);
    if (present_creAccNum)
      list.add(creAccNum);

    boolean present_creQuota = true;
    list.add(present_creQuota);
    if (present_creQuota)
      list.add(creQuota);

    boolean present_loanSurp = true;
    list.add(present_loanSurp);
    if (present_loanSurp)
      list.add(loanSurp);

    boolean present_clearAccNum = true;
    list.add(present_clearAccNum);
    if (present_clearAccNum)
      list.add(clearAccNum);

    boolean present_openAccNum = true;
    list.add(present_openAccNum);
    if (present_openAccNum)
      list.add(openAccNum);

    boolean present_otherAccNum = true;
    list.add(present_otherAccNum);
    if (present_otherAccNum)
      list.add(otherAccNum);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_creditLimit = true;
    list.add(present_creditLimit);
    if (present_creditLimit)
      list.add(creditLimit);

    boolean present_creditUsedLimit = true;
    list.add(present_creditUsedLimit);
    if (present_creditUsedLimit)
      list.add(creditUsedLimit);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerCredit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerBase()).compareTo(other.isSetCusPerBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerBase, other.cusPerBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreNo()).compareTo(other.isSetCreNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creNo, other.creNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryDate()).compareTo(other.isSetQueryDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryDate, other.queryDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepQueryDate()).compareTo(other.isSetRepQueryDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepQueryDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repQueryDate, other.repQueryDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreAccNum()).compareTo(other.isSetCreAccNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreAccNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creAccNum, other.creAccNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreQuota()).compareTo(other.isSetCreQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creQuota, other.creQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanSurp()).compareTo(other.isSetLoanSurp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanSurp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanSurp, other.loanSurp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearAccNum()).compareTo(other.isSetClearAccNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearAccNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearAccNum, other.clearAccNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenAccNum()).compareTo(other.isSetOpenAccNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenAccNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openAccNum, other.openAccNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherAccNum()).compareTo(other.isSetOtherAccNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherAccNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherAccNum, other.otherAccNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditUsedLimit()).compareTo(other.isSetCreditUsedLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditUsedLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditUsedLimit, other.creditUsedLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerCredit(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerBase:");
    if (this.cusPerBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creNo:");
    if (this.creNo == null) {
      sb.append("null");
    } else {
      sb.append(this.creNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryDate:");
    if (this.queryDate == null) {
      sb.append("null");
    } else {
      sb.append(this.queryDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repQueryDate:");
    if (this.repQueryDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repQueryDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creAccNum:");
    sb.append(this.creAccNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creQuota:");
    sb.append(this.creQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanSurp:");
    sb.append(this.loanSurp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearAccNum:");
    sb.append(this.clearAccNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openAccNum:");
    sb.append(this.openAccNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherAccNum:");
    sb.append(this.otherAccNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditLimit:");
    sb.append(this.creditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditUsedLimit:");
    sb.append(this.creditUsedLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerBase != null) {
      cusPerBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerCreditStandardSchemeFactory implements SchemeFactory {
    public CusPerCreditStandardScheme getScheme() {
      return new CusPerCreditStandardScheme();
    }
  }

  private static class CusPerCreditStandardScheme extends StandardScheme<CusPerCredit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerCredit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerBase = new CusPerBase();
              struct.cusPerBase.read(iprot);
              struct.setCusPerBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creNo = iprot.readString();
              struct.setCreNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryDate = iprot.readString();
              struct.setQueryDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REP_QUERY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repQueryDate = iprot.readString();
              struct.setRepQueryDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CRE_ACC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creAccNum = iprot.readI32();
              struct.setCreAccNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CRE_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creQuota = iprot.readDouble();
              struct.setCreQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_SURP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanSurp = iprot.readDouble();
              struct.setLoanSurpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLEAR_ACC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clearAccNum = iprot.readI32();
              struct.setClearAccNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPEN_ACC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openAccNum = iprot.readI32();
              struct.setOpenAccNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OTHER_ACC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.otherAccNum = iprot.readI32();
              struct.setOtherAccNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditLimit = iprot.readDouble();
              struct.setCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREDIT_USED_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditUsedLimit = iprot.readDouble();
              struct.setCreditUsedLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerCredit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusPerBase != null) {
        oprot.writeFieldBegin(CUS_PER_BASE_FIELD_DESC);
        struct.cusPerBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.creNo != null) {
        oprot.writeFieldBegin(CRE_NO_FIELD_DESC);
        oprot.writeString(struct.creNo);
        oprot.writeFieldEnd();
      }
      if (struct.queryDate != null) {
        oprot.writeFieldBegin(QUERY_DATE_FIELD_DESC);
        oprot.writeString(struct.queryDate);
        oprot.writeFieldEnd();
      }
      if (struct.repQueryDate != null) {
        oprot.writeFieldBegin(REP_QUERY_DATE_FIELD_DESC);
        oprot.writeString(struct.repQueryDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CRE_ACC_NUM_FIELD_DESC);
      oprot.writeI32(struct.creAccNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRE_QUOTA_FIELD_DESC);
      oprot.writeDouble(struct.creQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_SURP_FIELD_DESC);
      oprot.writeDouble(struct.loanSurp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLEAR_ACC_NUM_FIELD_DESC);
      oprot.writeI32(struct.clearAccNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_ACC_NUM_FIELD_DESC);
      oprot.writeI32(struct.openAccNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_ACC_NUM_FIELD_DESC);
      oprot.writeI32(struct.otherAccNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.creditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_USED_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.creditUsedLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerCreditTupleSchemeFactory implements SchemeFactory {
    public CusPerCreditTupleScheme getScheme() {
      return new CusPerCreditTupleScheme();
    }
  }

  private static class CusPerCreditTupleScheme extends TupleScheme<CusPerCredit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerCredit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerBase()) {
        optionals.set(1);
      }
      if (struct.isSetCreNo()) {
        optionals.set(2);
      }
      if (struct.isSetQueryDate()) {
        optionals.set(3);
      }
      if (struct.isSetRepQueryDate()) {
        optionals.set(4);
      }
      if (struct.isSetCreAccNum()) {
        optionals.set(5);
      }
      if (struct.isSetCreQuota()) {
        optionals.set(6);
      }
      if (struct.isSetLoanSurp()) {
        optionals.set(7);
      }
      if (struct.isSetClearAccNum()) {
        optionals.set(8);
      }
      if (struct.isSetOpenAccNum()) {
        optionals.set(9);
      }
      if (struct.isSetOtherAccNum()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetCreditLimit()) {
        optionals.set(12);
      }
      if (struct.isSetCreditUsedLimit()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusPerBase()) {
        struct.cusPerBase.write(oprot);
      }
      if (struct.isSetCreNo()) {
        oprot.writeString(struct.creNo);
      }
      if (struct.isSetQueryDate()) {
        oprot.writeString(struct.queryDate);
      }
      if (struct.isSetRepQueryDate()) {
        oprot.writeString(struct.repQueryDate);
      }
      if (struct.isSetCreAccNum()) {
        oprot.writeI32(struct.creAccNum);
      }
      if (struct.isSetCreQuota()) {
        oprot.writeDouble(struct.creQuota);
      }
      if (struct.isSetLoanSurp()) {
        oprot.writeDouble(struct.loanSurp);
      }
      if (struct.isSetClearAccNum()) {
        oprot.writeI32(struct.clearAccNum);
      }
      if (struct.isSetOpenAccNum()) {
        oprot.writeI32(struct.openAccNum);
      }
      if (struct.isSetOtherAccNum()) {
        oprot.writeI32(struct.otherAccNum);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreditLimit()) {
        oprot.writeDouble(struct.creditLimit);
      }
      if (struct.isSetCreditUsedLimit()) {
        oprot.writeDouble(struct.creditUsedLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerCredit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerBase = new CusPerBase();
        struct.cusPerBase.read(iprot);
        struct.setCusPerBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creNo = iprot.readString();
        struct.setCreNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryDate = iprot.readString();
        struct.setQueryDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repQueryDate = iprot.readString();
        struct.setRepQueryDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creAccNum = iprot.readI32();
        struct.setCreAccNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creQuota = iprot.readDouble();
        struct.setCreQuotaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanSurp = iprot.readDouble();
        struct.setLoanSurpIsSet(true);
      }
      if (incoming.get(8)) {
        struct.clearAccNum = iprot.readI32();
        struct.setClearAccNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.openAccNum = iprot.readI32();
        struct.setOpenAccNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.otherAccNum = iprot.readI32();
        struct.setOtherAccNumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.creditLimit = iprot.readDouble();
        struct.setCreditLimitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.creditUsedLimit = iprot.readDouble();
        struct.setCreditUsedLimitIsSet(true);
      }
    }
  }

}


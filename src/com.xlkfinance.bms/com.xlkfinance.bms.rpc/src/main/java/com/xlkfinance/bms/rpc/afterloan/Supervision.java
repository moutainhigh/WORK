/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class Supervision implements org.apache.thrift.TBase<Supervision, Supervision._Fields>, java.io.Serializable, Cloneable, Comparable<Supervision> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Supervision");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("startRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField IN_MONEY_AND_OUT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("inMoneyAndOutDttm", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CUSTYPESTR_FIELD_DESC = new org.apache.thrift.protocol.TField("custypestr", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REGULATORYUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryuser", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planBeginDt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisionTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectNumber; // required
  public String cusType; // required
  public String startRequestDttm; // required
  public String phone; // required
  public double creditAmt; // required
  public double inMoneyAndOutDttm; // required
  public String custypestr; // required
  public String regulatoryuser; // required
  public String planBeginDt; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    CUS_TYPE((short)4, "cusType"),
    START_REQUEST_DTTM((short)5, "startRequestDttm"),
    PHONE((short)6, "phone"),
    CREDIT_AMT((short)7, "creditAmt"),
    IN_MONEY_AND_OUT_DTTM((short)8, "inMoneyAndOutDttm"),
    CUSTYPESTR((short)9, "custypestr"),
    REGULATORYUSER((short)10, "regulatoryuser"),
    PLAN_BEGIN_DT((short)11, "planBeginDt"),
    REMARK((short)12, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // CUS_TYPE
          return CUS_TYPE;
        case 5: // START_REQUEST_DTTM
          return START_REQUEST_DTTM;
        case 6: // PHONE
          return PHONE;
        case 7: // CREDIT_AMT
          return CREDIT_AMT;
        case 8: // IN_MONEY_AND_OUT_DTTM
          return IN_MONEY_AND_OUT_DTTM;
        case 9: // CUSTYPESTR
          return CUSTYPESTR;
        case 10: // REGULATORYUSER
          return REGULATORYUSER;
        case 11: // PLAN_BEGIN_DT
          return PLAN_BEGIN_DT;
        case 12: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREDITAMT_ISSET_ID = 1;
  private static final int __INMONEYANDOUTDTTM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("startRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IN_MONEY_AND_OUT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("inMoneyAndOutDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUSTYPESTR, new org.apache.thrift.meta_data.FieldMetaData("custypestr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORYUSER, new org.apache.thrift.meta_data.FieldMetaData("regulatoryuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("planBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Supervision.class, metaDataMap);
  }

  public Supervision() {
  }

  public Supervision(
    int pid,
    String projectName,
    String projectNumber,
    String cusType,
    String startRequestDttm,
    String phone,
    double creditAmt,
    double inMoneyAndOutDttm,
    String custypestr,
    String regulatoryuser,
    String planBeginDt,
    String remark)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.cusType = cusType;
    this.startRequestDttm = startRequestDttm;
    this.phone = phone;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.inMoneyAndOutDttm = inMoneyAndOutDttm;
    setInMoneyAndOutDttmIsSet(true);
    this.custypestr = custypestr;
    this.regulatoryuser = regulatoryuser;
    this.planBeginDt = planBeginDt;
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Supervision(Supervision other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetStartRequestDttm()) {
      this.startRequestDttm = other.startRequestDttm;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    this.creditAmt = other.creditAmt;
    this.inMoneyAndOutDttm = other.inMoneyAndOutDttm;
    if (other.isSetCustypestr()) {
      this.custypestr = other.custypestr;
    }
    if (other.isSetRegulatoryuser()) {
      this.regulatoryuser = other.regulatoryuser;
    }
    if (other.isSetPlanBeginDt()) {
      this.planBeginDt = other.planBeginDt;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public Supervision deepCopy() {
    return new Supervision(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.cusType = null;
    this.startRequestDttm = null;
    this.phone = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setInMoneyAndOutDttmIsSet(false);
    this.inMoneyAndOutDttm = 0.0;
    this.custypestr = null;
    this.regulatoryuser = null;
    this.planBeginDt = null;
    this.remark = null;
  }

  public int getPid() {
    return this.pid;
  }

  public Supervision setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public Supervision setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public Supervision setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public Supervision setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getStartRequestDttm() {
    return this.startRequestDttm;
  }

  public Supervision setStartRequestDttm(String startRequestDttm) {
    this.startRequestDttm = startRequestDttm;
    return this;
  }

  public void unsetStartRequestDttm() {
    this.startRequestDttm = null;
  }

  /** Returns true if field startRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRequestDttm() {
    return this.startRequestDttm != null;
  }

  public void setStartRequestDttmIsSet(boolean value) {
    if (!value) {
      this.startRequestDttm = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public Supervision setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public Supervision setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getInMoneyAndOutDttm() {
    return this.inMoneyAndOutDttm;
  }

  public Supervision setInMoneyAndOutDttm(double inMoneyAndOutDttm) {
    this.inMoneyAndOutDttm = inMoneyAndOutDttm;
    setInMoneyAndOutDttmIsSet(true);
    return this;
  }

  public void unsetInMoneyAndOutDttm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INMONEYANDOUTDTTM_ISSET_ID);
  }

  /** Returns true if field inMoneyAndOutDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetInMoneyAndOutDttm() {
    return EncodingUtils.testBit(__isset_bitfield, __INMONEYANDOUTDTTM_ISSET_ID);
  }

  public void setInMoneyAndOutDttmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INMONEYANDOUTDTTM_ISSET_ID, value);
  }

  public String getCustypestr() {
    return this.custypestr;
  }

  public Supervision setCustypestr(String custypestr) {
    this.custypestr = custypestr;
    return this;
  }

  public void unsetCustypestr() {
    this.custypestr = null;
  }

  /** Returns true if field custypestr is set (has been assigned a value) and false otherwise */
  public boolean isSetCustypestr() {
    return this.custypestr != null;
  }

  public void setCustypestrIsSet(boolean value) {
    if (!value) {
      this.custypestr = null;
    }
  }

  public String getRegulatoryuser() {
    return this.regulatoryuser;
  }

  public Supervision setRegulatoryuser(String regulatoryuser) {
    this.regulatoryuser = regulatoryuser;
    return this;
  }

  public void unsetRegulatoryuser() {
    this.regulatoryuser = null;
  }

  /** Returns true if field regulatoryuser is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryuser() {
    return this.regulatoryuser != null;
  }

  public void setRegulatoryuserIsSet(boolean value) {
    if (!value) {
      this.regulatoryuser = null;
    }
  }

  public String getPlanBeginDt() {
    return this.planBeginDt;
  }

  public Supervision setPlanBeginDt(String planBeginDt) {
    this.planBeginDt = planBeginDt;
    return this;
  }

  public void unsetPlanBeginDt() {
    this.planBeginDt = null;
  }

  /** Returns true if field planBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanBeginDt() {
    return this.planBeginDt != null;
  }

  public void setPlanBeginDtIsSet(boolean value) {
    if (!value) {
      this.planBeginDt = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public Supervision setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case START_REQUEST_DTTM:
      if (value == null) {
        unsetStartRequestDttm();
      } else {
        setStartRequestDttm((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case IN_MONEY_AND_OUT_DTTM:
      if (value == null) {
        unsetInMoneyAndOutDttm();
      } else {
        setInMoneyAndOutDttm((Double)value);
      }
      break;

    case CUSTYPESTR:
      if (value == null) {
        unsetCustypestr();
      } else {
        setCustypestr((String)value);
      }
      break;

    case REGULATORYUSER:
      if (value == null) {
        unsetRegulatoryuser();
      } else {
        setRegulatoryuser((String)value);
      }
      break;

    case PLAN_BEGIN_DT:
      if (value == null) {
        unsetPlanBeginDt();
      } else {
        setPlanBeginDt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUS_TYPE:
      return getCusType();

    case START_REQUEST_DTTM:
      return getStartRequestDttm();

    case PHONE:
      return getPhone();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case IN_MONEY_AND_OUT_DTTM:
      return Double.valueOf(getInMoneyAndOutDttm());

    case CUSTYPESTR:
      return getCustypestr();

    case REGULATORYUSER:
      return getRegulatoryuser();

    case PLAN_BEGIN_DT:
      return getPlanBeginDt();

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUS_TYPE:
      return isSetCusType();
    case START_REQUEST_DTTM:
      return isSetStartRequestDttm();
    case PHONE:
      return isSetPhone();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case IN_MONEY_AND_OUT_DTTM:
      return isSetInMoneyAndOutDttm();
    case CUSTYPESTR:
      return isSetCustypestr();
    case REGULATORYUSER:
      return isSetRegulatoryuser();
    case PLAN_BEGIN_DT:
      return isSetPlanBeginDt();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Supervision)
      return this.equals((Supervision)that);
    return false;
  }

  public boolean equals(Supervision that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_startRequestDttm = true && this.isSetStartRequestDttm();
    boolean that_present_startRequestDttm = true && that.isSetStartRequestDttm();
    if (this_present_startRequestDttm || that_present_startRequestDttm) {
      if (!(this_present_startRequestDttm && that_present_startRequestDttm))
        return false;
      if (!this.startRequestDttm.equals(that.startRequestDttm))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_inMoneyAndOutDttm = true;
    boolean that_present_inMoneyAndOutDttm = true;
    if (this_present_inMoneyAndOutDttm || that_present_inMoneyAndOutDttm) {
      if (!(this_present_inMoneyAndOutDttm && that_present_inMoneyAndOutDttm))
        return false;
      if (this.inMoneyAndOutDttm != that.inMoneyAndOutDttm)
        return false;
    }

    boolean this_present_custypestr = true && this.isSetCustypestr();
    boolean that_present_custypestr = true && that.isSetCustypestr();
    if (this_present_custypestr || that_present_custypestr) {
      if (!(this_present_custypestr && that_present_custypestr))
        return false;
      if (!this.custypestr.equals(that.custypestr))
        return false;
    }

    boolean this_present_regulatoryuser = true && this.isSetRegulatoryuser();
    boolean that_present_regulatoryuser = true && that.isSetRegulatoryuser();
    if (this_present_regulatoryuser || that_present_regulatoryuser) {
      if (!(this_present_regulatoryuser && that_present_regulatoryuser))
        return false;
      if (!this.regulatoryuser.equals(that.regulatoryuser))
        return false;
    }

    boolean this_present_planBeginDt = true && this.isSetPlanBeginDt();
    boolean that_present_planBeginDt = true && that.isSetPlanBeginDt();
    if (this_present_planBeginDt || that_present_planBeginDt) {
      if (!(this_present_planBeginDt && that_present_planBeginDt))
        return false;
      if (!this.planBeginDt.equals(that.planBeginDt))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_startRequestDttm = true && (isSetStartRequestDttm());
    list.add(present_startRequestDttm);
    if (present_startRequestDttm)
      list.add(startRequestDttm);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_inMoneyAndOutDttm = true;
    list.add(present_inMoneyAndOutDttm);
    if (present_inMoneyAndOutDttm)
      list.add(inMoneyAndOutDttm);

    boolean present_custypestr = true && (isSetCustypestr());
    list.add(present_custypestr);
    if (present_custypestr)
      list.add(custypestr);

    boolean present_regulatoryuser = true && (isSetRegulatoryuser());
    list.add(present_regulatoryuser);
    if (present_regulatoryuser)
      list.add(regulatoryuser);

    boolean present_planBeginDt = true && (isSetPlanBeginDt());
    list.add(present_planBeginDt);
    if (present_planBeginDt)
      list.add(planBeginDt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    return list.hashCode();
  }

  @Override
  public int compareTo(Supervision other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartRequestDttm()).compareTo(other.isSetStartRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRequestDttm, other.startRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInMoneyAndOutDttm()).compareTo(other.isSetInMoneyAndOutDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInMoneyAndOutDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMoneyAndOutDttm, other.inMoneyAndOutDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustypestr()).compareTo(other.isSetCustypestr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustypestr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custypestr, other.custypestr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryuser()).compareTo(other.isSetRegulatoryuser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryuser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryuser, other.regulatoryuser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanBeginDt()).compareTo(other.isSetPlanBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planBeginDt, other.planBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Supervision(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startRequestDttm:");
    if (this.startRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.startRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inMoneyAndOutDttm:");
    sb.append(this.inMoneyAndOutDttm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("custypestr:");
    if (this.custypestr == null) {
      sb.append("null");
    } else {
      sb.append(this.custypestr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryuser:");
    if (this.regulatoryuser == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryuser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planBeginDt:");
    if (this.planBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisionStandardSchemeFactory implements SchemeFactory {
    public SupervisionStandardScheme getScheme() {
      return new SupervisionStandardScheme();
    }
  }

  private static class SupervisionStandardScheme extends StandardScheme<Supervision> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Supervision struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startRequestDttm = iprot.readString();
              struct.setStartRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IN_MONEY_AND_OUT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inMoneyAndOutDttm = iprot.readDouble();
              struct.setInMoneyAndOutDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUSTYPESTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custypestr = iprot.readString();
              struct.setCustypestrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGULATORYUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryuser = iprot.readString();
              struct.setRegulatoryuserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planBeginDt = iprot.readString();
              struct.setPlanBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Supervision struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.startRequestDttm != null) {
        oprot.writeFieldBegin(START_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.startRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_MONEY_AND_OUT_DTTM_FIELD_DESC);
      oprot.writeDouble(struct.inMoneyAndOutDttm);
      oprot.writeFieldEnd();
      if (struct.custypestr != null) {
        oprot.writeFieldBegin(CUSTYPESTR_FIELD_DESC);
        oprot.writeString(struct.custypestr);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryuser != null) {
        oprot.writeFieldBegin(REGULATORYUSER_FIELD_DESC);
        oprot.writeString(struct.regulatoryuser);
        oprot.writeFieldEnd();
      }
      if (struct.planBeginDt != null) {
        oprot.writeFieldBegin(PLAN_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.planBeginDt);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisionTupleSchemeFactory implements SchemeFactory {
    public SupervisionTupleScheme getScheme() {
      return new SupervisionTupleScheme();
    }
  }

  private static class SupervisionTupleScheme extends TupleScheme<Supervision> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Supervision struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetStartRequestDttm()) {
        optionals.set(4);
      }
      if (struct.isSetPhone()) {
        optionals.set(5);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(6);
      }
      if (struct.isSetInMoneyAndOutDttm()) {
        optionals.set(7);
      }
      if (struct.isSetCustypestr()) {
        optionals.set(8);
      }
      if (struct.isSetRegulatoryuser()) {
        optionals.set(9);
      }
      if (struct.isSetPlanBeginDt()) {
        optionals.set(10);
      }
      if (struct.isSetRemark()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetStartRequestDttm()) {
        oprot.writeString(struct.startRequestDttm);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetInMoneyAndOutDttm()) {
        oprot.writeDouble(struct.inMoneyAndOutDttm);
      }
      if (struct.isSetCustypestr()) {
        oprot.writeString(struct.custypestr);
      }
      if (struct.isSetRegulatoryuser()) {
        oprot.writeString(struct.regulatoryuser);
      }
      if (struct.isSetPlanBeginDt()) {
        oprot.writeString(struct.planBeginDt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Supervision struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startRequestDttm = iprot.readString();
        struct.setStartRequestDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.inMoneyAndOutDttm = iprot.readDouble();
        struct.setInMoneyAndOutDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.custypestr = iprot.readString();
        struct.setCustypestrIsSet(true);
      }
      if (incoming.get(9)) {
        struct.regulatoryuser = iprot.readString();
        struct.setRegulatoryuserIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planBeginDt = iprot.readString();
        struct.setPlanBeginDtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}


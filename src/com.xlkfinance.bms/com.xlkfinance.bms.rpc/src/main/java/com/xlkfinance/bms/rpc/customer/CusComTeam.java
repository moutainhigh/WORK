/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComTeam implements org.apache.thrift.TBase<CusComTeam, CusComTeam._Fields>, java.io.Serializable, Cloneable, Comparable<CusComTeam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComTeam");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GRA_SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("graSchool", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WORK_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("workUnit", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DUTY_FIELD_DESC = new org.apache.thrift.protocol.TField("duty", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DUTY_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("dutyYear", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField BOARD_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("boardMember", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WORK_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("workYear", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SKILL_OCC_FIELD_DESC = new org.apache.thrift.protocol.TField("skillOcc", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TRADE_SUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSuffer", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MAN_SUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("manSuffer", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FIXED_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedPhone", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField FAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fax", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComTeamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComTeamTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String name; // required
  public int sex; // required
  public int certType; // required
  public String certNo; // required
  public int age; // required
  public int education; // required
  public String graSchool; // required
  public String workUnit; // required
  public String duty; // required
  public int dutyYear; // required
  public int boardMember; // required
  public int workYear; // required
  public int skillOcc; // required
  public String tradeSuffer; // required
  public String manSuffer; // required
  public String record; // required
  public String remark; // required
  public String fixedPhone; // required
  public String fax; // required
  public String telephone; // required
  public int status; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    NAME((short)4, "name"),
    SEX((short)5, "sex"),
    CERT_TYPE((short)6, "certType"),
    CERT_NO((short)7, "certNo"),
    AGE((short)8, "age"),
    EDUCATION((short)9, "education"),
    GRA_SCHOOL((short)10, "graSchool"),
    WORK_UNIT((short)11, "workUnit"),
    DUTY((short)12, "duty"),
    DUTY_YEAR((short)13, "dutyYear"),
    BOARD_MEMBER((short)14, "boardMember"),
    WORK_YEAR((short)15, "workYear"),
    SKILL_OCC((short)16, "skillOcc"),
    TRADE_SUFFER((short)17, "tradeSuffer"),
    MAN_SUFFER((short)18, "manSuffer"),
    RECORD((short)19, "record"),
    REMARK((short)20, "remark"),
    FIXED_PHONE((short)21, "fixedPhone"),
    FAX((short)22, "fax"),
    TELEPHONE((short)3, "telephone"),
    STATUS((short)23, "status"),
    PAGE((short)24, "page"),
    ROWS((short)25, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 4: // NAME
          return NAME;
        case 5: // SEX
          return SEX;
        case 6: // CERT_TYPE
          return CERT_TYPE;
        case 7: // CERT_NO
          return CERT_NO;
        case 8: // AGE
          return AGE;
        case 9: // EDUCATION
          return EDUCATION;
        case 10: // GRA_SCHOOL
          return GRA_SCHOOL;
        case 11: // WORK_UNIT
          return WORK_UNIT;
        case 12: // DUTY
          return DUTY;
        case 13: // DUTY_YEAR
          return DUTY_YEAR;
        case 14: // BOARD_MEMBER
          return BOARD_MEMBER;
        case 15: // WORK_YEAR
          return WORK_YEAR;
        case 16: // SKILL_OCC
          return SKILL_OCC;
        case 17: // TRADE_SUFFER
          return TRADE_SUFFER;
        case 18: // MAN_SUFFER
          return MAN_SUFFER;
        case 19: // RECORD
          return RECORD;
        case 20: // REMARK
          return REMARK;
        case 21: // FIXED_PHONE
          return FIXED_PHONE;
        case 22: // FAX
          return FAX;
        case 3: // TELEPHONE
          return TELEPHONE;
        case 23: // STATUS
          return STATUS;
        case 24: // PAGE
          return PAGE;
        case 25: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __CERTTYPE_ISSET_ID = 2;
  private static final int __AGE_ISSET_ID = 3;
  private static final int __EDUCATION_ISSET_ID = 4;
  private static final int __DUTYYEAR_ISSET_ID = 5;
  private static final int __BOARDMEMBER_ISSET_ID = 6;
  private static final int __WORKYEAR_ISSET_ID = 7;
  private static final int __SKILLOCC_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __PAGE_ISSET_ID = 10;
  private static final int __ROWS_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_NO, new org.apache.thrift.meta_data.FieldMetaData("certNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRA_SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("graSchool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_UNIT, new org.apache.thrift.meta_data.FieldMetaData("workUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY, new org.apache.thrift.meta_data.FieldMetaData("duty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY_YEAR, new org.apache.thrift.meta_data.FieldMetaData("dutyYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("boardMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORK_YEAR, new org.apache.thrift.meta_data.FieldMetaData("workYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKILL_OCC, new org.apache.thrift.meta_data.FieldMetaData("skillOcc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_SUFFER, new org.apache.thrift.meta_data.FieldMetaData("tradeSuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAN_SUFFER, new org.apache.thrift.meta_data.FieldMetaData("manSuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIXED_PHONE, new org.apache.thrift.meta_data.FieldMetaData("fixedPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAX, new org.apache.thrift.meta_data.FieldMetaData("fax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComTeam.class, metaDataMap);
  }

  public CusComTeam() {
  }

  public CusComTeam(
    int pid,
    CusComBase cusComBase,
    String name,
    int sex,
    int certType,
    String certNo,
    int age,
    int education,
    String graSchool,
    String workUnit,
    String duty,
    int dutyYear,
    int boardMember,
    int workYear,
    int skillOcc,
    String tradeSuffer,
    String manSuffer,
    String record,
    String remark,
    String fixedPhone,
    String fax,
    String telephone,
    int status,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.name = name;
    this.sex = sex;
    setSexIsSet(true);
    this.certType = certType;
    setCertTypeIsSet(true);
    this.certNo = certNo;
    this.age = age;
    setAgeIsSet(true);
    this.education = education;
    setEducationIsSet(true);
    this.graSchool = graSchool;
    this.workUnit = workUnit;
    this.duty = duty;
    this.dutyYear = dutyYear;
    setDutyYearIsSet(true);
    this.boardMember = boardMember;
    setBoardMemberIsSet(true);
    this.workYear = workYear;
    setWorkYearIsSet(true);
    this.skillOcc = skillOcc;
    setSkillOccIsSet(true);
    this.tradeSuffer = tradeSuffer;
    this.manSuffer = manSuffer;
    this.record = record;
    this.remark = remark;
    this.fixedPhone = fixedPhone;
    this.fax = fax;
    this.telephone = telephone;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComTeam(CusComTeam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.sex = other.sex;
    this.certType = other.certType;
    if (other.isSetCertNo()) {
      this.certNo = other.certNo;
    }
    this.age = other.age;
    this.education = other.education;
    if (other.isSetGraSchool()) {
      this.graSchool = other.graSchool;
    }
    if (other.isSetWorkUnit()) {
      this.workUnit = other.workUnit;
    }
    if (other.isSetDuty()) {
      this.duty = other.duty;
    }
    this.dutyYear = other.dutyYear;
    this.boardMember = other.boardMember;
    this.workYear = other.workYear;
    this.skillOcc = other.skillOcc;
    if (other.isSetTradeSuffer()) {
      this.tradeSuffer = other.tradeSuffer;
    }
    if (other.isSetManSuffer()) {
      this.manSuffer = other.manSuffer;
    }
    if (other.isSetRecord()) {
      this.record = other.record;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetFixedPhone()) {
      this.fixedPhone = other.fixedPhone;
    }
    if (other.isSetFax()) {
      this.fax = other.fax;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusComTeam deepCopy() {
    return new CusComTeam(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.name = null;
    setSexIsSet(false);
    this.sex = 0;
    setCertTypeIsSet(false);
    this.certType = 0;
    this.certNo = null;
    setAgeIsSet(false);
    this.age = 0;
    setEducationIsSet(false);
    this.education = 0;
    this.graSchool = null;
    this.workUnit = null;
    this.duty = null;
    setDutyYearIsSet(false);
    this.dutyYear = 0;
    setBoardMemberIsSet(false);
    this.boardMember = 0;
    setWorkYearIsSet(false);
    this.workYear = 0;
    setSkillOccIsSet(false);
    this.skillOcc = 0;
    this.tradeSuffer = null;
    this.manSuffer = null;
    this.record = null;
    this.remark = null;
    this.fixedPhone = null;
    this.fax = null;
    this.telephone = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComTeam setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComTeam setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public CusComTeam setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public CusComTeam setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getCertType() {
    return this.certType;
  }

  public CusComTeam setCertType(int certType) {
    this.certType = certType;
    setCertTypeIsSet(true);
    return this;
  }

  public void unsetCertType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return EncodingUtils.testBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  public void setCertTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CERTTYPE_ISSET_ID, value);
  }

  public String getCertNo() {
    return this.certNo;
  }

  public CusComTeam setCertNo(String certNo) {
    this.certNo = certNo;
    return this;
  }

  public void unsetCertNo() {
    this.certNo = null;
  }

  /** Returns true if field certNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNo() {
    return this.certNo != null;
  }

  public void setCertNoIsSet(boolean value) {
    if (!value) {
      this.certNo = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public CusComTeam setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getEducation() {
    return this.education;
  }

  public CusComTeam setEducation(int education) {
    this.education = education;
    setEducationIsSet(true);
    return this;
  }

  public void unsetEducation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDUCATION_ISSET_ID);
  }

  /** Returns true if field education is set (has been assigned a value) and false otherwise */
  public boolean isSetEducation() {
    return EncodingUtils.testBit(__isset_bitfield, __EDUCATION_ISSET_ID);
  }

  public void setEducationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDUCATION_ISSET_ID, value);
  }

  public String getGraSchool() {
    return this.graSchool;
  }

  public CusComTeam setGraSchool(String graSchool) {
    this.graSchool = graSchool;
    return this;
  }

  public void unsetGraSchool() {
    this.graSchool = null;
  }

  /** Returns true if field graSchool is set (has been assigned a value) and false otherwise */
  public boolean isSetGraSchool() {
    return this.graSchool != null;
  }

  public void setGraSchoolIsSet(boolean value) {
    if (!value) {
      this.graSchool = null;
    }
  }

  public String getWorkUnit() {
    return this.workUnit;
  }

  public CusComTeam setWorkUnit(String workUnit) {
    this.workUnit = workUnit;
    return this;
  }

  public void unsetWorkUnit() {
    this.workUnit = null;
  }

  /** Returns true if field workUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkUnit() {
    return this.workUnit != null;
  }

  public void setWorkUnitIsSet(boolean value) {
    if (!value) {
      this.workUnit = null;
    }
  }

  public String getDuty() {
    return this.duty;
  }

  public CusComTeam setDuty(String duty) {
    this.duty = duty;
    return this;
  }

  public void unsetDuty() {
    this.duty = null;
  }

  /** Returns true if field duty is set (has been assigned a value) and false otherwise */
  public boolean isSetDuty() {
    return this.duty != null;
  }

  public void setDutyIsSet(boolean value) {
    if (!value) {
      this.duty = null;
    }
  }

  public int getDutyYear() {
    return this.dutyYear;
  }

  public CusComTeam setDutyYear(int dutyYear) {
    this.dutyYear = dutyYear;
    setDutyYearIsSet(true);
    return this;
  }

  public void unsetDutyYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUTYYEAR_ISSET_ID);
  }

  /** Returns true if field dutyYear is set (has been assigned a value) and false otherwise */
  public boolean isSetDutyYear() {
    return EncodingUtils.testBit(__isset_bitfield, __DUTYYEAR_ISSET_ID);
  }

  public void setDutyYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUTYYEAR_ISSET_ID, value);
  }

  public int getBoardMember() {
    return this.boardMember;
  }

  public CusComTeam setBoardMember(int boardMember) {
    this.boardMember = boardMember;
    setBoardMemberIsSet(true);
    return this;
  }

  public void unsetBoardMember() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID);
  }

  /** Returns true if field boardMember is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardMember() {
    return EncodingUtils.testBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID);
  }

  public void setBoardMemberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID, value);
  }

  public int getWorkYear() {
    return this.workYear;
  }

  public CusComTeam setWorkYear(int workYear) {
    this.workYear = workYear;
    setWorkYearIsSet(true);
    return this;
  }

  public void unsetWorkYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKYEAR_ISSET_ID);
  }

  /** Returns true if field workYear is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkYear() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKYEAR_ISSET_ID);
  }

  public void setWorkYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKYEAR_ISSET_ID, value);
  }

  public int getSkillOcc() {
    return this.skillOcc;
  }

  public CusComTeam setSkillOcc(int skillOcc) {
    this.skillOcc = skillOcc;
    setSkillOccIsSet(true);
    return this;
  }

  public void unsetSkillOcc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKILLOCC_ISSET_ID);
  }

  /** Returns true if field skillOcc is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillOcc() {
    return EncodingUtils.testBit(__isset_bitfield, __SKILLOCC_ISSET_ID);
  }

  public void setSkillOccIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKILLOCC_ISSET_ID, value);
  }

  public String getTradeSuffer() {
    return this.tradeSuffer;
  }

  public CusComTeam setTradeSuffer(String tradeSuffer) {
    this.tradeSuffer = tradeSuffer;
    return this;
  }

  public void unsetTradeSuffer() {
    this.tradeSuffer = null;
  }

  /** Returns true if field tradeSuffer is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSuffer() {
    return this.tradeSuffer != null;
  }

  public void setTradeSufferIsSet(boolean value) {
    if (!value) {
      this.tradeSuffer = null;
    }
  }

  public String getManSuffer() {
    return this.manSuffer;
  }

  public CusComTeam setManSuffer(String manSuffer) {
    this.manSuffer = manSuffer;
    return this;
  }

  public void unsetManSuffer() {
    this.manSuffer = null;
  }

  /** Returns true if field manSuffer is set (has been assigned a value) and false otherwise */
  public boolean isSetManSuffer() {
    return this.manSuffer != null;
  }

  public void setManSufferIsSet(boolean value) {
    if (!value) {
      this.manSuffer = null;
    }
  }

  public String getRecord() {
    return this.record;
  }

  public CusComTeam setRecord(String record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComTeam setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getFixedPhone() {
    return this.fixedPhone;
  }

  public CusComTeam setFixedPhone(String fixedPhone) {
    this.fixedPhone = fixedPhone;
    return this;
  }

  public void unsetFixedPhone() {
    this.fixedPhone = null;
  }

  /** Returns true if field fixedPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedPhone() {
    return this.fixedPhone != null;
  }

  public void setFixedPhoneIsSet(boolean value) {
    if (!value) {
      this.fixedPhone = null;
    }
  }

  public String getFax() {
    return this.fax;
  }

  public CusComTeam setFax(String fax) {
    this.fax = fax;
    return this;
  }

  public void unsetFax() {
    this.fax = null;
  }

  /** Returns true if field fax is set (has been assigned a value) and false otherwise */
  public boolean isSetFax() {
    return this.fax != null;
  }

  public void setFaxIsSet(boolean value) {
    if (!value) {
      this.fax = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CusComTeam setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComTeam setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusComTeam setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComTeam setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((Integer)value);
      }
      break;

    case CERT_NO:
      if (value == null) {
        unsetCertNo();
      } else {
        setCertNo((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case EDUCATION:
      if (value == null) {
        unsetEducation();
      } else {
        setEducation((Integer)value);
      }
      break;

    case GRA_SCHOOL:
      if (value == null) {
        unsetGraSchool();
      } else {
        setGraSchool((String)value);
      }
      break;

    case WORK_UNIT:
      if (value == null) {
        unsetWorkUnit();
      } else {
        setWorkUnit((String)value);
      }
      break;

    case DUTY:
      if (value == null) {
        unsetDuty();
      } else {
        setDuty((String)value);
      }
      break;

    case DUTY_YEAR:
      if (value == null) {
        unsetDutyYear();
      } else {
        setDutyYear((Integer)value);
      }
      break;

    case BOARD_MEMBER:
      if (value == null) {
        unsetBoardMember();
      } else {
        setBoardMember((Integer)value);
      }
      break;

    case WORK_YEAR:
      if (value == null) {
        unsetWorkYear();
      } else {
        setWorkYear((Integer)value);
      }
      break;

    case SKILL_OCC:
      if (value == null) {
        unsetSkillOcc();
      } else {
        setSkillOcc((Integer)value);
      }
      break;

    case TRADE_SUFFER:
      if (value == null) {
        unsetTradeSuffer();
      } else {
        setTradeSuffer((String)value);
      }
      break;

    case MAN_SUFFER:
      if (value == null) {
        unsetManSuffer();
      } else {
        setManSuffer((String)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case FIXED_PHONE:
      if (value == null) {
        unsetFixedPhone();
      } else {
        setFixedPhone((String)value);
      }
      break;

    case FAX:
      if (value == null) {
        unsetFax();
      } else {
        setFax((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case NAME:
      return getName();

    case SEX:
      return Integer.valueOf(getSex());

    case CERT_TYPE:
      return Integer.valueOf(getCertType());

    case CERT_NO:
      return getCertNo();

    case AGE:
      return Integer.valueOf(getAge());

    case EDUCATION:
      return Integer.valueOf(getEducation());

    case GRA_SCHOOL:
      return getGraSchool();

    case WORK_UNIT:
      return getWorkUnit();

    case DUTY:
      return getDuty();

    case DUTY_YEAR:
      return Integer.valueOf(getDutyYear());

    case BOARD_MEMBER:
      return Integer.valueOf(getBoardMember());

    case WORK_YEAR:
      return Integer.valueOf(getWorkYear());

    case SKILL_OCC:
      return Integer.valueOf(getSkillOcc());

    case TRADE_SUFFER:
      return getTradeSuffer();

    case MAN_SUFFER:
      return getManSuffer();

    case RECORD:
      return getRecord();

    case REMARK:
      return getRemark();

    case FIXED_PHONE:
      return getFixedPhone();

    case FAX:
      return getFax();

    case TELEPHONE:
      return getTelephone();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case CERT_TYPE:
      return isSetCertType();
    case CERT_NO:
      return isSetCertNo();
    case AGE:
      return isSetAge();
    case EDUCATION:
      return isSetEducation();
    case GRA_SCHOOL:
      return isSetGraSchool();
    case WORK_UNIT:
      return isSetWorkUnit();
    case DUTY:
      return isSetDuty();
    case DUTY_YEAR:
      return isSetDutyYear();
    case BOARD_MEMBER:
      return isSetBoardMember();
    case WORK_YEAR:
      return isSetWorkYear();
    case SKILL_OCC:
      return isSetSkillOcc();
    case TRADE_SUFFER:
      return isSetTradeSuffer();
    case MAN_SUFFER:
      return isSetManSuffer();
    case RECORD:
      return isSetRecord();
    case REMARK:
      return isSetRemark();
    case FIXED_PHONE:
      return isSetFixedPhone();
    case FAX:
      return isSetFax();
    case TELEPHONE:
      return isSetTelephone();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComTeam)
      return this.equals((CusComTeam)that);
    return false;
  }

  public boolean equals(CusComTeam that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_certType = true;
    boolean that_present_certType = true;
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (this.certType != that.certType)
        return false;
    }

    boolean this_present_certNo = true && this.isSetCertNo();
    boolean that_present_certNo = true && that.isSetCertNo();
    if (this_present_certNo || that_present_certNo) {
      if (!(this_present_certNo && that_present_certNo))
        return false;
      if (!this.certNo.equals(that.certNo))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_education = true;
    boolean that_present_education = true;
    if (this_present_education || that_present_education) {
      if (!(this_present_education && that_present_education))
        return false;
      if (this.education != that.education)
        return false;
    }

    boolean this_present_graSchool = true && this.isSetGraSchool();
    boolean that_present_graSchool = true && that.isSetGraSchool();
    if (this_present_graSchool || that_present_graSchool) {
      if (!(this_present_graSchool && that_present_graSchool))
        return false;
      if (!this.graSchool.equals(that.graSchool))
        return false;
    }

    boolean this_present_workUnit = true && this.isSetWorkUnit();
    boolean that_present_workUnit = true && that.isSetWorkUnit();
    if (this_present_workUnit || that_present_workUnit) {
      if (!(this_present_workUnit && that_present_workUnit))
        return false;
      if (!this.workUnit.equals(that.workUnit))
        return false;
    }

    boolean this_present_duty = true && this.isSetDuty();
    boolean that_present_duty = true && that.isSetDuty();
    if (this_present_duty || that_present_duty) {
      if (!(this_present_duty && that_present_duty))
        return false;
      if (!this.duty.equals(that.duty))
        return false;
    }

    boolean this_present_dutyYear = true;
    boolean that_present_dutyYear = true;
    if (this_present_dutyYear || that_present_dutyYear) {
      if (!(this_present_dutyYear && that_present_dutyYear))
        return false;
      if (this.dutyYear != that.dutyYear)
        return false;
    }

    boolean this_present_boardMember = true;
    boolean that_present_boardMember = true;
    if (this_present_boardMember || that_present_boardMember) {
      if (!(this_present_boardMember && that_present_boardMember))
        return false;
      if (this.boardMember != that.boardMember)
        return false;
    }

    boolean this_present_workYear = true;
    boolean that_present_workYear = true;
    if (this_present_workYear || that_present_workYear) {
      if (!(this_present_workYear && that_present_workYear))
        return false;
      if (this.workYear != that.workYear)
        return false;
    }

    boolean this_present_skillOcc = true;
    boolean that_present_skillOcc = true;
    if (this_present_skillOcc || that_present_skillOcc) {
      if (!(this_present_skillOcc && that_present_skillOcc))
        return false;
      if (this.skillOcc != that.skillOcc)
        return false;
    }

    boolean this_present_tradeSuffer = true && this.isSetTradeSuffer();
    boolean that_present_tradeSuffer = true && that.isSetTradeSuffer();
    if (this_present_tradeSuffer || that_present_tradeSuffer) {
      if (!(this_present_tradeSuffer && that_present_tradeSuffer))
        return false;
      if (!this.tradeSuffer.equals(that.tradeSuffer))
        return false;
    }

    boolean this_present_manSuffer = true && this.isSetManSuffer();
    boolean that_present_manSuffer = true && that.isSetManSuffer();
    if (this_present_manSuffer || that_present_manSuffer) {
      if (!(this_present_manSuffer && that_present_manSuffer))
        return false;
      if (!this.manSuffer.equals(that.manSuffer))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_fixedPhone = true && this.isSetFixedPhone();
    boolean that_present_fixedPhone = true && that.isSetFixedPhone();
    if (this_present_fixedPhone || that_present_fixedPhone) {
      if (!(this_present_fixedPhone && that_present_fixedPhone))
        return false;
      if (!this.fixedPhone.equals(that.fixedPhone))
        return false;
    }

    boolean this_present_fax = true && this.isSetFax();
    boolean that_present_fax = true && that.isSetFax();
    if (this_present_fax || that_present_fax) {
      if (!(this_present_fax && that_present_fax))
        return false;
      if (!this.fax.equals(that.fax))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_sex = true;
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_certType = true;
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_certNo = true && (isSetCertNo());
    list.add(present_certNo);
    if (present_certNo)
      list.add(certNo);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_education = true;
    list.add(present_education);
    if (present_education)
      list.add(education);

    boolean present_graSchool = true && (isSetGraSchool());
    list.add(present_graSchool);
    if (present_graSchool)
      list.add(graSchool);

    boolean present_workUnit = true && (isSetWorkUnit());
    list.add(present_workUnit);
    if (present_workUnit)
      list.add(workUnit);

    boolean present_duty = true && (isSetDuty());
    list.add(present_duty);
    if (present_duty)
      list.add(duty);

    boolean present_dutyYear = true;
    list.add(present_dutyYear);
    if (present_dutyYear)
      list.add(dutyYear);

    boolean present_boardMember = true;
    list.add(present_boardMember);
    if (present_boardMember)
      list.add(boardMember);

    boolean present_workYear = true;
    list.add(present_workYear);
    if (present_workYear)
      list.add(workYear);

    boolean present_skillOcc = true;
    list.add(present_skillOcc);
    if (present_skillOcc)
      list.add(skillOcc);

    boolean present_tradeSuffer = true && (isSetTradeSuffer());
    list.add(present_tradeSuffer);
    if (present_tradeSuffer)
      list.add(tradeSuffer);

    boolean present_manSuffer = true && (isSetManSuffer());
    list.add(present_manSuffer);
    if (present_manSuffer)
      list.add(manSuffer);

    boolean present_record = true && (isSetRecord());
    list.add(present_record);
    if (present_record)
      list.add(record);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_fixedPhone = true && (isSetFixedPhone());
    list.add(present_fixedPhone);
    if (present_fixedPhone)
      list.add(fixedPhone);

    boolean present_fax = true && (isSetFax());
    list.add(present_fax);
    if (present_fax)
      list.add(fax);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComTeam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNo()).compareTo(other.isSetCertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNo, other.certNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEducation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGraSchool()).compareTo(other.isSetGraSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGraSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graSchool, other.graSchool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkUnit()).compareTo(other.isSetWorkUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workUnit, other.workUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuty()).compareTo(other.isSetDuty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duty, other.duty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDutyYear()).compareTo(other.isSetDutyYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDutyYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dutyYear, other.dutyYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoardMember()).compareTo(other.isSetBoardMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boardMember, other.boardMember);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkYear()).compareTo(other.isSetWorkYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workYear, other.workYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkillOcc()).compareTo(other.isSetSkillOcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillOcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skillOcc, other.skillOcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSuffer()).compareTo(other.isSetTradeSuffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSuffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSuffer, other.tradeSuffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManSuffer()).compareTo(other.isSetManSuffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManSuffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manSuffer, other.manSuffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(other.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, other.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedPhone()).compareTo(other.isSetFixedPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedPhone, other.fixedPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFax()).compareTo(other.isSetFax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fax, other.fax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComTeam(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    sb.append(this.certType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNo:");
    if (this.certNo == null) {
      sb.append("null");
    } else {
      sb.append(this.certNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("education:");
    sb.append(this.education);
    first = false;
    if (!first) sb.append(", ");
    sb.append("graSchool:");
    if (this.graSchool == null) {
      sb.append("null");
    } else {
      sb.append(this.graSchool);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workUnit:");
    if (this.workUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.workUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("duty:");
    if (this.duty == null) {
      sb.append("null");
    } else {
      sb.append(this.duty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dutyYear:");
    sb.append(this.dutyYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boardMember:");
    sb.append(this.boardMember);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workYear:");
    sb.append(this.workYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skillOcc:");
    sb.append(this.skillOcc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeSuffer:");
    if (this.tradeSuffer == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeSuffer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manSuffer:");
    if (this.manSuffer == null) {
      sb.append("null");
    } else {
      sb.append(this.manSuffer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedPhone:");
    if (this.fixedPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.fixedPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fax:");
    if (this.fax == null) {
      sb.append("null");
    } else {
      sb.append(this.fax);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComTeamStandardSchemeFactory implements SchemeFactory {
    public CusComTeamStandardScheme getScheme() {
      return new CusComTeamStandardScheme();
    }
  }

  private static class CusComTeamStandardScheme extends StandardScheme<CusComTeam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComTeam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certType = iprot.readI32();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNo = iprot.readString();
              struct.setCertNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EDUCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.education = iprot.readI32();
              struct.setEducationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GRA_SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.graSchool = iprot.readString();
              struct.setGraSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WORK_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workUnit = iprot.readString();
              struct.setWorkUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DUTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duty = iprot.readString();
              struct.setDutyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DUTY_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dutyYear = iprot.readI32();
              struct.setDutyYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BOARD_MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.boardMember = iprot.readI32();
              struct.setBoardMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORK_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workYear = iprot.readI32();
              struct.setWorkYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SKILL_OCC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skillOcc = iprot.readI32();
              struct.setSkillOccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TRADE_SUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeSuffer = iprot.readString();
              struct.setTradeSufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAN_SUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manSuffer = iprot.readString();
              struct.setManSufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.record = iprot.readString();
              struct.setRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FIXED_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fixedPhone = iprot.readString();
              struct.setFixedPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fax = iprot.readString();
              struct.setFaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComTeam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.certType);
      oprot.writeFieldEnd();
      if (struct.certNo != null) {
        oprot.writeFieldBegin(CERT_NO_FIELD_DESC);
        oprot.writeString(struct.certNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
      oprot.writeI32(struct.education);
      oprot.writeFieldEnd();
      if (struct.graSchool != null) {
        oprot.writeFieldBegin(GRA_SCHOOL_FIELD_DESC);
        oprot.writeString(struct.graSchool);
        oprot.writeFieldEnd();
      }
      if (struct.workUnit != null) {
        oprot.writeFieldBegin(WORK_UNIT_FIELD_DESC);
        oprot.writeString(struct.workUnit);
        oprot.writeFieldEnd();
      }
      if (struct.duty != null) {
        oprot.writeFieldBegin(DUTY_FIELD_DESC);
        oprot.writeString(struct.duty);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUTY_YEAR_FIELD_DESC);
      oprot.writeI32(struct.dutyYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOARD_MEMBER_FIELD_DESC);
      oprot.writeI32(struct.boardMember);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORK_YEAR_FIELD_DESC);
      oprot.writeI32(struct.workYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKILL_OCC_FIELD_DESC);
      oprot.writeI32(struct.skillOcc);
      oprot.writeFieldEnd();
      if (struct.tradeSuffer != null) {
        oprot.writeFieldBegin(TRADE_SUFFER_FIELD_DESC);
        oprot.writeString(struct.tradeSuffer);
        oprot.writeFieldEnd();
      }
      if (struct.manSuffer != null) {
        oprot.writeFieldBegin(MAN_SUFFER_FIELD_DESC);
        oprot.writeString(struct.manSuffer);
        oprot.writeFieldEnd();
      }
      if (struct.record != null) {
        oprot.writeFieldBegin(RECORD_FIELD_DESC);
        oprot.writeString(struct.record);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.fixedPhone != null) {
        oprot.writeFieldBegin(FIXED_PHONE_FIELD_DESC);
        oprot.writeString(struct.fixedPhone);
        oprot.writeFieldEnd();
      }
      if (struct.fax != null) {
        oprot.writeFieldBegin(FAX_FIELD_DESC);
        oprot.writeString(struct.fax);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComTeamTupleSchemeFactory implements SchemeFactory {
    public CusComTeamTupleScheme getScheme() {
      return new CusComTeamTupleScheme();
    }
  }

  private static class CusComTeamTupleScheme extends TupleScheme<CusComTeam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetCertType()) {
        optionals.set(4);
      }
      if (struct.isSetCertNo()) {
        optionals.set(5);
      }
      if (struct.isSetAge()) {
        optionals.set(6);
      }
      if (struct.isSetEducation()) {
        optionals.set(7);
      }
      if (struct.isSetGraSchool()) {
        optionals.set(8);
      }
      if (struct.isSetWorkUnit()) {
        optionals.set(9);
      }
      if (struct.isSetDuty()) {
        optionals.set(10);
      }
      if (struct.isSetDutyYear()) {
        optionals.set(11);
      }
      if (struct.isSetBoardMember()) {
        optionals.set(12);
      }
      if (struct.isSetWorkYear()) {
        optionals.set(13);
      }
      if (struct.isSetSkillOcc()) {
        optionals.set(14);
      }
      if (struct.isSetTradeSuffer()) {
        optionals.set(15);
      }
      if (struct.isSetManSuffer()) {
        optionals.set(16);
      }
      if (struct.isSetRecord()) {
        optionals.set(17);
      }
      if (struct.isSetRemark()) {
        optionals.set(18);
      }
      if (struct.isSetFixedPhone()) {
        optionals.set(19);
      }
      if (struct.isSetFax()) {
        optionals.set(20);
      }
      if (struct.isSetTelephone()) {
        optionals.set(21);
      }
      if (struct.isSetStatus()) {
        optionals.set(22);
      }
      if (struct.isSetPage()) {
        optionals.set(23);
      }
      if (struct.isSetRows()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetCertType()) {
        oprot.writeI32(struct.certType);
      }
      if (struct.isSetCertNo()) {
        oprot.writeString(struct.certNo);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetEducation()) {
        oprot.writeI32(struct.education);
      }
      if (struct.isSetGraSchool()) {
        oprot.writeString(struct.graSchool);
      }
      if (struct.isSetWorkUnit()) {
        oprot.writeString(struct.workUnit);
      }
      if (struct.isSetDuty()) {
        oprot.writeString(struct.duty);
      }
      if (struct.isSetDutyYear()) {
        oprot.writeI32(struct.dutyYear);
      }
      if (struct.isSetBoardMember()) {
        oprot.writeI32(struct.boardMember);
      }
      if (struct.isSetWorkYear()) {
        oprot.writeI32(struct.workYear);
      }
      if (struct.isSetSkillOcc()) {
        oprot.writeI32(struct.skillOcc);
      }
      if (struct.isSetTradeSuffer()) {
        oprot.writeString(struct.tradeSuffer);
      }
      if (struct.isSetManSuffer()) {
        oprot.writeString(struct.manSuffer);
      }
      if (struct.isSetRecord()) {
        oprot.writeString(struct.record);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetFixedPhone()) {
        oprot.writeString(struct.fixedPhone);
      }
      if (struct.isSetFax()) {
        oprot.writeString(struct.fax);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.certType = iprot.readI32();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.certNo = iprot.readString();
        struct.setCertNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.education = iprot.readI32();
        struct.setEducationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.graSchool = iprot.readString();
        struct.setGraSchoolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.workUnit = iprot.readString();
        struct.setWorkUnitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.duty = iprot.readString();
        struct.setDutyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dutyYear = iprot.readI32();
        struct.setDutyYearIsSet(true);
      }
      if (incoming.get(12)) {
        struct.boardMember = iprot.readI32();
        struct.setBoardMemberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.workYear = iprot.readI32();
        struct.setWorkYearIsSet(true);
      }
      if (incoming.get(14)) {
        struct.skillOcc = iprot.readI32();
        struct.setSkillOccIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tradeSuffer = iprot.readString();
        struct.setTradeSufferIsSet(true);
      }
      if (incoming.get(16)) {
        struct.manSuffer = iprot.readString();
        struct.setManSufferIsSet(true);
      }
      if (incoming.get(17)) {
        struct.record = iprot.readString();
        struct.setRecordIsSet(true);
      }
      if (incoming.get(18)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(19)) {
        struct.fixedPhone = iprot.readString();
        struct.setFixedPhoneIsSet(true);
      }
      if (incoming.get(20)) {
        struct.fax = iprot.readString();
        struct.setFaxIsSet(true);
      }
      if (incoming.get(21)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(22)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(23)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(24)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * *任务流程Vo***
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class WorkflowVo implements org.apache.thrift.TBase<WorkflowVo, WorkflowVo._Fields>, java.io.Serializable, Cloneable, Comparable<WorkflowVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkflowVo");

  private static final org.apache.thrift.protocol.TField TASK_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskNodeName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEST_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destTaskId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IF_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("ifEmail", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IF_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("ifSms", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IDEA_FIELD_DESC = new org.apache.thrift.protocol.TField("idea", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WORKFLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WORKFLOW_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowInstanceId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMMIT_TO_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("commitToTask", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VETO_PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("vetoProject", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_DEF_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskDefKey", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkflowVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkflowVoTupleSchemeFactory());
  }

  public String taskNodeName; // required
  public List<String> userIds; // required
  public String destTaskId; // required
  public boolean ifEmail; // required
  public boolean ifSms; // required
  public String idea; // required
  public String taskId; // required
  public String workflowId; // required
  public int refId; // required
  public String workflowInstanceId; // required
  public String commitToTask; // required
  public String vetoProject; // required
  public int projectId; // required
  public String workflowTaskDefKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_NODE_NAME((short)1, "taskNodeName"),
    USER_IDS((short)2, "userIds"),
    DEST_TASK_ID((short)3, "destTaskId"),
    IF_EMAIL((short)4, "ifEmail"),
    IF_SMS((short)5, "ifSms"),
    IDEA((short)6, "idea"),
    TASK_ID((short)7, "taskId"),
    WORKFLOW_ID((short)8, "workflowId"),
    REF_ID((short)9, "refId"),
    WORKFLOW_INSTANCE_ID((short)10, "workflowInstanceId"),
    COMMIT_TO_TASK((short)11, "commitToTask"),
    VETO_PROJECT((short)12, "vetoProject"),
    PROJECT_ID((short)13, "projectId"),
    WORKFLOW_TASK_DEF_KEY((short)14, "workflowTaskDefKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_NODE_NAME
          return TASK_NODE_NAME;
        case 2: // USER_IDS
          return USER_IDS;
        case 3: // DEST_TASK_ID
          return DEST_TASK_ID;
        case 4: // IF_EMAIL
          return IF_EMAIL;
        case 5: // IF_SMS
          return IF_SMS;
        case 6: // IDEA
          return IDEA;
        case 7: // TASK_ID
          return TASK_ID;
        case 8: // WORKFLOW_ID
          return WORKFLOW_ID;
        case 9: // REF_ID
          return REF_ID;
        case 10: // WORKFLOW_INSTANCE_ID
          return WORKFLOW_INSTANCE_ID;
        case 11: // COMMIT_TO_TASK
          return COMMIT_TO_TASK;
        case 12: // VETO_PROJECT
          return VETO_PROJECT;
        case 13: // PROJECT_ID
          return PROJECT_ID;
        case 14: // WORKFLOW_TASK_DEF_KEY
          return WORKFLOW_TASK_DEF_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IFEMAIL_ISSET_ID = 0;
  private static final int __IFSMS_ISSET_ID = 1;
  private static final int __REFID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEST_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("destTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IF_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("ifEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IF_SMS, new org.apache.thrift.meta_data.FieldMetaData("ifSms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IDEA, new org.apache.thrift.meta_data.FieldMetaData("idea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMIT_TO_TASK, new org.apache.thrift.meta_data.FieldMetaData("commitToTask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VETO_PROJECT, new org.apache.thrift.meta_data.FieldMetaData("vetoProject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_TASK_DEF_KEY, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskDefKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkflowVo.class, metaDataMap);
  }

  public WorkflowVo() {
  }

  public WorkflowVo(
    String taskNodeName,
    List<String> userIds,
    String destTaskId,
    boolean ifEmail,
    boolean ifSms,
    String idea,
    String taskId,
    String workflowId,
    int refId,
    String workflowInstanceId,
    String commitToTask,
    String vetoProject,
    int projectId,
    String workflowTaskDefKey)
  {
    this();
    this.taskNodeName = taskNodeName;
    this.userIds = userIds;
    this.destTaskId = destTaskId;
    this.ifEmail = ifEmail;
    setIfEmailIsSet(true);
    this.ifSms = ifSms;
    setIfSmsIsSet(true);
    this.idea = idea;
    this.taskId = taskId;
    this.workflowId = workflowId;
    this.refId = refId;
    setRefIdIsSet(true);
    this.workflowInstanceId = workflowInstanceId;
    this.commitToTask = commitToTask;
    this.vetoProject = vetoProject;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.workflowTaskDefKey = workflowTaskDefKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkflowVo(WorkflowVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskNodeName()) {
      this.taskNodeName = other.taskNodeName;
    }
    if (other.isSetUserIds()) {
      List<String> __this__userIds = new ArrayList<String>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetDestTaskId()) {
      this.destTaskId = other.destTaskId;
    }
    this.ifEmail = other.ifEmail;
    this.ifSms = other.ifSms;
    if (other.isSetIdea()) {
      this.idea = other.idea;
    }
    if (other.isSetTaskId()) {
      this.taskId = other.taskId;
    }
    if (other.isSetWorkflowId()) {
      this.workflowId = other.workflowId;
    }
    this.refId = other.refId;
    if (other.isSetWorkflowInstanceId()) {
      this.workflowInstanceId = other.workflowInstanceId;
    }
    if (other.isSetCommitToTask()) {
      this.commitToTask = other.commitToTask;
    }
    if (other.isSetVetoProject()) {
      this.vetoProject = other.vetoProject;
    }
    this.projectId = other.projectId;
    if (other.isSetWorkflowTaskDefKey()) {
      this.workflowTaskDefKey = other.workflowTaskDefKey;
    }
  }

  public WorkflowVo deepCopy() {
    return new WorkflowVo(this);
  }

  @Override
  public void clear() {
    this.taskNodeName = null;
    this.userIds = null;
    this.destTaskId = null;
    setIfEmailIsSet(false);
    this.ifEmail = false;
    setIfSmsIsSet(false);
    this.ifSms = false;
    this.idea = null;
    this.taskId = null;
    this.workflowId = null;
    setRefIdIsSet(false);
    this.refId = 0;
    this.workflowInstanceId = null;
    this.commitToTask = null;
    this.vetoProject = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.workflowTaskDefKey = null;
  }

  public String getTaskNodeName() {
    return this.taskNodeName;
  }

  public WorkflowVo setTaskNodeName(String taskNodeName) {
    this.taskNodeName = taskNodeName;
    return this;
  }

  public void unsetTaskNodeName() {
    this.taskNodeName = null;
  }

  /** Returns true if field taskNodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskNodeName() {
    return this.taskNodeName != null;
  }

  public void setTaskNodeNameIsSet(boolean value) {
    if (!value) {
      this.taskNodeName = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<String> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(String elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<String>();
    }
    this.userIds.add(elem);
  }

  public List<String> getUserIds() {
    return this.userIds;
  }

  public WorkflowVo setUserIds(List<String> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getDestTaskId() {
    return this.destTaskId;
  }

  public WorkflowVo setDestTaskId(String destTaskId) {
    this.destTaskId = destTaskId;
    return this;
  }

  public void unsetDestTaskId() {
    this.destTaskId = null;
  }

  /** Returns true if field destTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetDestTaskId() {
    return this.destTaskId != null;
  }

  public void setDestTaskIdIsSet(boolean value) {
    if (!value) {
      this.destTaskId = null;
    }
  }

  public boolean isIfEmail() {
    return this.ifEmail;
  }

  public WorkflowVo setIfEmail(boolean ifEmail) {
    this.ifEmail = ifEmail;
    setIfEmailIsSet(true);
    return this;
  }

  public void unsetIfEmail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IFEMAIL_ISSET_ID);
  }

  /** Returns true if field ifEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetIfEmail() {
    return EncodingUtils.testBit(__isset_bitfield, __IFEMAIL_ISSET_ID);
  }

  public void setIfEmailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IFEMAIL_ISSET_ID, value);
  }

  public boolean isIfSms() {
    return this.ifSms;
  }

  public WorkflowVo setIfSms(boolean ifSms) {
    this.ifSms = ifSms;
    setIfSmsIsSet(true);
    return this;
  }

  public void unsetIfSms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IFSMS_ISSET_ID);
  }

  /** Returns true if field ifSms is set (has been assigned a value) and false otherwise */
  public boolean isSetIfSms() {
    return EncodingUtils.testBit(__isset_bitfield, __IFSMS_ISSET_ID);
  }

  public void setIfSmsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IFSMS_ISSET_ID, value);
  }

  public String getIdea() {
    return this.idea;
  }

  public WorkflowVo setIdea(String idea) {
    this.idea = idea;
    return this;
  }

  public void unsetIdea() {
    this.idea = null;
  }

  /** Returns true if field idea is set (has been assigned a value) and false otherwise */
  public boolean isSetIdea() {
    return this.idea != null;
  }

  public void setIdeaIsSet(boolean value) {
    if (!value) {
      this.idea = null;
    }
  }

  public String getTaskId() {
    return this.taskId;
  }

  public WorkflowVo setTaskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public void setTaskIdIsSet(boolean value) {
    if (!value) {
      this.taskId = null;
    }
  }

  public String getWorkflowId() {
    return this.workflowId;
  }

  public WorkflowVo setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  public void unsetWorkflowId() {
    this.workflowId = null;
  }

  /** Returns true if field workflowId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowId() {
    return this.workflowId != null;
  }

  public void setWorkflowIdIsSet(boolean value) {
    if (!value) {
      this.workflowId = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public WorkflowVo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getWorkflowInstanceId() {
    return this.workflowInstanceId;
  }

  public WorkflowVo setWorkflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
    return this;
  }

  public void unsetWorkflowInstanceId() {
    this.workflowInstanceId = null;
  }

  /** Returns true if field workflowInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowInstanceId() {
    return this.workflowInstanceId != null;
  }

  public void setWorkflowInstanceIdIsSet(boolean value) {
    if (!value) {
      this.workflowInstanceId = null;
    }
  }

  public String getCommitToTask() {
    return this.commitToTask;
  }

  public WorkflowVo setCommitToTask(String commitToTask) {
    this.commitToTask = commitToTask;
    return this;
  }

  public void unsetCommitToTask() {
    this.commitToTask = null;
  }

  /** Returns true if field commitToTask is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitToTask() {
    return this.commitToTask != null;
  }

  public void setCommitToTaskIsSet(boolean value) {
    if (!value) {
      this.commitToTask = null;
    }
  }

  public String getVetoProject() {
    return this.vetoProject;
  }

  public WorkflowVo setVetoProject(String vetoProject) {
    this.vetoProject = vetoProject;
    return this;
  }

  public void unsetVetoProject() {
    this.vetoProject = null;
  }

  /** Returns true if field vetoProject is set (has been assigned a value) and false otherwise */
  public boolean isSetVetoProject() {
    return this.vetoProject != null;
  }

  public void setVetoProjectIsSet(boolean value) {
    if (!value) {
      this.vetoProject = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public WorkflowVo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getWorkflowTaskDefKey() {
    return this.workflowTaskDefKey;
  }

  public WorkflowVo setWorkflowTaskDefKey(String workflowTaskDefKey) {
    this.workflowTaskDefKey = workflowTaskDefKey;
    return this;
  }

  public void unsetWorkflowTaskDefKey() {
    this.workflowTaskDefKey = null;
  }

  /** Returns true if field workflowTaskDefKey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskDefKey() {
    return this.workflowTaskDefKey != null;
  }

  public void setWorkflowTaskDefKeyIsSet(boolean value) {
    if (!value) {
      this.workflowTaskDefKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_NODE_NAME:
      if (value == null) {
        unsetTaskNodeName();
      } else {
        setTaskNodeName((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<String>)value);
      }
      break;

    case DEST_TASK_ID:
      if (value == null) {
        unsetDestTaskId();
      } else {
        setDestTaskId((String)value);
      }
      break;

    case IF_EMAIL:
      if (value == null) {
        unsetIfEmail();
      } else {
        setIfEmail((Boolean)value);
      }
      break;

    case IF_SMS:
      if (value == null) {
        unsetIfSms();
      } else {
        setIfSms((Boolean)value);
      }
      break;

    case IDEA:
      if (value == null) {
        unsetIdea();
      } else {
        setIdea((String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((String)value);
      }
      break;

    case WORKFLOW_ID:
      if (value == null) {
        unsetWorkflowId();
      } else {
        setWorkflowId((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case WORKFLOW_INSTANCE_ID:
      if (value == null) {
        unsetWorkflowInstanceId();
      } else {
        setWorkflowInstanceId((String)value);
      }
      break;

    case COMMIT_TO_TASK:
      if (value == null) {
        unsetCommitToTask();
      } else {
        setCommitToTask((String)value);
      }
      break;

    case VETO_PROJECT:
      if (value == null) {
        unsetVetoProject();
      } else {
        setVetoProject((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case WORKFLOW_TASK_DEF_KEY:
      if (value == null) {
        unsetWorkflowTaskDefKey();
      } else {
        setWorkflowTaskDefKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_NODE_NAME:
      return getTaskNodeName();

    case USER_IDS:
      return getUserIds();

    case DEST_TASK_ID:
      return getDestTaskId();

    case IF_EMAIL:
      return Boolean.valueOf(isIfEmail());

    case IF_SMS:
      return Boolean.valueOf(isIfSms());

    case IDEA:
      return getIdea();

    case TASK_ID:
      return getTaskId();

    case WORKFLOW_ID:
      return getWorkflowId();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case WORKFLOW_INSTANCE_ID:
      return getWorkflowInstanceId();

    case COMMIT_TO_TASK:
      return getCommitToTask();

    case VETO_PROJECT:
      return getVetoProject();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case WORKFLOW_TASK_DEF_KEY:
      return getWorkflowTaskDefKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_NODE_NAME:
      return isSetTaskNodeName();
    case USER_IDS:
      return isSetUserIds();
    case DEST_TASK_ID:
      return isSetDestTaskId();
    case IF_EMAIL:
      return isSetIfEmail();
    case IF_SMS:
      return isSetIfSms();
    case IDEA:
      return isSetIdea();
    case TASK_ID:
      return isSetTaskId();
    case WORKFLOW_ID:
      return isSetWorkflowId();
    case REF_ID:
      return isSetRefId();
    case WORKFLOW_INSTANCE_ID:
      return isSetWorkflowInstanceId();
    case COMMIT_TO_TASK:
      return isSetCommitToTask();
    case VETO_PROJECT:
      return isSetVetoProject();
    case PROJECT_ID:
      return isSetProjectId();
    case WORKFLOW_TASK_DEF_KEY:
      return isSetWorkflowTaskDefKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkflowVo)
      return this.equals((WorkflowVo)that);
    return false;
  }

  public boolean equals(WorkflowVo that) {
    if (that == null)
      return false;

    boolean this_present_taskNodeName = true && this.isSetTaskNodeName();
    boolean that_present_taskNodeName = true && that.isSetTaskNodeName();
    if (this_present_taskNodeName || that_present_taskNodeName) {
      if (!(this_present_taskNodeName && that_present_taskNodeName))
        return false;
      if (!this.taskNodeName.equals(that.taskNodeName))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_destTaskId = true && this.isSetDestTaskId();
    boolean that_present_destTaskId = true && that.isSetDestTaskId();
    if (this_present_destTaskId || that_present_destTaskId) {
      if (!(this_present_destTaskId && that_present_destTaskId))
        return false;
      if (!this.destTaskId.equals(that.destTaskId))
        return false;
    }

    boolean this_present_ifEmail = true;
    boolean that_present_ifEmail = true;
    if (this_present_ifEmail || that_present_ifEmail) {
      if (!(this_present_ifEmail && that_present_ifEmail))
        return false;
      if (this.ifEmail != that.ifEmail)
        return false;
    }

    boolean this_present_ifSms = true;
    boolean that_present_ifSms = true;
    if (this_present_ifSms || that_present_ifSms) {
      if (!(this_present_ifSms && that_present_ifSms))
        return false;
      if (this.ifSms != that.ifSms)
        return false;
    }

    boolean this_present_idea = true && this.isSetIdea();
    boolean that_present_idea = true && that.isSetIdea();
    if (this_present_idea || that_present_idea) {
      if (!(this_present_idea && that_present_idea))
        return false;
      if (!this.idea.equals(that.idea))
        return false;
    }

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_workflowId = true && this.isSetWorkflowId();
    boolean that_present_workflowId = true && that.isSetWorkflowId();
    if (this_present_workflowId || that_present_workflowId) {
      if (!(this_present_workflowId && that_present_workflowId))
        return false;
      if (!this.workflowId.equals(that.workflowId))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_workflowInstanceId = true && this.isSetWorkflowInstanceId();
    boolean that_present_workflowInstanceId = true && that.isSetWorkflowInstanceId();
    if (this_present_workflowInstanceId || that_present_workflowInstanceId) {
      if (!(this_present_workflowInstanceId && that_present_workflowInstanceId))
        return false;
      if (!this.workflowInstanceId.equals(that.workflowInstanceId))
        return false;
    }

    boolean this_present_commitToTask = true && this.isSetCommitToTask();
    boolean that_present_commitToTask = true && that.isSetCommitToTask();
    if (this_present_commitToTask || that_present_commitToTask) {
      if (!(this_present_commitToTask && that_present_commitToTask))
        return false;
      if (!this.commitToTask.equals(that.commitToTask))
        return false;
    }

    boolean this_present_vetoProject = true && this.isSetVetoProject();
    boolean that_present_vetoProject = true && that.isSetVetoProject();
    if (this_present_vetoProject || that_present_vetoProject) {
      if (!(this_present_vetoProject && that_present_vetoProject))
        return false;
      if (!this.vetoProject.equals(that.vetoProject))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_workflowTaskDefKey = true && this.isSetWorkflowTaskDefKey();
    boolean that_present_workflowTaskDefKey = true && that.isSetWorkflowTaskDefKey();
    if (this_present_workflowTaskDefKey || that_present_workflowTaskDefKey) {
      if (!(this_present_workflowTaskDefKey && that_present_workflowTaskDefKey))
        return false;
      if (!this.workflowTaskDefKey.equals(that.workflowTaskDefKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskNodeName = true && (isSetTaskNodeName());
    list.add(present_taskNodeName);
    if (present_taskNodeName)
      list.add(taskNodeName);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_destTaskId = true && (isSetDestTaskId());
    list.add(present_destTaskId);
    if (present_destTaskId)
      list.add(destTaskId);

    boolean present_ifEmail = true;
    list.add(present_ifEmail);
    if (present_ifEmail)
      list.add(ifEmail);

    boolean present_ifSms = true;
    list.add(present_ifSms);
    if (present_ifSms)
      list.add(ifSms);

    boolean present_idea = true && (isSetIdea());
    list.add(present_idea);
    if (present_idea)
      list.add(idea);

    boolean present_taskId = true && (isSetTaskId());
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_workflowId = true && (isSetWorkflowId());
    list.add(present_workflowId);
    if (present_workflowId)
      list.add(workflowId);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_workflowInstanceId = true && (isSetWorkflowInstanceId());
    list.add(present_workflowInstanceId);
    if (present_workflowInstanceId)
      list.add(workflowInstanceId);

    boolean present_commitToTask = true && (isSetCommitToTask());
    list.add(present_commitToTask);
    if (present_commitToTask)
      list.add(commitToTask);

    boolean present_vetoProject = true && (isSetVetoProject());
    list.add(present_vetoProject);
    if (present_vetoProject)
      list.add(vetoProject);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_workflowTaskDefKey = true && (isSetWorkflowTaskDefKey());
    list.add(present_workflowTaskDefKey);
    if (present_workflowTaskDefKey)
      list.add(workflowTaskDefKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkflowVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskNodeName()).compareTo(other.isSetTaskNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskNodeName, other.taskNodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestTaskId()).compareTo(other.isSetDestTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destTaskId, other.destTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIfEmail()).compareTo(other.isSetIfEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIfEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifEmail, other.ifEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIfSms()).compareTo(other.isSetIfSms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIfSms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifSms, other.ifSms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdea()).compareTo(other.isSetIdea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idea, other.idea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowId()).compareTo(other.isSetWorkflowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowId, other.workflowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowInstanceId()).compareTo(other.isSetWorkflowInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowInstanceId, other.workflowInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitToTask()).compareTo(other.isSetCommitToTask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitToTask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitToTask, other.commitToTask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVetoProject()).compareTo(other.isSetVetoProject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVetoProject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vetoProject, other.vetoProject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowTaskDefKey()).compareTo(other.isSetWorkflowTaskDefKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskDefKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskDefKey, other.workflowTaskDefKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkflowVo(");
    boolean first = true;

    sb.append("taskNodeName:");
    if (this.taskNodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskNodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destTaskId:");
    if (this.destTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.destTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ifEmail:");
    sb.append(this.ifEmail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ifSms:");
    sb.append(this.ifSms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idea:");
    if (this.idea == null) {
      sb.append("null");
    } else {
      sb.append(this.idea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    if (this.taskId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowId:");
    if (this.workflowId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowInstanceId:");
    if (this.workflowInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitToTask:");
    if (this.commitToTask == null) {
      sb.append("null");
    } else {
      sb.append(this.commitToTask);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vetoProject:");
    if (this.vetoProject == null) {
      sb.append("null");
    } else {
      sb.append(this.vetoProject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowTaskDefKey:");
    if (this.workflowTaskDefKey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskDefKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkflowVoStandardSchemeFactory implements SchemeFactory {
    public WorkflowVoStandardScheme getScheme() {
      return new WorkflowVoStandardScheme();
    }
  }

  private static class WorkflowVoStandardScheme extends StandardScheme<WorkflowVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkflowVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskNodeName = iprot.readString();
              struct.setTaskNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEST_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destTaskId = iprot.readString();
              struct.setDestTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IF_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ifEmail = iprot.readBool();
              struct.setIfEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IF_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ifSms = iprot.readBool();
              struct.setIfSmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDEA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idea = iprot.readString();
              struct.setIdeaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskId = iprot.readString();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WORKFLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowId = iprot.readString();
              struct.setWorkflowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WORKFLOW_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowInstanceId = iprot.readString();
              struct.setWorkflowInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMIT_TO_TASK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commitToTask = iprot.readString();
              struct.setCommitToTaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VETO_PROJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vetoProject = iprot.readString();
              struct.setVetoProjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WORKFLOW_TASK_DEF_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskDefKey = iprot.readString();
              struct.setWorkflowTaskDefKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkflowVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskNodeName != null) {
        oprot.writeFieldBegin(TASK_NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.taskNodeName);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIds.size()));
          for (String _iter3 : struct.userIds)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.destTaskId != null) {
        oprot.writeFieldBegin(DEST_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.destTaskId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EMAIL_FIELD_DESC);
      oprot.writeBool(struct.ifEmail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IF_SMS_FIELD_DESC);
      oprot.writeBool(struct.ifSms);
      oprot.writeFieldEnd();
      if (struct.idea != null) {
        oprot.writeFieldBegin(IDEA_FIELD_DESC);
        oprot.writeString(struct.idea);
        oprot.writeFieldEnd();
      }
      if (struct.taskId != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.workflowId != null) {
        oprot.writeFieldBegin(WORKFLOW_ID_FIELD_DESC);
        oprot.writeString(struct.workflowId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.workflowInstanceId != null) {
        oprot.writeFieldBegin(WORKFLOW_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.workflowInstanceId);
        oprot.writeFieldEnd();
      }
      if (struct.commitToTask != null) {
        oprot.writeFieldBegin(COMMIT_TO_TASK_FIELD_DESC);
        oprot.writeString(struct.commitToTask);
        oprot.writeFieldEnd();
      }
      if (struct.vetoProject != null) {
        oprot.writeFieldBegin(VETO_PROJECT_FIELD_DESC);
        oprot.writeString(struct.vetoProject);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.workflowTaskDefKey != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_DEF_KEY_FIELD_DESC);
        oprot.writeString(struct.workflowTaskDefKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkflowVoTupleSchemeFactory implements SchemeFactory {
    public WorkflowVoTupleScheme getScheme() {
      return new WorkflowVoTupleScheme();
    }
  }

  private static class WorkflowVoTupleScheme extends TupleScheme<WorkflowVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkflowVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskNodeName()) {
        optionals.set(0);
      }
      if (struct.isSetUserIds()) {
        optionals.set(1);
      }
      if (struct.isSetDestTaskId()) {
        optionals.set(2);
      }
      if (struct.isSetIfEmail()) {
        optionals.set(3);
      }
      if (struct.isSetIfSms()) {
        optionals.set(4);
      }
      if (struct.isSetIdea()) {
        optionals.set(5);
      }
      if (struct.isSetTaskId()) {
        optionals.set(6);
      }
      if (struct.isSetWorkflowId()) {
        optionals.set(7);
      }
      if (struct.isSetRefId()) {
        optionals.set(8);
      }
      if (struct.isSetWorkflowInstanceId()) {
        optionals.set(9);
      }
      if (struct.isSetCommitToTask()) {
        optionals.set(10);
      }
      if (struct.isSetVetoProject()) {
        optionals.set(11);
      }
      if (struct.isSetProjectId()) {
        optionals.set(12);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetTaskNodeName()) {
        oprot.writeString(struct.taskNodeName);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (String _iter4 : struct.userIds)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetDestTaskId()) {
        oprot.writeString(struct.destTaskId);
      }
      if (struct.isSetIfEmail()) {
        oprot.writeBool(struct.ifEmail);
      }
      if (struct.isSetIfSms()) {
        oprot.writeBool(struct.ifSms);
      }
      if (struct.isSetIdea()) {
        oprot.writeString(struct.idea);
      }
      if (struct.isSetTaskId()) {
        oprot.writeString(struct.taskId);
      }
      if (struct.isSetWorkflowId()) {
        oprot.writeString(struct.workflowId);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetWorkflowInstanceId()) {
        oprot.writeString(struct.workflowInstanceId);
      }
      if (struct.isSetCommitToTask()) {
        oprot.writeString(struct.commitToTask);
      }
      if (struct.isSetVetoProject()) {
        oprot.writeString(struct.vetoProject);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        oprot.writeString(struct.workflowTaskDefKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkflowVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.taskNodeName = iprot.readString();
        struct.setTaskNodeNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.userIds = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.userIds.add(_elem6);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.destTaskId = iprot.readString();
        struct.setDestTaskIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ifEmail = iprot.readBool();
        struct.setIfEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ifSms = iprot.readBool();
        struct.setIfSmsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.idea = iprot.readString();
        struct.setIdeaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.taskId = iprot.readString();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.workflowId = iprot.readString();
        struct.setWorkflowIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.workflowInstanceId = iprot.readString();
        struct.setWorkflowInstanceIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.commitToTask = iprot.readString();
        struct.setCommitToTaskIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vetoProject = iprot.readString();
        struct.setVetoProjectIsSet(true);
      }
      if (incoming.get(12)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.workflowTaskDefKey = iprot.readString();
        struct.setWorkflowTaskDefKeyIsSet(true);
      }
    }
  }

}


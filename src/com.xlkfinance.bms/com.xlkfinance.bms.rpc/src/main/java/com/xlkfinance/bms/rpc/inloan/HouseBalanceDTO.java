/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class HouseBalanceDTO implements org.apache.thrift.TBase<HouseBalanceDTO, HouseBalanceDTO._Fields>, java.io.Serializable, Cloneable, Comparable<HouseBalanceDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HouseBalanceDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerk", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField BACK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("backAccount", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BALANCE_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceConfirm", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField HANDLE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleUserId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField HANDLE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("handleUserName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CREATER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createrName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField LOAN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTime", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HouseBalanceDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HouseBalanceDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int handleId; // required
  public double principal; // required
  public String payDate; // required
  public String houseClerk; // required
  public double interest; // required
  public double defaultInterest; // required
  public double balance; // required
  public String backAccount; // required
  public int count; // required
  public String remark; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public int balanceConfirm; // required
  public int handleUserId; // required
  public String handleUserName; // required
  public int projectId; // required
  public String createrName; // required
  public String createrDate; // required
  public double loanAmount; // required
  public String loanTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    HANDLE_ID((short)2, "handleId"),
    PRINCIPAL((short)3, "principal"),
    PAY_DATE((short)4, "payDate"),
    HOUSE_CLERK((short)5, "houseClerk"),
    INTEREST((short)6, "interest"),
    DEFAULT_INTEREST((short)7, "defaultInterest"),
    BALANCE((short)8, "balance"),
    BACK_ACCOUNT((short)9, "backAccount"),
    COUNT((short)10, "count"),
    REMARK((short)11, "remark"),
    CREATER_ID((short)12, "createrId"),
    USER_IDS((short)13, "userIds"),
    PAGE((short)14, "page"),
    ROWS((short)15, "rows"),
    BALANCE_CONFIRM((short)16, "balanceConfirm"),
    HANDLE_USER_ID((short)17, "handleUserId"),
    HANDLE_USER_NAME((short)18, "handleUserName"),
    PROJECT_ID((short)19, "projectId"),
    CREATER_NAME((short)20, "createrName"),
    CREATER_DATE((short)21, "createrDate"),
    LOAN_AMOUNT((short)22, "loanAmount"),
    LOAN_TIME((short)23, "loanTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // HANDLE_ID
          return HANDLE_ID;
        case 3: // PRINCIPAL
          return PRINCIPAL;
        case 4: // PAY_DATE
          return PAY_DATE;
        case 5: // HOUSE_CLERK
          return HOUSE_CLERK;
        case 6: // INTEREST
          return INTEREST;
        case 7: // DEFAULT_INTEREST
          return DEFAULT_INTEREST;
        case 8: // BALANCE
          return BALANCE;
        case 9: // BACK_ACCOUNT
          return BACK_ACCOUNT;
        case 10: // COUNT
          return COUNT;
        case 11: // REMARK
          return REMARK;
        case 12: // CREATER_ID
          return CREATER_ID;
        case 13: // USER_IDS
          return USER_IDS;
        case 14: // PAGE
          return PAGE;
        case 15: // ROWS
          return ROWS;
        case 16: // BALANCE_CONFIRM
          return BALANCE_CONFIRM;
        case 17: // HANDLE_USER_ID
          return HANDLE_USER_ID;
        case 18: // HANDLE_USER_NAME
          return HANDLE_USER_NAME;
        case 19: // PROJECT_ID
          return PROJECT_ID;
        case 20: // CREATER_NAME
          return CREATER_NAME;
        case 21: // CREATER_DATE
          return CREATER_DATE;
        case 22: // LOAN_AMOUNT
          return LOAN_AMOUNT;
        case 23: // LOAN_TIME
          return LOAN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HANDLEID_ISSET_ID = 1;
  private static final int __PRINCIPAL_ISSET_ID = 2;
  private static final int __INTEREST_ISSET_ID = 3;
  private static final int __DEFAULTINTEREST_ISSET_ID = 4;
  private static final int __BALANCE_ISSET_ID = 5;
  private static final int __COUNT_ISSET_ID = 6;
  private static final int __CREATERID_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __BALANCECONFIRM_ISSET_ID = 10;
  private static final int __HANDLEUSERID_ISSET_ID = 11;
  private static final int __PROJECTID_ISSET_ID = 12;
  private static final int __LOANAMOUNT_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CLERK, new org.apache.thrift.meta_data.FieldMetaData("houseClerk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFAULT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("defaultInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BACK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("backAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BALANCE_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("balanceConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("handleUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("handleUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("loanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_TIME, new org.apache.thrift.meta_data.FieldMetaData("loanTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HouseBalanceDTO.class, metaDataMap);
  }

  public HouseBalanceDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public HouseBalanceDTO(
    int pid,
    int handleId,
    double principal,
    String payDate,
    String houseClerk,
    double interest,
    double defaultInterest,
    double balance,
    String backAccount,
    int count,
    String remark,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    int balanceConfirm,
    int handleUserId,
    String handleUserName,
    int projectId,
    String createrName,
    String createrDate,
    double loanAmount,
    String loanTime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.principal = principal;
    setPrincipalIsSet(true);
    this.payDate = payDate;
    this.houseClerk = houseClerk;
    this.interest = interest;
    setInterestIsSet(true);
    this.defaultInterest = defaultInterest;
    setDefaultInterestIsSet(true);
    this.balance = balance;
    setBalanceIsSet(true);
    this.backAccount = backAccount;
    this.count = count;
    setCountIsSet(true);
    this.remark = remark;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.balanceConfirm = balanceConfirm;
    setBalanceConfirmIsSet(true);
    this.handleUserId = handleUserId;
    setHandleUserIdIsSet(true);
    this.handleUserName = handleUserName;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.createrName = createrName;
    this.createrDate = createrDate;
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    this.loanTime = loanTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HouseBalanceDTO(HouseBalanceDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.handleId = other.handleId;
    this.principal = other.principal;
    if (other.isSetPayDate()) {
      this.payDate = other.payDate;
    }
    if (other.isSetHouseClerk()) {
      this.houseClerk = other.houseClerk;
    }
    this.interest = other.interest;
    this.defaultInterest = other.defaultInterest;
    this.balance = other.balance;
    if (other.isSetBackAccount()) {
      this.backAccount = other.backAccount;
    }
    this.count = other.count;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.balanceConfirm = other.balanceConfirm;
    this.handleUserId = other.handleUserId;
    if (other.isSetHandleUserName()) {
      this.handleUserName = other.handleUserName;
    }
    this.projectId = other.projectId;
    if (other.isSetCreaterName()) {
      this.createrName = other.createrName;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.loanAmount = other.loanAmount;
    if (other.isSetLoanTime()) {
      this.loanTime = other.loanTime;
    }
  }

  public HouseBalanceDTO deepCopy() {
    return new HouseBalanceDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setHandleIdIsSet(false);
    this.handleId = 0;
    setPrincipalIsSet(false);
    this.principal = 0.0;
    this.payDate = null;
    this.houseClerk = null;
    setInterestIsSet(false);
    this.interest = 0.0;
    setDefaultInterestIsSet(false);
    this.defaultInterest = 0.0;
    setBalanceIsSet(false);
    this.balance = 0.0;
    this.backAccount = null;
    setCountIsSet(false);
    this.count = 0;
    this.remark = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    setBalanceConfirmIsSet(false);
    this.balanceConfirm = 0;
    setHandleUserIdIsSet(false);
    this.handleUserId = 0;
    this.handleUserName = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.createrName = null;
    this.createrDate = null;
    setLoanAmountIsSet(false);
    this.loanAmount = 0.0;
    this.loanTime = null;
  }

  public int getPid() {
    return this.pid;
  }

  public HouseBalanceDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHandleId() {
    return this.handleId;
  }

  public HouseBalanceDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public double getPrincipal() {
    return this.principal;
  }

  public HouseBalanceDTO setPrincipal(double principal) {
    this.principal = principal;
    setPrincipalIsSet(true);
    return this;
  }

  public void unsetPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  public void setPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_ISSET_ID, value);
  }

  public String getPayDate() {
    return this.payDate;
  }

  public HouseBalanceDTO setPayDate(String payDate) {
    this.payDate = payDate;
    return this;
  }

  public void unsetPayDate() {
    this.payDate = null;
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return this.payDate != null;
  }

  public void setPayDateIsSet(boolean value) {
    if (!value) {
      this.payDate = null;
    }
  }

  public String getHouseClerk() {
    return this.houseClerk;
  }

  public HouseBalanceDTO setHouseClerk(String houseClerk) {
    this.houseClerk = houseClerk;
    return this;
  }

  public void unsetHouseClerk() {
    this.houseClerk = null;
  }

  /** Returns true if field houseClerk is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerk() {
    return this.houseClerk != null;
  }

  public void setHouseClerkIsSet(boolean value) {
    if (!value) {
      this.houseClerk = null;
    }
  }

  public double getInterest() {
    return this.interest;
  }

  public HouseBalanceDTO setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getDefaultInterest() {
    return this.defaultInterest;
  }

  public HouseBalanceDTO setDefaultInterest(double defaultInterest) {
    this.defaultInterest = defaultInterest;
    setDefaultInterestIsSet(true);
    return this;
  }

  public void unsetDefaultInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID);
  }

  /** Returns true if field defaultInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID);
  }

  public void setDefaultInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID, value);
  }

  public double getBalance() {
    return this.balance;
  }

  public HouseBalanceDTO setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public String getBackAccount() {
    return this.backAccount;
  }

  public HouseBalanceDTO setBackAccount(String backAccount) {
    this.backAccount = backAccount;
    return this;
  }

  public void unsetBackAccount() {
    this.backAccount = null;
  }

  /** Returns true if field backAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBackAccount() {
    return this.backAccount != null;
  }

  public void setBackAccountIsSet(boolean value) {
    if (!value) {
      this.backAccount = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public HouseBalanceDTO setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public HouseBalanceDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public HouseBalanceDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public HouseBalanceDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public HouseBalanceDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HouseBalanceDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getBalanceConfirm() {
    return this.balanceConfirm;
  }

  public HouseBalanceDTO setBalanceConfirm(int balanceConfirm) {
    this.balanceConfirm = balanceConfirm;
    setBalanceConfirmIsSet(true);
    return this;
  }

  public void unsetBalanceConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID);
  }

  /** Returns true if field balanceConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID);
  }

  public void setBalanceConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID, value);
  }

  public int getHandleUserId() {
    return this.handleUserId;
  }

  public HouseBalanceDTO setHandleUserId(int handleUserId) {
    this.handleUserId = handleUserId;
    setHandleUserIdIsSet(true);
    return this;
  }

  public void unsetHandleUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID);
  }

  /** Returns true if field handleUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID);
  }

  public void setHandleUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID, value);
  }

  public String getHandleUserName() {
    return this.handleUserName;
  }

  public HouseBalanceDTO setHandleUserName(String handleUserName) {
    this.handleUserName = handleUserName;
    return this;
  }

  public void unsetHandleUserName() {
    this.handleUserName = null;
  }

  /** Returns true if field handleUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleUserName() {
    return this.handleUserName != null;
  }

  public void setHandleUserNameIsSet(boolean value) {
    if (!value) {
      this.handleUserName = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public HouseBalanceDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getCreaterName() {
    return this.createrName;
  }

  public HouseBalanceDTO setCreaterName(String createrName) {
    this.createrName = createrName;
    return this;
  }

  public void unsetCreaterName() {
    this.createrName = null;
  }

  /** Returns true if field createrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterName() {
    return this.createrName != null;
  }

  public void setCreaterNameIsSet(boolean value) {
    if (!value) {
      this.createrName = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public HouseBalanceDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public double getLoanAmount() {
    return this.loanAmount;
  }

  public HouseBalanceDTO setLoanAmount(double loanAmount) {
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    return this;
  }

  public void unsetLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field loanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  public void setLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID, value);
  }

  public String getLoanTime() {
    return this.loanTime;
  }

  public HouseBalanceDTO setLoanTime(String loanTime) {
    this.loanTime = loanTime;
    return this;
  }

  public void unsetLoanTime() {
    this.loanTime = null;
  }

  /** Returns true if field loanTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTime() {
    return this.loanTime != null;
  }

  public void setLoanTimeIsSet(boolean value) {
    if (!value) {
      this.loanTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((Double)value);
      }
      break;

    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((String)value);
      }
      break;

    case HOUSE_CLERK:
      if (value == null) {
        unsetHouseClerk();
      } else {
        setHouseClerk((String)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case DEFAULT_INTEREST:
      if (value == null) {
        unsetDefaultInterest();
      } else {
        setDefaultInterest((Double)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case BACK_ACCOUNT:
      if (value == null) {
        unsetBackAccount();
      } else {
        setBackAccount((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case BALANCE_CONFIRM:
      if (value == null) {
        unsetBalanceConfirm();
      } else {
        setBalanceConfirm((Integer)value);
      }
      break;

    case HANDLE_USER_ID:
      if (value == null) {
        unsetHandleUserId();
      } else {
        setHandleUserId((Integer)value);
      }
      break;

    case HANDLE_USER_NAME:
      if (value == null) {
        unsetHandleUserName();
      } else {
        setHandleUserName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CREATER_NAME:
      if (value == null) {
        unsetCreaterName();
      } else {
        setCreaterName((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case LOAN_AMOUNT:
      if (value == null) {
        unsetLoanAmount();
      } else {
        setLoanAmount((Double)value);
      }
      break;

    case LOAN_TIME:
      if (value == null) {
        unsetLoanTime();
      } else {
        setLoanTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case PRINCIPAL:
      return Double.valueOf(getPrincipal());

    case PAY_DATE:
      return getPayDate();

    case HOUSE_CLERK:
      return getHouseClerk();

    case INTEREST:
      return Double.valueOf(getInterest());

    case DEFAULT_INTEREST:
      return Double.valueOf(getDefaultInterest());

    case BALANCE:
      return Double.valueOf(getBalance());

    case BACK_ACCOUNT:
      return getBackAccount();

    case COUNT:
      return Integer.valueOf(getCount());

    case REMARK:
      return getRemark();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case BALANCE_CONFIRM:
      return Integer.valueOf(getBalanceConfirm());

    case HANDLE_USER_ID:
      return Integer.valueOf(getHandleUserId());

    case HANDLE_USER_NAME:
      return getHandleUserName();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CREATER_NAME:
      return getCreaterName();

    case CREATER_DATE:
      return getCreaterDate();

    case LOAN_AMOUNT:
      return Double.valueOf(getLoanAmount());

    case LOAN_TIME:
      return getLoanTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case HANDLE_ID:
      return isSetHandleId();
    case PRINCIPAL:
      return isSetPrincipal();
    case PAY_DATE:
      return isSetPayDate();
    case HOUSE_CLERK:
      return isSetHouseClerk();
    case INTEREST:
      return isSetInterest();
    case DEFAULT_INTEREST:
      return isSetDefaultInterest();
    case BALANCE:
      return isSetBalance();
    case BACK_ACCOUNT:
      return isSetBackAccount();
    case COUNT:
      return isSetCount();
    case REMARK:
      return isSetRemark();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case BALANCE_CONFIRM:
      return isSetBalanceConfirm();
    case HANDLE_USER_ID:
      return isSetHandleUserId();
    case HANDLE_USER_NAME:
      return isSetHandleUserName();
    case PROJECT_ID:
      return isSetProjectId();
    case CREATER_NAME:
      return isSetCreaterName();
    case CREATER_DATE:
      return isSetCreaterDate();
    case LOAN_AMOUNT:
      return isSetLoanAmount();
    case LOAN_TIME:
      return isSetLoanTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HouseBalanceDTO)
      return this.equals((HouseBalanceDTO)that);
    return false;
  }

  public boolean equals(HouseBalanceDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_principal = true;
    boolean that_present_principal = true;
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (this.principal != that.principal)
        return false;
    }

    boolean this_present_payDate = true && this.isSetPayDate();
    boolean that_present_payDate = true && that.isSetPayDate();
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (!this.payDate.equals(that.payDate))
        return false;
    }

    boolean this_present_houseClerk = true && this.isSetHouseClerk();
    boolean that_present_houseClerk = true && that.isSetHouseClerk();
    if (this_present_houseClerk || that_present_houseClerk) {
      if (!(this_present_houseClerk && that_present_houseClerk))
        return false;
      if (!this.houseClerk.equals(that.houseClerk))
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_defaultInterest = true;
    boolean that_present_defaultInterest = true;
    if (this_present_defaultInterest || that_present_defaultInterest) {
      if (!(this_present_defaultInterest && that_present_defaultInterest))
        return false;
      if (this.defaultInterest != that.defaultInterest)
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_backAccount = true && this.isSetBackAccount();
    boolean that_present_backAccount = true && that.isSetBackAccount();
    if (this_present_backAccount || that_present_backAccount) {
      if (!(this_present_backAccount && that_present_backAccount))
        return false;
      if (!this.backAccount.equals(that.backAccount))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_balanceConfirm = true;
    boolean that_present_balanceConfirm = true;
    if (this_present_balanceConfirm || that_present_balanceConfirm) {
      if (!(this_present_balanceConfirm && that_present_balanceConfirm))
        return false;
      if (this.balanceConfirm != that.balanceConfirm)
        return false;
    }

    boolean this_present_handleUserId = true;
    boolean that_present_handleUserId = true;
    if (this_present_handleUserId || that_present_handleUserId) {
      if (!(this_present_handleUserId && that_present_handleUserId))
        return false;
      if (this.handleUserId != that.handleUserId)
        return false;
    }

    boolean this_present_handleUserName = true && this.isSetHandleUserName();
    boolean that_present_handleUserName = true && that.isSetHandleUserName();
    if (this_present_handleUserName || that_present_handleUserName) {
      if (!(this_present_handleUserName && that_present_handleUserName))
        return false;
      if (!this.handleUserName.equals(that.handleUserName))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_createrName = true && this.isSetCreaterName();
    boolean that_present_createrName = true && that.isSetCreaterName();
    if (this_present_createrName || that_present_createrName) {
      if (!(this_present_createrName && that_present_createrName))
        return false;
      if (!this.createrName.equals(that.createrName))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_loanAmount = true;
    boolean that_present_loanAmount = true;
    if (this_present_loanAmount || that_present_loanAmount) {
      if (!(this_present_loanAmount && that_present_loanAmount))
        return false;
      if (this.loanAmount != that.loanAmount)
        return false;
    }

    boolean this_present_loanTime = true && this.isSetLoanTime();
    boolean that_present_loanTime = true && that.isSetLoanTime();
    if (this_present_loanTime || that_present_loanTime) {
      if (!(this_present_loanTime && that_present_loanTime))
        return false;
      if (!this.loanTime.equals(that.loanTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_principal = true;
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    boolean present_payDate = true && (isSetPayDate());
    list.add(present_payDate);
    if (present_payDate)
      list.add(payDate);

    boolean present_houseClerk = true && (isSetHouseClerk());
    list.add(present_houseClerk);
    if (present_houseClerk)
      list.add(houseClerk);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_defaultInterest = true;
    list.add(present_defaultInterest);
    if (present_defaultInterest)
      list.add(defaultInterest);

    boolean present_balance = true;
    list.add(present_balance);
    if (present_balance)
      list.add(balance);

    boolean present_backAccount = true && (isSetBackAccount());
    list.add(present_backAccount);
    if (present_backAccount)
      list.add(backAccount);

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_balanceConfirm = true;
    list.add(present_balanceConfirm);
    if (present_balanceConfirm)
      list.add(balanceConfirm);

    boolean present_handleUserId = true;
    list.add(present_handleUserId);
    if (present_handleUserId)
      list.add(handleUserId);

    boolean present_handleUserName = true && (isSetHandleUserName());
    list.add(present_handleUserName);
    if (present_handleUserName)
      list.add(handleUserName);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_createrName = true && (isSetCreaterName());
    list.add(present_createrName);
    if (present_createrName)
      list.add(createrName);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_loanAmount = true;
    list.add(present_loanAmount);
    if (present_loanAmount)
      list.add(loanAmount);

    boolean present_loanTime = true && (isSetLoanTime());
    list.add(present_loanTime);
    if (present_loanTime)
      list.add(loanTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(HouseBalanceDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerk()).compareTo(other.isSetHouseClerk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerk, other.houseClerk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultInterest()).compareTo(other.isSetDefaultInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultInterest, other.defaultInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackAccount()).compareTo(other.isSetBackAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backAccount, other.backAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceConfirm()).compareTo(other.isSetBalanceConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceConfirm, other.balanceConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleUserId()).compareTo(other.isSetHandleUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleUserId, other.handleUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleUserName()).compareTo(other.isSetHandleUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleUserName, other.handleUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterName()).compareTo(other.isSetCreaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrName, other.createrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmount()).compareTo(other.isSetLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmount, other.loanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTime()).compareTo(other.isSetLoanTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTime, other.loanTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HouseBalanceDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    sb.append(this.principal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payDate:");
    if (this.payDate == null) {
      sb.append("null");
    } else {
      sb.append(this.payDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerk:");
    if (this.houseClerk == null) {
      sb.append("null");
    } else {
      sb.append(this.houseClerk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultInterest:");
    sb.append(this.defaultInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("backAccount:");
    if (this.backAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.backAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceConfirm:");
    sb.append(this.balanceConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleUserId:");
    sb.append(this.handleUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleUserName:");
    if (this.handleUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.handleUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrName:");
    if (this.createrName == null) {
      sb.append("null");
    } else {
      sb.append(this.createrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmount:");
    sb.append(this.loanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTime:");
    if (this.loanTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loanTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HouseBalanceDTOStandardSchemeFactory implements SchemeFactory {
    public HouseBalanceDTOStandardScheme getScheme() {
      return new HouseBalanceDTOStandardScheme();
    }
  }

  private static class HouseBalanceDTOStandardScheme extends StandardScheme<HouseBalanceDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HouseBalanceDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal = iprot.readDouble();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payDate = iprot.readString();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOUSE_CLERK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseClerk = iprot.readString();
              struct.setHouseClerkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultInterest = iprot.readDouble();
              struct.setDefaultInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BACK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backAccount = iprot.readString();
              struct.setBackAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list72.size);
                int _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI32();
                  struct.userIds.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BALANCE_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.balanceConfirm = iprot.readI32();
              struct.setBalanceConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HANDLE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleUserId = iprot.readI32();
              struct.setHandleUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HANDLE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleUserName = iprot.readString();
              struct.setHandleUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrName = iprot.readString();
              struct.setCreaterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmount = iprot.readDouble();
              struct.setLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LOAN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanTime = iprot.readString();
              struct.setLoanTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HouseBalanceDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.principal);
      oprot.writeFieldEnd();
      if (struct.payDate != null) {
        oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.payDate);
        oprot.writeFieldEnd();
      }
      if (struct.houseClerk != null) {
        oprot.writeFieldBegin(HOUSE_CLERK_FIELD_DESC);
        oprot.writeString(struct.houseClerk);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.defaultInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.balance);
      oprot.writeFieldEnd();
      if (struct.backAccount != null) {
        oprot.writeFieldBegin(BACK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.backAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter75 : struct.userIds)
          {
            oprot.writeI32(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.balanceConfirm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.handleUserId);
      oprot.writeFieldEnd();
      if (struct.handleUserName != null) {
        oprot.writeFieldBegin(HANDLE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.handleUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.createrName != null) {
        oprot.writeFieldBegin(CREATER_NAME_FIELD_DESC);
        oprot.writeString(struct.createrName);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmount);
      oprot.writeFieldEnd();
      if (struct.loanTime != null) {
        oprot.writeFieldBegin(LOAN_TIME_FIELD_DESC);
        oprot.writeString(struct.loanTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HouseBalanceDTOTupleSchemeFactory implements SchemeFactory {
    public HouseBalanceDTOTupleScheme getScheme() {
      return new HouseBalanceDTOTupleScheme();
    }
  }

  private static class HouseBalanceDTOTupleScheme extends TupleScheme<HouseBalanceDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HouseBalanceDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetHandleId()) {
        optionals.set(1);
      }
      if (struct.isSetPrincipal()) {
        optionals.set(2);
      }
      if (struct.isSetPayDate()) {
        optionals.set(3);
      }
      if (struct.isSetHouseClerk()) {
        optionals.set(4);
      }
      if (struct.isSetInterest()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultInterest()) {
        optionals.set(6);
      }
      if (struct.isSetBalance()) {
        optionals.set(7);
      }
      if (struct.isSetBackAccount()) {
        optionals.set(8);
      }
      if (struct.isSetCount()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetBalanceConfirm()) {
        optionals.set(15);
      }
      if (struct.isSetHandleUserId()) {
        optionals.set(16);
      }
      if (struct.isSetHandleUserName()) {
        optionals.set(17);
      }
      if (struct.isSetProjectId()) {
        optionals.set(18);
      }
      if (struct.isSetCreaterName()) {
        optionals.set(19);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(20);
      }
      if (struct.isSetLoanAmount()) {
        optionals.set(21);
      }
      if (struct.isSetLoanTime()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetPrincipal()) {
        oprot.writeDouble(struct.principal);
      }
      if (struct.isSetPayDate()) {
        oprot.writeString(struct.payDate);
      }
      if (struct.isSetHouseClerk()) {
        oprot.writeString(struct.houseClerk);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetDefaultInterest()) {
        oprot.writeDouble(struct.defaultInterest);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetBackAccount()) {
        oprot.writeString(struct.backAccount);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter76 : struct.userIds)
          {
            oprot.writeI32(_iter76);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetBalanceConfirm()) {
        oprot.writeI32(struct.balanceConfirm);
      }
      if (struct.isSetHandleUserId()) {
        oprot.writeI32(struct.handleUserId);
      }
      if (struct.isSetHandleUserName()) {
        oprot.writeString(struct.handleUserName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCreaterName()) {
        oprot.writeString(struct.createrName);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetLoanAmount()) {
        oprot.writeDouble(struct.loanAmount);
      }
      if (struct.isSetLoanTime()) {
        oprot.writeString(struct.loanTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HouseBalanceDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.principal = iprot.readDouble();
        struct.setPrincipalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payDate = iprot.readString();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.houseClerk = iprot.readString();
        struct.setHouseClerkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultInterest = iprot.readDouble();
        struct.setDefaultInterestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.backAccount = iprot.readString();
        struct.setBackAccountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.userIds.add(_elem78);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.balanceConfirm = iprot.readI32();
        struct.setBalanceConfirmIsSet(true);
      }
      if (incoming.get(16)) {
        struct.handleUserId = iprot.readI32();
        struct.setHandleUserIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.handleUserName = iprot.readString();
        struct.setHandleUserNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createrName = iprot.readString();
        struct.setCreaterNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.loanAmount = iprot.readDouble();
        struct.setLoanAmountIsSet(true);
      }
      if (incoming.get(22)) {
        struct.loanTime = iprot.readString();
        struct.setLoanTimeIsSet(true);
      }
    }
  }

}


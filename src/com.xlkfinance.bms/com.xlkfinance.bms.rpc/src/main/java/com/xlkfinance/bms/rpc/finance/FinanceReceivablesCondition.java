/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceReceivablesCondition implements org.apache.thrift.TBase<FinanceReceivablesCondition, FinanceReceivablesCondition._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceReceivablesCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceReceivablesCondition");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAmount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAYMENT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDttm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("useBalance", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceReceivablesConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceReceivablesConditionTupleSchemeFactory());
  }

  public String pid; // required
  public String loanId; // required
  public String paymentAmount; // required
  public String paymentDttm; // required
  public String useBalance; // required
  public String reconciliation; // required
  public String status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    PAYMENT_AMOUNT((short)3, "paymentAmount"),
    PAYMENT_DTTM((short)4, "paymentDttm"),
    USE_BALANCE((short)5, "useBalance"),
    RECONCILIATION((short)6, "reconciliation"),
    STATUS((short)7, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PAYMENT_AMOUNT
          return PAYMENT_AMOUNT;
        case 4: // PAYMENT_DTTM
          return PAYMENT_DTTM;
        case 5: // USE_BALANCE
          return USE_BALANCE;
        case 6: // RECONCILIATION
          return RECONCILIATION;
        case 7: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("paymentAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("paymentDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("useBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("reconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceReceivablesCondition.class, metaDataMap);
  }

  public FinanceReceivablesCondition() {
  }

  public FinanceReceivablesCondition(
    String pid,
    String loanId,
    String paymentAmount,
    String paymentDttm,
    String useBalance,
    String reconciliation,
    String status)
  {
    this();
    this.pid = pid;
    this.loanId = loanId;
    this.paymentAmount = paymentAmount;
    this.paymentDttm = paymentDttm;
    this.useBalance = useBalance;
    this.reconciliation = reconciliation;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceReceivablesCondition(FinanceReceivablesCondition other) {
    if (other.isSetPid()) {
      this.pid = other.pid;
    }
    if (other.isSetLoanId()) {
      this.loanId = other.loanId;
    }
    if (other.isSetPaymentAmount()) {
      this.paymentAmount = other.paymentAmount;
    }
    if (other.isSetPaymentDttm()) {
      this.paymentDttm = other.paymentDttm;
    }
    if (other.isSetUseBalance()) {
      this.useBalance = other.useBalance;
    }
    if (other.isSetReconciliation()) {
      this.reconciliation = other.reconciliation;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public FinanceReceivablesCondition deepCopy() {
    return new FinanceReceivablesCondition(this);
  }

  @Override
  public void clear() {
    this.pid = null;
    this.loanId = null;
    this.paymentAmount = null;
    this.paymentDttm = null;
    this.useBalance = null;
    this.reconciliation = null;
    this.status = null;
  }

  public String getPid() {
    return this.pid;
  }

  public FinanceReceivablesCondition setPid(String pid) {
    this.pid = pid;
    return this;
  }

  public void unsetPid() {
    this.pid = null;
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return this.pid != null;
  }

  public void setPidIsSet(boolean value) {
    if (!value) {
      this.pid = null;
    }
  }

  public String getLoanId() {
    return this.loanId;
  }

  public FinanceReceivablesCondition setLoanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

  public void unsetLoanId() {
    this.loanId = null;
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return this.loanId != null;
  }

  public void setLoanIdIsSet(boolean value) {
    if (!value) {
      this.loanId = null;
    }
  }

  public String getPaymentAmount() {
    return this.paymentAmount;
  }

  public FinanceReceivablesCondition setPaymentAmount(String paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  public void unsetPaymentAmount() {
    this.paymentAmount = null;
  }

  /** Returns true if field paymentAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAmount() {
    return this.paymentAmount != null;
  }

  public void setPaymentAmountIsSet(boolean value) {
    if (!value) {
      this.paymentAmount = null;
    }
  }

  public String getPaymentDttm() {
    return this.paymentDttm;
  }

  public FinanceReceivablesCondition setPaymentDttm(String paymentDttm) {
    this.paymentDttm = paymentDttm;
    return this;
  }

  public void unsetPaymentDttm() {
    this.paymentDttm = null;
  }

  /** Returns true if field paymentDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDttm() {
    return this.paymentDttm != null;
  }

  public void setPaymentDttmIsSet(boolean value) {
    if (!value) {
      this.paymentDttm = null;
    }
  }

  public String getUseBalance() {
    return this.useBalance;
  }

  public FinanceReceivablesCondition setUseBalance(String useBalance) {
    this.useBalance = useBalance;
    return this;
  }

  public void unsetUseBalance() {
    this.useBalance = null;
  }

  /** Returns true if field useBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetUseBalance() {
    return this.useBalance != null;
  }

  public void setUseBalanceIsSet(boolean value) {
    if (!value) {
      this.useBalance = null;
    }
  }

  public String getReconciliation() {
    return this.reconciliation;
  }

  public FinanceReceivablesCondition setReconciliation(String reconciliation) {
    this.reconciliation = reconciliation;
    return this;
  }

  public void unsetReconciliation() {
    this.reconciliation = null;
  }

  /** Returns true if field reconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliation() {
    return this.reconciliation != null;
  }

  public void setReconciliationIsSet(boolean value) {
    if (!value) {
      this.reconciliation = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public FinanceReceivablesCondition setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((String)value);
      }
      break;

    case PAYMENT_AMOUNT:
      if (value == null) {
        unsetPaymentAmount();
      } else {
        setPaymentAmount((String)value);
      }
      break;

    case PAYMENT_DTTM:
      if (value == null) {
        unsetPaymentDttm();
      } else {
        setPaymentDttm((String)value);
      }
      break;

    case USE_BALANCE:
      if (value == null) {
        unsetUseBalance();
      } else {
        setUseBalance((String)value);
      }
      break;

    case RECONCILIATION:
      if (value == null) {
        unsetReconciliation();
      } else {
        setReconciliation((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return getPid();

    case LOAN_ID:
      return getLoanId();

    case PAYMENT_AMOUNT:
      return getPaymentAmount();

    case PAYMENT_DTTM:
      return getPaymentDttm();

    case USE_BALANCE:
      return getUseBalance();

    case RECONCILIATION:
      return getReconciliation();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case PAYMENT_AMOUNT:
      return isSetPaymentAmount();
    case PAYMENT_DTTM:
      return isSetPaymentDttm();
    case USE_BALANCE:
      return isSetUseBalance();
    case RECONCILIATION:
      return isSetReconciliation();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceReceivablesCondition)
      return this.equals((FinanceReceivablesCondition)that);
    return false;
  }

  public boolean equals(FinanceReceivablesCondition that) {
    if (that == null)
      return false;

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (!this.pid.equals(that.pid))
        return false;
    }

    boolean this_present_loanId = true && this.isSetLoanId();
    boolean that_present_loanId = true && that.isSetLoanId();
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (!this.loanId.equals(that.loanId))
        return false;
    }

    boolean this_present_paymentAmount = true && this.isSetPaymentAmount();
    boolean that_present_paymentAmount = true && that.isSetPaymentAmount();
    if (this_present_paymentAmount || that_present_paymentAmount) {
      if (!(this_present_paymentAmount && that_present_paymentAmount))
        return false;
      if (!this.paymentAmount.equals(that.paymentAmount))
        return false;
    }

    boolean this_present_paymentDttm = true && this.isSetPaymentDttm();
    boolean that_present_paymentDttm = true && that.isSetPaymentDttm();
    if (this_present_paymentDttm || that_present_paymentDttm) {
      if (!(this_present_paymentDttm && that_present_paymentDttm))
        return false;
      if (!this.paymentDttm.equals(that.paymentDttm))
        return false;
    }

    boolean this_present_useBalance = true && this.isSetUseBalance();
    boolean that_present_useBalance = true && that.isSetUseBalance();
    if (this_present_useBalance || that_present_useBalance) {
      if (!(this_present_useBalance && that_present_useBalance))
        return false;
      if (!this.useBalance.equals(that.useBalance))
        return false;
    }

    boolean this_present_reconciliation = true && this.isSetReconciliation();
    boolean that_present_reconciliation = true && that.isSetReconciliation();
    if (this_present_reconciliation || that_present_reconciliation) {
      if (!(this_present_reconciliation && that_present_reconciliation))
        return false;
      if (!this.reconciliation.equals(that.reconciliation))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true && (isSetPid());
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true && (isSetLoanId());
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_paymentAmount = true && (isSetPaymentAmount());
    list.add(present_paymentAmount);
    if (present_paymentAmount)
      list.add(paymentAmount);

    boolean present_paymentDttm = true && (isSetPaymentDttm());
    list.add(present_paymentDttm);
    if (present_paymentDttm)
      list.add(paymentDttm);

    boolean present_useBalance = true && (isSetUseBalance());
    list.add(present_useBalance);
    if (present_useBalance)
      list.add(useBalance);

    boolean present_reconciliation = true && (isSetReconciliation());
    list.add(present_reconciliation);
    if (present_reconciliation)
      list.add(reconciliation);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceReceivablesCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAmount()).compareTo(other.isSetPaymentAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAmount, other.paymentAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDttm()).compareTo(other.isSetPaymentDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDttm, other.paymentDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseBalance()).compareTo(other.isSetUseBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBalance, other.useBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliation()).compareTo(other.isSetReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliation, other.reconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceReceivablesCondition(");
    boolean first = true;

    sb.append("pid:");
    if (this.pid == null) {
      sb.append("null");
    } else {
      sb.append(this.pid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    if (this.loanId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAmount:");
    if (this.paymentAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDttm:");
    if (this.paymentDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useBalance:");
    if (this.useBalance == null) {
      sb.append("null");
    } else {
      sb.append(this.useBalance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliation:");
    if (this.reconciliation == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciliation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceReceivablesConditionStandardSchemeFactory implements SchemeFactory {
    public FinanceReceivablesConditionStandardScheme getScheme() {
      return new FinanceReceivablesConditionStandardScheme();
    }
  }

  private static class FinanceReceivablesConditionStandardScheme extends StandardScheme<FinanceReceivablesCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceReceivablesCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pid = iprot.readString();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanId = iprot.readString();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAmount = iprot.readString();
              struct.setPaymentAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAYMENT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDttm = iprot.readString();
              struct.setPaymentDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useBalance = iprot.readString();
              struct.setUseBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciliation = iprot.readString();
              struct.setReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceReceivablesCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pid != null) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeString(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.loanId != null) {
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeString(struct.loanId);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAmount != null) {
        oprot.writeFieldBegin(PAYMENT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.paymentAmount);
        oprot.writeFieldEnd();
      }
      if (struct.paymentDttm != null) {
        oprot.writeFieldBegin(PAYMENT_DTTM_FIELD_DESC);
        oprot.writeString(struct.paymentDttm);
        oprot.writeFieldEnd();
      }
      if (struct.useBalance != null) {
        oprot.writeFieldBegin(USE_BALANCE_FIELD_DESC);
        oprot.writeString(struct.useBalance);
        oprot.writeFieldEnd();
      }
      if (struct.reconciliation != null) {
        oprot.writeFieldBegin(RECONCILIATION_FIELD_DESC);
        oprot.writeString(struct.reconciliation);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceReceivablesConditionTupleSchemeFactory implements SchemeFactory {
    public FinanceReceivablesConditionTupleScheme getScheme() {
      return new FinanceReceivablesConditionTupleScheme();
    }
  }

  private static class FinanceReceivablesConditionTupleScheme extends TupleScheme<FinanceReceivablesCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentAmount()) {
        optionals.set(2);
      }
      if (struct.isSetPaymentDttm()) {
        optionals.set(3);
      }
      if (struct.isSetUseBalance()) {
        optionals.set(4);
      }
      if (struct.isSetReconciliation()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPid()) {
        oprot.writeString(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeString(struct.loanId);
      }
      if (struct.isSetPaymentAmount()) {
        oprot.writeString(struct.paymentAmount);
      }
      if (struct.isSetPaymentDttm()) {
        oprot.writeString(struct.paymentDttm);
      }
      if (struct.isSetUseBalance()) {
        oprot.writeString(struct.useBalance);
      }
      if (struct.isSetReconciliation()) {
        oprot.writeString(struct.reconciliation);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pid = iprot.readString();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readString();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentAmount = iprot.readString();
        struct.setPaymentAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.paymentDttm = iprot.readString();
        struct.setPaymentDttmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.useBalance = iprot.readString();
        struct.setUseBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reconciliation = iprot.readString();
        struct.setReconciliationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
    }
  }

}


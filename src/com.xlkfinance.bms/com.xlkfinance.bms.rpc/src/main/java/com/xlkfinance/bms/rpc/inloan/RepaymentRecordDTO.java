/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RepaymentRecordDTO implements org.apache.thrift.TBase<RepaymentRecordDTO, RepaymentRecordDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentRecordDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentRecordDTO");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REPAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REPAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CREATER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createrName", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentRecordDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentRecordDTOTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public int pid; // required
  public int projectId; // required
  public int repaymentId; // required
  public double repaymentMoney; // required
  public String repaymentDate; // required
  public int createrId; // required
  public String createrDate; // required
  public String remark; // required
  public String accountNo; // required
  public int orgId; // required
  public String repaymentType; // required
  public int planCycleNum; // required
  public String createrName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    USER_IDS((short)3, "userIds"),
    PID((short)4, "pid"),
    PROJECT_ID((short)5, "projectId"),
    REPAYMENT_ID((short)6, "repaymentId"),
    REPAYMENT_MONEY((short)7, "repaymentMoney"),
    REPAYMENT_DATE((short)8, "repaymentDate"),
    CREATER_ID((short)9, "createrId"),
    CREATER_DATE((short)10, "createrDate"),
    REMARK((short)11, "remark"),
    ACCOUNT_NO((short)12, "accountNo"),
    ORG_ID((short)13, "orgId"),
    REPAYMENT_TYPE((short)14, "repaymentType"),
    PLAN_CYCLE_NUM((short)15, "planCycleNum"),
    CREATER_NAME((short)16, "createrName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // USER_IDS
          return USER_IDS;
        case 4: // PID
          return PID;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // REPAYMENT_ID
          return REPAYMENT_ID;
        case 7: // REPAYMENT_MONEY
          return REPAYMENT_MONEY;
        case 8: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // CREATER_DATE
          return CREATER_DATE;
        case 11: // REMARK
          return REMARK;
        case 12: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 13: // ORG_ID
          return ORG_ID;
        case 14: // REPAYMENT_TYPE
          return REPAYMENT_TYPE;
        case 15: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 16: // CREATER_NAME
          return CREATER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __REPAYMENTID_ISSET_ID = 4;
  private static final int __REPAYMENTMONEY_ISSET_ID = 5;
  private static final int __CREATERID_ISSET_ID = 6;
  private static final int __ORGID_ISSET_ID = 7;
  private static final int __PLANCYCLENUM_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentRecordDTO.class, metaDataMap);
  }

  public RepaymentRecordDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public RepaymentRecordDTO(
    int page,
    int rows,
    List<Integer> userIds,
    int pid,
    int projectId,
    int repaymentId,
    double repaymentMoney,
    String repaymentDate,
    int createrId,
    String createrDate,
    String remark,
    String accountNo,
    int orgId,
    String repaymentType,
    int planCycleNum,
    String createrName)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    this.repaymentDate = repaymentDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.createrDate = createrDate;
    this.remark = remark;
    this.accountNo = accountNo;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.repaymentType = repaymentType;
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.createrName = createrName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentRecordDTO(RepaymentRecordDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.repaymentId = other.repaymentId;
    this.repaymentMoney = other.repaymentMoney;
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    this.createrId = other.createrId;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    this.orgId = other.orgId;
    if (other.isSetRepaymentType()) {
      this.repaymentType = other.repaymentType;
    }
    this.planCycleNum = other.planCycleNum;
    if (other.isSetCreaterName()) {
      this.createrName = other.createrName;
    }
  }

  public RepaymentRecordDTO deepCopy() {
    return new RepaymentRecordDTO(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRepaymentIdIsSet(false);
    this.repaymentId = 0;
    setRepaymentMoneyIsSet(false);
    this.repaymentMoney = 0.0;
    this.repaymentDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.createrDate = null;
    this.remark = null;
    this.accountNo = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.repaymentType = null;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    this.createrName = null;
  }

  public int getPage() {
    return this.page;
  }

  public RepaymentRecordDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RepaymentRecordDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RepaymentRecordDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentRecordDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentRecordDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRepaymentId() {
    return this.repaymentId;
  }

  public RepaymentRecordDTO setRepaymentId(int repaymentId) {
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    return this;
  }

  public void unsetRepaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  /** Returns true if field repaymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  public void setRepaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTID_ISSET_ID, value);
  }

  public double getRepaymentMoney() {
    return this.repaymentMoney;
  }

  public RepaymentRecordDTO setRepaymentMoney(double repaymentMoney) {
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field repaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  public void setRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID, value);
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public RepaymentRecordDTO setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public RepaymentRecordDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public RepaymentRecordDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public RepaymentRecordDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public RepaymentRecordDTO setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public RepaymentRecordDTO setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public String getRepaymentType() {
    return this.repaymentType;
  }

  public RepaymentRecordDTO setRepaymentType(String repaymentType) {
    this.repaymentType = repaymentType;
    return this;
  }

  public void unsetRepaymentType() {
    this.repaymentType = null;
  }

  /** Returns true if field repaymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentType() {
    return this.repaymentType != null;
  }

  public void setRepaymentTypeIsSet(boolean value) {
    if (!value) {
      this.repaymentType = null;
    }
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepaymentRecordDTO setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public String getCreaterName() {
    return this.createrName;
  }

  public RepaymentRecordDTO setCreaterName(String createrName) {
    this.createrName = createrName;
    return this;
  }

  public void unsetCreaterName() {
    this.createrName = null;
  }

  /** Returns true if field createrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterName() {
    return this.createrName != null;
  }

  public void setCreaterNameIsSet(boolean value) {
    if (!value) {
      this.createrName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REPAYMENT_ID:
      if (value == null) {
        unsetRepaymentId();
      } else {
        setRepaymentId((Integer)value);
      }
      break;

    case REPAYMENT_MONEY:
      if (value == null) {
        unsetRepaymentMoney();
      } else {
        setRepaymentMoney((Double)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case REPAYMENT_TYPE:
      if (value == null) {
        unsetRepaymentType();
      } else {
        setRepaymentType((String)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case CREATER_NAME:
      if (value == null) {
        unsetCreaterName();
      } else {
        setCreaterName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REPAYMENT_ID:
      return Integer.valueOf(getRepaymentId());

    case REPAYMENT_MONEY:
      return Double.valueOf(getRepaymentMoney());

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case CREATER_DATE:
      return getCreaterDate();

    case REMARK:
      return getRemark();

    case ACCOUNT_NO:
      return getAccountNo();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case REPAYMENT_TYPE:
      return getRepaymentType();

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case CREATER_NAME:
      return getCreaterName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case REPAYMENT_ID:
      return isSetRepaymentId();
    case REPAYMENT_MONEY:
      return isSetRepaymentMoney();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case CREATER_ID:
      return isSetCreaterId();
    case CREATER_DATE:
      return isSetCreaterDate();
    case REMARK:
      return isSetRemark();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case ORG_ID:
      return isSetOrgId();
    case REPAYMENT_TYPE:
      return isSetRepaymentType();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case CREATER_NAME:
      return isSetCreaterName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentRecordDTO)
      return this.equals((RepaymentRecordDTO)that);
    return false;
  }

  public boolean equals(RepaymentRecordDTO that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_repaymentId = true;
    boolean that_present_repaymentId = true;
    if (this_present_repaymentId || that_present_repaymentId) {
      if (!(this_present_repaymentId && that_present_repaymentId))
        return false;
      if (this.repaymentId != that.repaymentId)
        return false;
    }

    boolean this_present_repaymentMoney = true;
    boolean that_present_repaymentMoney = true;
    if (this_present_repaymentMoney || that_present_repaymentMoney) {
      if (!(this_present_repaymentMoney && that_present_repaymentMoney))
        return false;
      if (this.repaymentMoney != that.repaymentMoney)
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_repaymentType = true && this.isSetRepaymentType();
    boolean that_present_repaymentType = true && that.isSetRepaymentType();
    if (this_present_repaymentType || that_present_repaymentType) {
      if (!(this_present_repaymentType && that_present_repaymentType))
        return false;
      if (!this.repaymentType.equals(that.repaymentType))
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_createrName = true && this.isSetCreaterName();
    boolean that_present_createrName = true && that.isSetCreaterName();
    if (this_present_createrName || that_present_createrName) {
      if (!(this_present_createrName && that_present_createrName))
        return false;
      if (!this.createrName.equals(that.createrName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_repaymentId = true;
    list.add(present_repaymentId);
    if (present_repaymentId)
      list.add(repaymentId);

    boolean present_repaymentMoney = true;
    list.add(present_repaymentMoney);
    if (present_repaymentMoney)
      list.add(repaymentMoney);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_repaymentType = true && (isSetRepaymentType());
    list.add(present_repaymentType);
    if (present_repaymentType)
      list.add(repaymentType);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_createrName = true && (isSetCreaterName());
    list.add(present_createrName);
    if (present_createrName)
      list.add(createrName);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentRecordDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentId()).compareTo(other.isSetRepaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentId, other.repaymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoney()).compareTo(other.isSetRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoney, other.repaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentType()).compareTo(other.isSetRepaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentType, other.repaymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterName()).compareTo(other.isSetCreaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrName, other.createrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentRecordDTO(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentId:");
    sb.append(this.repaymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoney:");
    sb.append(this.repaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentType:");
    if (this.repaymentType == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrName:");
    if (this.createrName == null) {
      sb.append("null");
    } else {
      sb.append(this.createrName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentRecordDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentRecordDTOStandardScheme getScheme() {
      return new RepaymentRecordDTOStandardScheme();
    }
  }

  private static class RepaymentRecordDTOStandardScheme extends StandardScheme<RepaymentRecordDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentRecordDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list256.size);
                int _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = iprot.readI32();
                  struct.userIds.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentId = iprot.readI32();
              struct.setRepaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoney = iprot.readDouble();
              struct.setRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentType = iprot.readString();
              struct.setRepaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrName = iprot.readString();
              struct.setCreaterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentRecordDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter259 : struct.userIds)
          {
            oprot.writeI32(_iter259);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoney);
      oprot.writeFieldEnd();
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.repaymentType != null) {
        oprot.writeFieldBegin(REPAYMENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.repaymentType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      if (struct.createrName != null) {
        oprot.writeFieldBegin(CREATER_NAME_FIELD_DESC);
        oprot.writeString(struct.createrName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentRecordDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentRecordDTOTupleScheme getScheme() {
      return new RepaymentRecordDTOTupleScheme();
    }
  }

  private static class RepaymentRecordDTOTupleScheme extends TupleScheme<RepaymentRecordDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentRecordDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetUserIds()) {
        optionals.set(2);
      }
      if (struct.isSetPid()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetRepaymentId()) {
        optionals.set(5);
      }
      if (struct.isSetRepaymentMoney()) {
        optionals.set(6);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(7);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(11);
      }
      if (struct.isSetOrgId()) {
        optionals.set(12);
      }
      if (struct.isSetRepaymentType()) {
        optionals.set(13);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(14);
      }
      if (struct.isSetCreaterName()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter260 : struct.userIds)
          {
            oprot.writeI32(_iter260);
          }
        }
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRepaymentId()) {
        oprot.writeI32(struct.repaymentId);
      }
      if (struct.isSetRepaymentMoney()) {
        oprot.writeDouble(struct.repaymentMoney);
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetRepaymentType()) {
        oprot.writeString(struct.repaymentType);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetCreaterName()) {
        oprot.writeString(struct.createrName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentRecordDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list261.size);
          int _elem262;
          for (int _i263 = 0; _i263 < _list261.size; ++_i263)
          {
            _elem262 = iprot.readI32();
            struct.userIds.add(_elem262);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.repaymentId = iprot.readI32();
        struct.setRepaymentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repaymentMoney = iprot.readDouble();
        struct.setRepaymentMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.repaymentType = iprot.readString();
        struct.setRepaymentTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createrName = iprot.readString();
        struct.setCreaterNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RegAdvapplyRepayView implements org.apache.thrift.TBase<RegAdvapplyRepayView, RegAdvapplyRepayView._Fields>, java.io.Serializable, Cloneable, Comparable<RegAdvapplyRepayView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegAdvapplyRepayView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_LOAD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractLoadNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_CREDIT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCreditNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField FINE_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("fineRates", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("fine", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField HAS_OTHER_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("hasOtherLoan", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField IS_REBACK_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("isRebackInterest", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField IS_ARREARS_FIELD_DESC = new org.apache.thrift.protocol.TField("isArrears", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prepayLiqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField BUSINESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmtTemp", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegAdvapplyRepayViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegAdvapplyRepayViewTupleSchemeFactory());
  }

  public String pId; // required
  public String contractLoadNo; // required
  public String contractCreditNo; // required
  public double creditAmt; // required
  public int projectType; // required
  public double monthLoanInterest; // required
  public int repayCycle; // required
  public String projectNum; // required
  public String projectName; // required
  public int projectId; // required
  public double preRepayAmt; // required
  public double fineRates; // required
  public String repayDate; // required
  public double principalBalance; // required
  public double fine; // required
  public int hasOtherLoan; // required
  public int isRebackInterest; // required
  public int isArrears; // required
  public String reason; // required
  public int preRepayId; // required
  public int loanId; // required
  public String planRepayLoanDt; // required
  public double prepayLiqDmgProportion; // required
  public String businessName; // required
  public String creditAmtTemp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    CONTRACT_LOAD_NO((short)2, "contractLoadNo"),
    CONTRACT_CREDIT_NO((short)3, "contractCreditNo"),
    CREDIT_AMT((short)4, "creditAmt"),
    PROJECT_TYPE((short)5, "projectType"),
    MONTH_LOAN_INTEREST((short)6, "monthLoanInterest"),
    REPAY_CYCLE((short)7, "repayCycle"),
    PROJECT_NUM((short)8, "projectNum"),
    PROJECT_NAME((short)9, "projectName"),
    PROJECT_ID((short)10, "projectId"),
    PRE_REPAY_AMT((short)11, "preRepayAmt"),
    FINE_RATES((short)12, "fineRates"),
    REPAY_DATE((short)13, "repayDate"),
    PRINCIPAL_BALANCE((short)14, "principalBalance"),
    FINE((short)15, "fine"),
    HAS_OTHER_LOAN((short)16, "hasOtherLoan"),
    IS_REBACK_INTEREST((short)17, "isRebackInterest"),
    IS_ARREARS((short)18, "isArrears"),
    REASON((short)19, "reason"),
    PRE_REPAY_ID((short)20, "preRepayId"),
    LOAN_ID((short)21, "loanId"),
    PLAN_REPAY_LOAN_DT((short)22, "planRepayLoanDt"),
    PREPAY_LIQ_DMG_PROPORTION((short)23, "prepayLiqDmgProportion"),
    BUSINESS_NAME((short)24, "businessName"),
    CREDIT_AMT_TEMP((short)25, "creditAmtTemp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // CONTRACT_LOAD_NO
          return CONTRACT_LOAD_NO;
        case 3: // CONTRACT_CREDIT_NO
          return CONTRACT_CREDIT_NO;
        case 4: // CREDIT_AMT
          return CREDIT_AMT;
        case 5: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 6: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 7: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 8: // PROJECT_NUM
          return PROJECT_NUM;
        case 9: // PROJECT_NAME
          return PROJECT_NAME;
        case 10: // PROJECT_ID
          return PROJECT_ID;
        case 11: // PRE_REPAY_AMT
          return PRE_REPAY_AMT;
        case 12: // FINE_RATES
          return FINE_RATES;
        case 13: // REPAY_DATE
          return REPAY_DATE;
        case 14: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 15: // FINE
          return FINE;
        case 16: // HAS_OTHER_LOAN
          return HAS_OTHER_LOAN;
        case 17: // IS_REBACK_INTEREST
          return IS_REBACK_INTEREST;
        case 18: // IS_ARREARS
          return IS_ARREARS;
        case 19: // REASON
          return REASON;
        case 20: // PRE_REPAY_ID
          return PRE_REPAY_ID;
        case 21: // LOAN_ID
          return LOAN_ID;
        case 22: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 23: // PREPAY_LIQ_DMG_PROPORTION
          return PREPAY_LIQ_DMG_PROPORTION;
        case 24: // BUSINESS_NAME
          return BUSINESS_NAME;
        case 25: // CREDIT_AMT_TEMP
          return CREDIT_AMT_TEMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREDITAMT_ISSET_ID = 0;
  private static final int __PROJECTTYPE_ISSET_ID = 1;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 2;
  private static final int __REPAYCYCLE_ISSET_ID = 3;
  private static final int __PROJECTID_ISSET_ID = 4;
  private static final int __PREREPAYAMT_ISSET_ID = 5;
  private static final int __FINERATES_ISSET_ID = 6;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 7;
  private static final int __FINE_ISSET_ID = 8;
  private static final int __HASOTHERLOAN_ISSET_ID = 9;
  private static final int __ISREBACKINTEREST_ISSET_ID = 10;
  private static final int __ISARREARS_ISSET_ID = 11;
  private static final int __PREREPAYID_ISSET_ID = 12;
  private static final int __LOANID_ISSET_ID = 13;
  private static final int __PREPAYLIQDMGPROPORTION_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_LOAD_NO, new org.apache.thrift.meta_data.FieldMetaData("contractLoadNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CREDIT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractCreditNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_REPAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("preRepayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE_RATES, new org.apache.thrift.meta_data.FieldMetaData("fineRates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE, new org.apache.thrift.meta_data.FieldMetaData("fine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HAS_OTHER_LOAN, new org.apache.thrift.meta_data.FieldMetaData("hasOtherLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REBACK_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("isRebackInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARREARS, new org.apache.thrift.meta_data.FieldMetaData("isArrears", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("preRepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPAY_LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("prepayLiqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT_TEMP, new org.apache.thrift.meta_data.FieldMetaData("creditAmtTemp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegAdvapplyRepayView.class, metaDataMap);
  }

  public RegAdvapplyRepayView() {
  }

  public RegAdvapplyRepayView(
    String pId,
    String contractLoadNo,
    String contractCreditNo,
    double creditAmt,
    int projectType,
    double monthLoanInterest,
    int repayCycle,
    String projectNum,
    String projectName,
    int projectId,
    double preRepayAmt,
    double fineRates,
    String repayDate,
    double principalBalance,
    double fine,
    int hasOtherLoan,
    int isRebackInterest,
    int isArrears,
    String reason,
    int preRepayId,
    int loanId,
    String planRepayLoanDt,
    double prepayLiqDmgProportion,
    String businessName,
    String creditAmtTemp)
  {
    this();
    this.pId = pId;
    this.contractLoadNo = contractLoadNo;
    this.contractCreditNo = contractCreditNo;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.projectNum = projectNum;
    this.projectName = projectName;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    this.repayDate = repayDate;
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.fine = fine;
    setFineIsSet(true);
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    this.reason = reason;
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.planRepayLoanDt = planRepayLoanDt;
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    this.businessName = businessName;
    this.creditAmtTemp = creditAmtTemp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegAdvapplyRepayView(RegAdvapplyRepayView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    if (other.isSetContractLoadNo()) {
      this.contractLoadNo = other.contractLoadNo;
    }
    if (other.isSetContractCreditNo()) {
      this.contractCreditNo = other.contractCreditNo;
    }
    this.creditAmt = other.creditAmt;
    this.projectType = other.projectType;
    this.monthLoanInterest = other.monthLoanInterest;
    this.repayCycle = other.repayCycle;
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.projectId = other.projectId;
    this.preRepayAmt = other.preRepayAmt;
    this.fineRates = other.fineRates;
    if (other.isSetRepayDate()) {
      this.repayDate = other.repayDate;
    }
    this.principalBalance = other.principalBalance;
    this.fine = other.fine;
    this.hasOtherLoan = other.hasOtherLoan;
    this.isRebackInterest = other.isRebackInterest;
    this.isArrears = other.isArrears;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.preRepayId = other.preRepayId;
    this.loanId = other.loanId;
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.prepayLiqDmgProportion = other.prepayLiqDmgProportion;
    if (other.isSetBusinessName()) {
      this.businessName = other.businessName;
    }
    if (other.isSetCreditAmtTemp()) {
      this.creditAmtTemp = other.creditAmtTemp;
    }
  }

  public RegAdvapplyRepayView deepCopy() {
    return new RegAdvapplyRepayView(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    this.contractLoadNo = null;
    this.contractCreditNo = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    this.projectNum = null;
    this.projectName = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setPreRepayAmtIsSet(false);
    this.preRepayAmt = 0.0;
    setFineRatesIsSet(false);
    this.fineRates = 0.0;
    this.repayDate = null;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setFineIsSet(false);
    this.fine = 0.0;
    setHasOtherLoanIsSet(false);
    this.hasOtherLoan = 0;
    setIsRebackInterestIsSet(false);
    this.isRebackInterest = 0;
    setIsArrearsIsSet(false);
    this.isArrears = 0;
    this.reason = null;
    setPreRepayIdIsSet(false);
    this.preRepayId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.planRepayLoanDt = null;
    setPrepayLiqDmgProportionIsSet(false);
    this.prepayLiqDmgProportion = 0.0;
    this.businessName = null;
    this.creditAmtTemp = null;
  }

  public String getPId() {
    return this.pId;
  }

  public RegAdvapplyRepayView setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public String getContractLoadNo() {
    return this.contractLoadNo;
  }

  public RegAdvapplyRepayView setContractLoadNo(String contractLoadNo) {
    this.contractLoadNo = contractLoadNo;
    return this;
  }

  public void unsetContractLoadNo() {
    this.contractLoadNo = null;
  }

  /** Returns true if field contractLoadNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractLoadNo() {
    return this.contractLoadNo != null;
  }

  public void setContractLoadNoIsSet(boolean value) {
    if (!value) {
      this.contractLoadNo = null;
    }
  }

  public String getContractCreditNo() {
    return this.contractCreditNo;
  }

  public RegAdvapplyRepayView setContractCreditNo(String contractCreditNo) {
    this.contractCreditNo = contractCreditNo;
    return this;
  }

  public void unsetContractCreditNo() {
    this.contractCreditNo = null;
  }

  /** Returns true if field contractCreditNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCreditNo() {
    return this.contractCreditNo != null;
  }

  public void setContractCreditNoIsSet(boolean value) {
    if (!value) {
      this.contractCreditNo = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public RegAdvapplyRepayView setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public RegAdvapplyRepayView setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public RegAdvapplyRepayView setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public RegAdvapplyRepayView setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public RegAdvapplyRepayView setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RegAdvapplyRepayView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RegAdvapplyRepayView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getPreRepayAmt() {
    return this.preRepayAmt;
  }

  public RegAdvapplyRepayView setPreRepayAmt(double preRepayAmt) {
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    return this;
  }

  public void unsetPreRepayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  /** Returns true if field preRepayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  public void setPreRepayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID, value);
  }

  public double getFineRates() {
    return this.fineRates;
  }

  public RegAdvapplyRepayView setFineRates(double fineRates) {
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    return this;
  }

  public void unsetFineRates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  /** Returns true if field fineRates is set (has been assigned a value) and false otherwise */
  public boolean isSetFineRates() {
    return EncodingUtils.testBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  public void setFineRatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINERATES_ISSET_ID, value);
  }

  public String getRepayDate() {
    return this.repayDate;
  }

  public RegAdvapplyRepayView setRepayDate(String repayDate) {
    this.repayDate = repayDate;
    return this;
  }

  public void unsetRepayDate() {
    this.repayDate = null;
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return this.repayDate != null;
  }

  public void setRepayDateIsSet(boolean value) {
    if (!value) {
      this.repayDate = null;
    }
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public RegAdvapplyRepayView setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public double getFine() {
    return this.fine;
  }

  public RegAdvapplyRepayView setFine(double fine) {
    this.fine = fine;
    setFineIsSet(true);
    return this;
  }

  public void unsetFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  /** Returns true if field fine is set (has been assigned a value) and false otherwise */
  public boolean isSetFine() {
    return EncodingUtils.testBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  public void setFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINE_ISSET_ID, value);
  }

  public int getHasOtherLoan() {
    return this.hasOtherLoan;
  }

  public RegAdvapplyRepayView setHasOtherLoan(int hasOtherLoan) {
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    return this;
  }

  public void unsetHasOtherLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  /** Returns true if field hasOtherLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetHasOtherLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  public void setHasOtherLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID, value);
  }

  public int getIsRebackInterest() {
    return this.isRebackInterest;
  }

  public RegAdvapplyRepayView setIsRebackInterest(int isRebackInterest) {
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    return this;
  }

  public void unsetIsRebackInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  /** Returns true if field isRebackInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRebackInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  public void setIsRebackInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID, value);
  }

  public int getIsArrears() {
    return this.isArrears;
  }

  public RegAdvapplyRepayView setIsArrears(int isArrears) {
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    return this;
  }

  public void unsetIsArrears() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  /** Returns true if field isArrears is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArrears() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  public void setIsArrearsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARREARS_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public RegAdvapplyRepayView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getPreRepayId() {
    return this.preRepayId;
  }

  public RegAdvapplyRepayView setPreRepayId(int preRepayId) {
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    return this;
  }

  public void unsetPreRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  /** Returns true if field preRepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  public void setPreRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public RegAdvapplyRepayView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public RegAdvapplyRepayView setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public double getPrepayLiqDmgProportion() {
    return this.prepayLiqDmgProportion;
  }

  public RegAdvapplyRepayView setPrepayLiqDmgProportion(double prepayLiqDmgProportion) {
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetPrepayLiqDmgProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field prepayLiqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayLiqDmgProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  public void setPrepayLiqDmgProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID, value);
  }

  public String getBusinessName() {
    return this.businessName;
  }

  public RegAdvapplyRepayView setBusinessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

  public void unsetBusinessName() {
    this.businessName = null;
  }

  /** Returns true if field businessName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessName() {
    return this.businessName != null;
  }

  public void setBusinessNameIsSet(boolean value) {
    if (!value) {
      this.businessName = null;
    }
  }

  public String getCreditAmtTemp() {
    return this.creditAmtTemp;
  }

  public RegAdvapplyRepayView setCreditAmtTemp(String creditAmtTemp) {
    this.creditAmtTemp = creditAmtTemp;
    return this;
  }

  public void unsetCreditAmtTemp() {
    this.creditAmtTemp = null;
  }

  /** Returns true if field creditAmtTemp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmtTemp() {
    return this.creditAmtTemp != null;
  }

  public void setCreditAmtTempIsSet(boolean value) {
    if (!value) {
      this.creditAmtTemp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case CONTRACT_LOAD_NO:
      if (value == null) {
        unsetContractLoadNo();
      } else {
        setContractLoadNo((String)value);
      }
      break;

    case CONTRACT_CREDIT_NO:
      if (value == null) {
        unsetContractCreditNo();
      } else {
        setContractCreditNo((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PRE_REPAY_AMT:
      if (value == null) {
        unsetPreRepayAmt();
      } else {
        setPreRepayAmt((Double)value);
      }
      break;

    case FINE_RATES:
      if (value == null) {
        unsetFineRates();
      } else {
        setFineRates((Double)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((String)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case FINE:
      if (value == null) {
        unsetFine();
      } else {
        setFine((Double)value);
      }
      break;

    case HAS_OTHER_LOAN:
      if (value == null) {
        unsetHasOtherLoan();
      } else {
        setHasOtherLoan((Integer)value);
      }
      break;

    case IS_REBACK_INTEREST:
      if (value == null) {
        unsetIsRebackInterest();
      } else {
        setIsRebackInterest((Integer)value);
      }
      break;

    case IS_ARREARS:
      if (value == null) {
        unsetIsArrears();
      } else {
        setIsArrears((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case PRE_REPAY_ID:
      if (value == null) {
        unsetPreRepayId();
      } else {
        setPreRepayId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case PREPAY_LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetPrepayLiqDmgProportion();
      } else {
        setPrepayLiqDmgProportion((Double)value);
      }
      break;

    case BUSINESS_NAME:
      if (value == null) {
        unsetBusinessName();
      } else {
        setBusinessName((String)value);
      }
      break;

    case CREDIT_AMT_TEMP:
      if (value == null) {
        unsetCreditAmtTemp();
      } else {
        setCreditAmtTemp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case CONTRACT_LOAD_NO:
      return getContractLoadNo();

    case CONTRACT_CREDIT_NO:
      return getContractCreditNo();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case PROJECT_NUM:
      return getProjectNum();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PRE_REPAY_AMT:
      return Double.valueOf(getPreRepayAmt());

    case FINE_RATES:
      return Double.valueOf(getFineRates());

    case REPAY_DATE:
      return getRepayDate();

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case FINE:
      return Double.valueOf(getFine());

    case HAS_OTHER_LOAN:
      return Integer.valueOf(getHasOtherLoan());

    case IS_REBACK_INTEREST:
      return Integer.valueOf(getIsRebackInterest());

    case IS_ARREARS:
      return Integer.valueOf(getIsArrears());

    case REASON:
      return getReason();

    case PRE_REPAY_ID:
      return Integer.valueOf(getPreRepayId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case PREPAY_LIQ_DMG_PROPORTION:
      return Double.valueOf(getPrepayLiqDmgProportion());

    case BUSINESS_NAME:
      return getBusinessName();

    case CREDIT_AMT_TEMP:
      return getCreditAmtTemp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case CONTRACT_LOAD_NO:
      return isSetContractLoadNo();
    case CONTRACT_CREDIT_NO:
      return isSetContractCreditNo();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case PROJECT_TYPE:
      return isSetProjectType();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case PROJECT_NUM:
      return isSetProjectNum();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case PRE_REPAY_AMT:
      return isSetPreRepayAmt();
    case FINE_RATES:
      return isSetFineRates();
    case REPAY_DATE:
      return isSetRepayDate();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case FINE:
      return isSetFine();
    case HAS_OTHER_LOAN:
      return isSetHasOtherLoan();
    case IS_REBACK_INTEREST:
      return isSetIsRebackInterest();
    case IS_ARREARS:
      return isSetIsArrears();
    case REASON:
      return isSetReason();
    case PRE_REPAY_ID:
      return isSetPreRepayId();
    case LOAN_ID:
      return isSetLoanId();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case PREPAY_LIQ_DMG_PROPORTION:
      return isSetPrepayLiqDmgProportion();
    case BUSINESS_NAME:
      return isSetBusinessName();
    case CREDIT_AMT_TEMP:
      return isSetCreditAmtTemp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegAdvapplyRepayView)
      return this.equals((RegAdvapplyRepayView)that);
    return false;
  }

  public boolean equals(RegAdvapplyRepayView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_contractLoadNo = true && this.isSetContractLoadNo();
    boolean that_present_contractLoadNo = true && that.isSetContractLoadNo();
    if (this_present_contractLoadNo || that_present_contractLoadNo) {
      if (!(this_present_contractLoadNo && that_present_contractLoadNo))
        return false;
      if (!this.contractLoadNo.equals(that.contractLoadNo))
        return false;
    }

    boolean this_present_contractCreditNo = true && this.isSetContractCreditNo();
    boolean that_present_contractCreditNo = true && that.isSetContractCreditNo();
    if (this_present_contractCreditNo || that_present_contractCreditNo) {
      if (!(this_present_contractCreditNo && that_present_contractCreditNo))
        return false;
      if (!this.contractCreditNo.equals(that.contractCreditNo))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_preRepayAmt = true;
    boolean that_present_preRepayAmt = true;
    if (this_present_preRepayAmt || that_present_preRepayAmt) {
      if (!(this_present_preRepayAmt && that_present_preRepayAmt))
        return false;
      if (this.preRepayAmt != that.preRepayAmt)
        return false;
    }

    boolean this_present_fineRates = true;
    boolean that_present_fineRates = true;
    if (this_present_fineRates || that_present_fineRates) {
      if (!(this_present_fineRates && that_present_fineRates))
        return false;
      if (this.fineRates != that.fineRates)
        return false;
    }

    boolean this_present_repayDate = true && this.isSetRepayDate();
    boolean that_present_repayDate = true && that.isSetRepayDate();
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (!this.repayDate.equals(that.repayDate))
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_fine = true;
    boolean that_present_fine = true;
    if (this_present_fine || that_present_fine) {
      if (!(this_present_fine && that_present_fine))
        return false;
      if (this.fine != that.fine)
        return false;
    }

    boolean this_present_hasOtherLoan = true;
    boolean that_present_hasOtherLoan = true;
    if (this_present_hasOtherLoan || that_present_hasOtherLoan) {
      if (!(this_present_hasOtherLoan && that_present_hasOtherLoan))
        return false;
      if (this.hasOtherLoan != that.hasOtherLoan)
        return false;
    }

    boolean this_present_isRebackInterest = true;
    boolean that_present_isRebackInterest = true;
    if (this_present_isRebackInterest || that_present_isRebackInterest) {
      if (!(this_present_isRebackInterest && that_present_isRebackInterest))
        return false;
      if (this.isRebackInterest != that.isRebackInterest)
        return false;
    }

    boolean this_present_isArrears = true;
    boolean that_present_isArrears = true;
    if (this_present_isArrears || that_present_isArrears) {
      if (!(this_present_isArrears && that_present_isArrears))
        return false;
      if (this.isArrears != that.isArrears)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_preRepayId = true;
    boolean that_present_preRepayId = true;
    if (this_present_preRepayId || that_present_preRepayId) {
      if (!(this_present_preRepayId && that_present_preRepayId))
        return false;
      if (this.preRepayId != that.preRepayId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_prepayLiqDmgProportion = true;
    boolean that_present_prepayLiqDmgProportion = true;
    if (this_present_prepayLiqDmgProportion || that_present_prepayLiqDmgProportion) {
      if (!(this_present_prepayLiqDmgProportion && that_present_prepayLiqDmgProportion))
        return false;
      if (this.prepayLiqDmgProportion != that.prepayLiqDmgProportion)
        return false;
    }

    boolean this_present_businessName = true && this.isSetBusinessName();
    boolean that_present_businessName = true && that.isSetBusinessName();
    if (this_present_businessName || that_present_businessName) {
      if (!(this_present_businessName && that_present_businessName))
        return false;
      if (!this.businessName.equals(that.businessName))
        return false;
    }

    boolean this_present_creditAmtTemp = true && this.isSetCreditAmtTemp();
    boolean that_present_creditAmtTemp = true && that.isSetCreditAmtTemp();
    if (this_present_creditAmtTemp || that_present_creditAmtTemp) {
      if (!(this_present_creditAmtTemp && that_present_creditAmtTemp))
        return false;
      if (!this.creditAmtTemp.equals(that.creditAmtTemp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_contractLoadNo = true && (isSetContractLoadNo());
    list.add(present_contractLoadNo);
    if (present_contractLoadNo)
      list.add(contractLoadNo);

    boolean present_contractCreditNo = true && (isSetContractCreditNo());
    list.add(present_contractCreditNo);
    if (present_contractCreditNo)
      list.add(contractCreditNo);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_preRepayAmt = true;
    list.add(present_preRepayAmt);
    if (present_preRepayAmt)
      list.add(preRepayAmt);

    boolean present_fineRates = true;
    list.add(present_fineRates);
    if (present_fineRates)
      list.add(fineRates);

    boolean present_repayDate = true && (isSetRepayDate());
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_fine = true;
    list.add(present_fine);
    if (present_fine)
      list.add(fine);

    boolean present_hasOtherLoan = true;
    list.add(present_hasOtherLoan);
    if (present_hasOtherLoan)
      list.add(hasOtherLoan);

    boolean present_isRebackInterest = true;
    list.add(present_isRebackInterest);
    if (present_isRebackInterest)
      list.add(isRebackInterest);

    boolean present_isArrears = true;
    list.add(present_isArrears);
    if (present_isArrears)
      list.add(isArrears);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_preRepayId = true;
    list.add(present_preRepayId);
    if (present_preRepayId)
      list.add(preRepayId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_prepayLiqDmgProportion = true;
    list.add(present_prepayLiqDmgProportion);
    if (present_prepayLiqDmgProportion)
      list.add(prepayLiqDmgProportion);

    boolean present_businessName = true && (isSetBusinessName());
    list.add(present_businessName);
    if (present_businessName)
      list.add(businessName);

    boolean present_creditAmtTemp = true && (isSetCreditAmtTemp());
    list.add(present_creditAmtTemp);
    if (present_creditAmtTemp)
      list.add(creditAmtTemp);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegAdvapplyRepayView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractLoadNo()).compareTo(other.isSetContractLoadNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractLoadNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractLoadNo, other.contractLoadNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCreditNo()).compareTo(other.isSetContractCreditNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCreditNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCreditNo, other.contractCreditNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayAmt()).compareTo(other.isSetPreRepayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayAmt, other.preRepayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFineRates()).compareTo(other.isSetFineRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineRates, other.fineRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFine()).compareTo(other.isSetFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fine, other.fine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasOtherLoan()).compareTo(other.isSetHasOtherLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasOtherLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasOtherLoan, other.hasOtherLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRebackInterest()).compareTo(other.isSetIsRebackInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRebackInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRebackInterest, other.isRebackInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArrears()).compareTo(other.isSetIsArrears());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArrears()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArrears, other.isArrears);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayId()).compareTo(other.isSetPreRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayId, other.preRepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepayLiqDmgProportion()).compareTo(other.isSetPrepayLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepayLiqDmgProportion, other.prepayLiqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessName()).compareTo(other.isSetBusinessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessName, other.businessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmtTemp()).compareTo(other.isSetCreditAmtTemp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmtTemp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmtTemp, other.creditAmtTemp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegAdvapplyRepayView(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractLoadNo:");
    if (this.contractLoadNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractLoadNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractCreditNo:");
    if (this.contractCreditNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractCreditNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayAmt:");
    sb.append(this.preRepayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineRates:");
    sb.append(this.fineRates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    if (this.repayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fine:");
    sb.append(this.fine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasOtherLoan:");
    sb.append(this.hasOtherLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRebackInterest:");
    sb.append(this.isRebackInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArrears:");
    sb.append(this.isArrears);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayId:");
    sb.append(this.preRepayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepayLiqDmgProportion:");
    sb.append(this.prepayLiqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessName:");
    if (this.businessName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmtTemp:");
    if (this.creditAmtTemp == null) {
      sb.append("null");
    } else {
      sb.append(this.creditAmtTemp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegAdvapplyRepayViewStandardSchemeFactory implements SchemeFactory {
    public RegAdvapplyRepayViewStandardScheme getScheme() {
      return new RegAdvapplyRepayViewStandardScheme();
    }
  }

  private static class RegAdvapplyRepayViewStandardScheme extends StandardScheme<RegAdvapplyRepayView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegAdvapplyRepayView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_LOAD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractLoadNo = iprot.readString();
              struct.setContractLoadNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_CREDIT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCreditNo = iprot.readString();
              struct.setContractCreditNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRE_REPAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preRepayAmt = iprot.readDouble();
              struct.setPreRepayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FINE_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fineRates = iprot.readDouble();
              struct.setFineRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDate = iprot.readString();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fine = iprot.readDouble();
              struct.setFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HAS_OTHER_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasOtherLoan = iprot.readI32();
              struct.setHasOtherLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_REBACK_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRebackInterest = iprot.readI32();
              struct.setIsRebackInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_ARREARS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isArrears = iprot.readI32();
              struct.setIsArrearsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRE_REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preRepayId = iprot.readI32();
              struct.setPreRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PREPAY_LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepayLiqDmgProportion = iprot.readDouble();
              struct.setPrepayLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BUSINESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessName = iprot.readString();
              struct.setBusinessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CREDIT_AMT_TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditAmtTemp = iprot.readString();
              struct.setCreditAmtTempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegAdvapplyRepayView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.contractLoadNo != null) {
        oprot.writeFieldBegin(CONTRACT_LOAD_NO_FIELD_DESC);
        oprot.writeString(struct.contractLoadNo);
        oprot.writeFieldEnd();
      }
      if (struct.contractCreditNo != null) {
        oprot.writeFieldBegin(CONTRACT_CREDIT_NO_FIELD_DESC);
        oprot.writeString(struct.contractCreditNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.preRepayAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_RATES_FIELD_DESC);
      oprot.writeDouble(struct.fineRates);
      oprot.writeFieldEnd();
      if (struct.repayDate != null) {
        oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.repayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_FIELD_DESC);
      oprot.writeDouble(struct.fine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_OTHER_LOAN_FIELD_DESC);
      oprot.writeI32(struct.hasOtherLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REBACK_INTEREST_FIELD_DESC);
      oprot.writeI32(struct.isRebackInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARREARS_FIELD_DESC);
      oprot.writeI32(struct.isArrears);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRE_REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.preRepayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.prepayLiqDmgProportion);
      oprot.writeFieldEnd();
      if (struct.businessName != null) {
        oprot.writeFieldBegin(BUSINESS_NAME_FIELD_DESC);
        oprot.writeString(struct.businessName);
        oprot.writeFieldEnd();
      }
      if (struct.creditAmtTemp != null) {
        oprot.writeFieldBegin(CREDIT_AMT_TEMP_FIELD_DESC);
        oprot.writeString(struct.creditAmtTemp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegAdvapplyRepayViewTupleSchemeFactory implements SchemeFactory {
    public RegAdvapplyRepayViewTupleScheme getScheme() {
      return new RegAdvapplyRepayViewTupleScheme();
    }
  }

  private static class RegAdvapplyRepayViewTupleScheme extends TupleScheme<RegAdvapplyRepayView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyRepayView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetContractLoadNo()) {
        optionals.set(1);
      }
      if (struct.isSetContractCreditNo()) {
        optionals.set(2);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(3);
      }
      if (struct.isSetProjectType()) {
        optionals.set(4);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(5);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(6);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(7);
      }
      if (struct.isSetProjectName()) {
        optionals.set(8);
      }
      if (struct.isSetProjectId()) {
        optionals.set(9);
      }
      if (struct.isSetPreRepayAmt()) {
        optionals.set(10);
      }
      if (struct.isSetFineRates()) {
        optionals.set(11);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(12);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(13);
      }
      if (struct.isSetFine()) {
        optionals.set(14);
      }
      if (struct.isSetHasOtherLoan()) {
        optionals.set(15);
      }
      if (struct.isSetIsRebackInterest()) {
        optionals.set(16);
      }
      if (struct.isSetIsArrears()) {
        optionals.set(17);
      }
      if (struct.isSetReason()) {
        optionals.set(18);
      }
      if (struct.isSetPreRepayId()) {
        optionals.set(19);
      }
      if (struct.isSetLoanId()) {
        optionals.set(20);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(21);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        optionals.set(22);
      }
      if (struct.isSetBusinessName()) {
        optionals.set(23);
      }
      if (struct.isSetCreditAmtTemp()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetContractLoadNo()) {
        oprot.writeString(struct.contractLoadNo);
      }
      if (struct.isSetContractCreditNo()) {
        oprot.writeString(struct.contractCreditNo);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPreRepayAmt()) {
        oprot.writeDouble(struct.preRepayAmt);
      }
      if (struct.isSetFineRates()) {
        oprot.writeDouble(struct.fineRates);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeString(struct.repayDate);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetFine()) {
        oprot.writeDouble(struct.fine);
      }
      if (struct.isSetHasOtherLoan()) {
        oprot.writeI32(struct.hasOtherLoan);
      }
      if (struct.isSetIsRebackInterest()) {
        oprot.writeI32(struct.isRebackInterest);
      }
      if (struct.isSetIsArrears()) {
        oprot.writeI32(struct.isArrears);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetPreRepayId()) {
        oprot.writeI32(struct.preRepayId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        oprot.writeDouble(struct.prepayLiqDmgProportion);
      }
      if (struct.isSetBusinessName()) {
        oprot.writeString(struct.businessName);
      }
      if (struct.isSetCreditAmtTemp()) {
        oprot.writeString(struct.creditAmtTemp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyRepayView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractLoadNo = iprot.readString();
        struct.setContractLoadNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractCreditNo = iprot.readString();
        struct.setContractCreditNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.preRepayAmt = iprot.readDouble();
        struct.setPreRepayAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fineRates = iprot.readDouble();
        struct.setFineRatesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.repayDate = iprot.readString();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fine = iprot.readDouble();
        struct.setFineIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hasOtherLoan = iprot.readI32();
        struct.setHasOtherLoanIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isRebackInterest = iprot.readI32();
        struct.setIsRebackInterestIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isArrears = iprot.readI32();
        struct.setIsArrearsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(19)) {
        struct.preRepayId = iprot.readI32();
        struct.setPreRepayIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(22)) {
        struct.prepayLiqDmgProportion = iprot.readDouble();
        struct.setPrepayLiqDmgProportionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.businessName = iprot.readString();
        struct.setBusinessNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.creditAmtTemp = iprot.readString();
        struct.setCreditAmtTempIsSet(true);
      }
    }
  }

}


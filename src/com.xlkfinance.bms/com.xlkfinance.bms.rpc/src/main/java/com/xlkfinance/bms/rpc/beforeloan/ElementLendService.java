/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-8")
public class ElementLendService {

  public interface Iface {

    public List<com.xlkfinance.bms.rpc.common.GridViewDTO> getAllElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int getAllElementLendCount(ElementLend elementLend) throws org.apache.thrift.TException;

    public ElementLend getElementLendById(int pid) throws org.apache.thrift.TException;

    public int addElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int batchUpdateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<DataInfo> findProjectFilesByfileIds(int projectId, List<Integer> fileIds) throws org.apache.thrift.TException;

    public int updateLendStateByPid(int pid, int lendState, String updateTime) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ElementLendDetails> queryElementLendDetails(ElementLendDetails details) throws org.apache.thrift.TException;

    public List<GridViewMobileDto> queryElementList(ElementMobileDto elementMobileDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int getTotalElement(ElementMobileDto elementMobileDto) throws org.apache.thrift.TException;

    public List<DataInfo> findProjectFiles(int projectId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllElementLendCount(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getElementLendById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchUpdateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProjectFilesByfileIds(int projectId, List<Integer> fileIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLendStateByPid(int pid, int lendState, String updateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryElementLendDetails(ElementLendDetails details, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryElementList(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTotalElement(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProjectFiles(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.xlkfinance.bms.rpc.common.GridViewDTO> getAllElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getAllElementLend(elementLend);
      return recv_getAllElementLend();
    }

    public void send_getAllElementLend(ElementLend elementLend) throws org.apache.thrift.TException
    {
      getAllElementLend_args args = new getAllElementLend_args();
      args.setElementLend(elementLend);
      sendBase("getAllElementLend", args);
    }

    public List<com.xlkfinance.bms.rpc.common.GridViewDTO> recv_getAllElementLend() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getAllElementLend_result result = new getAllElementLend_result();
      receiveBase(result, "getAllElementLend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllElementLend failed: unknown result");
    }

    public int getAllElementLendCount(ElementLend elementLend) throws org.apache.thrift.TException
    {
      send_getAllElementLendCount(elementLend);
      return recv_getAllElementLendCount();
    }

    public void send_getAllElementLendCount(ElementLend elementLend) throws org.apache.thrift.TException
    {
      getAllElementLendCount_args args = new getAllElementLendCount_args();
      args.setElementLend(elementLend);
      sendBase("getAllElementLendCount", args);
    }

    public int recv_getAllElementLendCount() throws org.apache.thrift.TException
    {
      getAllElementLendCount_result result = new getAllElementLendCount_result();
      receiveBase(result, "getAllElementLendCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllElementLendCount failed: unknown result");
    }

    public ElementLend getElementLendById(int pid) throws org.apache.thrift.TException
    {
      send_getElementLendById(pid);
      return recv_getElementLendById();
    }

    public void send_getElementLendById(int pid) throws org.apache.thrift.TException
    {
      getElementLendById_args args = new getElementLendById_args();
      args.setPid(pid);
      sendBase("getElementLendById", args);
    }

    public ElementLend recv_getElementLendById() throws org.apache.thrift.TException
    {
      getElementLendById_result result = new getElementLendById_result();
      receiveBase(result, "getElementLendById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getElementLendById failed: unknown result");
    }

    public int addElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addElementLend(elementLend);
      return recv_addElementLend();
    }

    public void send_addElementLend(ElementLend elementLend) throws org.apache.thrift.TException
    {
      addElementLend_args args = new addElementLend_args();
      args.setElementLend(elementLend);
      sendBase("addElementLend", args);
    }

    public int recv_addElementLend() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addElementLend_result result = new addElementLend_result();
      receiveBase(result, "addElementLend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addElementLend failed: unknown result");
    }

    public int updateElementLend(ElementLend elementLend) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateElementLend(elementLend);
      return recv_updateElementLend();
    }

    public void send_updateElementLend(ElementLend elementLend) throws org.apache.thrift.TException
    {
      updateElementLend_args args = new updateElementLend_args();
      args.setElementLend(elementLend);
      sendBase("updateElementLend", args);
    }

    public int recv_updateElementLend() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateElementLend_result result = new updateElementLend_result();
      receiveBase(result, "updateElementLend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateElementLend failed: unknown result");
    }

    public int batchUpdateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchUpdateElementLendDetails(elementLend, elementLendDetailsList);
      return recv_batchUpdateElementLendDetails();
    }

    public void send_batchUpdateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws org.apache.thrift.TException
    {
      batchUpdateElementLendDetails_args args = new batchUpdateElementLendDetails_args();
      args.setElementLend(elementLend);
      args.setElementLendDetailsList(elementLendDetailsList);
      sendBase("batchUpdateElementLendDetails", args);
    }

    public int recv_batchUpdateElementLendDetails() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchUpdateElementLendDetails_result result = new batchUpdateElementLendDetails_result();
      receiveBase(result, "batchUpdateElementLendDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchUpdateElementLendDetails failed: unknown result");
    }

    public int updateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateElementLendDetails(elementLend, elementLendDetailsList);
      return recv_updateElementLendDetails();
    }

    public void send_updateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList) throws org.apache.thrift.TException
    {
      updateElementLendDetails_args args = new updateElementLendDetails_args();
      args.setElementLend(elementLend);
      args.setElementLendDetailsList(elementLendDetailsList);
      sendBase("updateElementLendDetails", args);
    }

    public int recv_updateElementLendDetails() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateElementLendDetails_result result = new updateElementLendDetails_result();
      receiveBase(result, "updateElementLendDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateElementLendDetails failed: unknown result");
    }

    public List<DataInfo> findProjectFilesByfileIds(int projectId, List<Integer> fileIds) throws org.apache.thrift.TException
    {
      send_findProjectFilesByfileIds(projectId, fileIds);
      return recv_findProjectFilesByfileIds();
    }

    public void send_findProjectFilesByfileIds(int projectId, List<Integer> fileIds) throws org.apache.thrift.TException
    {
      findProjectFilesByfileIds_args args = new findProjectFilesByfileIds_args();
      args.setProjectId(projectId);
      args.setFileIds(fileIds);
      sendBase("findProjectFilesByfileIds", args);
    }

    public List<DataInfo> recv_findProjectFilesByfileIds() throws org.apache.thrift.TException
    {
      findProjectFilesByfileIds_result result = new findProjectFilesByfileIds_result();
      receiveBase(result, "findProjectFilesByfileIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProjectFilesByfileIds failed: unknown result");
    }

    public int updateLendStateByPid(int pid, int lendState, String updateTime) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateLendStateByPid(pid, lendState, updateTime);
      return recv_updateLendStateByPid();
    }

    public void send_updateLendStateByPid(int pid, int lendState, String updateTime) throws org.apache.thrift.TException
    {
      updateLendStateByPid_args args = new updateLendStateByPid_args();
      args.setPid(pid);
      args.setLendState(lendState);
      args.setUpdateTime(updateTime);
      sendBase("updateLendStateByPid", args);
    }

    public int recv_updateLendStateByPid() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateLendStateByPid_result result = new updateLendStateByPid_result();
      receiveBase(result, "updateLendStateByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLendStateByPid failed: unknown result");
    }

    public List<ElementLendDetails> queryElementLendDetails(ElementLendDetails details) throws org.apache.thrift.TException
    {
      send_queryElementLendDetails(details);
      return recv_queryElementLendDetails();
    }

    public void send_queryElementLendDetails(ElementLendDetails details) throws org.apache.thrift.TException
    {
      queryElementLendDetails_args args = new queryElementLendDetails_args();
      args.setDetails(details);
      sendBase("queryElementLendDetails", args);
    }

    public List<ElementLendDetails> recv_queryElementLendDetails() throws org.apache.thrift.TException
    {
      queryElementLendDetails_result result = new queryElementLendDetails_result();
      receiveBase(result, "queryElementLendDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryElementLendDetails failed: unknown result");
    }

    public List<GridViewMobileDto> queryElementList(ElementMobileDto elementMobileDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryElementList(elementMobileDto);
      return recv_queryElementList();
    }

    public void send_queryElementList(ElementMobileDto elementMobileDto) throws org.apache.thrift.TException
    {
      queryElementList_args args = new queryElementList_args();
      args.setElementMobileDto(elementMobileDto);
      sendBase("queryElementList", args);
    }

    public List<GridViewMobileDto> recv_queryElementList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryElementList_result result = new queryElementList_result();
      receiveBase(result, "queryElementList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryElementList failed: unknown result");
    }

    public int getTotalElement(ElementMobileDto elementMobileDto) throws org.apache.thrift.TException
    {
      send_getTotalElement(elementMobileDto);
      return recv_getTotalElement();
    }

    public void send_getTotalElement(ElementMobileDto elementMobileDto) throws org.apache.thrift.TException
    {
      getTotalElement_args args = new getTotalElement_args();
      args.setElementMobileDto(elementMobileDto);
      sendBase("getTotalElement", args);
    }

    public int recv_getTotalElement() throws org.apache.thrift.TException
    {
      getTotalElement_result result = new getTotalElement_result();
      receiveBase(result, "getTotalElement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalElement failed: unknown result");
    }

    public List<DataInfo> findProjectFiles(int projectId) throws org.apache.thrift.TException
    {
      send_findProjectFiles(projectId);
      return recv_findProjectFiles();
    }

    public void send_findProjectFiles(int projectId) throws org.apache.thrift.TException
    {
      findProjectFiles_args args = new findProjectFiles_args();
      args.setProjectId(projectId);
      sendBase("findProjectFiles", args);
    }

    public List<DataInfo> recv_findProjectFiles() throws org.apache.thrift.TException
    {
      findProjectFiles_result result = new findProjectFiles_result();
      receiveBase(result, "findProjectFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProjectFiles failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllElementLend_call method_call = new getAllElementLend_call(elementLend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllElementLend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      public getAllElementLend_call(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllElementLend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllElementLend_args args = new getAllElementLend_args();
        args.setElementLend(elementLend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.xlkfinance.bms.rpc.common.GridViewDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllElementLend();
      }
    }

    public void getAllElementLendCount(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllElementLendCount_call method_call = new getAllElementLendCount_call(elementLend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllElementLendCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      public getAllElementLendCount_call(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllElementLendCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllElementLendCount_args args = new getAllElementLendCount_args();
        args.setElementLend(elementLend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllElementLendCount();
      }
    }

    public void getElementLendById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getElementLendById_call method_call = new getElementLendById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getElementLendById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getElementLendById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getElementLendById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getElementLendById_args args = new getElementLendById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ElementLend getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getElementLendById();
      }
    }

    public void addElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addElementLend_call method_call = new addElementLend_call(elementLend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addElementLend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      public addElementLend_call(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addElementLend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addElementLend_args args = new addElementLend_args();
        args.setElementLend(elementLend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addElementLend();
      }
    }

    public void updateElementLend(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateElementLend_call method_call = new updateElementLend_call(elementLend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateElementLend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      public updateElementLend_call(ElementLend elementLend, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateElementLend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateElementLend_args args = new updateElementLend_args();
        args.setElementLend(elementLend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateElementLend();
      }
    }

    public void batchUpdateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchUpdateElementLendDetails_call method_call = new batchUpdateElementLendDetails_call(elementLend, elementLendDetailsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchUpdateElementLendDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      private List<ElementLendDetails> elementLendDetailsList;
      public batchUpdateElementLendDetails_call(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
        this.elementLendDetailsList = elementLendDetailsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchUpdateElementLendDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchUpdateElementLendDetails_args args = new batchUpdateElementLendDetails_args();
        args.setElementLend(elementLend);
        args.setElementLendDetailsList(elementLendDetailsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchUpdateElementLendDetails();
      }
    }

    public void updateElementLendDetails(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateElementLendDetails_call method_call = new updateElementLendDetails_call(elementLend, elementLendDetailsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateElementLendDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLend elementLend;
      private List<ElementLendDetails> elementLendDetailsList;
      public updateElementLendDetails_call(ElementLend elementLend, List<ElementLendDetails> elementLendDetailsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementLend = elementLend;
        this.elementLendDetailsList = elementLendDetailsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateElementLendDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateElementLendDetails_args args = new updateElementLendDetails_args();
        args.setElementLend(elementLend);
        args.setElementLendDetailsList(elementLendDetailsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateElementLendDetails();
      }
    }

    public void findProjectFilesByfileIds(int projectId, List<Integer> fileIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProjectFilesByfileIds_call method_call = new findProjectFilesByfileIds_call(projectId, fileIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProjectFilesByfileIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private List<Integer> fileIds;
      public findProjectFilesByfileIds_call(int projectId, List<Integer> fileIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.fileIds = fileIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProjectFilesByfileIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProjectFilesByfileIds_args args = new findProjectFilesByfileIds_args();
        args.setProjectId(projectId);
        args.setFileIds(fileIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DataInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProjectFilesByfileIds();
      }
    }

    public void updateLendStateByPid(int pid, int lendState, String updateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLendStateByPid_call method_call = new updateLendStateByPid_call(pid, lendState, updateTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLendStateByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      private int lendState;
      private String updateTime;
      public updateLendStateByPid_call(int pid, int lendState, String updateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
        this.lendState = lendState;
        this.updateTime = updateTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLendStateByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLendStateByPid_args args = new updateLendStateByPid_args();
        args.setPid(pid);
        args.setLendState(lendState);
        args.setUpdateTime(updateTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLendStateByPid();
      }
    }

    public void queryElementLendDetails(ElementLendDetails details, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryElementLendDetails_call method_call = new queryElementLendDetails_call(details, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryElementLendDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementLendDetails details;
      public queryElementLendDetails_call(ElementLendDetails details, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.details = details;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryElementLendDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryElementLendDetails_args args = new queryElementLendDetails_args();
        args.setDetails(details);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ElementLendDetails> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryElementLendDetails();
      }
    }

    public void queryElementList(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryElementList_call method_call = new queryElementList_call(elementMobileDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryElementList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementMobileDto elementMobileDto;
      public queryElementList_call(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementMobileDto = elementMobileDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryElementList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryElementList_args args = new queryElementList_args();
        args.setElementMobileDto(elementMobileDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<GridViewMobileDto> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryElementList();
      }
    }

    public void getTotalElement(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalElement_call method_call = new getTotalElement_call(elementMobileDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalElement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ElementMobileDto elementMobileDto;
      public getTotalElement_call(ElementMobileDto elementMobileDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elementMobileDto = elementMobileDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalElement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalElement_args args = new getTotalElement_args();
        args.setElementMobileDto(elementMobileDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalElement();
      }
    }

    public void findProjectFiles(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProjectFiles_call method_call = new findProjectFiles_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProjectFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public findProjectFiles_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProjectFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProjectFiles_args args = new findProjectFiles_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DataInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProjectFiles();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllElementLend", new getAllElementLend());
      processMap.put("getAllElementLendCount", new getAllElementLendCount());
      processMap.put("getElementLendById", new getElementLendById());
      processMap.put("addElementLend", new addElementLend());
      processMap.put("updateElementLend", new updateElementLend());
      processMap.put("batchUpdateElementLendDetails", new batchUpdateElementLendDetails());
      processMap.put("updateElementLendDetails", new updateElementLendDetails());
      processMap.put("findProjectFilesByfileIds", new findProjectFilesByfileIds());
      processMap.put("updateLendStateByPid", new updateLendStateByPid());
      processMap.put("queryElementLendDetails", new queryElementLendDetails());
      processMap.put("queryElementList", new queryElementList());
      processMap.put("getTotalElement", new getTotalElement());
      processMap.put("findProjectFiles", new findProjectFiles());
      return processMap;
    }

    public static class getAllElementLend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllElementLend_args> {
      public getAllElementLend() {
        super("getAllElementLend");
      }

      public getAllElementLend_args getEmptyArgsInstance() {
        return new getAllElementLend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllElementLend_result getResult(I iface, getAllElementLend_args args) throws org.apache.thrift.TException {
        getAllElementLend_result result = new getAllElementLend_result();
        try {
          result.success = iface.getAllElementLend(args.elementLend);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAllElementLendCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllElementLendCount_args> {
      public getAllElementLendCount() {
        super("getAllElementLendCount");
      }

      public getAllElementLendCount_args getEmptyArgsInstance() {
        return new getAllElementLendCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllElementLendCount_result getResult(I iface, getAllElementLendCount_args args) throws org.apache.thrift.TException {
        getAllElementLendCount_result result = new getAllElementLendCount_result();
        result.success = iface.getAllElementLendCount(args.elementLend);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getElementLendById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getElementLendById_args> {
      public getElementLendById() {
        super("getElementLendById");
      }

      public getElementLendById_args getEmptyArgsInstance() {
        return new getElementLendById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getElementLendById_result getResult(I iface, getElementLendById_args args) throws org.apache.thrift.TException {
        getElementLendById_result result = new getElementLendById_result();
        result.success = iface.getElementLendById(args.pid);
        return result;
      }
    }

    public static class addElementLend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addElementLend_args> {
      public addElementLend() {
        super("addElementLend");
      }

      public addElementLend_args getEmptyArgsInstance() {
        return new addElementLend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addElementLend_result getResult(I iface, addElementLend_args args) throws org.apache.thrift.TException {
        addElementLend_result result = new addElementLend_result();
        try {
          result.success = iface.addElementLend(args.elementLend);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateElementLend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateElementLend_args> {
      public updateElementLend() {
        super("updateElementLend");
      }

      public updateElementLend_args getEmptyArgsInstance() {
        return new updateElementLend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateElementLend_result getResult(I iface, updateElementLend_args args) throws org.apache.thrift.TException {
        updateElementLend_result result = new updateElementLend_result();
        try {
          result.success = iface.updateElementLend(args.elementLend);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchUpdateElementLendDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchUpdateElementLendDetails_args> {
      public batchUpdateElementLendDetails() {
        super("batchUpdateElementLendDetails");
      }

      public batchUpdateElementLendDetails_args getEmptyArgsInstance() {
        return new batchUpdateElementLendDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchUpdateElementLendDetails_result getResult(I iface, batchUpdateElementLendDetails_args args) throws org.apache.thrift.TException {
        batchUpdateElementLendDetails_result result = new batchUpdateElementLendDetails_result();
        try {
          result.success = iface.batchUpdateElementLendDetails(args.elementLend, args.elementLendDetailsList);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateElementLendDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateElementLendDetails_args> {
      public updateElementLendDetails() {
        super("updateElementLendDetails");
      }

      public updateElementLendDetails_args getEmptyArgsInstance() {
        return new updateElementLendDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateElementLendDetails_result getResult(I iface, updateElementLendDetails_args args) throws org.apache.thrift.TException {
        updateElementLendDetails_result result = new updateElementLendDetails_result();
        try {
          result.success = iface.updateElementLendDetails(args.elementLend, args.elementLendDetailsList);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findProjectFilesByfileIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProjectFilesByfileIds_args> {
      public findProjectFilesByfileIds() {
        super("findProjectFilesByfileIds");
      }

      public findProjectFilesByfileIds_args getEmptyArgsInstance() {
        return new findProjectFilesByfileIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProjectFilesByfileIds_result getResult(I iface, findProjectFilesByfileIds_args args) throws org.apache.thrift.TException {
        findProjectFilesByfileIds_result result = new findProjectFilesByfileIds_result();
        result.success = iface.findProjectFilesByfileIds(args.projectId, args.fileIds);
        return result;
      }
    }

    public static class updateLendStateByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLendStateByPid_args> {
      public updateLendStateByPid() {
        super("updateLendStateByPid");
      }

      public updateLendStateByPid_args getEmptyArgsInstance() {
        return new updateLendStateByPid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLendStateByPid_result getResult(I iface, updateLendStateByPid_args args) throws org.apache.thrift.TException {
        updateLendStateByPid_result result = new updateLendStateByPid_result();
        try {
          result.success = iface.updateLendStateByPid(args.pid, args.lendState, args.updateTime);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryElementLendDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryElementLendDetails_args> {
      public queryElementLendDetails() {
        super("queryElementLendDetails");
      }

      public queryElementLendDetails_args getEmptyArgsInstance() {
        return new queryElementLendDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryElementLendDetails_result getResult(I iface, queryElementLendDetails_args args) throws org.apache.thrift.TException {
        queryElementLendDetails_result result = new queryElementLendDetails_result();
        result.success = iface.queryElementLendDetails(args.details);
        return result;
      }
    }

    public static class queryElementList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryElementList_args> {
      public queryElementList() {
        super("queryElementList");
      }

      public queryElementList_args getEmptyArgsInstance() {
        return new queryElementList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryElementList_result getResult(I iface, queryElementList_args args) throws org.apache.thrift.TException {
        queryElementList_result result = new queryElementList_result();
        try {
          result.success = iface.queryElementList(args.elementMobileDto);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getTotalElement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalElement_args> {
      public getTotalElement() {
        super("getTotalElement");
      }

      public getTotalElement_args getEmptyArgsInstance() {
        return new getTotalElement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalElement_result getResult(I iface, getTotalElement_args args) throws org.apache.thrift.TException {
        getTotalElement_result result = new getTotalElement_result();
        result.success = iface.getTotalElement(args.elementMobileDto);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findProjectFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProjectFiles_args> {
      public findProjectFiles() {
        super("findProjectFiles");
      }

      public findProjectFiles_args getEmptyArgsInstance() {
        return new findProjectFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProjectFiles_result getResult(I iface, findProjectFiles_args args) throws org.apache.thrift.TException {
        findProjectFiles_result result = new findProjectFiles_result();
        result.success = iface.findProjectFiles(args.projectId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllElementLend", new getAllElementLend());
      processMap.put("getAllElementLendCount", new getAllElementLendCount());
      processMap.put("getElementLendById", new getElementLendById());
      processMap.put("addElementLend", new addElementLend());
      processMap.put("updateElementLend", new updateElementLend());
      processMap.put("batchUpdateElementLendDetails", new batchUpdateElementLendDetails());
      processMap.put("updateElementLendDetails", new updateElementLendDetails());
      processMap.put("findProjectFilesByfileIds", new findProjectFilesByfileIds());
      processMap.put("updateLendStateByPid", new updateLendStateByPid());
      processMap.put("queryElementLendDetails", new queryElementLendDetails());
      processMap.put("queryElementList", new queryElementList());
      processMap.put("getTotalElement", new getTotalElement());
      processMap.put("findProjectFiles", new findProjectFiles());
      return processMap;
    }

    public static class getAllElementLend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllElementLend_args, List<com.xlkfinance.bms.rpc.common.GridViewDTO>> {
      public getAllElementLend() {
        super("getAllElementLend");
      }

      public getAllElementLend_args getEmptyArgsInstance() {
        return new getAllElementLend_args();
      }

      public AsyncMethodCallback<List<com.xlkfinance.bms.rpc.common.GridViewDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.xlkfinance.bms.rpc.common.GridViewDTO>>() { 
          public void onComplete(List<com.xlkfinance.bms.rpc.common.GridViewDTO> o) {
            getAllElementLend_result result = new getAllElementLend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllElementLend_result result = new getAllElementLend_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllElementLend_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.xlkfinance.bms.rpc.common.GridViewDTO>> resultHandler) throws TException {
        iface.getAllElementLend(args.elementLend,resultHandler);
      }
    }

    public static class getAllElementLendCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllElementLendCount_args, Integer> {
      public getAllElementLendCount() {
        super("getAllElementLendCount");
      }

      public getAllElementLendCount_args getEmptyArgsInstance() {
        return new getAllElementLendCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAllElementLendCount_result result = new getAllElementLendCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllElementLendCount_result result = new getAllElementLendCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllElementLendCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAllElementLendCount(args.elementLend,resultHandler);
      }
    }

    public static class getElementLendById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getElementLendById_args, ElementLend> {
      public getElementLendById() {
        super("getElementLendById");
      }

      public getElementLendById_args getEmptyArgsInstance() {
        return new getElementLendById_args();
      }

      public AsyncMethodCallback<ElementLend> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ElementLend>() { 
          public void onComplete(ElementLend o) {
            getElementLendById_result result = new getElementLendById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getElementLendById_result result = new getElementLendById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getElementLendById_args args, org.apache.thrift.async.AsyncMethodCallback<ElementLend> resultHandler) throws TException {
        iface.getElementLendById(args.pid,resultHandler);
      }
    }

    public static class addElementLend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addElementLend_args, Integer> {
      public addElementLend() {
        super("addElementLend");
      }

      public addElementLend_args getEmptyArgsInstance() {
        return new addElementLend_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addElementLend_result result = new addElementLend_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addElementLend_result result = new addElementLend_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addElementLend_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addElementLend(args.elementLend,resultHandler);
      }
    }

    public static class updateElementLend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateElementLend_args, Integer> {
      public updateElementLend() {
        super("updateElementLend");
      }

      public updateElementLend_args getEmptyArgsInstance() {
        return new updateElementLend_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateElementLend_result result = new updateElementLend_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateElementLend_result result = new updateElementLend_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateElementLend_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateElementLend(args.elementLend,resultHandler);
      }
    }

    public static class batchUpdateElementLendDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchUpdateElementLendDetails_args, Integer> {
      public batchUpdateElementLendDetails() {
        super("batchUpdateElementLendDetails");
      }

      public batchUpdateElementLendDetails_args getEmptyArgsInstance() {
        return new batchUpdateElementLendDetails_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchUpdateElementLendDetails_result result = new batchUpdateElementLendDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchUpdateElementLendDetails_result result = new batchUpdateElementLendDetails_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchUpdateElementLendDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchUpdateElementLendDetails(args.elementLend, args.elementLendDetailsList,resultHandler);
      }
    }

    public static class updateElementLendDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateElementLendDetails_args, Integer> {
      public updateElementLendDetails() {
        super("updateElementLendDetails");
      }

      public updateElementLendDetails_args getEmptyArgsInstance() {
        return new updateElementLendDetails_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateElementLendDetails_result result = new updateElementLendDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateElementLendDetails_result result = new updateElementLendDetails_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateElementLendDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateElementLendDetails(args.elementLend, args.elementLendDetailsList,resultHandler);
      }
    }

    public static class findProjectFilesByfileIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProjectFilesByfileIds_args, List<DataInfo>> {
      public findProjectFilesByfileIds() {
        super("findProjectFilesByfileIds");
      }

      public findProjectFilesByfileIds_args getEmptyArgsInstance() {
        return new findProjectFilesByfileIds_args();
      }

      public AsyncMethodCallback<List<DataInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DataInfo>>() { 
          public void onComplete(List<DataInfo> o) {
            findProjectFilesByfileIds_result result = new findProjectFilesByfileIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProjectFilesByfileIds_result result = new findProjectFilesByfileIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProjectFilesByfileIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<DataInfo>> resultHandler) throws TException {
        iface.findProjectFilesByfileIds(args.projectId, args.fileIds,resultHandler);
      }
    }

    public static class updateLendStateByPid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLendStateByPid_args, Integer> {
      public updateLendStateByPid() {
        super("updateLendStateByPid");
      }

      public updateLendStateByPid_args getEmptyArgsInstance() {
        return new updateLendStateByPid_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLendStateByPid_result result = new updateLendStateByPid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLendStateByPid_result result = new updateLendStateByPid_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLendStateByPid_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLendStateByPid(args.pid, args.lendState, args.updateTime,resultHandler);
      }
    }

    public static class queryElementLendDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryElementLendDetails_args, List<ElementLendDetails>> {
      public queryElementLendDetails() {
        super("queryElementLendDetails");
      }

      public queryElementLendDetails_args getEmptyArgsInstance() {
        return new queryElementLendDetails_args();
      }

      public AsyncMethodCallback<List<ElementLendDetails>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ElementLendDetails>>() { 
          public void onComplete(List<ElementLendDetails> o) {
            queryElementLendDetails_result result = new queryElementLendDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryElementLendDetails_result result = new queryElementLendDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryElementLendDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ElementLendDetails>> resultHandler) throws TException {
        iface.queryElementLendDetails(args.details,resultHandler);
      }
    }

    public static class queryElementList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryElementList_args, List<GridViewMobileDto>> {
      public queryElementList() {
        super("queryElementList");
      }

      public queryElementList_args getEmptyArgsInstance() {
        return new queryElementList_args();
      }

      public AsyncMethodCallback<List<GridViewMobileDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<GridViewMobileDto>>() { 
          public void onComplete(List<GridViewMobileDto> o) {
            queryElementList_result result = new queryElementList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryElementList_result result = new queryElementList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryElementList_args args, org.apache.thrift.async.AsyncMethodCallback<List<GridViewMobileDto>> resultHandler) throws TException {
        iface.queryElementList(args.elementMobileDto,resultHandler);
      }
    }

    public static class getTotalElement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalElement_args, Integer> {
      public getTotalElement() {
        super("getTotalElement");
      }

      public getTotalElement_args getEmptyArgsInstance() {
        return new getTotalElement_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getTotalElement_result result = new getTotalElement_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTotalElement_result result = new getTotalElement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalElement_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getTotalElement(args.elementMobileDto,resultHandler);
      }
    }

    public static class findProjectFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProjectFiles_args, List<DataInfo>> {
      public findProjectFiles() {
        super("findProjectFiles");
      }

      public findProjectFiles_args getEmptyArgsInstance() {
        return new findProjectFiles_args();
      }

      public AsyncMethodCallback<List<DataInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DataInfo>>() { 
          public void onComplete(List<DataInfo> o) {
            findProjectFiles_result result = new findProjectFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProjectFiles_result result = new findProjectFiles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProjectFiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<DataInfo>> resultHandler) throws TException {
        iface.findProjectFiles(args.projectId,resultHandler);
      }
    }

  }

  public static class getAllElementLend_args implements org.apache.thrift.TBase<getAllElementLend_args, getAllElementLend_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllElementLend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllElementLend_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllElementLend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllElementLend_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllElementLend_args.class, metaDataMap);
    }

    public getAllElementLend_args() {
    }

    public getAllElementLend_args(
      ElementLend elementLend)
    {
      this();
      this.elementLend = elementLend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllElementLend_args(getAllElementLend_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
    }

    public getAllElementLend_args deepCopy() {
      return new getAllElementLend_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public getAllElementLend_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllElementLend_args)
        return this.equals((getAllElementLend_args)that);
      return false;
    }

    public boolean equals(getAllElementLend_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllElementLend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllElementLend_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllElementLend_argsStandardSchemeFactory implements SchemeFactory {
      public getAllElementLend_argsStandardScheme getScheme() {
        return new getAllElementLend_argsStandardScheme();
      }
    }

    private static class getAllElementLend_argsStandardScheme extends StandardScheme<getAllElementLend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllElementLend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllElementLend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllElementLend_argsTupleSchemeFactory implements SchemeFactory {
      public getAllElementLend_argsTupleScheme getScheme() {
        return new getAllElementLend_argsTupleScheme();
      }
    }

    private static class getAllElementLend_argsTupleScheme extends TupleScheme<getAllElementLend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
      }
    }

  }

  public static class getAllElementLend_result implements org.apache.thrift.TBase<getAllElementLend_result, getAllElementLend_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllElementLend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllElementLend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllElementLend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllElementLend_resultTupleSchemeFactory());
    }

    public List<com.xlkfinance.bms.rpc.common.GridViewDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.common.GridViewDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllElementLend_result.class, metaDataMap);
    }

    public getAllElementLend_result() {
    }

    public getAllElementLend_result(
      List<com.xlkfinance.bms.rpc.common.GridViewDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllElementLend_result(getAllElementLend_result other) {
      if (other.isSetSuccess()) {
        List<com.xlkfinance.bms.rpc.common.GridViewDTO> __this__success = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(other.success.size());
        for (com.xlkfinance.bms.rpc.common.GridViewDTO other_element : other.success) {
          __this__success.add(new com.xlkfinance.bms.rpc.common.GridViewDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getAllElementLend_result deepCopy() {
      return new getAllElementLend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.xlkfinance.bms.rpc.common.GridViewDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.xlkfinance.bms.rpc.common.GridViewDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>();
      }
      this.success.add(elem);
    }

    public List<com.xlkfinance.bms.rpc.common.GridViewDTO> getSuccess() {
      return this.success;
    }

    public getAllElementLend_result setSuccess(List<com.xlkfinance.bms.rpc.common.GridViewDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getAllElementLend_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.xlkfinance.bms.rpc.common.GridViewDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllElementLend_result)
        return this.equals((getAllElementLend_result)that);
      return false;
    }

    public boolean equals(getAllElementLend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllElementLend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllElementLend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllElementLend_resultStandardSchemeFactory implements SchemeFactory {
      public getAllElementLend_resultStandardScheme getScheme() {
        return new getAllElementLend_resultStandardScheme();
      }
    }

    private static class getAllElementLend_resultStandardScheme extends StandardScheme<getAllElementLend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllElementLend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(_list128.size);
                  com.xlkfinance.bms.rpc.common.GridViewDTO _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.xlkfinance.bms.rpc.common.GridViewDTO();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllElementLend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.xlkfinance.bms.rpc.common.GridViewDTO _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllElementLend_resultTupleSchemeFactory implements SchemeFactory {
      public getAllElementLend_resultTupleScheme getScheme() {
        return new getAllElementLend_resultTupleScheme();
      }
    }

    private static class getAllElementLend_resultTupleScheme extends TupleScheme<getAllElementLend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.xlkfinance.bms.rpc.common.GridViewDTO _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(_list133.size);
            com.xlkfinance.bms.rpc.common.GridViewDTO _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.xlkfinance.bms.rpc.common.GridViewDTO();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAllElementLendCount_args implements org.apache.thrift.TBase<getAllElementLendCount_args, getAllElementLendCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllElementLendCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllElementLendCount_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllElementLendCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllElementLendCount_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllElementLendCount_args.class, metaDataMap);
    }

    public getAllElementLendCount_args() {
    }

    public getAllElementLendCount_args(
      ElementLend elementLend)
    {
      this();
      this.elementLend = elementLend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllElementLendCount_args(getAllElementLendCount_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
    }

    public getAllElementLendCount_args deepCopy() {
      return new getAllElementLendCount_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public getAllElementLendCount_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllElementLendCount_args)
        return this.equals((getAllElementLendCount_args)that);
      return false;
    }

    public boolean equals(getAllElementLendCount_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllElementLendCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllElementLendCount_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllElementLendCount_argsStandardSchemeFactory implements SchemeFactory {
      public getAllElementLendCount_argsStandardScheme getScheme() {
        return new getAllElementLendCount_argsStandardScheme();
      }
    }

    private static class getAllElementLendCount_argsStandardScheme extends StandardScheme<getAllElementLendCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllElementLendCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllElementLendCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllElementLendCount_argsTupleSchemeFactory implements SchemeFactory {
      public getAllElementLendCount_argsTupleScheme getScheme() {
        return new getAllElementLendCount_argsTupleScheme();
      }
    }

    private static class getAllElementLendCount_argsTupleScheme extends TupleScheme<getAllElementLendCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllElementLendCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllElementLendCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
      }
    }

  }

  public static class getAllElementLendCount_result implements org.apache.thrift.TBase<getAllElementLendCount_result, getAllElementLendCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllElementLendCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllElementLendCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllElementLendCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllElementLendCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllElementLendCount_result.class, metaDataMap);
    }

    public getAllElementLendCount_result() {
    }

    public getAllElementLendCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllElementLendCount_result(getAllElementLendCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAllElementLendCount_result deepCopy() {
      return new getAllElementLendCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAllElementLendCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllElementLendCount_result)
        return this.equals((getAllElementLendCount_result)that);
      return false;
    }

    public boolean equals(getAllElementLendCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllElementLendCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllElementLendCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllElementLendCount_resultStandardSchemeFactory implements SchemeFactory {
      public getAllElementLendCount_resultStandardScheme getScheme() {
        return new getAllElementLendCount_resultStandardScheme();
      }
    }

    private static class getAllElementLendCount_resultStandardScheme extends StandardScheme<getAllElementLendCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllElementLendCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllElementLendCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllElementLendCount_resultTupleSchemeFactory implements SchemeFactory {
      public getAllElementLendCount_resultTupleScheme getScheme() {
        return new getAllElementLendCount_resultTupleScheme();
      }
    }

    private static class getAllElementLendCount_resultTupleScheme extends TupleScheme<getAllElementLendCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllElementLendCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllElementLendCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getElementLendById_args implements org.apache.thrift.TBase<getElementLendById_args, getElementLendById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getElementLendById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getElementLendById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getElementLendById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getElementLendById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getElementLendById_args.class, metaDataMap);
    }

    public getElementLendById_args() {
    }

    public getElementLendById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getElementLendById_args(getElementLendById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getElementLendById_args deepCopy() {
      return new getElementLendById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getElementLendById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getElementLendById_args)
        return this.equals((getElementLendById_args)that);
      return false;
    }

    public boolean equals(getElementLendById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getElementLendById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getElementLendById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getElementLendById_argsStandardSchemeFactory implements SchemeFactory {
      public getElementLendById_argsStandardScheme getScheme() {
        return new getElementLendById_argsStandardScheme();
      }
    }

    private static class getElementLendById_argsStandardScheme extends StandardScheme<getElementLendById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getElementLendById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getElementLendById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getElementLendById_argsTupleSchemeFactory implements SchemeFactory {
      public getElementLendById_argsTupleScheme getScheme() {
        return new getElementLendById_argsTupleScheme();
      }
    }

    private static class getElementLendById_argsTupleScheme extends TupleScheme<getElementLendById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getElementLendById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getElementLendById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getElementLendById_result implements org.apache.thrift.TBase<getElementLendById_result, getElementLendById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getElementLendById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getElementLendById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getElementLendById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getElementLendById_resultTupleSchemeFactory());
    }

    public ElementLend success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getElementLendById_result.class, metaDataMap);
    }

    public getElementLendById_result() {
    }

    public getElementLendById_result(
      ElementLend success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getElementLendById_result(getElementLendById_result other) {
      if (other.isSetSuccess()) {
        this.success = new ElementLend(other.success);
      }
    }

    public getElementLendById_result deepCopy() {
      return new getElementLendById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ElementLend getSuccess() {
      return this.success;
    }

    public getElementLendById_result setSuccess(ElementLend success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ElementLend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getElementLendById_result)
        return this.equals((getElementLendById_result)that);
      return false;
    }

    public boolean equals(getElementLendById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getElementLendById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getElementLendById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getElementLendById_resultStandardSchemeFactory implements SchemeFactory {
      public getElementLendById_resultStandardScheme getScheme() {
        return new getElementLendById_resultStandardScheme();
      }
    }

    private static class getElementLendById_resultStandardScheme extends StandardScheme<getElementLendById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getElementLendById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ElementLend();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getElementLendById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getElementLendById_resultTupleSchemeFactory implements SchemeFactory {
      public getElementLendById_resultTupleScheme getScheme() {
        return new getElementLendById_resultTupleScheme();
      }
    }

    private static class getElementLendById_resultTupleScheme extends TupleScheme<getElementLendById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getElementLendById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getElementLendById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ElementLend();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addElementLend_args implements org.apache.thrift.TBase<addElementLend_args, addElementLend_args._Fields>, java.io.Serializable, Cloneable, Comparable<addElementLend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addElementLend_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addElementLend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addElementLend_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addElementLend_args.class, metaDataMap);
    }

    public addElementLend_args() {
    }

    public addElementLend_args(
      ElementLend elementLend)
    {
      this();
      this.elementLend = elementLend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addElementLend_args(addElementLend_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
    }

    public addElementLend_args deepCopy() {
      return new addElementLend_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public addElementLend_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addElementLend_args)
        return this.equals((addElementLend_args)that);
      return false;
    }

    public boolean equals(addElementLend_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      return list.hashCode();
    }

    @Override
    public int compareTo(addElementLend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addElementLend_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addElementLend_argsStandardSchemeFactory implements SchemeFactory {
      public addElementLend_argsStandardScheme getScheme() {
        return new addElementLend_argsStandardScheme();
      }
    }

    private static class addElementLend_argsStandardScheme extends StandardScheme<addElementLend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addElementLend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addElementLend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addElementLend_argsTupleSchemeFactory implements SchemeFactory {
      public addElementLend_argsTupleScheme getScheme() {
        return new addElementLend_argsTupleScheme();
      }
    }

    private static class addElementLend_argsTupleScheme extends TupleScheme<addElementLend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
      }
    }

  }

  public static class addElementLend_result implements org.apache.thrift.TBase<addElementLend_result, addElementLend_result._Fields>, java.io.Serializable, Cloneable, Comparable<addElementLend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addElementLend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addElementLend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addElementLend_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addElementLend_result.class, metaDataMap);
    }

    public addElementLend_result() {
    }

    public addElementLend_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addElementLend_result(addElementLend_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addElementLend_result deepCopy() {
      return new addElementLend_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addElementLend_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addElementLend_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addElementLend_result)
        return this.equals((addElementLend_result)that);
      return false;
    }

    public boolean equals(addElementLend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addElementLend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addElementLend_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addElementLend_resultStandardSchemeFactory implements SchemeFactory {
      public addElementLend_resultStandardScheme getScheme() {
        return new addElementLend_resultStandardScheme();
      }
    }

    private static class addElementLend_resultStandardScheme extends StandardScheme<addElementLend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addElementLend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addElementLend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addElementLend_resultTupleSchemeFactory implements SchemeFactory {
      public addElementLend_resultTupleScheme getScheme() {
        return new addElementLend_resultTupleScheme();
      }
    }

    private static class addElementLend_resultTupleScheme extends TupleScheme<addElementLend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateElementLend_args implements org.apache.thrift.TBase<updateElementLend_args, updateElementLend_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateElementLend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateElementLend_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateElementLend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateElementLend_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateElementLend_args.class, metaDataMap);
    }

    public updateElementLend_args() {
    }

    public updateElementLend_args(
      ElementLend elementLend)
    {
      this();
      this.elementLend = elementLend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateElementLend_args(updateElementLend_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
    }

    public updateElementLend_args deepCopy() {
      return new updateElementLend_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public updateElementLend_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateElementLend_args)
        return this.equals((updateElementLend_args)that);
      return false;
    }

    public boolean equals(updateElementLend_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateElementLend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateElementLend_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateElementLend_argsStandardSchemeFactory implements SchemeFactory {
      public updateElementLend_argsStandardScheme getScheme() {
        return new updateElementLend_argsStandardScheme();
      }
    }

    private static class updateElementLend_argsStandardScheme extends StandardScheme<updateElementLend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateElementLend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateElementLend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateElementLend_argsTupleSchemeFactory implements SchemeFactory {
      public updateElementLend_argsTupleScheme getScheme() {
        return new updateElementLend_argsTupleScheme();
      }
    }

    private static class updateElementLend_argsTupleScheme extends TupleScheme<updateElementLend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateElementLend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
      }
    }

  }

  public static class updateElementLend_result implements org.apache.thrift.TBase<updateElementLend_result, updateElementLend_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateElementLend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateElementLend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateElementLend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateElementLend_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateElementLend_result.class, metaDataMap);
    }

    public updateElementLend_result() {
    }

    public updateElementLend_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateElementLend_result(updateElementLend_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateElementLend_result deepCopy() {
      return new updateElementLend_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateElementLend_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateElementLend_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateElementLend_result)
        return this.equals((updateElementLend_result)that);
      return false;
    }

    public boolean equals(updateElementLend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateElementLend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateElementLend_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateElementLend_resultStandardSchemeFactory implements SchemeFactory {
      public updateElementLend_resultStandardScheme getScheme() {
        return new updateElementLend_resultStandardScheme();
      }
    }

    private static class updateElementLend_resultStandardScheme extends StandardScheme<updateElementLend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateElementLend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateElementLend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateElementLend_resultTupleSchemeFactory implements SchemeFactory {
      public updateElementLend_resultTupleScheme getScheme() {
        return new updateElementLend_resultTupleScheme();
      }
    }

    private static class updateElementLend_resultTupleScheme extends TupleScheme<updateElementLend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateElementLend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class batchUpdateElementLendDetails_args implements org.apache.thrift.TBase<batchUpdateElementLendDetails_args, batchUpdateElementLendDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchUpdateElementLendDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchUpdateElementLendDetails_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_DETAILS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLendDetailsList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchUpdateElementLendDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchUpdateElementLendDetails_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required
    public List<ElementLendDetails> elementLendDetailsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend"),
      ELEMENT_LEND_DETAILS_LIST((short)2, "elementLendDetailsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          case 2: // ELEMENT_LEND_DETAILS_LIST
            return ELEMENT_LEND_DETAILS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      tmpMap.put(_Fields.ELEMENT_LEND_DETAILS_LIST, new org.apache.thrift.meta_data.FieldMetaData("elementLendDetailsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLendDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchUpdateElementLendDetails_args.class, metaDataMap);
    }

    public batchUpdateElementLendDetails_args() {
    }

    public batchUpdateElementLendDetails_args(
      ElementLend elementLend,
      List<ElementLendDetails> elementLendDetailsList)
    {
      this();
      this.elementLend = elementLend;
      this.elementLendDetailsList = elementLendDetailsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateElementLendDetails_args(batchUpdateElementLendDetails_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
      if (other.isSetElementLendDetailsList()) {
        List<ElementLendDetails> __this__elementLendDetailsList = new ArrayList<ElementLendDetails>(other.elementLendDetailsList.size());
        for (ElementLendDetails other_element : other.elementLendDetailsList) {
          __this__elementLendDetailsList.add(new ElementLendDetails(other_element));
        }
        this.elementLendDetailsList = __this__elementLendDetailsList;
      }
    }

    public batchUpdateElementLendDetails_args deepCopy() {
      return new batchUpdateElementLendDetails_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
      this.elementLendDetailsList = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public batchUpdateElementLendDetails_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public int getElementLendDetailsListSize() {
      return (this.elementLendDetailsList == null) ? 0 : this.elementLendDetailsList.size();
    }

    public java.util.Iterator<ElementLendDetails> getElementLendDetailsListIterator() {
      return (this.elementLendDetailsList == null) ? null : this.elementLendDetailsList.iterator();
    }

    public void addToElementLendDetailsList(ElementLendDetails elem) {
      if (this.elementLendDetailsList == null) {
        this.elementLendDetailsList = new ArrayList<ElementLendDetails>();
      }
      this.elementLendDetailsList.add(elem);
    }

    public List<ElementLendDetails> getElementLendDetailsList() {
      return this.elementLendDetailsList;
    }

    public batchUpdateElementLendDetails_args setElementLendDetailsList(List<ElementLendDetails> elementLendDetailsList) {
      this.elementLendDetailsList = elementLendDetailsList;
      return this;
    }

    public void unsetElementLendDetailsList() {
      this.elementLendDetailsList = null;
    }

    /** Returns true if field elementLendDetailsList is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLendDetailsList() {
      return this.elementLendDetailsList != null;
    }

    public void setElementLendDetailsListIsSet(boolean value) {
      if (!value) {
        this.elementLendDetailsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      case ELEMENT_LEND_DETAILS_LIST:
        if (value == null) {
          unsetElementLendDetailsList();
        } else {
          setElementLendDetailsList((List<ElementLendDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      case ELEMENT_LEND_DETAILS_LIST:
        return getElementLendDetailsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      case ELEMENT_LEND_DETAILS_LIST:
        return isSetElementLendDetailsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateElementLendDetails_args)
        return this.equals((batchUpdateElementLendDetails_args)that);
      return false;
    }

    public boolean equals(batchUpdateElementLendDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      boolean this_present_elementLendDetailsList = true && this.isSetElementLendDetailsList();
      boolean that_present_elementLendDetailsList = true && that.isSetElementLendDetailsList();
      if (this_present_elementLendDetailsList || that_present_elementLendDetailsList) {
        if (!(this_present_elementLendDetailsList && that_present_elementLendDetailsList))
          return false;
        if (!this.elementLendDetailsList.equals(that.elementLendDetailsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      boolean present_elementLendDetailsList = true && (isSetElementLendDetailsList());
      list.add(present_elementLendDetailsList);
      if (present_elementLendDetailsList)
        list.add(elementLendDetailsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchUpdateElementLendDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetElementLendDetailsList()).compareTo(other.isSetElementLendDetailsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLendDetailsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLendDetailsList, other.elementLendDetailsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchUpdateElementLendDetails_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("elementLendDetailsList:");
      if (this.elementLendDetailsList == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLendDetailsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchUpdateElementLendDetails_argsStandardSchemeFactory implements SchemeFactory {
      public batchUpdateElementLendDetails_argsStandardScheme getScheme() {
        return new batchUpdateElementLendDetails_argsStandardScheme();
      }
    }

    private static class batchUpdateElementLendDetails_argsStandardScheme extends StandardScheme<batchUpdateElementLendDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchUpdateElementLendDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ELEMENT_LEND_DETAILS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.elementLendDetailsList = new ArrayList<ElementLendDetails>(_list136.size);
                  ElementLendDetails _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new ElementLendDetails();
                    _elem137.read(iprot);
                    struct.elementLendDetailsList.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setElementLendDetailsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchUpdateElementLendDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.elementLendDetailsList != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_DETAILS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.elementLendDetailsList.size()));
            for (ElementLendDetails _iter139 : struct.elementLendDetailsList)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchUpdateElementLendDetails_argsTupleSchemeFactory implements SchemeFactory {
      public batchUpdateElementLendDetails_argsTupleScheme getScheme() {
        return new batchUpdateElementLendDetails_argsTupleScheme();
      }
    }

    private static class batchUpdateElementLendDetails_argsTupleScheme extends TupleScheme<batchUpdateElementLendDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchUpdateElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        if (struct.isSetElementLendDetailsList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
        if (struct.isSetElementLendDetailsList()) {
          {
            oprot.writeI32(struct.elementLendDetailsList.size());
            for (ElementLendDetails _iter140 : struct.elementLendDetailsList)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchUpdateElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.elementLendDetailsList = new ArrayList<ElementLendDetails>(_list141.size);
            ElementLendDetails _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new ElementLendDetails();
              _elem142.read(iprot);
              struct.elementLendDetailsList.add(_elem142);
            }
          }
          struct.setElementLendDetailsListIsSet(true);
        }
      }
    }

  }

  public static class batchUpdateElementLendDetails_result implements org.apache.thrift.TBase<batchUpdateElementLendDetails_result, batchUpdateElementLendDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchUpdateElementLendDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchUpdateElementLendDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchUpdateElementLendDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchUpdateElementLendDetails_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchUpdateElementLendDetails_result.class, metaDataMap);
    }

    public batchUpdateElementLendDetails_result() {
    }

    public batchUpdateElementLendDetails_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateElementLendDetails_result(batchUpdateElementLendDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchUpdateElementLendDetails_result deepCopy() {
      return new batchUpdateElementLendDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchUpdateElementLendDetails_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchUpdateElementLendDetails_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateElementLendDetails_result)
        return this.equals((batchUpdateElementLendDetails_result)that);
      return false;
    }

    public boolean equals(batchUpdateElementLendDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchUpdateElementLendDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchUpdateElementLendDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchUpdateElementLendDetails_resultStandardSchemeFactory implements SchemeFactory {
      public batchUpdateElementLendDetails_resultStandardScheme getScheme() {
        return new batchUpdateElementLendDetails_resultStandardScheme();
      }
    }

    private static class batchUpdateElementLendDetails_resultStandardScheme extends StandardScheme<batchUpdateElementLendDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchUpdateElementLendDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchUpdateElementLendDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchUpdateElementLendDetails_resultTupleSchemeFactory implements SchemeFactory {
      public batchUpdateElementLendDetails_resultTupleScheme getScheme() {
        return new batchUpdateElementLendDetails_resultTupleScheme();
      }
    }

    private static class batchUpdateElementLendDetails_resultTupleScheme extends TupleScheme<batchUpdateElementLendDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchUpdateElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchUpdateElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateElementLendDetails_args implements org.apache.thrift.TBase<updateElementLendDetails_args, updateElementLendDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateElementLendDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateElementLendDetails_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ELEMENT_LEND_DETAILS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("elementLendDetailsList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateElementLendDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateElementLendDetails_argsTupleSchemeFactory());
    }

    public ElementLend elementLend; // required
    public List<ElementLendDetails> elementLendDetailsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_LEND((short)1, "elementLend"),
      ELEMENT_LEND_DETAILS_LIST((short)2, "elementLendDetailsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_LEND
            return ELEMENT_LEND;
          case 2: // ELEMENT_LEND_DETAILS_LIST
            return ELEMENT_LEND_DETAILS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_LEND, new org.apache.thrift.meta_data.FieldMetaData("elementLend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLend.class)));
      tmpMap.put(_Fields.ELEMENT_LEND_DETAILS_LIST, new org.apache.thrift.meta_data.FieldMetaData("elementLendDetailsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLendDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateElementLendDetails_args.class, metaDataMap);
    }

    public updateElementLendDetails_args() {
    }

    public updateElementLendDetails_args(
      ElementLend elementLend,
      List<ElementLendDetails> elementLendDetailsList)
    {
      this();
      this.elementLend = elementLend;
      this.elementLendDetailsList = elementLendDetailsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateElementLendDetails_args(updateElementLendDetails_args other) {
      if (other.isSetElementLend()) {
        this.elementLend = new ElementLend(other.elementLend);
      }
      if (other.isSetElementLendDetailsList()) {
        List<ElementLendDetails> __this__elementLendDetailsList = new ArrayList<ElementLendDetails>(other.elementLendDetailsList.size());
        for (ElementLendDetails other_element : other.elementLendDetailsList) {
          __this__elementLendDetailsList.add(new ElementLendDetails(other_element));
        }
        this.elementLendDetailsList = __this__elementLendDetailsList;
      }
    }

    public updateElementLendDetails_args deepCopy() {
      return new updateElementLendDetails_args(this);
    }

    @Override
    public void clear() {
      this.elementLend = null;
      this.elementLendDetailsList = null;
    }

    public ElementLend getElementLend() {
      return this.elementLend;
    }

    public updateElementLendDetails_args setElementLend(ElementLend elementLend) {
      this.elementLend = elementLend;
      return this;
    }

    public void unsetElementLend() {
      this.elementLend = null;
    }

    /** Returns true if field elementLend is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLend() {
      return this.elementLend != null;
    }

    public void setElementLendIsSet(boolean value) {
      if (!value) {
        this.elementLend = null;
      }
    }

    public int getElementLendDetailsListSize() {
      return (this.elementLendDetailsList == null) ? 0 : this.elementLendDetailsList.size();
    }

    public java.util.Iterator<ElementLendDetails> getElementLendDetailsListIterator() {
      return (this.elementLendDetailsList == null) ? null : this.elementLendDetailsList.iterator();
    }

    public void addToElementLendDetailsList(ElementLendDetails elem) {
      if (this.elementLendDetailsList == null) {
        this.elementLendDetailsList = new ArrayList<ElementLendDetails>();
      }
      this.elementLendDetailsList.add(elem);
    }

    public List<ElementLendDetails> getElementLendDetailsList() {
      return this.elementLendDetailsList;
    }

    public updateElementLendDetails_args setElementLendDetailsList(List<ElementLendDetails> elementLendDetailsList) {
      this.elementLendDetailsList = elementLendDetailsList;
      return this;
    }

    public void unsetElementLendDetailsList() {
      this.elementLendDetailsList = null;
    }

    /** Returns true if field elementLendDetailsList is set (has been assigned a value) and false otherwise */
    public boolean isSetElementLendDetailsList() {
      return this.elementLendDetailsList != null;
    }

    public void setElementLendDetailsListIsSet(boolean value) {
      if (!value) {
        this.elementLendDetailsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_LEND:
        if (value == null) {
          unsetElementLend();
        } else {
          setElementLend((ElementLend)value);
        }
        break;

      case ELEMENT_LEND_DETAILS_LIST:
        if (value == null) {
          unsetElementLendDetailsList();
        } else {
          setElementLendDetailsList((List<ElementLendDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_LEND:
        return getElementLend();

      case ELEMENT_LEND_DETAILS_LIST:
        return getElementLendDetailsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_LEND:
        return isSetElementLend();
      case ELEMENT_LEND_DETAILS_LIST:
        return isSetElementLendDetailsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateElementLendDetails_args)
        return this.equals((updateElementLendDetails_args)that);
      return false;
    }

    public boolean equals(updateElementLendDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_elementLend = true && this.isSetElementLend();
      boolean that_present_elementLend = true && that.isSetElementLend();
      if (this_present_elementLend || that_present_elementLend) {
        if (!(this_present_elementLend && that_present_elementLend))
          return false;
        if (!this.elementLend.equals(that.elementLend))
          return false;
      }

      boolean this_present_elementLendDetailsList = true && this.isSetElementLendDetailsList();
      boolean that_present_elementLendDetailsList = true && that.isSetElementLendDetailsList();
      if (this_present_elementLendDetailsList || that_present_elementLendDetailsList) {
        if (!(this_present_elementLendDetailsList && that_present_elementLendDetailsList))
          return false;
        if (!this.elementLendDetailsList.equals(that.elementLendDetailsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementLend = true && (isSetElementLend());
      list.add(present_elementLend);
      if (present_elementLend)
        list.add(elementLend);

      boolean present_elementLendDetailsList = true && (isSetElementLendDetailsList());
      list.add(present_elementLendDetailsList);
      if (present_elementLendDetailsList)
        list.add(elementLendDetailsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateElementLendDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementLend()).compareTo(other.isSetElementLend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLend, other.elementLend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetElementLendDetailsList()).compareTo(other.isSetElementLendDetailsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementLendDetailsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementLendDetailsList, other.elementLendDetailsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateElementLendDetails_args(");
      boolean first = true;

      sb.append("elementLend:");
      if (this.elementLend == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLend);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("elementLendDetailsList:");
      if (this.elementLendDetailsList == null) {
        sb.append("null");
      } else {
        sb.append(this.elementLendDetailsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementLend != null) {
        elementLend.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateElementLendDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateElementLendDetails_argsStandardScheme getScheme() {
        return new updateElementLendDetails_argsStandardScheme();
      }
    }

    private static class updateElementLendDetails_argsStandardScheme extends StandardScheme<updateElementLendDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateElementLendDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_LEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementLend = new ElementLend();
                struct.elementLend.read(iprot);
                struct.setElementLendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ELEMENT_LEND_DETAILS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.elementLendDetailsList = new ArrayList<ElementLendDetails>(_list144.size);
                  ElementLendDetails _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new ElementLendDetails();
                    _elem145.read(iprot);
                    struct.elementLendDetailsList.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setElementLendDetailsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateElementLendDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementLend != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_FIELD_DESC);
          struct.elementLend.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.elementLendDetailsList != null) {
          oprot.writeFieldBegin(ELEMENT_LEND_DETAILS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.elementLendDetailsList.size()));
            for (ElementLendDetails _iter147 : struct.elementLendDetailsList)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateElementLendDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateElementLendDetails_argsTupleScheme getScheme() {
        return new updateElementLendDetails_argsTupleScheme();
      }
    }

    private static class updateElementLendDetails_argsTupleScheme extends TupleScheme<updateElementLendDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementLend()) {
          optionals.set(0);
        }
        if (struct.isSetElementLendDetailsList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetElementLend()) {
          struct.elementLend.write(oprot);
        }
        if (struct.isSetElementLendDetailsList()) {
          {
            oprot.writeI32(struct.elementLendDetailsList.size());
            for (ElementLendDetails _iter148 : struct.elementLendDetailsList)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.elementLend = new ElementLend();
          struct.elementLend.read(iprot);
          struct.setElementLendIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.elementLendDetailsList = new ArrayList<ElementLendDetails>(_list149.size);
            ElementLendDetails _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new ElementLendDetails();
              _elem150.read(iprot);
              struct.elementLendDetailsList.add(_elem150);
            }
          }
          struct.setElementLendDetailsListIsSet(true);
        }
      }
    }

  }

  public static class updateElementLendDetails_result implements org.apache.thrift.TBase<updateElementLendDetails_result, updateElementLendDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateElementLendDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateElementLendDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateElementLendDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateElementLendDetails_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateElementLendDetails_result.class, metaDataMap);
    }

    public updateElementLendDetails_result() {
    }

    public updateElementLendDetails_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateElementLendDetails_result(updateElementLendDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateElementLendDetails_result deepCopy() {
      return new updateElementLendDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateElementLendDetails_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateElementLendDetails_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateElementLendDetails_result)
        return this.equals((updateElementLendDetails_result)that);
      return false;
    }

    public boolean equals(updateElementLendDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateElementLendDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateElementLendDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateElementLendDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateElementLendDetails_resultStandardScheme getScheme() {
        return new updateElementLendDetails_resultStandardScheme();
      }
    }

    private static class updateElementLendDetails_resultStandardScheme extends StandardScheme<updateElementLendDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateElementLendDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateElementLendDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateElementLendDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateElementLendDetails_resultTupleScheme getScheme() {
        return new updateElementLendDetails_resultTupleScheme();
      }
    }

    private static class updateElementLendDetails_resultTupleScheme extends TupleScheme<updateElementLendDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findProjectFilesByfileIds_args implements org.apache.thrift.TBase<findProjectFilesByfileIds_args, findProjectFilesByfileIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProjectFilesByfileIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProjectFilesByfileIds_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProjectFilesByfileIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProjectFilesByfileIds_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public List<Integer> fileIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      FILE_IDS((short)2, "fileIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // FILE_IDS
            return FILE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProjectFilesByfileIds_args.class, metaDataMap);
    }

    public findProjectFilesByfileIds_args() {
    }

    public findProjectFilesByfileIds_args(
      int projectId,
      List<Integer> fileIds)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.fileIds = fileIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProjectFilesByfileIds_args(findProjectFilesByfileIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetFileIds()) {
        List<Integer> __this__fileIds = new ArrayList<Integer>(other.fileIds);
        this.fileIds = __this__fileIds;
      }
    }

    public findProjectFilesByfileIds_args deepCopy() {
      return new findProjectFilesByfileIds_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.fileIds = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public findProjectFilesByfileIds_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getFileIdsSize() {
      return (this.fileIds == null) ? 0 : this.fileIds.size();
    }

    public java.util.Iterator<Integer> getFileIdsIterator() {
      return (this.fileIds == null) ? null : this.fileIds.iterator();
    }

    public void addToFileIds(int elem) {
      if (this.fileIds == null) {
        this.fileIds = new ArrayList<Integer>();
      }
      this.fileIds.add(elem);
    }

    public List<Integer> getFileIds() {
      return this.fileIds;
    }

    public findProjectFilesByfileIds_args setFileIds(List<Integer> fileIds) {
      this.fileIds = fileIds;
      return this;
    }

    public void unsetFileIds() {
      this.fileIds = null;
    }

    /** Returns true if field fileIds is set (has been assigned a value) and false otherwise */
    public boolean isSetFileIds() {
      return this.fileIds != null;
    }

    public void setFileIdsIsSet(boolean value) {
      if (!value) {
        this.fileIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case FILE_IDS:
        if (value == null) {
          unsetFileIds();
        } else {
          setFileIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case FILE_IDS:
        return getFileIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case FILE_IDS:
        return isSetFileIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProjectFilesByfileIds_args)
        return this.equals((findProjectFilesByfileIds_args)that);
      return false;
    }

    public boolean equals(findProjectFilesByfileIds_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_fileIds = true && this.isSetFileIds();
      boolean that_present_fileIds = true && that.isSetFileIds();
      if (this_present_fileIds || that_present_fileIds) {
        if (!(this_present_fileIds && that_present_fileIds))
          return false;
        if (!this.fileIds.equals(that.fileIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_fileIds = true && (isSetFileIds());
      list.add(present_fileIds);
      if (present_fileIds)
        list.add(fileIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProjectFilesByfileIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileIds()).compareTo(other.isSetFileIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIds, other.fileIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProjectFilesByfileIds_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileIds:");
      if (this.fileIds == null) {
        sb.append("null");
      } else {
        sb.append(this.fileIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProjectFilesByfileIds_argsStandardSchemeFactory implements SchemeFactory {
      public findProjectFilesByfileIds_argsStandardScheme getScheme() {
        return new findProjectFilesByfileIds_argsStandardScheme();
      }
    }

    private static class findProjectFilesByfileIds_argsStandardScheme extends StandardScheme<findProjectFilesByfileIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProjectFilesByfileIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.fileIds = new ArrayList<Integer>(_list152.size);
                  int _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = iprot.readI32();
                    struct.fileIds.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setFileIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProjectFilesByfileIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.fileIds != null) {
          oprot.writeFieldBegin(FILE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fileIds.size()));
            for (int _iter155 : struct.fileIds)
            {
              oprot.writeI32(_iter155);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProjectFilesByfileIds_argsTupleSchemeFactory implements SchemeFactory {
      public findProjectFilesByfileIds_argsTupleScheme getScheme() {
        return new findProjectFilesByfileIds_argsTupleScheme();
      }
    }

    private static class findProjectFilesByfileIds_argsTupleScheme extends TupleScheme<findProjectFilesByfileIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProjectFilesByfileIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetFileIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetFileIds()) {
          {
            oprot.writeI32(struct.fileIds.size());
            for (int _iter156 : struct.fileIds)
            {
              oprot.writeI32(_iter156);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProjectFilesByfileIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.fileIds = new ArrayList<Integer>(_list157.size);
            int _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = iprot.readI32();
              struct.fileIds.add(_elem158);
            }
          }
          struct.setFileIdsIsSet(true);
        }
      }
    }

  }

  public static class findProjectFilesByfileIds_result implements org.apache.thrift.TBase<findProjectFilesByfileIds_result, findProjectFilesByfileIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProjectFilesByfileIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProjectFilesByfileIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProjectFilesByfileIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProjectFilesByfileIds_resultTupleSchemeFactory());
    }

    public List<DataInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProjectFilesByfileIds_result.class, metaDataMap);
    }

    public findProjectFilesByfileIds_result() {
    }

    public findProjectFilesByfileIds_result(
      List<DataInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProjectFilesByfileIds_result(findProjectFilesByfileIds_result other) {
      if (other.isSetSuccess()) {
        List<DataInfo> __this__success = new ArrayList<DataInfo>(other.success.size());
        for (DataInfo other_element : other.success) {
          __this__success.add(new DataInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findProjectFilesByfileIds_result deepCopy() {
      return new findProjectFilesByfileIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<DataInfo>();
      }
      this.success.add(elem);
    }

    public List<DataInfo> getSuccess() {
      return this.success;
    }

    public findProjectFilesByfileIds_result setSuccess(List<DataInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DataInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProjectFilesByfileIds_result)
        return this.equals((findProjectFilesByfileIds_result)that);
      return false;
    }

    public boolean equals(findProjectFilesByfileIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProjectFilesByfileIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProjectFilesByfileIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProjectFilesByfileIds_resultStandardSchemeFactory implements SchemeFactory {
      public findProjectFilesByfileIds_resultStandardScheme getScheme() {
        return new findProjectFilesByfileIds_resultStandardScheme();
      }
    }

    private static class findProjectFilesByfileIds_resultStandardScheme extends StandardScheme<findProjectFilesByfileIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProjectFilesByfileIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<DataInfo>(_list160.size);
                  DataInfo _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new DataInfo();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProjectFilesByfileIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataInfo _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProjectFilesByfileIds_resultTupleSchemeFactory implements SchemeFactory {
      public findProjectFilesByfileIds_resultTupleScheme getScheme() {
        return new findProjectFilesByfileIds_resultTupleScheme();
      }
    }

    private static class findProjectFilesByfileIds_resultTupleScheme extends TupleScheme<findProjectFilesByfileIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProjectFilesByfileIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DataInfo _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProjectFilesByfileIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DataInfo>(_list165.size);
            DataInfo _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new DataInfo();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLendStateByPid_args implements org.apache.thrift.TBase<updateLendStateByPid_args, updateLendStateByPid_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLendStateByPid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLendStateByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LEND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lendState", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLendStateByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLendStateByPid_argsTupleSchemeFactory());
    }

    public int pid; // required
    public int lendState; // required
    public String updateTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid"),
      LEND_STATE((short)2, "lendState"),
      UPDATE_TIME((short)3, "updateTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          case 2: // LEND_STATE
            return LEND_STATE;
          case 3: // UPDATE_TIME
            return UPDATE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private static final int __LENDSTATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEND_STATE, new org.apache.thrift.meta_data.FieldMetaData("lendState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLendStateByPid_args.class, metaDataMap);
    }

    public updateLendStateByPid_args() {
    }

    public updateLendStateByPid_args(
      int pid,
      int lendState,
      String updateTime)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
      this.lendState = lendState;
      setLendStateIsSet(true);
      this.updateTime = updateTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLendStateByPid_args(updateLendStateByPid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
      this.lendState = other.lendState;
      if (other.isSetUpdateTime()) {
        this.updateTime = other.updateTime;
      }
    }

    public updateLendStateByPid_args deepCopy() {
      return new updateLendStateByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
      setLendStateIsSet(false);
      this.lendState = 0;
      this.updateTime = null;
    }

    public int getPid() {
      return this.pid;
    }

    public updateLendStateByPid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public int getLendState() {
      return this.lendState;
    }

    public updateLendStateByPid_args setLendState(int lendState) {
      this.lendState = lendState;
      setLendStateIsSet(true);
      return this;
    }

    public void unsetLendState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
    }

    /** Returns true if field lendState is set (has been assigned a value) and false otherwise */
    public boolean isSetLendState() {
      return EncodingUtils.testBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
    }

    public void setLendStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDSTATE_ISSET_ID, value);
    }

    public String getUpdateTime() {
      return this.updateTime;
    }

    public updateLendStateByPid_args setUpdateTime(String updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    public void unsetUpdateTime() {
      this.updateTime = null;
    }

    /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateTime() {
      return this.updateTime != null;
    }

    public void setUpdateTimeIsSet(boolean value) {
      if (!value) {
        this.updateTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      case LEND_STATE:
        if (value == null) {
          unsetLendState();
        } else {
          setLendState((Integer)value);
        }
        break;

      case UPDATE_TIME:
        if (value == null) {
          unsetUpdateTime();
        } else {
          setUpdateTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      case LEND_STATE:
        return Integer.valueOf(getLendState());

      case UPDATE_TIME:
        return getUpdateTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      case LEND_STATE:
        return isSetLendState();
      case UPDATE_TIME:
        return isSetUpdateTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLendStateByPid_args)
        return this.equals((updateLendStateByPid_args)that);
      return false;
    }

    public boolean equals(updateLendStateByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_lendState = true;
      boolean that_present_lendState = true;
      if (this_present_lendState || that_present_lendState) {
        if (!(this_present_lendState && that_present_lendState))
          return false;
        if (this.lendState != that.lendState)
          return false;
      }

      boolean this_present_updateTime = true && this.isSetUpdateTime();
      boolean that_present_updateTime = true && that.isSetUpdateTime();
      if (this_present_updateTime || that_present_updateTime) {
        if (!(this_present_updateTime && that_present_updateTime))
          return false;
        if (!this.updateTime.equals(that.updateTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      boolean present_lendState = true;
      list.add(present_lendState);
      if (present_lendState)
        list.add(lendState);

      boolean present_updateTime = true && (isSetUpdateTime());
      list.add(present_updateTime);
      if (present_updateTime)
        list.add(updateTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLendStateByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLendState()).compareTo(other.isSetLendState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLendState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendState, other.lendState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLendStateByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lendState:");
      sb.append(this.lendState);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLendStateByPid_argsStandardSchemeFactory implements SchemeFactory {
      public updateLendStateByPid_argsStandardScheme getScheme() {
        return new updateLendStateByPid_argsStandardScheme();
      }
    }

    private static class updateLendStateByPid_argsStandardScheme extends StandardScheme<updateLendStateByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLendStateByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEND_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lendState = iprot.readI32();
                struct.setLendStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UPDATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateTime = iprot.readString();
                struct.setUpdateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLendStateByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEND_STATE_FIELD_DESC);
        oprot.writeI32(struct.lendState);
        oprot.writeFieldEnd();
        if (struct.updateTime != null) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLendStateByPid_argsTupleSchemeFactory implements SchemeFactory {
      public updateLendStateByPid_argsTupleScheme getScheme() {
        return new updateLendStateByPid_argsTupleScheme();
      }
    }

    private static class updateLendStateByPid_argsTupleScheme extends TupleScheme<updateLendStateByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLendStateByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        if (struct.isSetLendState()) {
          optionals.set(1);
        }
        if (struct.isSetUpdateTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
        if (struct.isSetLendState()) {
          oprot.writeI32(struct.lendState);
        }
        if (struct.isSetUpdateTime()) {
          oprot.writeString(struct.updateTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLendStateByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lendState = iprot.readI32();
          struct.setLendStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.updateTime = iprot.readString();
          struct.setUpdateTimeIsSet(true);
        }
      }
    }

  }

  public static class updateLendStateByPid_result implements org.apache.thrift.TBase<updateLendStateByPid_result, updateLendStateByPid_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLendStateByPid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLendStateByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLendStateByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLendStateByPid_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLendStateByPid_result.class, metaDataMap);
    }

    public updateLendStateByPid_result() {
    }

    public updateLendStateByPid_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLendStateByPid_result(updateLendStateByPid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateLendStateByPid_result deepCopy() {
      return new updateLendStateByPid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLendStateByPid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateLendStateByPid_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLendStateByPid_result)
        return this.equals((updateLendStateByPid_result)that);
      return false;
    }

    public boolean equals(updateLendStateByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLendStateByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLendStateByPid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLendStateByPid_resultStandardSchemeFactory implements SchemeFactory {
      public updateLendStateByPid_resultStandardScheme getScheme() {
        return new updateLendStateByPid_resultStandardScheme();
      }
    }

    private static class updateLendStateByPid_resultStandardScheme extends StandardScheme<updateLendStateByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLendStateByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLendStateByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLendStateByPid_resultTupleSchemeFactory implements SchemeFactory {
      public updateLendStateByPid_resultTupleScheme getScheme() {
        return new updateLendStateByPid_resultTupleScheme();
      }
    }

    private static class updateLendStateByPid_resultTupleScheme extends TupleScheme<updateLendStateByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLendStateByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLendStateByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryElementLendDetails_args implements org.apache.thrift.TBase<queryElementLendDetails_args, queryElementLendDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryElementLendDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryElementLendDetails_args");

    private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryElementLendDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryElementLendDetails_argsTupleSchemeFactory());
    }

    public ElementLendDetails details; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAILS((short)1, "details");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAILS
            return DETAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLendDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryElementLendDetails_args.class, metaDataMap);
    }

    public queryElementLendDetails_args() {
    }

    public queryElementLendDetails_args(
      ElementLendDetails details)
    {
      this();
      this.details = details;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryElementLendDetails_args(queryElementLendDetails_args other) {
      if (other.isSetDetails()) {
        this.details = new ElementLendDetails(other.details);
      }
    }

    public queryElementLendDetails_args deepCopy() {
      return new queryElementLendDetails_args(this);
    }

    @Override
    public void clear() {
      this.details = null;
    }

    public ElementLendDetails getDetails() {
      return this.details;
    }

    public queryElementLendDetails_args setDetails(ElementLendDetails details) {
      this.details = details;
      return this;
    }

    public void unsetDetails() {
      this.details = null;
    }

    /** Returns true if field details is set (has been assigned a value) and false otherwise */
    public boolean isSetDetails() {
      return this.details != null;
    }

    public void setDetailsIsSet(boolean value) {
      if (!value) {
        this.details = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAILS:
        if (value == null) {
          unsetDetails();
        } else {
          setDetails((ElementLendDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAILS:
        return getDetails();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAILS:
        return isSetDetails();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryElementLendDetails_args)
        return this.equals((queryElementLendDetails_args)that);
      return false;
    }

    public boolean equals(queryElementLendDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_details = true && this.isSetDetails();
      boolean that_present_details = true && that.isSetDetails();
      if (this_present_details || that_present_details) {
        if (!(this_present_details && that_present_details))
          return false;
        if (!this.details.equals(that.details))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_details = true && (isSetDetails());
      list.add(present_details);
      if (present_details)
        list.add(details);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryElementLendDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetails()).compareTo(other.isSetDetails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, other.details);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryElementLendDetails_args(");
      boolean first = true;

      sb.append("details:");
      if (this.details == null) {
        sb.append("null");
      } else {
        sb.append(this.details);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (details != null) {
        details.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryElementLendDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryElementLendDetails_argsStandardScheme getScheme() {
        return new queryElementLendDetails_argsStandardScheme();
      }
    }

    private static class queryElementLendDetails_argsStandardScheme extends StandardScheme<queryElementLendDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryElementLendDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.details = new ElementLendDetails();
                struct.details.read(iprot);
                struct.setDetailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryElementLendDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.details != null) {
          oprot.writeFieldBegin(DETAILS_FIELD_DESC);
          struct.details.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryElementLendDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryElementLendDetails_argsTupleScheme getScheme() {
        return new queryElementLendDetails_argsTupleScheme();
      }
    }

    private static class queryElementLendDetails_argsTupleScheme extends TupleScheme<queryElementLendDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetails()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetails()) {
          struct.details.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryElementLendDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.details = new ElementLendDetails();
          struct.details.read(iprot);
          struct.setDetailsIsSet(true);
        }
      }
    }

  }

  public static class queryElementLendDetails_result implements org.apache.thrift.TBase<queryElementLendDetails_result, queryElementLendDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryElementLendDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryElementLendDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryElementLendDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryElementLendDetails_resultTupleSchemeFactory());
    }

    public List<ElementLendDetails> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementLendDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryElementLendDetails_result.class, metaDataMap);
    }

    public queryElementLendDetails_result() {
    }

    public queryElementLendDetails_result(
      List<ElementLendDetails> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryElementLendDetails_result(queryElementLendDetails_result other) {
      if (other.isSetSuccess()) {
        List<ElementLendDetails> __this__success = new ArrayList<ElementLendDetails>(other.success.size());
        for (ElementLendDetails other_element : other.success) {
          __this__success.add(new ElementLendDetails(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryElementLendDetails_result deepCopy() {
      return new queryElementLendDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ElementLendDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ElementLendDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<ElementLendDetails>();
      }
      this.success.add(elem);
    }

    public List<ElementLendDetails> getSuccess() {
      return this.success;
    }

    public queryElementLendDetails_result setSuccess(List<ElementLendDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ElementLendDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryElementLendDetails_result)
        return this.equals((queryElementLendDetails_result)that);
      return false;
    }

    public boolean equals(queryElementLendDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryElementLendDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryElementLendDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryElementLendDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryElementLendDetails_resultStandardScheme getScheme() {
        return new queryElementLendDetails_resultStandardScheme();
      }
    }

    private static class queryElementLendDetails_resultStandardScheme extends StandardScheme<queryElementLendDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryElementLendDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<ElementLendDetails>(_list168.size);
                  ElementLendDetails _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new ElementLendDetails();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryElementLendDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ElementLendDetails _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryElementLendDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryElementLendDetails_resultTupleScheme getScheme() {
        return new queryElementLendDetails_resultTupleScheme();
      }
    }

    private static class queryElementLendDetails_resultTupleScheme extends TupleScheme<queryElementLendDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ElementLendDetails _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryElementLendDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ElementLendDetails>(_list173.size);
            ElementLendDetails _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new ElementLendDetails();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryElementList_args implements org.apache.thrift.TBase<queryElementList_args, queryElementList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryElementList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryElementList_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_MOBILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("elementMobileDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryElementList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryElementList_argsTupleSchemeFactory());
    }

    public ElementMobileDto elementMobileDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_MOBILE_DTO((short)1, "elementMobileDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_MOBILE_DTO
            return ELEMENT_MOBILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_MOBILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("elementMobileDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementMobileDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryElementList_args.class, metaDataMap);
    }

    public queryElementList_args() {
    }

    public queryElementList_args(
      ElementMobileDto elementMobileDto)
    {
      this();
      this.elementMobileDto = elementMobileDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryElementList_args(queryElementList_args other) {
      if (other.isSetElementMobileDto()) {
        this.elementMobileDto = new ElementMobileDto(other.elementMobileDto);
      }
    }

    public queryElementList_args deepCopy() {
      return new queryElementList_args(this);
    }

    @Override
    public void clear() {
      this.elementMobileDto = null;
    }

    public ElementMobileDto getElementMobileDto() {
      return this.elementMobileDto;
    }

    public queryElementList_args setElementMobileDto(ElementMobileDto elementMobileDto) {
      this.elementMobileDto = elementMobileDto;
      return this;
    }

    public void unsetElementMobileDto() {
      this.elementMobileDto = null;
    }

    /** Returns true if field elementMobileDto is set (has been assigned a value) and false otherwise */
    public boolean isSetElementMobileDto() {
      return this.elementMobileDto != null;
    }

    public void setElementMobileDtoIsSet(boolean value) {
      if (!value) {
        this.elementMobileDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_MOBILE_DTO:
        if (value == null) {
          unsetElementMobileDto();
        } else {
          setElementMobileDto((ElementMobileDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_MOBILE_DTO:
        return getElementMobileDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_MOBILE_DTO:
        return isSetElementMobileDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryElementList_args)
        return this.equals((queryElementList_args)that);
      return false;
    }

    public boolean equals(queryElementList_args that) {
      if (that == null)
        return false;

      boolean this_present_elementMobileDto = true && this.isSetElementMobileDto();
      boolean that_present_elementMobileDto = true && that.isSetElementMobileDto();
      if (this_present_elementMobileDto || that_present_elementMobileDto) {
        if (!(this_present_elementMobileDto && that_present_elementMobileDto))
          return false;
        if (!this.elementMobileDto.equals(that.elementMobileDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementMobileDto = true && (isSetElementMobileDto());
      list.add(present_elementMobileDto);
      if (present_elementMobileDto)
        list.add(elementMobileDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryElementList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementMobileDto()).compareTo(other.isSetElementMobileDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementMobileDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementMobileDto, other.elementMobileDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryElementList_args(");
      boolean first = true;

      sb.append("elementMobileDto:");
      if (this.elementMobileDto == null) {
        sb.append("null");
      } else {
        sb.append(this.elementMobileDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementMobileDto != null) {
        elementMobileDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryElementList_argsStandardSchemeFactory implements SchemeFactory {
      public queryElementList_argsStandardScheme getScheme() {
        return new queryElementList_argsStandardScheme();
      }
    }

    private static class queryElementList_argsStandardScheme extends StandardScheme<queryElementList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryElementList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_MOBILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementMobileDto = new ElementMobileDto();
                struct.elementMobileDto.read(iprot);
                struct.setElementMobileDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryElementList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementMobileDto != null) {
          oprot.writeFieldBegin(ELEMENT_MOBILE_DTO_FIELD_DESC);
          struct.elementMobileDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryElementList_argsTupleSchemeFactory implements SchemeFactory {
      public queryElementList_argsTupleScheme getScheme() {
        return new queryElementList_argsTupleScheme();
      }
    }

    private static class queryElementList_argsTupleScheme extends TupleScheme<queryElementList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryElementList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementMobileDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementMobileDto()) {
          struct.elementMobileDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryElementList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementMobileDto = new ElementMobileDto();
          struct.elementMobileDto.read(iprot);
          struct.setElementMobileDtoIsSet(true);
        }
      }
    }

  }

  public static class queryElementList_result implements org.apache.thrift.TBase<queryElementList_result, queryElementList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryElementList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryElementList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryElementList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryElementList_resultTupleSchemeFactory());
    }

    public List<GridViewMobileDto> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GridViewMobileDto.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryElementList_result.class, metaDataMap);
    }

    public queryElementList_result() {
    }

    public queryElementList_result(
      List<GridViewMobileDto> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryElementList_result(queryElementList_result other) {
      if (other.isSetSuccess()) {
        List<GridViewMobileDto> __this__success = new ArrayList<GridViewMobileDto>(other.success.size());
        for (GridViewMobileDto other_element : other.success) {
          __this__success.add(new GridViewMobileDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryElementList_result deepCopy() {
      return new queryElementList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<GridViewMobileDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(GridViewMobileDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<GridViewMobileDto>();
      }
      this.success.add(elem);
    }

    public List<GridViewMobileDto> getSuccess() {
      return this.success;
    }

    public queryElementList_result setSuccess(List<GridViewMobileDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryElementList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<GridViewMobileDto>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryElementList_result)
        return this.equals((queryElementList_result)that);
      return false;
    }

    public boolean equals(queryElementList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryElementList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryElementList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryElementList_resultStandardSchemeFactory implements SchemeFactory {
      public queryElementList_resultStandardScheme getScheme() {
        return new queryElementList_resultStandardScheme();
      }
    }

    private static class queryElementList_resultStandardScheme extends StandardScheme<queryElementList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryElementList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<GridViewMobileDto>(_list176.size);
                  GridViewMobileDto _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new GridViewMobileDto();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryElementList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (GridViewMobileDto _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryElementList_resultTupleSchemeFactory implements SchemeFactory {
      public queryElementList_resultTupleScheme getScheme() {
        return new queryElementList_resultTupleScheme();
      }
    }

    private static class queryElementList_resultTupleScheme extends TupleScheme<queryElementList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryElementList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (GridViewMobileDto _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryElementList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<GridViewMobileDto>(_list181.size);
            GridViewMobileDto _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new GridViewMobileDto();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getTotalElement_args implements org.apache.thrift.TBase<getTotalElement_args, getTotalElement_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalElement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalElement_args");

    private static final org.apache.thrift.protocol.TField ELEMENT_MOBILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("elementMobileDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalElement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalElement_argsTupleSchemeFactory());
    }

    public ElementMobileDto elementMobileDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENT_MOBILE_DTO((short)1, "elementMobileDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENT_MOBILE_DTO
            return ELEMENT_MOBILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENT_MOBILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("elementMobileDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ElementMobileDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalElement_args.class, metaDataMap);
    }

    public getTotalElement_args() {
    }

    public getTotalElement_args(
      ElementMobileDto elementMobileDto)
    {
      this();
      this.elementMobileDto = elementMobileDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalElement_args(getTotalElement_args other) {
      if (other.isSetElementMobileDto()) {
        this.elementMobileDto = new ElementMobileDto(other.elementMobileDto);
      }
    }

    public getTotalElement_args deepCopy() {
      return new getTotalElement_args(this);
    }

    @Override
    public void clear() {
      this.elementMobileDto = null;
    }

    public ElementMobileDto getElementMobileDto() {
      return this.elementMobileDto;
    }

    public getTotalElement_args setElementMobileDto(ElementMobileDto elementMobileDto) {
      this.elementMobileDto = elementMobileDto;
      return this;
    }

    public void unsetElementMobileDto() {
      this.elementMobileDto = null;
    }

    /** Returns true if field elementMobileDto is set (has been assigned a value) and false otherwise */
    public boolean isSetElementMobileDto() {
      return this.elementMobileDto != null;
    }

    public void setElementMobileDtoIsSet(boolean value) {
      if (!value) {
        this.elementMobileDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENT_MOBILE_DTO:
        if (value == null) {
          unsetElementMobileDto();
        } else {
          setElementMobileDto((ElementMobileDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENT_MOBILE_DTO:
        return getElementMobileDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENT_MOBILE_DTO:
        return isSetElementMobileDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalElement_args)
        return this.equals((getTotalElement_args)that);
      return false;
    }

    public boolean equals(getTotalElement_args that) {
      if (that == null)
        return false;

      boolean this_present_elementMobileDto = true && this.isSetElementMobileDto();
      boolean that_present_elementMobileDto = true && that.isSetElementMobileDto();
      if (this_present_elementMobileDto || that_present_elementMobileDto) {
        if (!(this_present_elementMobileDto && that_present_elementMobileDto))
          return false;
        if (!this.elementMobileDto.equals(that.elementMobileDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elementMobileDto = true && (isSetElementMobileDto());
      list.add(present_elementMobileDto);
      if (present_elementMobileDto)
        list.add(elementMobileDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTotalElement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElementMobileDto()).compareTo(other.isSetElementMobileDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElementMobileDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementMobileDto, other.elementMobileDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalElement_args(");
      boolean first = true;

      sb.append("elementMobileDto:");
      if (this.elementMobileDto == null) {
        sb.append("null");
      } else {
        sb.append(this.elementMobileDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (elementMobileDto != null) {
        elementMobileDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalElement_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalElement_argsStandardScheme getScheme() {
        return new getTotalElement_argsStandardScheme();
      }
    }

    private static class getTotalElement_argsStandardScheme extends StandardScheme<getTotalElement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalElement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENT_MOBILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.elementMobileDto = new ElementMobileDto();
                struct.elementMobileDto.read(iprot);
                struct.setElementMobileDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalElement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elementMobileDto != null) {
          oprot.writeFieldBegin(ELEMENT_MOBILE_DTO_FIELD_DESC);
          struct.elementMobileDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalElement_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalElement_argsTupleScheme getScheme() {
        return new getTotalElement_argsTupleScheme();
      }
    }

    private static class getTotalElement_argsTupleScheme extends TupleScheme<getTotalElement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalElement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElementMobileDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetElementMobileDto()) {
          struct.elementMobileDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalElement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.elementMobileDto = new ElementMobileDto();
          struct.elementMobileDto.read(iprot);
          struct.setElementMobileDtoIsSet(true);
        }
      }
    }

  }

  public static class getTotalElement_result implements org.apache.thrift.TBase<getTotalElement_result, getTotalElement_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalElement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalElement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalElement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalElement_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalElement_result.class, metaDataMap);
    }

    public getTotalElement_result() {
    }

    public getTotalElement_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalElement_result(getTotalElement_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalElement_result deepCopy() {
      return new getTotalElement_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getTotalElement_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalElement_result)
        return this.equals((getTotalElement_result)that);
      return false;
    }

    public boolean equals(getTotalElement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTotalElement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalElement_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalElement_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalElement_resultStandardScheme getScheme() {
        return new getTotalElement_resultStandardScheme();
      }
    }

    private static class getTotalElement_resultStandardScheme extends StandardScheme<getTotalElement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalElement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalElement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalElement_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalElement_resultTupleScheme getScheme() {
        return new getTotalElement_resultTupleScheme();
      }
    }

    private static class getTotalElement_resultTupleScheme extends TupleScheme<getTotalElement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalElement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalElement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProjectFiles_args implements org.apache.thrift.TBase<findProjectFiles_args, findProjectFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProjectFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProjectFiles_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProjectFiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProjectFiles_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProjectFiles_args.class, metaDataMap);
    }

    public findProjectFiles_args() {
    }

    public findProjectFiles_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProjectFiles_args(findProjectFiles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public findProjectFiles_args deepCopy() {
      return new findProjectFiles_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public findProjectFiles_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProjectFiles_args)
        return this.equals((findProjectFiles_args)that);
      return false;
    }

    public boolean equals(findProjectFiles_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProjectFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProjectFiles_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProjectFiles_argsStandardSchemeFactory implements SchemeFactory {
      public findProjectFiles_argsStandardScheme getScheme() {
        return new findProjectFiles_argsStandardScheme();
      }
    }

    private static class findProjectFiles_argsStandardScheme extends StandardScheme<findProjectFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProjectFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProjectFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProjectFiles_argsTupleSchemeFactory implements SchemeFactory {
      public findProjectFiles_argsTupleScheme getScheme() {
        return new findProjectFiles_argsTupleScheme();
      }
    }

    private static class findProjectFiles_argsTupleScheme extends TupleScheme<findProjectFiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProjectFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProjectFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class findProjectFiles_result implements org.apache.thrift.TBase<findProjectFiles_result, findProjectFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProjectFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProjectFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProjectFiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProjectFiles_resultTupleSchemeFactory());
    }

    public List<DataInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProjectFiles_result.class, metaDataMap);
    }

    public findProjectFiles_result() {
    }

    public findProjectFiles_result(
      List<DataInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProjectFiles_result(findProjectFiles_result other) {
      if (other.isSetSuccess()) {
        List<DataInfo> __this__success = new ArrayList<DataInfo>(other.success.size());
        for (DataInfo other_element : other.success) {
          __this__success.add(new DataInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findProjectFiles_result deepCopy() {
      return new findProjectFiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<DataInfo>();
      }
      this.success.add(elem);
    }

    public List<DataInfo> getSuccess() {
      return this.success;
    }

    public findProjectFiles_result setSuccess(List<DataInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DataInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProjectFiles_result)
        return this.equals((findProjectFiles_result)that);
      return false;
    }

    public boolean equals(findProjectFiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProjectFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProjectFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProjectFiles_resultStandardSchemeFactory implements SchemeFactory {
      public findProjectFiles_resultStandardScheme getScheme() {
        return new findProjectFiles_resultStandardScheme();
      }
    }

    private static class findProjectFiles_resultStandardScheme extends StandardScheme<findProjectFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProjectFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<DataInfo>(_list184.size);
                  DataInfo _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new DataInfo();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProjectFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataInfo _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProjectFiles_resultTupleSchemeFactory implements SchemeFactory {
      public findProjectFiles_resultTupleScheme getScheme() {
        return new findProjectFiles_resultTupleScheme();
      }
    }

    private static class findProjectFiles_resultTupleScheme extends TupleScheme<findProjectFiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProjectFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DataInfo _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProjectFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DataInfo>(_list189.size);
            DataInfo _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new DataInfo();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

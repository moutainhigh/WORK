/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class BizProjectViolation implements org.apache.thrift.TBase<BizProjectViolation, BizProjectViolation._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectViolation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectViolation");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_TERM_IN_ATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isTermInAtion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField VIOLATION_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("violationProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VIOLATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("violationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VIOLATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("violationDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VIOLATION_OT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("violationOtInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField IS_BACK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("isBackList", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REG_HISTORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regHistoryId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField BAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("badId", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectViolationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectViolationTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int isTermInAtion; // required
  public double loanAmt; // required
  public double violationProportion; // required
  public double violationAmt; // required
  public String violationDt; // required
  public double violationOtInterest; // required
  public int isBackList; // required
  public int reviewStatus; // required
  public String remark; // required
  public int status; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public int regHistoryId; // required
  public int badId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    IS_TERM_IN_ATION((short)3, "isTermInAtion"),
    LOAN_AMT((short)4, "loanAmt"),
    VIOLATION_PROPORTION((short)5, "violationProportion"),
    VIOLATION_AMT((short)6, "violationAmt"),
    VIOLATION_DT((short)7, "violationDt"),
    VIOLATION_OT_INTEREST((short)8, "violationOtInterest"),
    IS_BACK_LIST((short)9, "isBackList"),
    REVIEW_STATUS((short)10, "reviewStatus"),
    REMARK((short)11, "remark"),
    STATUS((short)12, "status"),
    REQUEST_STATUS((short)13, "requestStatus"),
    REQUEST_DTTM((short)14, "requestDttm"),
    COMPLETE_DTTM((short)15, "completeDttm"),
    REG_HISTORY_ID((short)16, "regHistoryId"),
    BAD_ID((short)17, "badId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // IS_TERM_IN_ATION
          return IS_TERM_IN_ATION;
        case 4: // LOAN_AMT
          return LOAN_AMT;
        case 5: // VIOLATION_PROPORTION
          return VIOLATION_PROPORTION;
        case 6: // VIOLATION_AMT
          return VIOLATION_AMT;
        case 7: // VIOLATION_DT
          return VIOLATION_DT;
        case 8: // VIOLATION_OT_INTEREST
          return VIOLATION_OT_INTEREST;
        case 9: // IS_BACK_LIST
          return IS_BACK_LIST;
        case 10: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 11: // REMARK
          return REMARK;
        case 12: // STATUS
          return STATUS;
        case 13: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 14: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 15: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 16: // REG_HISTORY_ID
          return REG_HISTORY_ID;
        case 17: // BAD_ID
          return BAD_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __ISTERMINATION_ISSET_ID = 2;
  private static final int __LOANAMT_ISSET_ID = 3;
  private static final int __VIOLATIONPROPORTION_ISSET_ID = 4;
  private static final int __VIOLATIONAMT_ISSET_ID = 5;
  private static final int __VIOLATIONOTINTEREST_ISSET_ID = 6;
  private static final int __ISBACKLIST_ISSET_ID = 7;
  private static final int __REVIEWSTATUS_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __REQUESTSTATUS_ISSET_ID = 10;
  private static final int __REGHISTORYID_ISSET_ID = 11;
  private static final int __BADID_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TERM_IN_ATION, new org.apache.thrift.meta_data.FieldMetaData("isTermInAtion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("violationProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("violationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_DT, new org.apache.thrift.meta_data.FieldMetaData("violationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIOLATION_OT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("violationOtInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_BACK_LIST, new org.apache.thrift.meta_data.FieldMetaData("isBackList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_HISTORY_ID, new org.apache.thrift.meta_data.FieldMetaData("regHistoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAD_ID, new org.apache.thrift.meta_data.FieldMetaData("badId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectViolation.class, metaDataMap);
  }

  public BizProjectViolation() {
  }

  public BizProjectViolation(
    int pid,
    int projectId,
    int isTermInAtion,
    double loanAmt,
    double violationProportion,
    double violationAmt,
    String violationDt,
    double violationOtInterest,
    int isBackList,
    int reviewStatus,
    String remark,
    int status,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    int regHistoryId,
    int badId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.isTermInAtion = isTermInAtion;
    setIsTermInAtionIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.violationProportion = violationProportion;
    setViolationProportionIsSet(true);
    this.violationAmt = violationAmt;
    setViolationAmtIsSet(true);
    this.violationDt = violationDt;
    this.violationOtInterest = violationOtInterest;
    setViolationOtInterestIsSet(true);
    this.isBackList = isBackList;
    setIsBackListIsSet(true);
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.regHistoryId = regHistoryId;
    setRegHistoryIdIsSet(true);
    this.badId = badId;
    setBadIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectViolation(BizProjectViolation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.isTermInAtion = other.isTermInAtion;
    this.loanAmt = other.loanAmt;
    this.violationProportion = other.violationProportion;
    this.violationAmt = other.violationAmt;
    if (other.isSetViolationDt()) {
      this.violationDt = other.violationDt;
    }
    this.violationOtInterest = other.violationOtInterest;
    this.isBackList = other.isBackList;
    this.reviewStatus = other.reviewStatus;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.regHistoryId = other.regHistoryId;
    this.badId = other.badId;
  }

  public BizProjectViolation deepCopy() {
    return new BizProjectViolation(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setIsTermInAtionIsSet(false);
    this.isTermInAtion = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    setViolationProportionIsSet(false);
    this.violationProportion = 0.0;
    setViolationAmtIsSet(false);
    this.violationAmt = 0.0;
    this.violationDt = null;
    setViolationOtInterestIsSet(false);
    this.violationOtInterest = 0.0;
    setIsBackListIsSet(false);
    this.isBackList = 0;
    setReviewStatusIsSet(false);
    this.reviewStatus = 0;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    setRegHistoryIdIsSet(false);
    this.regHistoryId = 0;
    setBadIdIsSet(false);
    this.badId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectViolation setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectViolation setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getIsTermInAtion() {
    return this.isTermInAtion;
  }

  public BizProjectViolation setIsTermInAtion(int isTermInAtion) {
    this.isTermInAtion = isTermInAtion;
    setIsTermInAtionIsSet(true);
    return this;
  }

  public void unsetIsTermInAtion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTERMINATION_ISSET_ID);
  }

  /** Returns true if field isTermInAtion is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTermInAtion() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTERMINATION_ISSET_ID);
  }

  public void setIsTermInAtionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTERMINATION_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public BizProjectViolation setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public double getViolationProportion() {
    return this.violationProportion;
  }

  public BizProjectViolation setViolationProportion(double violationProportion) {
    this.violationProportion = violationProportion;
    setViolationProportionIsSet(true);
    return this;
  }

  public void unsetViolationProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID);
  }

  /** Returns true if field violationProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID);
  }

  public void setViolationProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID, value);
  }

  public double getViolationAmt() {
    return this.violationAmt;
  }

  public BizProjectViolation setViolationAmt(double violationAmt) {
    this.violationAmt = violationAmt;
    setViolationAmtIsSet(true);
    return this;
  }

  public void unsetViolationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID);
  }

  /** Returns true if field violationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID);
  }

  public void setViolationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID, value);
  }

  public String getViolationDt() {
    return this.violationDt;
  }

  public BizProjectViolation setViolationDt(String violationDt) {
    this.violationDt = violationDt;
    return this;
  }

  public void unsetViolationDt() {
    this.violationDt = null;
  }

  /** Returns true if field violationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationDt() {
    return this.violationDt != null;
  }

  public void setViolationDtIsSet(boolean value) {
    if (!value) {
      this.violationDt = null;
    }
  }

  public double getViolationOtInterest() {
    return this.violationOtInterest;
  }

  public BizProjectViolation setViolationOtInterest(double violationOtInterest) {
    this.violationOtInterest = violationOtInterest;
    setViolationOtInterestIsSet(true);
    return this;
  }

  public void unsetViolationOtInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID);
  }

  /** Returns true if field violationOtInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationOtInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID);
  }

  public void setViolationOtInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID, value);
  }

  public int getIsBackList() {
    return this.isBackList;
  }

  public BizProjectViolation setIsBackList(int isBackList) {
    this.isBackList = isBackList;
    setIsBackListIsSet(true);
    return this;
  }

  public void unsetIsBackList() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBACKLIST_ISSET_ID);
  }

  /** Returns true if field isBackList is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBackList() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBACKLIST_ISSET_ID);
  }

  public void setIsBackListIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBACKLIST_ISSET_ID, value);
  }

  public int getReviewStatus() {
    return this.reviewStatus;
  }

  public BizProjectViolation setReviewStatus(int reviewStatus) {
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    return this;
  }

  public void unsetReviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  public void setReviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public BizProjectViolation setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectViolation setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public BizProjectViolation setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public BizProjectViolation setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public BizProjectViolation setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getRegHistoryId() {
    return this.regHistoryId;
  }

  public BizProjectViolation setRegHistoryId(int regHistoryId) {
    this.regHistoryId = regHistoryId;
    setRegHistoryIdIsSet(true);
    return this;
  }

  public void unsetRegHistoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGHISTORYID_ISSET_ID);
  }

  /** Returns true if field regHistoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegHistoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGHISTORYID_ISSET_ID);
  }

  public void setRegHistoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGHISTORYID_ISSET_ID, value);
  }

  public int getBadId() {
    return this.badId;
  }

  public BizProjectViolation setBadId(int badId) {
    this.badId = badId;
    setBadIdIsSet(true);
    return this;
  }

  public void unsetBadId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BADID_ISSET_ID);
  }

  /** Returns true if field badId is set (has been assigned a value) and false otherwise */
  public boolean isSetBadId() {
    return EncodingUtils.testBit(__isset_bitfield, __BADID_ISSET_ID);
  }

  public void setBadIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BADID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case IS_TERM_IN_ATION:
      if (value == null) {
        unsetIsTermInAtion();
      } else {
        setIsTermInAtion((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case VIOLATION_PROPORTION:
      if (value == null) {
        unsetViolationProportion();
      } else {
        setViolationProportion((Double)value);
      }
      break;

    case VIOLATION_AMT:
      if (value == null) {
        unsetViolationAmt();
      } else {
        setViolationAmt((Double)value);
      }
      break;

    case VIOLATION_DT:
      if (value == null) {
        unsetViolationDt();
      } else {
        setViolationDt((String)value);
      }
      break;

    case VIOLATION_OT_INTEREST:
      if (value == null) {
        unsetViolationOtInterest();
      } else {
        setViolationOtInterest((Double)value);
      }
      break;

    case IS_BACK_LIST:
      if (value == null) {
        unsetIsBackList();
      } else {
        setIsBackList((Integer)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case REG_HISTORY_ID:
      if (value == null) {
        unsetRegHistoryId();
      } else {
        setRegHistoryId((Integer)value);
      }
      break;

    case BAD_ID:
      if (value == null) {
        unsetBadId();
      } else {
        setBadId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case IS_TERM_IN_ATION:
      return Integer.valueOf(getIsTermInAtion());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case VIOLATION_PROPORTION:
      return Double.valueOf(getViolationProportion());

    case VIOLATION_AMT:
      return Double.valueOf(getViolationAmt());

    case VIOLATION_DT:
      return getViolationDt();

    case VIOLATION_OT_INTEREST:
      return Double.valueOf(getViolationOtInterest());

    case IS_BACK_LIST:
      return Integer.valueOf(getIsBackList());

    case REVIEW_STATUS:
      return Integer.valueOf(getReviewStatus());

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case REG_HISTORY_ID:
      return Integer.valueOf(getRegHistoryId());

    case BAD_ID:
      return Integer.valueOf(getBadId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case IS_TERM_IN_ATION:
      return isSetIsTermInAtion();
    case LOAN_AMT:
      return isSetLoanAmt();
    case VIOLATION_PROPORTION:
      return isSetViolationProportion();
    case VIOLATION_AMT:
      return isSetViolationAmt();
    case VIOLATION_DT:
      return isSetViolationDt();
    case VIOLATION_OT_INTEREST:
      return isSetViolationOtInterest();
    case IS_BACK_LIST:
      return isSetIsBackList();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case REG_HISTORY_ID:
      return isSetRegHistoryId();
    case BAD_ID:
      return isSetBadId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectViolation)
      return this.equals((BizProjectViolation)that);
    return false;
  }

  public boolean equals(BizProjectViolation that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_isTermInAtion = true;
    boolean that_present_isTermInAtion = true;
    if (this_present_isTermInAtion || that_present_isTermInAtion) {
      if (!(this_present_isTermInAtion && that_present_isTermInAtion))
        return false;
      if (this.isTermInAtion != that.isTermInAtion)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_violationProportion = true;
    boolean that_present_violationProportion = true;
    if (this_present_violationProportion || that_present_violationProportion) {
      if (!(this_present_violationProportion && that_present_violationProportion))
        return false;
      if (this.violationProportion != that.violationProportion)
        return false;
    }

    boolean this_present_violationAmt = true;
    boolean that_present_violationAmt = true;
    if (this_present_violationAmt || that_present_violationAmt) {
      if (!(this_present_violationAmt && that_present_violationAmt))
        return false;
      if (this.violationAmt != that.violationAmt)
        return false;
    }

    boolean this_present_violationDt = true && this.isSetViolationDt();
    boolean that_present_violationDt = true && that.isSetViolationDt();
    if (this_present_violationDt || that_present_violationDt) {
      if (!(this_present_violationDt && that_present_violationDt))
        return false;
      if (!this.violationDt.equals(that.violationDt))
        return false;
    }

    boolean this_present_violationOtInterest = true;
    boolean that_present_violationOtInterest = true;
    if (this_present_violationOtInterest || that_present_violationOtInterest) {
      if (!(this_present_violationOtInterest && that_present_violationOtInterest))
        return false;
      if (this.violationOtInterest != that.violationOtInterest)
        return false;
    }

    boolean this_present_isBackList = true;
    boolean that_present_isBackList = true;
    if (this_present_isBackList || that_present_isBackList) {
      if (!(this_present_isBackList && that_present_isBackList))
        return false;
      if (this.isBackList != that.isBackList)
        return false;
    }

    boolean this_present_reviewStatus = true;
    boolean that_present_reviewStatus = true;
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (this.reviewStatus != that.reviewStatus)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_regHistoryId = true;
    boolean that_present_regHistoryId = true;
    if (this_present_regHistoryId || that_present_regHistoryId) {
      if (!(this_present_regHistoryId && that_present_regHistoryId))
        return false;
      if (this.regHistoryId != that.regHistoryId)
        return false;
    }

    boolean this_present_badId = true;
    boolean that_present_badId = true;
    if (this_present_badId || that_present_badId) {
      if (!(this_present_badId && that_present_badId))
        return false;
      if (this.badId != that.badId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_isTermInAtion = true;
    list.add(present_isTermInAtion);
    if (present_isTermInAtion)
      list.add(isTermInAtion);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_violationProportion = true;
    list.add(present_violationProportion);
    if (present_violationProportion)
      list.add(violationProportion);

    boolean present_violationAmt = true;
    list.add(present_violationAmt);
    if (present_violationAmt)
      list.add(violationAmt);

    boolean present_violationDt = true && (isSetViolationDt());
    list.add(present_violationDt);
    if (present_violationDt)
      list.add(violationDt);

    boolean present_violationOtInterest = true;
    list.add(present_violationOtInterest);
    if (present_violationOtInterest)
      list.add(violationOtInterest);

    boolean present_isBackList = true;
    list.add(present_isBackList);
    if (present_isBackList)
      list.add(isBackList);

    boolean present_reviewStatus = true;
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_regHistoryId = true;
    list.add(present_regHistoryId);
    if (present_regHistoryId)
      list.add(regHistoryId);

    boolean present_badId = true;
    list.add(present_badId);
    if (present_badId)
      list.add(badId);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectViolation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTermInAtion()).compareTo(other.isSetIsTermInAtion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTermInAtion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTermInAtion, other.isTermInAtion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationProportion()).compareTo(other.isSetViolationProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationProportion, other.violationProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationAmt()).compareTo(other.isSetViolationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationAmt, other.violationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationDt()).compareTo(other.isSetViolationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationDt, other.violationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationOtInterest()).compareTo(other.isSetViolationOtInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationOtInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationOtInterest, other.violationOtInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBackList()).compareTo(other.isSetIsBackList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBackList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBackList, other.isBackList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegHistoryId()).compareTo(other.isSetRegHistoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegHistoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regHistoryId, other.regHistoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadId()).compareTo(other.isSetBadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badId, other.badId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectViolation(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTermInAtion:");
    sb.append(this.isTermInAtion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationProportion:");
    sb.append(this.violationProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationAmt:");
    sb.append(this.violationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationDt:");
    if (this.violationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.violationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationOtInterest:");
    sb.append(this.violationOtInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBackList:");
    sb.append(this.isBackList);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    sb.append(this.reviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regHistoryId:");
    sb.append(this.regHistoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("badId:");
    sb.append(this.badId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectViolationStandardSchemeFactory implements SchemeFactory {
    public BizProjectViolationStandardScheme getScheme() {
      return new BizProjectViolationStandardScheme();
    }
  }

  private static class BizProjectViolationStandardScheme extends StandardScheme<BizProjectViolation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectViolation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_TERM_IN_ATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTermInAtion = iprot.readI32();
              struct.setIsTermInAtionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIOLATION_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationProportion = iprot.readDouble();
              struct.setViolationProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIOLATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationAmt = iprot.readDouble();
              struct.setViolationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIOLATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.violationDt = iprot.readString();
              struct.setViolationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIOLATION_OT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationOtInterest = iprot.readDouble();
              struct.setViolationOtInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_BACK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isBackList = iprot.readI32();
              struct.setIsBackListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewStatus = iprot.readI32();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REG_HISTORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regHistoryId = iprot.readI32();
              struct.setRegHistoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.badId = iprot.readI32();
              struct.setBadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectViolation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TERM_IN_ATION_FIELD_DESC);
      oprot.writeI32(struct.isTermInAtion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIOLATION_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.violationProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIOLATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.violationAmt);
      oprot.writeFieldEnd();
      if (struct.violationDt != null) {
        oprot.writeFieldBegin(VIOLATION_DT_FIELD_DESC);
        oprot.writeString(struct.violationDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIOLATION_OT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.violationOtInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BACK_LIST_FIELD_DESC);
      oprot.writeI32(struct.isBackList);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reviewStatus);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REG_HISTORY_ID_FIELD_DESC);
      oprot.writeI32(struct.regHistoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BAD_ID_FIELD_DESC);
      oprot.writeI32(struct.badId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectViolationTupleSchemeFactory implements SchemeFactory {
    public BizProjectViolationTupleScheme getScheme() {
      return new BizProjectViolationTupleScheme();
    }
  }

  private static class BizProjectViolationTupleScheme extends TupleScheme<BizProjectViolation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectViolation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetIsTermInAtion()) {
        optionals.set(2);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(3);
      }
      if (struct.isSetViolationProportion()) {
        optionals.set(4);
      }
      if (struct.isSetViolationAmt()) {
        optionals.set(5);
      }
      if (struct.isSetViolationDt()) {
        optionals.set(6);
      }
      if (struct.isSetViolationOtInterest()) {
        optionals.set(7);
      }
      if (struct.isSetIsBackList()) {
        optionals.set(8);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(12);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(13);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(14);
      }
      if (struct.isSetRegHistoryId()) {
        optionals.set(15);
      }
      if (struct.isSetBadId()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetIsTermInAtion()) {
        oprot.writeI32(struct.isTermInAtion);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetViolationProportion()) {
        oprot.writeDouble(struct.violationProportion);
      }
      if (struct.isSetViolationAmt()) {
        oprot.writeDouble(struct.violationAmt);
      }
      if (struct.isSetViolationDt()) {
        oprot.writeString(struct.violationDt);
      }
      if (struct.isSetViolationOtInterest()) {
        oprot.writeDouble(struct.violationOtInterest);
      }
      if (struct.isSetIsBackList()) {
        oprot.writeI32(struct.isBackList);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeI32(struct.reviewStatus);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetRegHistoryId()) {
        oprot.writeI32(struct.regHistoryId);
      }
      if (struct.isSetBadId()) {
        oprot.writeI32(struct.badId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectViolation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isTermInAtion = iprot.readI32();
        struct.setIsTermInAtionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.violationProportion = iprot.readDouble();
        struct.setViolationProportionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.violationAmt = iprot.readDouble();
        struct.setViolationAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.violationDt = iprot.readString();
        struct.setViolationDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.violationOtInterest = iprot.readDouble();
        struct.setViolationOtInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isBackList = iprot.readI32();
        struct.setIsBackListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reviewStatus = iprot.readI32();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(14)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(15)) {
        struct.regHistoryId = iprot.readI32();
        struct.setRegHistoryIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.badId = iprot.readI32();
        struct.setBadIdIsSet(true);
      }
    }
  }

}


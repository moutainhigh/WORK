/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class CollectionRecord implements org.apache.thrift.TBase<CollectionRecord, CollectionRecord._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionRecord");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REMINDER_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderPlanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REMINDER_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderDttm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REMINDER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderUserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REMINDER_SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderSubject", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMINDER_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderMsg", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField METHOD_MALL_FIELD_DESC = new org.apache.thrift.protocol.TField("methodMall", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField METHOD_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("methodSms", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField METHOD_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("methodPhone", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField METHOD_PAPER_FIELD_DESC = new org.apache.thrift.protocol.TField("methodPaper", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MAIL_ADDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mailAdds", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REMINDER_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderWay", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REMINDER_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderUserName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField R_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rNum", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionRecordTupleSchemeFactory());
  }

  public int pid; // required
  public int reminderPlanId; // required
  public int cycleNum; // required
  public String reminderDttm; // required
  public int reminderUserId; // required
  public String reminderSubject; // required
  public String reminderMsg; // required
  public int methodMall; // required
  public int methodSms; // required
  public int methodPhone; // required
  public int methodPaper; // required
  public String telephone; // required
  public String mailAdds; // required
  public int projectId; // required
  public int acctId; // required
  public String reminderWay; // required
  public String reminderUserName; // required
  public int rNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REMINDER_PLAN_ID((short)2, "reminderPlanId"),
    CYCLE_NUM((short)3, "cycleNum"),
    REMINDER_DTTM((short)4, "reminderDttm"),
    REMINDER_USER_ID((short)5, "reminderUserId"),
    REMINDER_SUBJECT((short)6, "reminderSubject"),
    REMINDER_MSG((short)7, "reminderMsg"),
    METHOD_MALL((short)8, "methodMall"),
    METHOD_SMS((short)9, "methodSms"),
    METHOD_PHONE((short)10, "methodPhone"),
    METHOD_PAPER((short)11, "methodPaper"),
    TELEPHONE((short)12, "telephone"),
    MAIL_ADDS((short)13, "mailAdds"),
    PROJECT_ID((short)14, "projectId"),
    ACCT_ID((short)15, "acctId"),
    REMINDER_WAY((short)16, "reminderWay"),
    REMINDER_USER_NAME((short)17, "reminderUserName"),
    R_NUM((short)18, "rNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REMINDER_PLAN_ID
          return REMINDER_PLAN_ID;
        case 3: // CYCLE_NUM
          return CYCLE_NUM;
        case 4: // REMINDER_DTTM
          return REMINDER_DTTM;
        case 5: // REMINDER_USER_ID
          return REMINDER_USER_ID;
        case 6: // REMINDER_SUBJECT
          return REMINDER_SUBJECT;
        case 7: // REMINDER_MSG
          return REMINDER_MSG;
        case 8: // METHOD_MALL
          return METHOD_MALL;
        case 9: // METHOD_SMS
          return METHOD_SMS;
        case 10: // METHOD_PHONE
          return METHOD_PHONE;
        case 11: // METHOD_PAPER
          return METHOD_PAPER;
        case 12: // TELEPHONE
          return TELEPHONE;
        case 13: // MAIL_ADDS
          return MAIL_ADDS;
        case 14: // PROJECT_ID
          return PROJECT_ID;
        case 15: // ACCT_ID
          return ACCT_ID;
        case 16: // REMINDER_WAY
          return REMINDER_WAY;
        case 17: // REMINDER_USER_NAME
          return REMINDER_USER_NAME;
        case 18: // R_NUM
          return R_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REMINDERPLANID_ISSET_ID = 1;
  private static final int __CYCLENUM_ISSET_ID = 2;
  private static final int __REMINDERUSERID_ISSET_ID = 3;
  private static final int __METHODMALL_ISSET_ID = 4;
  private static final int __METHODSMS_ISSET_ID = 5;
  private static final int __METHODPHONE_ISSET_ID = 6;
  private static final int __METHODPAPER_ISSET_ID = 7;
  private static final int __PROJECTID_ISSET_ID = 8;
  private static final int __ACCTID_ISSET_ID = 9;
  private static final int __RNUM_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("reminderPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("cycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_DTTM, new org.apache.thrift.meta_data.FieldMetaData("reminderDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMINDER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("reminderUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("reminderSubject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMINDER_MSG, new org.apache.thrift.meta_data.FieldMetaData("reminderMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_MALL, new org.apache.thrift.meta_data.FieldMetaData("methodMall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.METHOD_SMS, new org.apache.thrift.meta_data.FieldMetaData("methodSms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.METHOD_PHONE, new org.apache.thrift.meta_data.FieldMetaData("methodPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.METHOD_PAPER, new org.apache.thrift.meta_data.FieldMetaData("methodPaper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL_ADDS, new org.apache.thrift.meta_data.FieldMetaData("mailAdds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_WAY, new org.apache.thrift.meta_data.FieldMetaData("reminderWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMINDER_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("reminderUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.R_NUM, new org.apache.thrift.meta_data.FieldMetaData("rNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionRecord.class, metaDataMap);
  }

  public CollectionRecord() {
  }

  public CollectionRecord(
    int pid,
    int reminderPlanId,
    int cycleNum,
    String reminderDttm,
    int reminderUserId,
    String reminderSubject,
    String reminderMsg,
    int methodMall,
    int methodSms,
    int methodPhone,
    int methodPaper,
    String telephone,
    String mailAdds,
    int projectId,
    int acctId,
    String reminderWay,
    String reminderUserName,
    int rNum)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.reminderPlanId = reminderPlanId;
    setReminderPlanIdIsSet(true);
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    this.reminderDttm = reminderDttm;
    this.reminderUserId = reminderUserId;
    setReminderUserIdIsSet(true);
    this.reminderSubject = reminderSubject;
    this.reminderMsg = reminderMsg;
    this.methodMall = methodMall;
    setMethodMallIsSet(true);
    this.methodSms = methodSms;
    setMethodSmsIsSet(true);
    this.methodPhone = methodPhone;
    setMethodPhoneIsSet(true);
    this.methodPaper = methodPaper;
    setMethodPaperIsSet(true);
    this.telephone = telephone;
    this.mailAdds = mailAdds;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.reminderWay = reminderWay;
    this.reminderUserName = reminderUserName;
    this.rNum = rNum;
    setRNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionRecord(CollectionRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.reminderPlanId = other.reminderPlanId;
    this.cycleNum = other.cycleNum;
    if (other.isSetReminderDttm()) {
      this.reminderDttm = other.reminderDttm;
    }
    this.reminderUserId = other.reminderUserId;
    if (other.isSetReminderSubject()) {
      this.reminderSubject = other.reminderSubject;
    }
    if (other.isSetReminderMsg()) {
      this.reminderMsg = other.reminderMsg;
    }
    this.methodMall = other.methodMall;
    this.methodSms = other.methodSms;
    this.methodPhone = other.methodPhone;
    this.methodPaper = other.methodPaper;
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetMailAdds()) {
      this.mailAdds = other.mailAdds;
    }
    this.projectId = other.projectId;
    this.acctId = other.acctId;
    if (other.isSetReminderWay()) {
      this.reminderWay = other.reminderWay;
    }
    if (other.isSetReminderUserName()) {
      this.reminderUserName = other.reminderUserName;
    }
    this.rNum = other.rNum;
  }

  public CollectionRecord deepCopy() {
    return new CollectionRecord(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setReminderPlanIdIsSet(false);
    this.reminderPlanId = 0;
    setCycleNumIsSet(false);
    this.cycleNum = 0;
    this.reminderDttm = null;
    setReminderUserIdIsSet(false);
    this.reminderUserId = 0;
    this.reminderSubject = null;
    this.reminderMsg = null;
    setMethodMallIsSet(false);
    this.methodMall = 0;
    setMethodSmsIsSet(false);
    this.methodSms = 0;
    setMethodPhoneIsSet(false);
    this.methodPhone = 0;
    setMethodPaperIsSet(false);
    this.methodPaper = 0;
    this.telephone = null;
    this.mailAdds = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.reminderWay = null;
    this.reminderUserName = null;
    setRNumIsSet(false);
    this.rNum = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CollectionRecord setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getReminderPlanId() {
    return this.reminderPlanId;
  }

  public CollectionRecord setReminderPlanId(int reminderPlanId) {
    this.reminderPlanId = reminderPlanId;
    setReminderPlanIdIsSet(true);
    return this;
  }

  public void unsetReminderPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMINDERPLANID_ISSET_ID);
  }

  /** Returns true if field reminderPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __REMINDERPLANID_ISSET_ID);
  }

  public void setReminderPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMINDERPLANID_ISSET_ID, value);
  }

  public int getCycleNum() {
    return this.cycleNum;
  }

  public CollectionRecord setCycleNum(int cycleNum) {
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    return this;
  }

  public void unsetCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  /** Returns true if field cycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  public void setCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLENUM_ISSET_ID, value);
  }

  public String getReminderDttm() {
    return this.reminderDttm;
  }

  public CollectionRecord setReminderDttm(String reminderDttm) {
    this.reminderDttm = reminderDttm;
    return this;
  }

  public void unsetReminderDttm() {
    this.reminderDttm = null;
  }

  /** Returns true if field reminderDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderDttm() {
    return this.reminderDttm != null;
  }

  public void setReminderDttmIsSet(boolean value) {
    if (!value) {
      this.reminderDttm = null;
    }
  }

  public int getReminderUserId() {
    return this.reminderUserId;
  }

  public CollectionRecord setReminderUserId(int reminderUserId) {
    this.reminderUserId = reminderUserId;
    setReminderUserIdIsSet(true);
    return this;
  }

  public void unsetReminderUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMINDERUSERID_ISSET_ID);
  }

  /** Returns true if field reminderUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REMINDERUSERID_ISSET_ID);
  }

  public void setReminderUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMINDERUSERID_ISSET_ID, value);
  }

  public String getReminderSubject() {
    return this.reminderSubject;
  }

  public CollectionRecord setReminderSubject(String reminderSubject) {
    this.reminderSubject = reminderSubject;
    return this;
  }

  public void unsetReminderSubject() {
    this.reminderSubject = null;
  }

  /** Returns true if field reminderSubject is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderSubject() {
    return this.reminderSubject != null;
  }

  public void setReminderSubjectIsSet(boolean value) {
    if (!value) {
      this.reminderSubject = null;
    }
  }

  public String getReminderMsg() {
    return this.reminderMsg;
  }

  public CollectionRecord setReminderMsg(String reminderMsg) {
    this.reminderMsg = reminderMsg;
    return this;
  }

  public void unsetReminderMsg() {
    this.reminderMsg = null;
  }

  /** Returns true if field reminderMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderMsg() {
    return this.reminderMsg != null;
  }

  public void setReminderMsgIsSet(boolean value) {
    if (!value) {
      this.reminderMsg = null;
    }
  }

  public int getMethodMall() {
    return this.methodMall;
  }

  public CollectionRecord setMethodMall(int methodMall) {
    this.methodMall = methodMall;
    setMethodMallIsSet(true);
    return this;
  }

  public void unsetMethodMall() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METHODMALL_ISSET_ID);
  }

  /** Returns true if field methodMall is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodMall() {
    return EncodingUtils.testBit(__isset_bitfield, __METHODMALL_ISSET_ID);
  }

  public void setMethodMallIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METHODMALL_ISSET_ID, value);
  }

  public int getMethodSms() {
    return this.methodSms;
  }

  public CollectionRecord setMethodSms(int methodSms) {
    this.methodSms = methodSms;
    setMethodSmsIsSet(true);
    return this;
  }

  public void unsetMethodSms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METHODSMS_ISSET_ID);
  }

  /** Returns true if field methodSms is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodSms() {
    return EncodingUtils.testBit(__isset_bitfield, __METHODSMS_ISSET_ID);
  }

  public void setMethodSmsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METHODSMS_ISSET_ID, value);
  }

  public int getMethodPhone() {
    return this.methodPhone;
  }

  public CollectionRecord setMethodPhone(int methodPhone) {
    this.methodPhone = methodPhone;
    setMethodPhoneIsSet(true);
    return this;
  }

  public void unsetMethodPhone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METHODPHONE_ISSET_ID);
  }

  /** Returns true if field methodPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodPhone() {
    return EncodingUtils.testBit(__isset_bitfield, __METHODPHONE_ISSET_ID);
  }

  public void setMethodPhoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METHODPHONE_ISSET_ID, value);
  }

  public int getMethodPaper() {
    return this.methodPaper;
  }

  public CollectionRecord setMethodPaper(int methodPaper) {
    this.methodPaper = methodPaper;
    setMethodPaperIsSet(true);
    return this;
  }

  public void unsetMethodPaper() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METHODPAPER_ISSET_ID);
  }

  /** Returns true if field methodPaper is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodPaper() {
    return EncodingUtils.testBit(__isset_bitfield, __METHODPAPER_ISSET_ID);
  }

  public void setMethodPaperIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METHODPAPER_ISSET_ID, value);
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CollectionRecord setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getMailAdds() {
    return this.mailAdds;
  }

  public CollectionRecord setMailAdds(String mailAdds) {
    this.mailAdds = mailAdds;
    return this;
  }

  public void unsetMailAdds() {
    this.mailAdds = null;
  }

  /** Returns true if field mailAdds is set (has been assigned a value) and false otherwise */
  public boolean isSetMailAdds() {
    return this.mailAdds != null;
  }

  public void setMailAddsIsSet(boolean value) {
    if (!value) {
      this.mailAdds = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectionRecord setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CollectionRecord setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public String getReminderWay() {
    return this.reminderWay;
  }

  public CollectionRecord setReminderWay(String reminderWay) {
    this.reminderWay = reminderWay;
    return this;
  }

  public void unsetReminderWay() {
    this.reminderWay = null;
  }

  /** Returns true if field reminderWay is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderWay() {
    return this.reminderWay != null;
  }

  public void setReminderWayIsSet(boolean value) {
    if (!value) {
      this.reminderWay = null;
    }
  }

  public String getReminderUserName() {
    return this.reminderUserName;
  }

  public CollectionRecord setReminderUserName(String reminderUserName) {
    this.reminderUserName = reminderUserName;
    return this;
  }

  public void unsetReminderUserName() {
    this.reminderUserName = null;
  }

  /** Returns true if field reminderUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderUserName() {
    return this.reminderUserName != null;
  }

  public void setReminderUserNameIsSet(boolean value) {
    if (!value) {
      this.reminderUserName = null;
    }
  }

  public int getRNum() {
    return this.rNum;
  }

  public CollectionRecord setRNum(int rNum) {
    this.rNum = rNum;
    setRNumIsSet(true);
    return this;
  }

  public void unsetRNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RNUM_ISSET_ID);
  }

  /** Returns true if field rNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRNum() {
    return EncodingUtils.testBit(__isset_bitfield, __RNUM_ISSET_ID);
  }

  public void setRNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REMINDER_PLAN_ID:
      if (value == null) {
        unsetReminderPlanId();
      } else {
        setReminderPlanId((Integer)value);
      }
      break;

    case CYCLE_NUM:
      if (value == null) {
        unsetCycleNum();
      } else {
        setCycleNum((Integer)value);
      }
      break;

    case REMINDER_DTTM:
      if (value == null) {
        unsetReminderDttm();
      } else {
        setReminderDttm((String)value);
      }
      break;

    case REMINDER_USER_ID:
      if (value == null) {
        unsetReminderUserId();
      } else {
        setReminderUserId((Integer)value);
      }
      break;

    case REMINDER_SUBJECT:
      if (value == null) {
        unsetReminderSubject();
      } else {
        setReminderSubject((String)value);
      }
      break;

    case REMINDER_MSG:
      if (value == null) {
        unsetReminderMsg();
      } else {
        setReminderMsg((String)value);
      }
      break;

    case METHOD_MALL:
      if (value == null) {
        unsetMethodMall();
      } else {
        setMethodMall((Integer)value);
      }
      break;

    case METHOD_SMS:
      if (value == null) {
        unsetMethodSms();
      } else {
        setMethodSms((Integer)value);
      }
      break;

    case METHOD_PHONE:
      if (value == null) {
        unsetMethodPhone();
      } else {
        setMethodPhone((Integer)value);
      }
      break;

    case METHOD_PAPER:
      if (value == null) {
        unsetMethodPaper();
      } else {
        setMethodPaper((Integer)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case MAIL_ADDS:
      if (value == null) {
        unsetMailAdds();
      } else {
        setMailAdds((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case REMINDER_WAY:
      if (value == null) {
        unsetReminderWay();
      } else {
        setReminderWay((String)value);
      }
      break;

    case REMINDER_USER_NAME:
      if (value == null) {
        unsetReminderUserName();
      } else {
        setReminderUserName((String)value);
      }
      break;

    case R_NUM:
      if (value == null) {
        unsetRNum();
      } else {
        setRNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REMINDER_PLAN_ID:
      return Integer.valueOf(getReminderPlanId());

    case CYCLE_NUM:
      return Integer.valueOf(getCycleNum());

    case REMINDER_DTTM:
      return getReminderDttm();

    case REMINDER_USER_ID:
      return Integer.valueOf(getReminderUserId());

    case REMINDER_SUBJECT:
      return getReminderSubject();

    case REMINDER_MSG:
      return getReminderMsg();

    case METHOD_MALL:
      return Integer.valueOf(getMethodMall());

    case METHOD_SMS:
      return Integer.valueOf(getMethodSms());

    case METHOD_PHONE:
      return Integer.valueOf(getMethodPhone());

    case METHOD_PAPER:
      return Integer.valueOf(getMethodPaper());

    case TELEPHONE:
      return getTelephone();

    case MAIL_ADDS:
      return getMailAdds();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case REMINDER_WAY:
      return getReminderWay();

    case REMINDER_USER_NAME:
      return getReminderUserName();

    case R_NUM:
      return Integer.valueOf(getRNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REMINDER_PLAN_ID:
      return isSetReminderPlanId();
    case CYCLE_NUM:
      return isSetCycleNum();
    case REMINDER_DTTM:
      return isSetReminderDttm();
    case REMINDER_USER_ID:
      return isSetReminderUserId();
    case REMINDER_SUBJECT:
      return isSetReminderSubject();
    case REMINDER_MSG:
      return isSetReminderMsg();
    case METHOD_MALL:
      return isSetMethodMall();
    case METHOD_SMS:
      return isSetMethodSms();
    case METHOD_PHONE:
      return isSetMethodPhone();
    case METHOD_PAPER:
      return isSetMethodPaper();
    case TELEPHONE:
      return isSetTelephone();
    case MAIL_ADDS:
      return isSetMailAdds();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_ID:
      return isSetAcctId();
    case REMINDER_WAY:
      return isSetReminderWay();
    case REMINDER_USER_NAME:
      return isSetReminderUserName();
    case R_NUM:
      return isSetRNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionRecord)
      return this.equals((CollectionRecord)that);
    return false;
  }

  public boolean equals(CollectionRecord that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_reminderPlanId = true;
    boolean that_present_reminderPlanId = true;
    if (this_present_reminderPlanId || that_present_reminderPlanId) {
      if (!(this_present_reminderPlanId && that_present_reminderPlanId))
        return false;
      if (this.reminderPlanId != that.reminderPlanId)
        return false;
    }

    boolean this_present_cycleNum = true;
    boolean that_present_cycleNum = true;
    if (this_present_cycleNum || that_present_cycleNum) {
      if (!(this_present_cycleNum && that_present_cycleNum))
        return false;
      if (this.cycleNum != that.cycleNum)
        return false;
    }

    boolean this_present_reminderDttm = true && this.isSetReminderDttm();
    boolean that_present_reminderDttm = true && that.isSetReminderDttm();
    if (this_present_reminderDttm || that_present_reminderDttm) {
      if (!(this_present_reminderDttm && that_present_reminderDttm))
        return false;
      if (!this.reminderDttm.equals(that.reminderDttm))
        return false;
    }

    boolean this_present_reminderUserId = true;
    boolean that_present_reminderUserId = true;
    if (this_present_reminderUserId || that_present_reminderUserId) {
      if (!(this_present_reminderUserId && that_present_reminderUserId))
        return false;
      if (this.reminderUserId != that.reminderUserId)
        return false;
    }

    boolean this_present_reminderSubject = true && this.isSetReminderSubject();
    boolean that_present_reminderSubject = true && that.isSetReminderSubject();
    if (this_present_reminderSubject || that_present_reminderSubject) {
      if (!(this_present_reminderSubject && that_present_reminderSubject))
        return false;
      if (!this.reminderSubject.equals(that.reminderSubject))
        return false;
    }

    boolean this_present_reminderMsg = true && this.isSetReminderMsg();
    boolean that_present_reminderMsg = true && that.isSetReminderMsg();
    if (this_present_reminderMsg || that_present_reminderMsg) {
      if (!(this_present_reminderMsg && that_present_reminderMsg))
        return false;
      if (!this.reminderMsg.equals(that.reminderMsg))
        return false;
    }

    boolean this_present_methodMall = true;
    boolean that_present_methodMall = true;
    if (this_present_methodMall || that_present_methodMall) {
      if (!(this_present_methodMall && that_present_methodMall))
        return false;
      if (this.methodMall != that.methodMall)
        return false;
    }

    boolean this_present_methodSms = true;
    boolean that_present_methodSms = true;
    if (this_present_methodSms || that_present_methodSms) {
      if (!(this_present_methodSms && that_present_methodSms))
        return false;
      if (this.methodSms != that.methodSms)
        return false;
    }

    boolean this_present_methodPhone = true;
    boolean that_present_methodPhone = true;
    if (this_present_methodPhone || that_present_methodPhone) {
      if (!(this_present_methodPhone && that_present_methodPhone))
        return false;
      if (this.methodPhone != that.methodPhone)
        return false;
    }

    boolean this_present_methodPaper = true;
    boolean that_present_methodPaper = true;
    if (this_present_methodPaper || that_present_methodPaper) {
      if (!(this_present_methodPaper && that_present_methodPaper))
        return false;
      if (this.methodPaper != that.methodPaper)
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_mailAdds = true && this.isSetMailAdds();
    boolean that_present_mailAdds = true && that.isSetMailAdds();
    if (this_present_mailAdds || that_present_mailAdds) {
      if (!(this_present_mailAdds && that_present_mailAdds))
        return false;
      if (!this.mailAdds.equals(that.mailAdds))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_reminderWay = true && this.isSetReminderWay();
    boolean that_present_reminderWay = true && that.isSetReminderWay();
    if (this_present_reminderWay || that_present_reminderWay) {
      if (!(this_present_reminderWay && that_present_reminderWay))
        return false;
      if (!this.reminderWay.equals(that.reminderWay))
        return false;
    }

    boolean this_present_reminderUserName = true && this.isSetReminderUserName();
    boolean that_present_reminderUserName = true && that.isSetReminderUserName();
    if (this_present_reminderUserName || that_present_reminderUserName) {
      if (!(this_present_reminderUserName && that_present_reminderUserName))
        return false;
      if (!this.reminderUserName.equals(that.reminderUserName))
        return false;
    }

    boolean this_present_rNum = true;
    boolean that_present_rNum = true;
    if (this_present_rNum || that_present_rNum) {
      if (!(this_present_rNum && that_present_rNum))
        return false;
      if (this.rNum != that.rNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_reminderPlanId = true;
    list.add(present_reminderPlanId);
    if (present_reminderPlanId)
      list.add(reminderPlanId);

    boolean present_cycleNum = true;
    list.add(present_cycleNum);
    if (present_cycleNum)
      list.add(cycleNum);

    boolean present_reminderDttm = true && (isSetReminderDttm());
    list.add(present_reminderDttm);
    if (present_reminderDttm)
      list.add(reminderDttm);

    boolean present_reminderUserId = true;
    list.add(present_reminderUserId);
    if (present_reminderUserId)
      list.add(reminderUserId);

    boolean present_reminderSubject = true && (isSetReminderSubject());
    list.add(present_reminderSubject);
    if (present_reminderSubject)
      list.add(reminderSubject);

    boolean present_reminderMsg = true && (isSetReminderMsg());
    list.add(present_reminderMsg);
    if (present_reminderMsg)
      list.add(reminderMsg);

    boolean present_methodMall = true;
    list.add(present_methodMall);
    if (present_methodMall)
      list.add(methodMall);

    boolean present_methodSms = true;
    list.add(present_methodSms);
    if (present_methodSms)
      list.add(methodSms);

    boolean present_methodPhone = true;
    list.add(present_methodPhone);
    if (present_methodPhone)
      list.add(methodPhone);

    boolean present_methodPaper = true;
    list.add(present_methodPaper);
    if (present_methodPaper)
      list.add(methodPaper);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_mailAdds = true && (isSetMailAdds());
    list.add(present_mailAdds);
    if (present_mailAdds)
      list.add(mailAdds);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_reminderWay = true && (isSetReminderWay());
    list.add(present_reminderWay);
    if (present_reminderWay)
      list.add(reminderWay);

    boolean present_reminderUserName = true && (isSetReminderUserName());
    list.add(present_reminderUserName);
    if (present_reminderUserName)
      list.add(reminderUserName);

    boolean present_rNum = true;
    list.add(present_rNum);
    if (present_rNum)
      list.add(rNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectionRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderPlanId()).compareTo(other.isSetReminderPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderPlanId, other.reminderPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleNum()).compareTo(other.isSetCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleNum, other.cycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderDttm()).compareTo(other.isSetReminderDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderDttm, other.reminderDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderUserId()).compareTo(other.isSetReminderUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderUserId, other.reminderUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderSubject()).compareTo(other.isSetReminderSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderSubject, other.reminderSubject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderMsg()).compareTo(other.isSetReminderMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderMsg, other.reminderMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodMall()).compareTo(other.isSetMethodMall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodMall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodMall, other.methodMall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodSms()).compareTo(other.isSetMethodSms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodSms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodSms, other.methodSms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodPhone()).compareTo(other.isSetMethodPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodPhone, other.methodPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodPaper()).compareTo(other.isSetMethodPaper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodPaper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodPaper, other.methodPaper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMailAdds()).compareTo(other.isSetMailAdds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMailAdds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mailAdds, other.mailAdds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderWay()).compareTo(other.isSetReminderWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderWay, other.reminderWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderUserName()).compareTo(other.isSetReminderUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderUserName, other.reminderUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRNum()).compareTo(other.isSetRNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rNum, other.rNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionRecord(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderPlanId:");
    sb.append(this.reminderPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleNum:");
    sb.append(this.cycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderDttm:");
    if (this.reminderDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderUserId:");
    sb.append(this.reminderUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderSubject:");
    if (this.reminderSubject == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderSubject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderMsg:");
    if (this.reminderMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodMall:");
    sb.append(this.methodMall);
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodSms:");
    sb.append(this.methodSms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodPhone:");
    sb.append(this.methodPhone);
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodPaper:");
    sb.append(this.methodPaper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mailAdds:");
    if (this.mailAdds == null) {
      sb.append("null");
    } else {
      sb.append(this.mailAdds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderWay:");
    if (this.reminderWay == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderUserName:");
    if (this.reminderUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rNum:");
    sb.append(this.rNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionRecordStandardSchemeFactory implements SchemeFactory {
    public CollectionRecordStandardScheme getScheme() {
      return new CollectionRecordStandardScheme();
    }
  }

  private static class CollectionRecordStandardScheme extends StandardScheme<CollectionRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REMINDER_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reminderPlanId = iprot.readI32();
              struct.setReminderPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleNum = iprot.readI32();
              struct.setCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMINDER_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderDttm = iprot.readString();
              struct.setReminderDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMINDER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reminderUserId = iprot.readI32();
              struct.setReminderUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMINDER_SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderSubject = iprot.readString();
              struct.setReminderSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMINDER_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderMsg = iprot.readString();
              struct.setReminderMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // METHOD_MALL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.methodMall = iprot.readI32();
              struct.setMethodMallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // METHOD_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.methodSms = iprot.readI32();
              struct.setMethodSmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METHOD_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.methodPhone = iprot.readI32();
              struct.setMethodPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // METHOD_PAPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.methodPaper = iprot.readI32();
              struct.setMethodPaperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAIL_ADDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mailAdds = iprot.readString();
              struct.setMailAddsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMINDER_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderWay = iprot.readString();
              struct.setReminderWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REMINDER_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderUserName = iprot.readString();
              struct.setReminderUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // R_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rNum = iprot.readI32();
              struct.setRNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMINDER_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.reminderPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.cycleNum);
      oprot.writeFieldEnd();
      if (struct.reminderDttm != null) {
        oprot.writeFieldBegin(REMINDER_DTTM_FIELD_DESC);
        oprot.writeString(struct.reminderDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMINDER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.reminderUserId);
      oprot.writeFieldEnd();
      if (struct.reminderSubject != null) {
        oprot.writeFieldBegin(REMINDER_SUBJECT_FIELD_DESC);
        oprot.writeString(struct.reminderSubject);
        oprot.writeFieldEnd();
      }
      if (struct.reminderMsg != null) {
        oprot.writeFieldBegin(REMINDER_MSG_FIELD_DESC);
        oprot.writeString(struct.reminderMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METHOD_MALL_FIELD_DESC);
      oprot.writeI32(struct.methodMall);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METHOD_SMS_FIELD_DESC);
      oprot.writeI32(struct.methodSms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METHOD_PHONE_FIELD_DESC);
      oprot.writeI32(struct.methodPhone);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METHOD_PAPER_FIELD_DESC);
      oprot.writeI32(struct.methodPaper);
      oprot.writeFieldEnd();
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.mailAdds != null) {
        oprot.writeFieldBegin(MAIL_ADDS_FIELD_DESC);
        oprot.writeString(struct.mailAdds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.reminderWay != null) {
        oprot.writeFieldBegin(REMINDER_WAY_FIELD_DESC);
        oprot.writeString(struct.reminderWay);
        oprot.writeFieldEnd();
      }
      if (struct.reminderUserName != null) {
        oprot.writeFieldBegin(REMINDER_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.reminderUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(R_NUM_FIELD_DESC);
      oprot.writeI32(struct.rNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionRecordTupleSchemeFactory implements SchemeFactory {
    public CollectionRecordTupleScheme getScheme() {
      return new CollectionRecordTupleScheme();
    }
  }

  private static class CollectionRecordTupleScheme extends TupleScheme<CollectionRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetReminderPlanId()) {
        optionals.set(1);
      }
      if (struct.isSetCycleNum()) {
        optionals.set(2);
      }
      if (struct.isSetReminderDttm()) {
        optionals.set(3);
      }
      if (struct.isSetReminderUserId()) {
        optionals.set(4);
      }
      if (struct.isSetReminderSubject()) {
        optionals.set(5);
      }
      if (struct.isSetReminderMsg()) {
        optionals.set(6);
      }
      if (struct.isSetMethodMall()) {
        optionals.set(7);
      }
      if (struct.isSetMethodSms()) {
        optionals.set(8);
      }
      if (struct.isSetMethodPhone()) {
        optionals.set(9);
      }
      if (struct.isSetMethodPaper()) {
        optionals.set(10);
      }
      if (struct.isSetTelephone()) {
        optionals.set(11);
      }
      if (struct.isSetMailAdds()) {
        optionals.set(12);
      }
      if (struct.isSetProjectId()) {
        optionals.set(13);
      }
      if (struct.isSetAcctId()) {
        optionals.set(14);
      }
      if (struct.isSetReminderWay()) {
        optionals.set(15);
      }
      if (struct.isSetReminderUserName()) {
        optionals.set(16);
      }
      if (struct.isSetRNum()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetReminderPlanId()) {
        oprot.writeI32(struct.reminderPlanId);
      }
      if (struct.isSetCycleNum()) {
        oprot.writeI32(struct.cycleNum);
      }
      if (struct.isSetReminderDttm()) {
        oprot.writeString(struct.reminderDttm);
      }
      if (struct.isSetReminderUserId()) {
        oprot.writeI32(struct.reminderUserId);
      }
      if (struct.isSetReminderSubject()) {
        oprot.writeString(struct.reminderSubject);
      }
      if (struct.isSetReminderMsg()) {
        oprot.writeString(struct.reminderMsg);
      }
      if (struct.isSetMethodMall()) {
        oprot.writeI32(struct.methodMall);
      }
      if (struct.isSetMethodSms()) {
        oprot.writeI32(struct.methodSms);
      }
      if (struct.isSetMethodPhone()) {
        oprot.writeI32(struct.methodPhone);
      }
      if (struct.isSetMethodPaper()) {
        oprot.writeI32(struct.methodPaper);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetMailAdds()) {
        oprot.writeString(struct.mailAdds);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetReminderWay()) {
        oprot.writeString(struct.reminderWay);
      }
      if (struct.isSetReminderUserName()) {
        oprot.writeString(struct.reminderUserName);
      }
      if (struct.isSetRNum()) {
        oprot.writeI32(struct.rNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reminderPlanId = iprot.readI32();
        struct.setReminderPlanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cycleNum = iprot.readI32();
        struct.setCycleNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reminderDttm = iprot.readString();
        struct.setReminderDttmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reminderUserId = iprot.readI32();
        struct.setReminderUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reminderSubject = iprot.readString();
        struct.setReminderSubjectIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reminderMsg = iprot.readString();
        struct.setReminderMsgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.methodMall = iprot.readI32();
        struct.setMethodMallIsSet(true);
      }
      if (incoming.get(8)) {
        struct.methodSms = iprot.readI32();
        struct.setMethodSmsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.methodPhone = iprot.readI32();
        struct.setMethodPhoneIsSet(true);
      }
      if (incoming.get(10)) {
        struct.methodPaper = iprot.readI32();
        struct.setMethodPaperIsSet(true);
      }
      if (incoming.get(11)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mailAdds = iprot.readString();
        struct.setMailAddsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reminderWay = iprot.readString();
        struct.setReminderWayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.reminderUserName = iprot.readString();
        struct.setReminderUserNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rNum = iprot.readI32();
        struct.setRNumIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class RepaymentCollectionService {

  public interface Iface {

    public List<AssignmentDistribution> getAssignmentDistribution(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException;

    public List<CollectionRecord> getCollectionRecord(CollectionRecord collectionRecord) throws org.apache.thrift.TException;

    public int insertCollectionRecord(CollectionRecord collectionRecord) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CollectionRecordDto> getCollectionRecordList(Map<String,Integer> myMap) throws org.apache.thrift.TException;

    public int insertReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepaymentCollection> getRepaymentCollectionList(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException;

    public CollectionCustomer getCollectionCustomer(int projectId) throws org.apache.thrift.TException;

    public List<CollectionCusComContact> getCollectionCusComContact(int acctId) throws org.apache.thrift.TException;

    public int getRepaymentCollectionTotal(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException;

    public int getAssignmentDistributionTotal(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException;

    public List<CollectionRecord> getCollectionRecordsByProjectIds(String pids) throws org.apache.thrift.TException;

    public int getNoticeCurrentSeq(String year) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateNoticeCurrentSeq(String year) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ReminderNoticePart> getReminderNoticePart(int projectId, String nowDttm) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public ReminderNoticePart getReminderNoticePartMoney(ReminderNoticePart reminderNoticePart, String nowDttm) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public ReminderNotice getReminderNotice(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAssignmentDistribution(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectionRecord(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertCollectionRecord(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectionRecordList(Map<String,Integer> myMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertReminderPlan(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateReminderPlan(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentCollectionList(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectionCustomer(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectionCusComContact(int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentCollectionTotal(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAssignmentDistributionTotal(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectionRecordsByProjectIds(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNoticeCurrentSeq(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateNoticeCurrentSeq(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReminderNoticePart(int projectId, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReminderNoticePartMoney(ReminderNoticePart reminderNoticePart, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReminderNotice(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<AssignmentDistribution> getAssignmentDistribution(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException
    {
      send_getAssignmentDistribution(assignmentDistributionSearch);
      return recv_getAssignmentDistribution();
    }

    public void send_getAssignmentDistribution(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException
    {
      getAssignmentDistribution_args args = new getAssignmentDistribution_args();
      args.setAssignmentDistributionSearch(assignmentDistributionSearch);
      sendBase("getAssignmentDistribution", args);
    }

    public List<AssignmentDistribution> recv_getAssignmentDistribution() throws org.apache.thrift.TException
    {
      getAssignmentDistribution_result result = new getAssignmentDistribution_result();
      receiveBase(result, "getAssignmentDistribution");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssignmentDistribution failed: unknown result");
    }

    public List<CollectionRecord> getCollectionRecord(CollectionRecord collectionRecord) throws org.apache.thrift.TException
    {
      send_getCollectionRecord(collectionRecord);
      return recv_getCollectionRecord();
    }

    public void send_getCollectionRecord(CollectionRecord collectionRecord) throws org.apache.thrift.TException
    {
      getCollectionRecord_args args = new getCollectionRecord_args();
      args.setCollectionRecord(collectionRecord);
      sendBase("getCollectionRecord", args);
    }

    public List<CollectionRecord> recv_getCollectionRecord() throws org.apache.thrift.TException
    {
      getCollectionRecord_result result = new getCollectionRecord_result();
      receiveBase(result, "getCollectionRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectionRecord failed: unknown result");
    }

    public int insertCollectionRecord(CollectionRecord collectionRecord) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_insertCollectionRecord(collectionRecord);
      return recv_insertCollectionRecord();
    }

    public void send_insertCollectionRecord(CollectionRecord collectionRecord) throws org.apache.thrift.TException
    {
      insertCollectionRecord_args args = new insertCollectionRecord_args();
      args.setCollectionRecord(collectionRecord);
      sendBase("insertCollectionRecord", args);
    }

    public int recv_insertCollectionRecord() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      insertCollectionRecord_result result = new insertCollectionRecord_result();
      receiveBase(result, "insertCollectionRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertCollectionRecord failed: unknown result");
    }

    public List<CollectionRecordDto> getCollectionRecordList(Map<String,Integer> myMap) throws org.apache.thrift.TException
    {
      send_getCollectionRecordList(myMap);
      return recv_getCollectionRecordList();
    }

    public void send_getCollectionRecordList(Map<String,Integer> myMap) throws org.apache.thrift.TException
    {
      getCollectionRecordList_args args = new getCollectionRecordList_args();
      args.setMyMap(myMap);
      sendBase("getCollectionRecordList", args);
    }

    public List<CollectionRecordDto> recv_getCollectionRecordList() throws org.apache.thrift.TException
    {
      getCollectionRecordList_result result = new getCollectionRecordList_result();
      receiveBase(result, "getCollectionRecordList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectionRecordList failed: unknown result");
    }

    public int insertReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_insertReminderPlan(projectReminderPlanDto);
      return recv_insertReminderPlan();
    }

    public void send_insertReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws org.apache.thrift.TException
    {
      insertReminderPlan_args args = new insertReminderPlan_args();
      args.setProjectReminderPlanDto(projectReminderPlanDto);
      sendBase("insertReminderPlan", args);
    }

    public int recv_insertReminderPlan() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      insertReminderPlan_result result = new insertReminderPlan_result();
      receiveBase(result, "insertReminderPlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertReminderPlan failed: unknown result");
    }

    public int updateReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateReminderPlan(projectReminderPlanDto);
      return recv_updateReminderPlan();
    }

    public void send_updateReminderPlan(ProjectReminderPlanDto projectReminderPlanDto) throws org.apache.thrift.TException
    {
      updateReminderPlan_args args = new updateReminderPlan_args();
      args.setProjectReminderPlanDto(projectReminderPlanDto);
      sendBase("updateReminderPlan", args);
    }

    public int recv_updateReminderPlan() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateReminderPlan_result result = new updateReminderPlan_result();
      receiveBase(result, "updateReminderPlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateReminderPlan failed: unknown result");
    }

    public List<RepaymentCollection> getRepaymentCollectionList(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException
    {
      send_getRepaymentCollectionList(repaymentCollection);
      return recv_getRepaymentCollectionList();
    }

    public void send_getRepaymentCollectionList(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException
    {
      getRepaymentCollectionList_args args = new getRepaymentCollectionList_args();
      args.setRepaymentCollection(repaymentCollection);
      sendBase("getRepaymentCollectionList", args);
    }

    public List<RepaymentCollection> recv_getRepaymentCollectionList() throws org.apache.thrift.TException
    {
      getRepaymentCollectionList_result result = new getRepaymentCollectionList_result();
      receiveBase(result, "getRepaymentCollectionList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentCollectionList failed: unknown result");
    }

    public CollectionCustomer getCollectionCustomer(int projectId) throws org.apache.thrift.TException
    {
      send_getCollectionCustomer(projectId);
      return recv_getCollectionCustomer();
    }

    public void send_getCollectionCustomer(int projectId) throws org.apache.thrift.TException
    {
      getCollectionCustomer_args args = new getCollectionCustomer_args();
      args.setProjectId(projectId);
      sendBase("getCollectionCustomer", args);
    }

    public CollectionCustomer recv_getCollectionCustomer() throws org.apache.thrift.TException
    {
      getCollectionCustomer_result result = new getCollectionCustomer_result();
      receiveBase(result, "getCollectionCustomer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectionCustomer failed: unknown result");
    }

    public List<CollectionCusComContact> getCollectionCusComContact(int acctId) throws org.apache.thrift.TException
    {
      send_getCollectionCusComContact(acctId);
      return recv_getCollectionCusComContact();
    }

    public void send_getCollectionCusComContact(int acctId) throws org.apache.thrift.TException
    {
      getCollectionCusComContact_args args = new getCollectionCusComContact_args();
      args.setAcctId(acctId);
      sendBase("getCollectionCusComContact", args);
    }

    public List<CollectionCusComContact> recv_getCollectionCusComContact() throws org.apache.thrift.TException
    {
      getCollectionCusComContact_result result = new getCollectionCusComContact_result();
      receiveBase(result, "getCollectionCusComContact");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectionCusComContact failed: unknown result");
    }

    public int getRepaymentCollectionTotal(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException
    {
      send_getRepaymentCollectionTotal(repaymentCollection);
      return recv_getRepaymentCollectionTotal();
    }

    public void send_getRepaymentCollectionTotal(RepaymentCollectionSearch repaymentCollection) throws org.apache.thrift.TException
    {
      getRepaymentCollectionTotal_args args = new getRepaymentCollectionTotal_args();
      args.setRepaymentCollection(repaymentCollection);
      sendBase("getRepaymentCollectionTotal", args);
    }

    public int recv_getRepaymentCollectionTotal() throws org.apache.thrift.TException
    {
      getRepaymentCollectionTotal_result result = new getRepaymentCollectionTotal_result();
      receiveBase(result, "getRepaymentCollectionTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentCollectionTotal failed: unknown result");
    }

    public int getAssignmentDistributionTotal(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException
    {
      send_getAssignmentDistributionTotal(assignmentDistributionSearch);
      return recv_getAssignmentDistributionTotal();
    }

    public void send_getAssignmentDistributionTotal(AssignmentDistributionSearch assignmentDistributionSearch) throws org.apache.thrift.TException
    {
      getAssignmentDistributionTotal_args args = new getAssignmentDistributionTotal_args();
      args.setAssignmentDistributionSearch(assignmentDistributionSearch);
      sendBase("getAssignmentDistributionTotal", args);
    }

    public int recv_getAssignmentDistributionTotal() throws org.apache.thrift.TException
    {
      getAssignmentDistributionTotal_result result = new getAssignmentDistributionTotal_result();
      receiveBase(result, "getAssignmentDistributionTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssignmentDistributionTotal failed: unknown result");
    }

    public List<CollectionRecord> getCollectionRecordsByProjectIds(String pids) throws org.apache.thrift.TException
    {
      send_getCollectionRecordsByProjectIds(pids);
      return recv_getCollectionRecordsByProjectIds();
    }

    public void send_getCollectionRecordsByProjectIds(String pids) throws org.apache.thrift.TException
    {
      getCollectionRecordsByProjectIds_args args = new getCollectionRecordsByProjectIds_args();
      args.setPids(pids);
      sendBase("getCollectionRecordsByProjectIds", args);
    }

    public List<CollectionRecord> recv_getCollectionRecordsByProjectIds() throws org.apache.thrift.TException
    {
      getCollectionRecordsByProjectIds_result result = new getCollectionRecordsByProjectIds_result();
      receiveBase(result, "getCollectionRecordsByProjectIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectionRecordsByProjectIds failed: unknown result");
    }

    public int getNoticeCurrentSeq(String year) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getNoticeCurrentSeq(year);
      return recv_getNoticeCurrentSeq();
    }

    public void send_getNoticeCurrentSeq(String year) throws org.apache.thrift.TException
    {
      getNoticeCurrentSeq_args args = new getNoticeCurrentSeq_args();
      args.setYear(year);
      sendBase("getNoticeCurrentSeq", args);
    }

    public int recv_getNoticeCurrentSeq() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getNoticeCurrentSeq_result result = new getNoticeCurrentSeq_result();
      receiveBase(result, "getNoticeCurrentSeq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNoticeCurrentSeq failed: unknown result");
    }

    public int updateNoticeCurrentSeq(String year) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateNoticeCurrentSeq(year);
      return recv_updateNoticeCurrentSeq();
    }

    public void send_updateNoticeCurrentSeq(String year) throws org.apache.thrift.TException
    {
      updateNoticeCurrentSeq_args args = new updateNoticeCurrentSeq_args();
      args.setYear(year);
      sendBase("updateNoticeCurrentSeq", args);
    }

    public int recv_updateNoticeCurrentSeq() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateNoticeCurrentSeq_result result = new updateNoticeCurrentSeq_result();
      receiveBase(result, "updateNoticeCurrentSeq");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNoticeCurrentSeq failed: unknown result");
    }

    public List<ReminderNoticePart> getReminderNoticePart(int projectId, String nowDttm) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getReminderNoticePart(projectId, nowDttm);
      return recv_getReminderNoticePart();
    }

    public void send_getReminderNoticePart(int projectId, String nowDttm) throws org.apache.thrift.TException
    {
      getReminderNoticePart_args args = new getReminderNoticePart_args();
      args.setProjectId(projectId);
      args.setNowDttm(nowDttm);
      sendBase("getReminderNoticePart", args);
    }

    public List<ReminderNoticePart> recv_getReminderNoticePart() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getReminderNoticePart_result result = new getReminderNoticePart_result();
      receiveBase(result, "getReminderNoticePart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReminderNoticePart failed: unknown result");
    }

    public ReminderNoticePart getReminderNoticePartMoney(ReminderNoticePart reminderNoticePart, String nowDttm) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getReminderNoticePartMoney(reminderNoticePart, nowDttm);
      return recv_getReminderNoticePartMoney();
    }

    public void send_getReminderNoticePartMoney(ReminderNoticePart reminderNoticePart, String nowDttm) throws org.apache.thrift.TException
    {
      getReminderNoticePartMoney_args args = new getReminderNoticePartMoney_args();
      args.setReminderNoticePart(reminderNoticePart);
      args.setNowDttm(nowDttm);
      sendBase("getReminderNoticePartMoney", args);
    }

    public ReminderNoticePart recv_getReminderNoticePartMoney() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getReminderNoticePartMoney_result result = new getReminderNoticePartMoney_result();
      receiveBase(result, "getReminderNoticePartMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReminderNoticePartMoney failed: unknown result");
    }

    public ReminderNotice getReminderNotice(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getReminderNotice(projectId);
      return recv_getReminderNotice();
    }

    public void send_getReminderNotice(int projectId) throws org.apache.thrift.TException
    {
      getReminderNotice_args args = new getReminderNotice_args();
      args.setProjectId(projectId);
      sendBase("getReminderNotice", args);
    }

    public ReminderNotice recv_getReminderNotice() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getReminderNotice_result result = new getReminderNotice_result();
      receiveBase(result, "getReminderNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReminderNotice failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAssignmentDistribution(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssignmentDistribution_call method_call = new getAssignmentDistribution_call(assignmentDistributionSearch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssignmentDistribution_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AssignmentDistributionSearch assignmentDistributionSearch;
      public getAssignmentDistribution_call(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assignmentDistributionSearch = assignmentDistributionSearch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssignmentDistribution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssignmentDistribution_args args = new getAssignmentDistribution_args();
        args.setAssignmentDistributionSearch(assignmentDistributionSearch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AssignmentDistribution> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssignmentDistribution();
      }
    }

    public void getCollectionRecord(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectionRecord_call method_call = new getCollectionRecord_call(collectionRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectionRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectionRecord collectionRecord;
      public getCollectionRecord_call(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionRecord = collectionRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectionRecord_args args = new getCollectionRecord_args();
        args.setCollectionRecord(collectionRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectionRecord> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectionRecord();
      }
    }

    public void insertCollectionRecord(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertCollectionRecord_call method_call = new insertCollectionRecord_call(collectionRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertCollectionRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectionRecord collectionRecord;
      public insertCollectionRecord_call(CollectionRecord collectionRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectionRecord = collectionRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertCollectionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertCollectionRecord_args args = new insertCollectionRecord_args();
        args.setCollectionRecord(collectionRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertCollectionRecord();
      }
    }

    public void getCollectionRecordList(Map<String,Integer> myMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectionRecordList_call method_call = new getCollectionRecordList_call(myMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectionRecordList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,Integer> myMap;
      public getCollectionRecordList_call(Map<String,Integer> myMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myMap = myMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectionRecordList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectionRecordList_args args = new getCollectionRecordList_args();
        args.setMyMap(myMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectionRecordDto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectionRecordList();
      }
    }

    public void insertReminderPlan(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertReminderPlan_call method_call = new insertReminderPlan_call(projectReminderPlanDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertReminderPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectReminderPlanDto projectReminderPlanDto;
      public insertReminderPlan_call(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectReminderPlanDto = projectReminderPlanDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertReminderPlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertReminderPlan_args args = new insertReminderPlan_args();
        args.setProjectReminderPlanDto(projectReminderPlanDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertReminderPlan();
      }
    }

    public void updateReminderPlan(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateReminderPlan_call method_call = new updateReminderPlan_call(projectReminderPlanDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateReminderPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectReminderPlanDto projectReminderPlanDto;
      public updateReminderPlan_call(ProjectReminderPlanDto projectReminderPlanDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectReminderPlanDto = projectReminderPlanDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateReminderPlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateReminderPlan_args args = new updateReminderPlan_args();
        args.setProjectReminderPlanDto(projectReminderPlanDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateReminderPlan();
      }
    }

    public void getRepaymentCollectionList(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentCollectionList_call method_call = new getRepaymentCollectionList_call(repaymentCollection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentCollectionList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentCollectionSearch repaymentCollection;
      public getRepaymentCollectionList_call(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentCollection = repaymentCollection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentCollectionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentCollectionList_args args = new getRepaymentCollectionList_args();
        args.setRepaymentCollection(repaymentCollection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepaymentCollection> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentCollectionList();
      }
    }

    public void getCollectionCustomer(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectionCustomer_call method_call = new getCollectionCustomer_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectionCustomer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getCollectionCustomer_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectionCustomer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectionCustomer_args args = new getCollectionCustomer_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CollectionCustomer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectionCustomer();
      }
    }

    public void getCollectionCusComContact(int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectionCusComContact_call method_call = new getCollectionCusComContact_call(acctId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectionCusComContact_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int acctId;
      public getCollectionCusComContact_call(int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.acctId = acctId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectionCusComContact", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectionCusComContact_args args = new getCollectionCusComContact_args();
        args.setAcctId(acctId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectionCusComContact> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectionCusComContact();
      }
    }

    public void getRepaymentCollectionTotal(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentCollectionTotal_call method_call = new getRepaymentCollectionTotal_call(repaymentCollection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentCollectionTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentCollectionSearch repaymentCollection;
      public getRepaymentCollectionTotal_call(RepaymentCollectionSearch repaymentCollection, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentCollection = repaymentCollection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentCollectionTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentCollectionTotal_args args = new getRepaymentCollectionTotal_args();
        args.setRepaymentCollection(repaymentCollection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentCollectionTotal();
      }
    }

    public void getAssignmentDistributionTotal(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssignmentDistributionTotal_call method_call = new getAssignmentDistributionTotal_call(assignmentDistributionSearch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssignmentDistributionTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AssignmentDistributionSearch assignmentDistributionSearch;
      public getAssignmentDistributionTotal_call(AssignmentDistributionSearch assignmentDistributionSearch, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assignmentDistributionSearch = assignmentDistributionSearch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssignmentDistributionTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssignmentDistributionTotal_args args = new getAssignmentDistributionTotal_args();
        args.setAssignmentDistributionSearch(assignmentDistributionSearch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssignmentDistributionTotal();
      }
    }

    public void getCollectionRecordsByProjectIds(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectionRecordsByProjectIds_call method_call = new getCollectionRecordsByProjectIds_call(pids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectionRecordsByProjectIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pids;
      public getCollectionRecordsByProjectIds_call(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pids = pids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectionRecordsByProjectIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectionRecordsByProjectIds_args args = new getCollectionRecordsByProjectIds_args();
        args.setPids(pids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectionRecord> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectionRecordsByProjectIds();
      }
    }

    public void getNoticeCurrentSeq(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNoticeCurrentSeq_call method_call = new getNoticeCurrentSeq_call(year, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNoticeCurrentSeq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String year;
      public getNoticeCurrentSeq_call(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNoticeCurrentSeq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNoticeCurrentSeq_args args = new getNoticeCurrentSeq_args();
        args.setYear(year);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNoticeCurrentSeq();
      }
    }

    public void updateNoticeCurrentSeq(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNoticeCurrentSeq_call method_call = new updateNoticeCurrentSeq_call(year, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNoticeCurrentSeq_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String year;
      public updateNoticeCurrentSeq_call(String year, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.year = year;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNoticeCurrentSeq", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNoticeCurrentSeq_args args = new updateNoticeCurrentSeq_args();
        args.setYear(year);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNoticeCurrentSeq();
      }
    }

    public void getReminderNoticePart(int projectId, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReminderNoticePart_call method_call = new getReminderNoticePart_call(projectId, nowDttm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReminderNoticePart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private String nowDttm;
      public getReminderNoticePart_call(int projectId, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.nowDttm = nowDttm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReminderNoticePart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReminderNoticePart_args args = new getReminderNoticePart_args();
        args.setProjectId(projectId);
        args.setNowDttm(nowDttm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReminderNoticePart> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReminderNoticePart();
      }
    }

    public void getReminderNoticePartMoney(ReminderNoticePart reminderNoticePart, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReminderNoticePartMoney_call method_call = new getReminderNoticePartMoney_call(reminderNoticePart, nowDttm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReminderNoticePartMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ReminderNoticePart reminderNoticePart;
      private String nowDttm;
      public getReminderNoticePartMoney_call(ReminderNoticePart reminderNoticePart, String nowDttm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reminderNoticePart = reminderNoticePart;
        this.nowDttm = nowDttm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReminderNoticePartMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReminderNoticePartMoney_args args = new getReminderNoticePartMoney_args();
        args.setReminderNoticePart(reminderNoticePart);
        args.setNowDttm(nowDttm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReminderNoticePart getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReminderNoticePartMoney();
      }
    }

    public void getReminderNotice(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReminderNotice_call method_call = new getReminderNotice_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReminderNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getReminderNotice_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReminderNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReminderNotice_args args = new getReminderNotice_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReminderNotice getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReminderNotice();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAssignmentDistribution", new getAssignmentDistribution());
      processMap.put("getCollectionRecord", new getCollectionRecord());
      processMap.put("insertCollectionRecord", new insertCollectionRecord());
      processMap.put("getCollectionRecordList", new getCollectionRecordList());
      processMap.put("insertReminderPlan", new insertReminderPlan());
      processMap.put("updateReminderPlan", new updateReminderPlan());
      processMap.put("getRepaymentCollectionList", new getRepaymentCollectionList());
      processMap.put("getCollectionCustomer", new getCollectionCustomer());
      processMap.put("getCollectionCusComContact", new getCollectionCusComContact());
      processMap.put("getRepaymentCollectionTotal", new getRepaymentCollectionTotal());
      processMap.put("getAssignmentDistributionTotal", new getAssignmentDistributionTotal());
      processMap.put("getCollectionRecordsByProjectIds", new getCollectionRecordsByProjectIds());
      processMap.put("getNoticeCurrentSeq", new getNoticeCurrentSeq());
      processMap.put("updateNoticeCurrentSeq", new updateNoticeCurrentSeq());
      processMap.put("getReminderNoticePart", new getReminderNoticePart());
      processMap.put("getReminderNoticePartMoney", new getReminderNoticePartMoney());
      processMap.put("getReminderNotice", new getReminderNotice());
      return processMap;
    }

    public static class getAssignmentDistribution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssignmentDistribution_args> {
      public getAssignmentDistribution() {
        super("getAssignmentDistribution");
      }

      public getAssignmentDistribution_args getEmptyArgsInstance() {
        return new getAssignmentDistribution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAssignmentDistribution_result getResult(I iface, getAssignmentDistribution_args args) throws org.apache.thrift.TException {
        getAssignmentDistribution_result result = new getAssignmentDistribution_result();
        result.success = iface.getAssignmentDistribution(args.assignmentDistributionSearch);
        return result;
      }
    }

    public static class getCollectionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectionRecord_args> {
      public getCollectionRecord() {
        super("getCollectionRecord");
      }

      public getCollectionRecord_args getEmptyArgsInstance() {
        return new getCollectionRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectionRecord_result getResult(I iface, getCollectionRecord_args args) throws org.apache.thrift.TException {
        getCollectionRecord_result result = new getCollectionRecord_result();
        result.success = iface.getCollectionRecord(args.collectionRecord);
        return result;
      }
    }

    public static class insertCollectionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertCollectionRecord_args> {
      public insertCollectionRecord() {
        super("insertCollectionRecord");
      }

      public insertCollectionRecord_args getEmptyArgsInstance() {
        return new insertCollectionRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertCollectionRecord_result getResult(I iface, insertCollectionRecord_args args) throws org.apache.thrift.TException {
        insertCollectionRecord_result result = new insertCollectionRecord_result();
        try {
          result.success = iface.insertCollectionRecord(args.collectionRecord);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCollectionRecordList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectionRecordList_args> {
      public getCollectionRecordList() {
        super("getCollectionRecordList");
      }

      public getCollectionRecordList_args getEmptyArgsInstance() {
        return new getCollectionRecordList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectionRecordList_result getResult(I iface, getCollectionRecordList_args args) throws org.apache.thrift.TException {
        getCollectionRecordList_result result = new getCollectionRecordList_result();
        result.success = iface.getCollectionRecordList(args.myMap);
        return result;
      }
    }

    public static class insertReminderPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertReminderPlan_args> {
      public insertReminderPlan() {
        super("insertReminderPlan");
      }

      public insertReminderPlan_args getEmptyArgsInstance() {
        return new insertReminderPlan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertReminderPlan_result getResult(I iface, insertReminderPlan_args args) throws org.apache.thrift.TException {
        insertReminderPlan_result result = new insertReminderPlan_result();
        try {
          result.success = iface.insertReminderPlan(args.projectReminderPlanDto);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateReminderPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateReminderPlan_args> {
      public updateReminderPlan() {
        super("updateReminderPlan");
      }

      public updateReminderPlan_args getEmptyArgsInstance() {
        return new updateReminderPlan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateReminderPlan_result getResult(I iface, updateReminderPlan_args args) throws org.apache.thrift.TException {
        updateReminderPlan_result result = new updateReminderPlan_result();
        try {
          result.success = iface.updateReminderPlan(args.projectReminderPlanDto);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getRepaymentCollectionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentCollectionList_args> {
      public getRepaymentCollectionList() {
        super("getRepaymentCollectionList");
      }

      public getRepaymentCollectionList_args getEmptyArgsInstance() {
        return new getRepaymentCollectionList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentCollectionList_result getResult(I iface, getRepaymentCollectionList_args args) throws org.apache.thrift.TException {
        getRepaymentCollectionList_result result = new getRepaymentCollectionList_result();
        result.success = iface.getRepaymentCollectionList(args.repaymentCollection);
        return result;
      }
    }

    public static class getCollectionCustomer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectionCustomer_args> {
      public getCollectionCustomer() {
        super("getCollectionCustomer");
      }

      public getCollectionCustomer_args getEmptyArgsInstance() {
        return new getCollectionCustomer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectionCustomer_result getResult(I iface, getCollectionCustomer_args args) throws org.apache.thrift.TException {
        getCollectionCustomer_result result = new getCollectionCustomer_result();
        result.success = iface.getCollectionCustomer(args.projectId);
        return result;
      }
    }

    public static class getCollectionCusComContact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectionCusComContact_args> {
      public getCollectionCusComContact() {
        super("getCollectionCusComContact");
      }

      public getCollectionCusComContact_args getEmptyArgsInstance() {
        return new getCollectionCusComContact_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectionCusComContact_result getResult(I iface, getCollectionCusComContact_args args) throws org.apache.thrift.TException {
        getCollectionCusComContact_result result = new getCollectionCusComContact_result();
        result.success = iface.getCollectionCusComContact(args.acctId);
        return result;
      }
    }

    public static class getRepaymentCollectionTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentCollectionTotal_args> {
      public getRepaymentCollectionTotal() {
        super("getRepaymentCollectionTotal");
      }

      public getRepaymentCollectionTotal_args getEmptyArgsInstance() {
        return new getRepaymentCollectionTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentCollectionTotal_result getResult(I iface, getRepaymentCollectionTotal_args args) throws org.apache.thrift.TException {
        getRepaymentCollectionTotal_result result = new getRepaymentCollectionTotal_result();
        result.success = iface.getRepaymentCollectionTotal(args.repaymentCollection);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAssignmentDistributionTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssignmentDistributionTotal_args> {
      public getAssignmentDistributionTotal() {
        super("getAssignmentDistributionTotal");
      }

      public getAssignmentDistributionTotal_args getEmptyArgsInstance() {
        return new getAssignmentDistributionTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAssignmentDistributionTotal_result getResult(I iface, getAssignmentDistributionTotal_args args) throws org.apache.thrift.TException {
        getAssignmentDistributionTotal_result result = new getAssignmentDistributionTotal_result();
        result.success = iface.getAssignmentDistributionTotal(args.assignmentDistributionSearch);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCollectionRecordsByProjectIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectionRecordsByProjectIds_args> {
      public getCollectionRecordsByProjectIds() {
        super("getCollectionRecordsByProjectIds");
      }

      public getCollectionRecordsByProjectIds_args getEmptyArgsInstance() {
        return new getCollectionRecordsByProjectIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectionRecordsByProjectIds_result getResult(I iface, getCollectionRecordsByProjectIds_args args) throws org.apache.thrift.TException {
        getCollectionRecordsByProjectIds_result result = new getCollectionRecordsByProjectIds_result();
        result.success = iface.getCollectionRecordsByProjectIds(args.pids);
        return result;
      }
    }

    public static class getNoticeCurrentSeq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNoticeCurrentSeq_args> {
      public getNoticeCurrentSeq() {
        super("getNoticeCurrentSeq");
      }

      public getNoticeCurrentSeq_args getEmptyArgsInstance() {
        return new getNoticeCurrentSeq_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNoticeCurrentSeq_result getResult(I iface, getNoticeCurrentSeq_args args) throws org.apache.thrift.TException {
        getNoticeCurrentSeq_result result = new getNoticeCurrentSeq_result();
        try {
          result.success = iface.getNoticeCurrentSeq(args.year);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateNoticeCurrentSeq<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNoticeCurrentSeq_args> {
      public updateNoticeCurrentSeq() {
        super("updateNoticeCurrentSeq");
      }

      public updateNoticeCurrentSeq_args getEmptyArgsInstance() {
        return new updateNoticeCurrentSeq_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateNoticeCurrentSeq_result getResult(I iface, updateNoticeCurrentSeq_args args) throws org.apache.thrift.TException {
        updateNoticeCurrentSeq_result result = new updateNoticeCurrentSeq_result();
        try {
          result.success = iface.updateNoticeCurrentSeq(args.year);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getReminderNoticePart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReminderNoticePart_args> {
      public getReminderNoticePart() {
        super("getReminderNoticePart");
      }

      public getReminderNoticePart_args getEmptyArgsInstance() {
        return new getReminderNoticePart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReminderNoticePart_result getResult(I iface, getReminderNoticePart_args args) throws org.apache.thrift.TException {
        getReminderNoticePart_result result = new getReminderNoticePart_result();
        try {
          result.success = iface.getReminderNoticePart(args.projectId, args.nowDttm);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getReminderNoticePartMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReminderNoticePartMoney_args> {
      public getReminderNoticePartMoney() {
        super("getReminderNoticePartMoney");
      }

      public getReminderNoticePartMoney_args getEmptyArgsInstance() {
        return new getReminderNoticePartMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReminderNoticePartMoney_result getResult(I iface, getReminderNoticePartMoney_args args) throws org.apache.thrift.TException {
        getReminderNoticePartMoney_result result = new getReminderNoticePartMoney_result();
        try {
          result.success = iface.getReminderNoticePartMoney(args.reminderNoticePart, args.nowDttm);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getReminderNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReminderNotice_args> {
      public getReminderNotice() {
        super("getReminderNotice");
      }

      public getReminderNotice_args getEmptyArgsInstance() {
        return new getReminderNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReminderNotice_result getResult(I iface, getReminderNotice_args args) throws org.apache.thrift.TException {
        getReminderNotice_result result = new getReminderNotice_result();
        try {
          result.success = iface.getReminderNotice(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAssignmentDistribution", new getAssignmentDistribution());
      processMap.put("getCollectionRecord", new getCollectionRecord());
      processMap.put("insertCollectionRecord", new insertCollectionRecord());
      processMap.put("getCollectionRecordList", new getCollectionRecordList());
      processMap.put("insertReminderPlan", new insertReminderPlan());
      processMap.put("updateReminderPlan", new updateReminderPlan());
      processMap.put("getRepaymentCollectionList", new getRepaymentCollectionList());
      processMap.put("getCollectionCustomer", new getCollectionCustomer());
      processMap.put("getCollectionCusComContact", new getCollectionCusComContact());
      processMap.put("getRepaymentCollectionTotal", new getRepaymentCollectionTotal());
      processMap.put("getAssignmentDistributionTotal", new getAssignmentDistributionTotal());
      processMap.put("getCollectionRecordsByProjectIds", new getCollectionRecordsByProjectIds());
      processMap.put("getNoticeCurrentSeq", new getNoticeCurrentSeq());
      processMap.put("updateNoticeCurrentSeq", new updateNoticeCurrentSeq());
      processMap.put("getReminderNoticePart", new getReminderNoticePart());
      processMap.put("getReminderNoticePartMoney", new getReminderNoticePartMoney());
      processMap.put("getReminderNotice", new getReminderNotice());
      return processMap;
    }

    public static class getAssignmentDistribution<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssignmentDistribution_args, List<AssignmentDistribution>> {
      public getAssignmentDistribution() {
        super("getAssignmentDistribution");
      }

      public getAssignmentDistribution_args getEmptyArgsInstance() {
        return new getAssignmentDistribution_args();
      }

      public AsyncMethodCallback<List<AssignmentDistribution>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AssignmentDistribution>>() { 
          public void onComplete(List<AssignmentDistribution> o) {
            getAssignmentDistribution_result result = new getAssignmentDistribution_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAssignmentDistribution_result result = new getAssignmentDistribution_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssignmentDistribution_args args, org.apache.thrift.async.AsyncMethodCallback<List<AssignmentDistribution>> resultHandler) throws TException {
        iface.getAssignmentDistribution(args.assignmentDistributionSearch,resultHandler);
      }
    }

    public static class getCollectionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectionRecord_args, List<CollectionRecord>> {
      public getCollectionRecord() {
        super("getCollectionRecord");
      }

      public getCollectionRecord_args getEmptyArgsInstance() {
        return new getCollectionRecord_args();
      }

      public AsyncMethodCallback<List<CollectionRecord>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectionRecord>>() { 
          public void onComplete(List<CollectionRecord> o) {
            getCollectionRecord_result result = new getCollectionRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectionRecord_result result = new getCollectionRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectionRecord>> resultHandler) throws TException {
        iface.getCollectionRecord(args.collectionRecord,resultHandler);
      }
    }

    public static class insertCollectionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertCollectionRecord_args, Integer> {
      public insertCollectionRecord() {
        super("insertCollectionRecord");
      }

      public insertCollectionRecord_args getEmptyArgsInstance() {
        return new insertCollectionRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertCollectionRecord_result result = new insertCollectionRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertCollectionRecord_result result = new insertCollectionRecord_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertCollectionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertCollectionRecord(args.collectionRecord,resultHandler);
      }
    }

    public static class getCollectionRecordList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectionRecordList_args, List<CollectionRecordDto>> {
      public getCollectionRecordList() {
        super("getCollectionRecordList");
      }

      public getCollectionRecordList_args getEmptyArgsInstance() {
        return new getCollectionRecordList_args();
      }

      public AsyncMethodCallback<List<CollectionRecordDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectionRecordDto>>() { 
          public void onComplete(List<CollectionRecordDto> o) {
            getCollectionRecordList_result result = new getCollectionRecordList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectionRecordList_result result = new getCollectionRecordList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectionRecordList_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectionRecordDto>> resultHandler) throws TException {
        iface.getCollectionRecordList(args.myMap,resultHandler);
      }
    }

    public static class insertReminderPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertReminderPlan_args, Integer> {
      public insertReminderPlan() {
        super("insertReminderPlan");
      }

      public insertReminderPlan_args getEmptyArgsInstance() {
        return new insertReminderPlan_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertReminderPlan_result result = new insertReminderPlan_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertReminderPlan_result result = new insertReminderPlan_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertReminderPlan_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertReminderPlan(args.projectReminderPlanDto,resultHandler);
      }
    }

    public static class updateReminderPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateReminderPlan_args, Integer> {
      public updateReminderPlan() {
        super("updateReminderPlan");
      }

      public updateReminderPlan_args getEmptyArgsInstance() {
        return new updateReminderPlan_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateReminderPlan_result result = new updateReminderPlan_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateReminderPlan_result result = new updateReminderPlan_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateReminderPlan_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateReminderPlan(args.projectReminderPlanDto,resultHandler);
      }
    }

    public static class getRepaymentCollectionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentCollectionList_args, List<RepaymentCollection>> {
      public getRepaymentCollectionList() {
        super("getRepaymentCollectionList");
      }

      public getRepaymentCollectionList_args getEmptyArgsInstance() {
        return new getRepaymentCollectionList_args();
      }

      public AsyncMethodCallback<List<RepaymentCollection>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepaymentCollection>>() { 
          public void onComplete(List<RepaymentCollection> o) {
            getRepaymentCollectionList_result result = new getRepaymentCollectionList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentCollectionList_result result = new getRepaymentCollectionList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentCollectionList_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepaymentCollection>> resultHandler) throws TException {
        iface.getRepaymentCollectionList(args.repaymentCollection,resultHandler);
      }
    }

    public static class getCollectionCustomer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectionCustomer_args, CollectionCustomer> {
      public getCollectionCustomer() {
        super("getCollectionCustomer");
      }

      public getCollectionCustomer_args getEmptyArgsInstance() {
        return new getCollectionCustomer_args();
      }

      public AsyncMethodCallback<CollectionCustomer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CollectionCustomer>() { 
          public void onComplete(CollectionCustomer o) {
            getCollectionCustomer_result result = new getCollectionCustomer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectionCustomer_result result = new getCollectionCustomer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectionCustomer_args args, org.apache.thrift.async.AsyncMethodCallback<CollectionCustomer> resultHandler) throws TException {
        iface.getCollectionCustomer(args.projectId,resultHandler);
      }
    }

    public static class getCollectionCusComContact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectionCusComContact_args, List<CollectionCusComContact>> {
      public getCollectionCusComContact() {
        super("getCollectionCusComContact");
      }

      public getCollectionCusComContact_args getEmptyArgsInstance() {
        return new getCollectionCusComContact_args();
      }

      public AsyncMethodCallback<List<CollectionCusComContact>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectionCusComContact>>() { 
          public void onComplete(List<CollectionCusComContact> o) {
            getCollectionCusComContact_result result = new getCollectionCusComContact_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectionCusComContact_result result = new getCollectionCusComContact_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectionCusComContact_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectionCusComContact>> resultHandler) throws TException {
        iface.getCollectionCusComContact(args.acctId,resultHandler);
      }
    }

    public static class getRepaymentCollectionTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentCollectionTotal_args, Integer> {
      public getRepaymentCollectionTotal() {
        super("getRepaymentCollectionTotal");
      }

      public getRepaymentCollectionTotal_args getEmptyArgsInstance() {
        return new getRepaymentCollectionTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRepaymentCollectionTotal_result result = new getRepaymentCollectionTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentCollectionTotal_result result = new getRepaymentCollectionTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentCollectionTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRepaymentCollectionTotal(args.repaymentCollection,resultHandler);
      }
    }

    public static class getAssignmentDistributionTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssignmentDistributionTotal_args, Integer> {
      public getAssignmentDistributionTotal() {
        super("getAssignmentDistributionTotal");
      }

      public getAssignmentDistributionTotal_args getEmptyArgsInstance() {
        return new getAssignmentDistributionTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAssignmentDistributionTotal_result result = new getAssignmentDistributionTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAssignmentDistributionTotal_result result = new getAssignmentDistributionTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssignmentDistributionTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAssignmentDistributionTotal(args.assignmentDistributionSearch,resultHandler);
      }
    }

    public static class getCollectionRecordsByProjectIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectionRecordsByProjectIds_args, List<CollectionRecord>> {
      public getCollectionRecordsByProjectIds() {
        super("getCollectionRecordsByProjectIds");
      }

      public getCollectionRecordsByProjectIds_args getEmptyArgsInstance() {
        return new getCollectionRecordsByProjectIds_args();
      }

      public AsyncMethodCallback<List<CollectionRecord>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectionRecord>>() { 
          public void onComplete(List<CollectionRecord> o) {
            getCollectionRecordsByProjectIds_result result = new getCollectionRecordsByProjectIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectionRecordsByProjectIds_result result = new getCollectionRecordsByProjectIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectionRecordsByProjectIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectionRecord>> resultHandler) throws TException {
        iface.getCollectionRecordsByProjectIds(args.pids,resultHandler);
      }
    }

    public static class getNoticeCurrentSeq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNoticeCurrentSeq_args, Integer> {
      public getNoticeCurrentSeq() {
        super("getNoticeCurrentSeq");
      }

      public getNoticeCurrentSeq_args getEmptyArgsInstance() {
        return new getNoticeCurrentSeq_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getNoticeCurrentSeq_result result = new getNoticeCurrentSeq_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNoticeCurrentSeq_result result = new getNoticeCurrentSeq_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNoticeCurrentSeq_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getNoticeCurrentSeq(args.year,resultHandler);
      }
    }

    public static class updateNoticeCurrentSeq<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNoticeCurrentSeq_args, Integer> {
      public updateNoticeCurrentSeq() {
        super("updateNoticeCurrentSeq");
      }

      public updateNoticeCurrentSeq_args getEmptyArgsInstance() {
        return new updateNoticeCurrentSeq_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateNoticeCurrentSeq_result result = new updateNoticeCurrentSeq_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateNoticeCurrentSeq_result result = new updateNoticeCurrentSeq_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNoticeCurrentSeq_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateNoticeCurrentSeq(args.year,resultHandler);
      }
    }

    public static class getReminderNoticePart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReminderNoticePart_args, List<ReminderNoticePart>> {
      public getReminderNoticePart() {
        super("getReminderNoticePart");
      }

      public getReminderNoticePart_args getEmptyArgsInstance() {
        return new getReminderNoticePart_args();
      }

      public AsyncMethodCallback<List<ReminderNoticePart>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReminderNoticePart>>() { 
          public void onComplete(List<ReminderNoticePart> o) {
            getReminderNoticePart_result result = new getReminderNoticePart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReminderNoticePart_result result = new getReminderNoticePart_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReminderNoticePart_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReminderNoticePart>> resultHandler) throws TException {
        iface.getReminderNoticePart(args.projectId, args.nowDttm,resultHandler);
      }
    }

    public static class getReminderNoticePartMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReminderNoticePartMoney_args, ReminderNoticePart> {
      public getReminderNoticePartMoney() {
        super("getReminderNoticePartMoney");
      }

      public getReminderNoticePartMoney_args getEmptyArgsInstance() {
        return new getReminderNoticePartMoney_args();
      }

      public AsyncMethodCallback<ReminderNoticePart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReminderNoticePart>() { 
          public void onComplete(ReminderNoticePart o) {
            getReminderNoticePartMoney_result result = new getReminderNoticePartMoney_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReminderNoticePartMoney_result result = new getReminderNoticePartMoney_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReminderNoticePartMoney_args args, org.apache.thrift.async.AsyncMethodCallback<ReminderNoticePart> resultHandler) throws TException {
        iface.getReminderNoticePartMoney(args.reminderNoticePart, args.nowDttm,resultHandler);
      }
    }

    public static class getReminderNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReminderNotice_args, ReminderNotice> {
      public getReminderNotice() {
        super("getReminderNotice");
      }

      public getReminderNotice_args getEmptyArgsInstance() {
        return new getReminderNotice_args();
      }

      public AsyncMethodCallback<ReminderNotice> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReminderNotice>() { 
          public void onComplete(ReminderNotice o) {
            getReminderNotice_result result = new getReminderNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReminderNotice_result result = new getReminderNotice_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReminderNotice_args args, org.apache.thrift.async.AsyncMethodCallback<ReminderNotice> resultHandler) throws TException {
        iface.getReminderNotice(args.projectId,resultHandler);
      }
    }

  }

  public static class getAssignmentDistribution_args implements org.apache.thrift.TBase<getAssignmentDistribution_args, getAssignmentDistribution_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssignmentDistribution_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssignmentDistribution_args");

    private static final org.apache.thrift.protocol.TField ASSIGNMENT_DISTRIBUTION_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("assignmentDistributionSearch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssignmentDistribution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssignmentDistribution_argsTupleSchemeFactory());
    }

    public AssignmentDistributionSearch assignmentDistributionSearch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSIGNMENT_DISTRIBUTION_SEARCH((short)1, "assignmentDistributionSearch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSIGNMENT_DISTRIBUTION_SEARCH
            return ASSIGNMENT_DISTRIBUTION_SEARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSIGNMENT_DISTRIBUTION_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("assignmentDistributionSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssignmentDistributionSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssignmentDistribution_args.class, metaDataMap);
    }

    public getAssignmentDistribution_args() {
    }

    public getAssignmentDistribution_args(
      AssignmentDistributionSearch assignmentDistributionSearch)
    {
      this();
      this.assignmentDistributionSearch = assignmentDistributionSearch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssignmentDistribution_args(getAssignmentDistribution_args other) {
      if (other.isSetAssignmentDistributionSearch()) {
        this.assignmentDistributionSearch = new AssignmentDistributionSearch(other.assignmentDistributionSearch);
      }
    }

    public getAssignmentDistribution_args deepCopy() {
      return new getAssignmentDistribution_args(this);
    }

    @Override
    public void clear() {
      this.assignmentDistributionSearch = null;
    }

    public AssignmentDistributionSearch getAssignmentDistributionSearch() {
      return this.assignmentDistributionSearch;
    }

    public getAssignmentDistribution_args setAssignmentDistributionSearch(AssignmentDistributionSearch assignmentDistributionSearch) {
      this.assignmentDistributionSearch = assignmentDistributionSearch;
      return this;
    }

    public void unsetAssignmentDistributionSearch() {
      this.assignmentDistributionSearch = null;
    }

    /** Returns true if field assignmentDistributionSearch is set (has been assigned a value) and false otherwise */
    public boolean isSetAssignmentDistributionSearch() {
      return this.assignmentDistributionSearch != null;
    }

    public void setAssignmentDistributionSearchIsSet(boolean value) {
      if (!value) {
        this.assignmentDistributionSearch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        if (value == null) {
          unsetAssignmentDistributionSearch();
        } else {
          setAssignmentDistributionSearch((AssignmentDistributionSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        return getAssignmentDistributionSearch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        return isSetAssignmentDistributionSearch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssignmentDistribution_args)
        return this.equals((getAssignmentDistribution_args)that);
      return false;
    }

    public boolean equals(getAssignmentDistribution_args that) {
      if (that == null)
        return false;

      boolean this_present_assignmentDistributionSearch = true && this.isSetAssignmentDistributionSearch();
      boolean that_present_assignmentDistributionSearch = true && that.isSetAssignmentDistributionSearch();
      if (this_present_assignmentDistributionSearch || that_present_assignmentDistributionSearch) {
        if (!(this_present_assignmentDistributionSearch && that_present_assignmentDistributionSearch))
          return false;
        if (!this.assignmentDistributionSearch.equals(that.assignmentDistributionSearch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_assignmentDistributionSearch = true && (isSetAssignmentDistributionSearch());
      list.add(present_assignmentDistributionSearch);
      if (present_assignmentDistributionSearch)
        list.add(assignmentDistributionSearch);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAssignmentDistribution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssignmentDistributionSearch()).compareTo(other.isSetAssignmentDistributionSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssignmentDistributionSearch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignmentDistributionSearch, other.assignmentDistributionSearch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssignmentDistribution_args(");
      boolean first = true;

      sb.append("assignmentDistributionSearch:");
      if (this.assignmentDistributionSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.assignmentDistributionSearch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (assignmentDistributionSearch != null) {
        assignmentDistributionSearch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssignmentDistribution_argsStandardSchemeFactory implements SchemeFactory {
      public getAssignmentDistribution_argsStandardScheme getScheme() {
        return new getAssignmentDistribution_argsStandardScheme();
      }
    }

    private static class getAssignmentDistribution_argsStandardScheme extends StandardScheme<getAssignmentDistribution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssignmentDistribution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSIGNMENT_DISTRIBUTION_SEARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.assignmentDistributionSearch = new AssignmentDistributionSearch();
                struct.assignmentDistributionSearch.read(iprot);
                struct.setAssignmentDistributionSearchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssignmentDistribution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assignmentDistributionSearch != null) {
          oprot.writeFieldBegin(ASSIGNMENT_DISTRIBUTION_SEARCH_FIELD_DESC);
          struct.assignmentDistributionSearch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssignmentDistribution_argsTupleSchemeFactory implements SchemeFactory {
      public getAssignmentDistribution_argsTupleScheme getScheme() {
        return new getAssignmentDistribution_argsTupleScheme();
      }
    }

    private static class getAssignmentDistribution_argsTupleScheme extends TupleScheme<getAssignmentDistribution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssignmentDistributionSearch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAssignmentDistributionSearch()) {
          struct.assignmentDistributionSearch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.assignmentDistributionSearch = new AssignmentDistributionSearch();
          struct.assignmentDistributionSearch.read(iprot);
          struct.setAssignmentDistributionSearchIsSet(true);
        }
      }
    }

  }

  public static class getAssignmentDistribution_result implements org.apache.thrift.TBase<getAssignmentDistribution_result, getAssignmentDistribution_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssignmentDistribution_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssignmentDistribution_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssignmentDistribution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssignmentDistribution_resultTupleSchemeFactory());
    }

    public List<AssignmentDistribution> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssignmentDistribution.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssignmentDistribution_result.class, metaDataMap);
    }

    public getAssignmentDistribution_result() {
    }

    public getAssignmentDistribution_result(
      List<AssignmentDistribution> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssignmentDistribution_result(getAssignmentDistribution_result other) {
      if (other.isSetSuccess()) {
        List<AssignmentDistribution> __this__success = new ArrayList<AssignmentDistribution>(other.success.size());
        for (AssignmentDistribution other_element : other.success) {
          __this__success.add(new AssignmentDistribution(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAssignmentDistribution_result deepCopy() {
      return new getAssignmentDistribution_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AssignmentDistribution> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AssignmentDistribution elem) {
      if (this.success == null) {
        this.success = new ArrayList<AssignmentDistribution>();
      }
      this.success.add(elem);
    }

    public List<AssignmentDistribution> getSuccess() {
      return this.success;
    }

    public getAssignmentDistribution_result setSuccess(List<AssignmentDistribution> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AssignmentDistribution>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssignmentDistribution_result)
        return this.equals((getAssignmentDistribution_result)that);
      return false;
    }

    public boolean equals(getAssignmentDistribution_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAssignmentDistribution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssignmentDistribution_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssignmentDistribution_resultStandardSchemeFactory implements SchemeFactory {
      public getAssignmentDistribution_resultStandardScheme getScheme() {
        return new getAssignmentDistribution_resultStandardScheme();
      }
    }

    private static class getAssignmentDistribution_resultStandardScheme extends StandardScheme<getAssignmentDistribution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssignmentDistribution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<AssignmentDistribution>(_list152.size);
                  AssignmentDistribution _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new AssignmentDistribution();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssignmentDistribution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AssignmentDistribution _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssignmentDistribution_resultTupleSchemeFactory implements SchemeFactory {
      public getAssignmentDistribution_resultTupleScheme getScheme() {
        return new getAssignmentDistribution_resultTupleScheme();
      }
    }

    private static class getAssignmentDistribution_resultTupleScheme extends TupleScheme<getAssignmentDistribution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AssignmentDistribution _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AssignmentDistribution>(_list157.size);
            AssignmentDistribution _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new AssignmentDistribution();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecord_args implements org.apache.thrift.TBase<getCollectionRecord_args, getCollectionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecord_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecord_argsTupleSchemeFactory());
    }

    public CollectionRecord collectionRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_RECORD((short)1, "collectionRecord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_RECORD
            return COLLECTION_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_RECORD, new org.apache.thrift.meta_data.FieldMetaData("collectionRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionRecord.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecord_args.class, metaDataMap);
    }

    public getCollectionRecord_args() {
    }

    public getCollectionRecord_args(
      CollectionRecord collectionRecord)
    {
      this();
      this.collectionRecord = collectionRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecord_args(getCollectionRecord_args other) {
      if (other.isSetCollectionRecord()) {
        this.collectionRecord = new CollectionRecord(other.collectionRecord);
      }
    }

    public getCollectionRecord_args deepCopy() {
      return new getCollectionRecord_args(this);
    }

    @Override
    public void clear() {
      this.collectionRecord = null;
    }

    public CollectionRecord getCollectionRecord() {
      return this.collectionRecord;
    }

    public getCollectionRecord_args setCollectionRecord(CollectionRecord collectionRecord) {
      this.collectionRecord = collectionRecord;
      return this;
    }

    public void unsetCollectionRecord() {
      this.collectionRecord = null;
    }

    /** Returns true if field collectionRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionRecord() {
      return this.collectionRecord != null;
    }

    public void setCollectionRecordIsSet(boolean value) {
      if (!value) {
        this.collectionRecord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_RECORD:
        if (value == null) {
          unsetCollectionRecord();
        } else {
          setCollectionRecord((CollectionRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_RECORD:
        return getCollectionRecord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_RECORD:
        return isSetCollectionRecord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecord_args)
        return this.equals((getCollectionRecord_args)that);
      return false;
    }

    public boolean equals(getCollectionRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionRecord = true && this.isSetCollectionRecord();
      boolean that_present_collectionRecord = true && that.isSetCollectionRecord();
      if (this_present_collectionRecord || that_present_collectionRecord) {
        if (!(this_present_collectionRecord && that_present_collectionRecord))
          return false;
        if (!this.collectionRecord.equals(that.collectionRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectionRecord = true && (isSetCollectionRecord());
      list.add(present_collectionRecord);
      if (present_collectionRecord)
        list.add(collectionRecord);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionRecord()).compareTo(other.isSetCollectionRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionRecord, other.collectionRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecord_args(");
      boolean first = true;

      sb.append("collectionRecord:");
      if (this.collectionRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectionRecord != null) {
        collectionRecord.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecord_argsStandardScheme getScheme() {
        return new getCollectionRecord_argsStandardScheme();
      }
    }

    private static class getCollectionRecord_argsStandardScheme extends StandardScheme<getCollectionRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectionRecord = new CollectionRecord();
                struct.collectionRecord.read(iprot);
                struct.setCollectionRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionRecord != null) {
          oprot.writeFieldBegin(COLLECTION_RECORD_FIELD_DESC);
          struct.collectionRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecord_argsTupleScheme getScheme() {
        return new getCollectionRecord_argsTupleScheme();
      }
    }

    private static class getCollectionRecord_argsTupleScheme extends TupleScheme<getCollectionRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectionRecord()) {
          struct.collectionRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectionRecord = new CollectionRecord();
          struct.collectionRecord.read(iprot);
          struct.setCollectionRecordIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecord_result implements org.apache.thrift.TBase<getCollectionRecord_result, getCollectionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecord_resultTupleSchemeFactory());
    }

    public List<CollectionRecord> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecord_result.class, metaDataMap);
    }

    public getCollectionRecord_result() {
    }

    public getCollectionRecord_result(
      List<CollectionRecord> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecord_result(getCollectionRecord_result other) {
      if (other.isSetSuccess()) {
        List<CollectionRecord> __this__success = new ArrayList<CollectionRecord>(other.success.size());
        for (CollectionRecord other_element : other.success) {
          __this__success.add(new CollectionRecord(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCollectionRecord_result deepCopy() {
      return new getCollectionRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectionRecord> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectionRecord elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectionRecord>();
      }
      this.success.add(elem);
    }

    public List<CollectionRecord> getSuccess() {
      return this.success;
    }

    public getCollectionRecord_result setSuccess(List<CollectionRecord> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectionRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecord_result)
        return this.equals((getCollectionRecord_result)that);
      return false;
    }

    public boolean equals(getCollectionRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecord_resultStandardScheme getScheme() {
        return new getCollectionRecord_resultStandardScheme();
      }
    }

    private static class getCollectionRecord_resultStandardScheme extends StandardScheme<getCollectionRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectionRecord>(_list160.size);
                  CollectionRecord _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new CollectionRecord();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectionRecord _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecord_resultTupleScheme getScheme() {
        return new getCollectionRecord_resultTupleScheme();
      }
    }

    private static class getCollectionRecord_resultTupleScheme extends TupleScheme<getCollectionRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectionRecord _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectionRecord>(_list165.size);
            CollectionRecord _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new CollectionRecord();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertCollectionRecord_args implements org.apache.thrift.TBase<insertCollectionRecord_args, insertCollectionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertCollectionRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCollectionRecord_args");

    private static final org.apache.thrift.protocol.TField COLLECTION_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCollectionRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCollectionRecord_argsTupleSchemeFactory());
    }

    public CollectionRecord collectionRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTION_RECORD((short)1, "collectionRecord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTION_RECORD
            return COLLECTION_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTION_RECORD, new org.apache.thrift.meta_data.FieldMetaData("collectionRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionRecord.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCollectionRecord_args.class, metaDataMap);
    }

    public insertCollectionRecord_args() {
    }

    public insertCollectionRecord_args(
      CollectionRecord collectionRecord)
    {
      this();
      this.collectionRecord = collectionRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCollectionRecord_args(insertCollectionRecord_args other) {
      if (other.isSetCollectionRecord()) {
        this.collectionRecord = new CollectionRecord(other.collectionRecord);
      }
    }

    public insertCollectionRecord_args deepCopy() {
      return new insertCollectionRecord_args(this);
    }

    @Override
    public void clear() {
      this.collectionRecord = null;
    }

    public CollectionRecord getCollectionRecord() {
      return this.collectionRecord;
    }

    public insertCollectionRecord_args setCollectionRecord(CollectionRecord collectionRecord) {
      this.collectionRecord = collectionRecord;
      return this;
    }

    public void unsetCollectionRecord() {
      this.collectionRecord = null;
    }

    /** Returns true if field collectionRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectionRecord() {
      return this.collectionRecord != null;
    }

    public void setCollectionRecordIsSet(boolean value) {
      if (!value) {
        this.collectionRecord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTION_RECORD:
        if (value == null) {
          unsetCollectionRecord();
        } else {
          setCollectionRecord((CollectionRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTION_RECORD:
        return getCollectionRecord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTION_RECORD:
        return isSetCollectionRecord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCollectionRecord_args)
        return this.equals((insertCollectionRecord_args)that);
      return false;
    }

    public boolean equals(insertCollectionRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_collectionRecord = true && this.isSetCollectionRecord();
      boolean that_present_collectionRecord = true && that.isSetCollectionRecord();
      if (this_present_collectionRecord || that_present_collectionRecord) {
        if (!(this_present_collectionRecord && that_present_collectionRecord))
          return false;
        if (!this.collectionRecord.equals(that.collectionRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectionRecord = true && (isSetCollectionRecord());
      list.add(present_collectionRecord);
      if (present_collectionRecord)
        list.add(collectionRecord);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertCollectionRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectionRecord()).compareTo(other.isSetCollectionRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectionRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionRecord, other.collectionRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCollectionRecord_args(");
      boolean first = true;

      sb.append("collectionRecord:");
      if (this.collectionRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.collectionRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectionRecord != null) {
        collectionRecord.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCollectionRecord_argsStandardSchemeFactory implements SchemeFactory {
      public insertCollectionRecord_argsStandardScheme getScheme() {
        return new insertCollectionRecord_argsStandardScheme();
      }
    }

    private static class insertCollectionRecord_argsStandardScheme extends StandardScheme<insertCollectionRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCollectionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTION_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectionRecord = new CollectionRecord();
                struct.collectionRecord.read(iprot);
                struct.setCollectionRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCollectionRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectionRecord != null) {
          oprot.writeFieldBegin(COLLECTION_RECORD_FIELD_DESC);
          struct.collectionRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCollectionRecord_argsTupleSchemeFactory implements SchemeFactory {
      public insertCollectionRecord_argsTupleScheme getScheme() {
        return new insertCollectionRecord_argsTupleScheme();
      }
    }

    private static class insertCollectionRecord_argsTupleScheme extends TupleScheme<insertCollectionRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCollectionRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectionRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectionRecord()) {
          struct.collectionRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCollectionRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectionRecord = new CollectionRecord();
          struct.collectionRecord.read(iprot);
          struct.setCollectionRecordIsSet(true);
        }
      }
    }

  }

  public static class insertCollectionRecord_result implements org.apache.thrift.TBase<insertCollectionRecord_result, insertCollectionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertCollectionRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCollectionRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCollectionRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCollectionRecord_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCollectionRecord_result.class, metaDataMap);
    }

    public insertCollectionRecord_result() {
    }

    public insertCollectionRecord_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCollectionRecord_result(insertCollectionRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public insertCollectionRecord_result deepCopy() {
      return new insertCollectionRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertCollectionRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public insertCollectionRecord_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCollectionRecord_result)
        return this.equals((insertCollectionRecord_result)that);
      return false;
    }

    public boolean equals(insertCollectionRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertCollectionRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCollectionRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCollectionRecord_resultStandardSchemeFactory implements SchemeFactory {
      public insertCollectionRecord_resultStandardScheme getScheme() {
        return new insertCollectionRecord_resultStandardScheme();
      }
    }

    private static class insertCollectionRecord_resultStandardScheme extends StandardScheme<insertCollectionRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCollectionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCollectionRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCollectionRecord_resultTupleSchemeFactory implements SchemeFactory {
      public insertCollectionRecord_resultTupleScheme getScheme() {
        return new insertCollectionRecord_resultTupleScheme();
      }
    }

    private static class insertCollectionRecord_resultTupleScheme extends TupleScheme<insertCollectionRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCollectionRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCollectionRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecordList_args implements org.apache.thrift.TBase<getCollectionRecordList_args, getCollectionRecordList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecordList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecordList_args");

    private static final org.apache.thrift.protocol.TField MY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("myMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecordList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecordList_argsTupleSchemeFactory());
    }

    public Map<String,Integer> myMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_MAP((short)1, "myMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_MAP
            return MY_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_MAP, new org.apache.thrift.meta_data.FieldMetaData("myMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecordList_args.class, metaDataMap);
    }

    public getCollectionRecordList_args() {
    }

    public getCollectionRecordList_args(
      Map<String,Integer> myMap)
    {
      this();
      this.myMap = myMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecordList_args(getCollectionRecordList_args other) {
      if (other.isSetMyMap()) {
        Map<String,Integer> __this__myMap = new HashMap<String,Integer>(other.myMap);
        this.myMap = __this__myMap;
      }
    }

    public getCollectionRecordList_args deepCopy() {
      return new getCollectionRecordList_args(this);
    }

    @Override
    public void clear() {
      this.myMap = null;
    }

    public int getMyMapSize() {
      return (this.myMap == null) ? 0 : this.myMap.size();
    }

    public void putToMyMap(String key, int val) {
      if (this.myMap == null) {
        this.myMap = new HashMap<String,Integer>();
      }
      this.myMap.put(key, val);
    }

    public Map<String,Integer> getMyMap() {
      return this.myMap;
    }

    public getCollectionRecordList_args setMyMap(Map<String,Integer> myMap) {
      this.myMap = myMap;
      return this;
    }

    public void unsetMyMap() {
      this.myMap = null;
    }

    /** Returns true if field myMap is set (has been assigned a value) and false otherwise */
    public boolean isSetMyMap() {
      return this.myMap != null;
    }

    public void setMyMapIsSet(boolean value) {
      if (!value) {
        this.myMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_MAP:
        if (value == null) {
          unsetMyMap();
        } else {
          setMyMap((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_MAP:
        return getMyMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_MAP:
        return isSetMyMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecordList_args)
        return this.equals((getCollectionRecordList_args)that);
      return false;
    }

    public boolean equals(getCollectionRecordList_args that) {
      if (that == null)
        return false;

      boolean this_present_myMap = true && this.isSetMyMap();
      boolean that_present_myMap = true && that.isSetMyMap();
      if (this_present_myMap || that_present_myMap) {
        if (!(this_present_myMap && that_present_myMap))
          return false;
        if (!this.myMap.equals(that.myMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myMap = true && (isSetMyMap());
      list.add(present_myMap);
      if (present_myMap)
        list.add(myMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecordList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyMap()).compareTo(other.isSetMyMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myMap, other.myMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecordList_args(");
      boolean first = true;

      sb.append("myMap:");
      if (this.myMap == null) {
        sb.append("null");
      } else {
        sb.append(this.myMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecordList_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecordList_argsStandardScheme getScheme() {
        return new getCollectionRecordList_argsStandardScheme();
      }
    }

    private static class getCollectionRecordList_argsStandardScheme extends StandardScheme<getCollectionRecordList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecordList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                  struct.myMap = new HashMap<String,Integer>(2*_map168.size);
                  String _key169;
                  int _val170;
                  for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                  {
                    _key169 = iprot.readString();
                    _val170 = iprot.readI32();
                    struct.myMap.put(_key169, _val170);
                  }
                  iprot.readMapEnd();
                }
                struct.setMyMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecordList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myMap != null) {
          oprot.writeFieldBegin(MY_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.myMap.size()));
            for (Map.Entry<String, Integer> _iter172 : struct.myMap.entrySet())
            {
              oprot.writeString(_iter172.getKey());
              oprot.writeI32(_iter172.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecordList_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecordList_argsTupleScheme getScheme() {
        return new getCollectionRecordList_argsTupleScheme();
      }
    }

    private static class getCollectionRecordList_argsTupleScheme extends TupleScheme<getCollectionRecordList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyMap()) {
          {
            oprot.writeI32(struct.myMap.size());
            for (Map.Entry<String, Integer> _iter173 : struct.myMap.entrySet())
            {
              oprot.writeString(_iter173.getKey());
              oprot.writeI32(_iter173.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.myMap = new HashMap<String,Integer>(2*_map174.size);
            String _key175;
            int _val176;
            for (int _i177 = 0; _i177 < _map174.size; ++_i177)
            {
              _key175 = iprot.readString();
              _val176 = iprot.readI32();
              struct.myMap.put(_key175, _val176);
            }
          }
          struct.setMyMapIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecordList_result implements org.apache.thrift.TBase<getCollectionRecordList_result, getCollectionRecordList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecordList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecordList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecordList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecordList_resultTupleSchemeFactory());
    }

    public List<CollectionRecordDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionRecordDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecordList_result.class, metaDataMap);
    }

    public getCollectionRecordList_result() {
    }

    public getCollectionRecordList_result(
      List<CollectionRecordDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecordList_result(getCollectionRecordList_result other) {
      if (other.isSetSuccess()) {
        List<CollectionRecordDto> __this__success = new ArrayList<CollectionRecordDto>(other.success.size());
        for (CollectionRecordDto other_element : other.success) {
          __this__success.add(new CollectionRecordDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCollectionRecordList_result deepCopy() {
      return new getCollectionRecordList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectionRecordDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectionRecordDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectionRecordDto>();
      }
      this.success.add(elem);
    }

    public List<CollectionRecordDto> getSuccess() {
      return this.success;
    }

    public getCollectionRecordList_result setSuccess(List<CollectionRecordDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectionRecordDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecordList_result)
        return this.equals((getCollectionRecordList_result)that);
      return false;
    }

    public boolean equals(getCollectionRecordList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecordList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecordList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecordList_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecordList_resultStandardScheme getScheme() {
        return new getCollectionRecordList_resultStandardScheme();
      }
    }

    private static class getCollectionRecordList_resultStandardScheme extends StandardScheme<getCollectionRecordList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecordList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectionRecordDto>(_list178.size);
                  CollectionRecordDto _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    _elem179 = new CollectionRecordDto();
                    _elem179.read(iprot);
                    struct.success.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecordList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectionRecordDto _iter181 : struct.success)
            {
              _iter181.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecordList_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecordList_resultTupleScheme getScheme() {
        return new getCollectionRecordList_resultTupleScheme();
      }
    }

    private static class getCollectionRecordList_resultTupleScheme extends TupleScheme<getCollectionRecordList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectionRecordDto _iter182 : struct.success)
            {
              _iter182.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectionRecordDto>(_list183.size);
            CollectionRecordDto _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = new CollectionRecordDto();
              _elem184.read(iprot);
              struct.success.add(_elem184);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertReminderPlan_args implements org.apache.thrift.TBase<insertReminderPlan_args, insertReminderPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertReminderPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertReminderPlan_args");

    private static final org.apache.thrift.protocol.TField PROJECT_REMINDER_PLAN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("projectReminderPlanDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertReminderPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertReminderPlan_argsTupleSchemeFactory());
    }

    public ProjectReminderPlanDto projectReminderPlanDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_REMINDER_PLAN_DTO((short)1, "projectReminderPlanDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_REMINDER_PLAN_DTO
            return PROJECT_REMINDER_PLAN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_REMINDER_PLAN_DTO, new org.apache.thrift.meta_data.FieldMetaData("projectReminderPlanDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectReminderPlanDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertReminderPlan_args.class, metaDataMap);
    }

    public insertReminderPlan_args() {
    }

    public insertReminderPlan_args(
      ProjectReminderPlanDto projectReminderPlanDto)
    {
      this();
      this.projectReminderPlanDto = projectReminderPlanDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertReminderPlan_args(insertReminderPlan_args other) {
      if (other.isSetProjectReminderPlanDto()) {
        this.projectReminderPlanDto = new ProjectReminderPlanDto(other.projectReminderPlanDto);
      }
    }

    public insertReminderPlan_args deepCopy() {
      return new insertReminderPlan_args(this);
    }

    @Override
    public void clear() {
      this.projectReminderPlanDto = null;
    }

    public ProjectReminderPlanDto getProjectReminderPlanDto() {
      return this.projectReminderPlanDto;
    }

    public insertReminderPlan_args setProjectReminderPlanDto(ProjectReminderPlanDto projectReminderPlanDto) {
      this.projectReminderPlanDto = projectReminderPlanDto;
      return this;
    }

    public void unsetProjectReminderPlanDto() {
      this.projectReminderPlanDto = null;
    }

    /** Returns true if field projectReminderPlanDto is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectReminderPlanDto() {
      return this.projectReminderPlanDto != null;
    }

    public void setProjectReminderPlanDtoIsSet(boolean value) {
      if (!value) {
        this.projectReminderPlanDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        if (value == null) {
          unsetProjectReminderPlanDto();
        } else {
          setProjectReminderPlanDto((ProjectReminderPlanDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        return getProjectReminderPlanDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        return isSetProjectReminderPlanDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertReminderPlan_args)
        return this.equals((insertReminderPlan_args)that);
      return false;
    }

    public boolean equals(insertReminderPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_projectReminderPlanDto = true && this.isSetProjectReminderPlanDto();
      boolean that_present_projectReminderPlanDto = true && that.isSetProjectReminderPlanDto();
      if (this_present_projectReminderPlanDto || that_present_projectReminderPlanDto) {
        if (!(this_present_projectReminderPlanDto && that_present_projectReminderPlanDto))
          return false;
        if (!this.projectReminderPlanDto.equals(that.projectReminderPlanDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectReminderPlanDto = true && (isSetProjectReminderPlanDto());
      list.add(present_projectReminderPlanDto);
      if (present_projectReminderPlanDto)
        list.add(projectReminderPlanDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertReminderPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectReminderPlanDto()).compareTo(other.isSetProjectReminderPlanDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectReminderPlanDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectReminderPlanDto, other.projectReminderPlanDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertReminderPlan_args(");
      boolean first = true;

      sb.append("projectReminderPlanDto:");
      if (this.projectReminderPlanDto == null) {
        sb.append("null");
      } else {
        sb.append(this.projectReminderPlanDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectReminderPlanDto != null) {
        projectReminderPlanDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertReminderPlan_argsStandardSchemeFactory implements SchemeFactory {
      public insertReminderPlan_argsStandardScheme getScheme() {
        return new insertReminderPlan_argsStandardScheme();
      }
    }

    private static class insertReminderPlan_argsStandardScheme extends StandardScheme<insertReminderPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertReminderPlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_REMINDER_PLAN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectReminderPlanDto = new ProjectReminderPlanDto();
                struct.projectReminderPlanDto.read(iprot);
                struct.setProjectReminderPlanDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertReminderPlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectReminderPlanDto != null) {
          oprot.writeFieldBegin(PROJECT_REMINDER_PLAN_DTO_FIELD_DESC);
          struct.projectReminderPlanDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertReminderPlan_argsTupleSchemeFactory implements SchemeFactory {
      public insertReminderPlan_argsTupleScheme getScheme() {
        return new insertReminderPlan_argsTupleScheme();
      }
    }

    private static class insertReminderPlan_argsTupleScheme extends TupleScheme<insertReminderPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertReminderPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectReminderPlanDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectReminderPlanDto()) {
          struct.projectReminderPlanDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertReminderPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectReminderPlanDto = new ProjectReminderPlanDto();
          struct.projectReminderPlanDto.read(iprot);
          struct.setProjectReminderPlanDtoIsSet(true);
        }
      }
    }

  }

  public static class insertReminderPlan_result implements org.apache.thrift.TBase<insertReminderPlan_result, insertReminderPlan_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertReminderPlan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertReminderPlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertReminderPlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertReminderPlan_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertReminderPlan_result.class, metaDataMap);
    }

    public insertReminderPlan_result() {
    }

    public insertReminderPlan_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertReminderPlan_result(insertReminderPlan_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public insertReminderPlan_result deepCopy() {
      return new insertReminderPlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertReminderPlan_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public insertReminderPlan_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertReminderPlan_result)
        return this.equals((insertReminderPlan_result)that);
      return false;
    }

    public boolean equals(insertReminderPlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertReminderPlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertReminderPlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertReminderPlan_resultStandardSchemeFactory implements SchemeFactory {
      public insertReminderPlan_resultStandardScheme getScheme() {
        return new insertReminderPlan_resultStandardScheme();
      }
    }

    private static class insertReminderPlan_resultStandardScheme extends StandardScheme<insertReminderPlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertReminderPlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertReminderPlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertReminderPlan_resultTupleSchemeFactory implements SchemeFactory {
      public insertReminderPlan_resultTupleScheme getScheme() {
        return new insertReminderPlan_resultTupleScheme();
      }
    }

    private static class insertReminderPlan_resultTupleScheme extends TupleScheme<insertReminderPlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertReminderPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertReminderPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateReminderPlan_args implements org.apache.thrift.TBase<updateReminderPlan_args, updateReminderPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateReminderPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateReminderPlan_args");

    private static final org.apache.thrift.protocol.TField PROJECT_REMINDER_PLAN_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("projectReminderPlanDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateReminderPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateReminderPlan_argsTupleSchemeFactory());
    }

    public ProjectReminderPlanDto projectReminderPlanDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_REMINDER_PLAN_DTO((short)1, "projectReminderPlanDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_REMINDER_PLAN_DTO
            return PROJECT_REMINDER_PLAN_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_REMINDER_PLAN_DTO, new org.apache.thrift.meta_data.FieldMetaData("projectReminderPlanDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectReminderPlanDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateReminderPlan_args.class, metaDataMap);
    }

    public updateReminderPlan_args() {
    }

    public updateReminderPlan_args(
      ProjectReminderPlanDto projectReminderPlanDto)
    {
      this();
      this.projectReminderPlanDto = projectReminderPlanDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateReminderPlan_args(updateReminderPlan_args other) {
      if (other.isSetProjectReminderPlanDto()) {
        this.projectReminderPlanDto = new ProjectReminderPlanDto(other.projectReminderPlanDto);
      }
    }

    public updateReminderPlan_args deepCopy() {
      return new updateReminderPlan_args(this);
    }

    @Override
    public void clear() {
      this.projectReminderPlanDto = null;
    }

    public ProjectReminderPlanDto getProjectReminderPlanDto() {
      return this.projectReminderPlanDto;
    }

    public updateReminderPlan_args setProjectReminderPlanDto(ProjectReminderPlanDto projectReminderPlanDto) {
      this.projectReminderPlanDto = projectReminderPlanDto;
      return this;
    }

    public void unsetProjectReminderPlanDto() {
      this.projectReminderPlanDto = null;
    }

    /** Returns true if field projectReminderPlanDto is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectReminderPlanDto() {
      return this.projectReminderPlanDto != null;
    }

    public void setProjectReminderPlanDtoIsSet(boolean value) {
      if (!value) {
        this.projectReminderPlanDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        if (value == null) {
          unsetProjectReminderPlanDto();
        } else {
          setProjectReminderPlanDto((ProjectReminderPlanDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        return getProjectReminderPlanDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_REMINDER_PLAN_DTO:
        return isSetProjectReminderPlanDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateReminderPlan_args)
        return this.equals((updateReminderPlan_args)that);
      return false;
    }

    public boolean equals(updateReminderPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_projectReminderPlanDto = true && this.isSetProjectReminderPlanDto();
      boolean that_present_projectReminderPlanDto = true && that.isSetProjectReminderPlanDto();
      if (this_present_projectReminderPlanDto || that_present_projectReminderPlanDto) {
        if (!(this_present_projectReminderPlanDto && that_present_projectReminderPlanDto))
          return false;
        if (!this.projectReminderPlanDto.equals(that.projectReminderPlanDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectReminderPlanDto = true && (isSetProjectReminderPlanDto());
      list.add(present_projectReminderPlanDto);
      if (present_projectReminderPlanDto)
        list.add(projectReminderPlanDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateReminderPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectReminderPlanDto()).compareTo(other.isSetProjectReminderPlanDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectReminderPlanDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectReminderPlanDto, other.projectReminderPlanDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateReminderPlan_args(");
      boolean first = true;

      sb.append("projectReminderPlanDto:");
      if (this.projectReminderPlanDto == null) {
        sb.append("null");
      } else {
        sb.append(this.projectReminderPlanDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectReminderPlanDto != null) {
        projectReminderPlanDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateReminderPlan_argsStandardSchemeFactory implements SchemeFactory {
      public updateReminderPlan_argsStandardScheme getScheme() {
        return new updateReminderPlan_argsStandardScheme();
      }
    }

    private static class updateReminderPlan_argsStandardScheme extends StandardScheme<updateReminderPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateReminderPlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_REMINDER_PLAN_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectReminderPlanDto = new ProjectReminderPlanDto();
                struct.projectReminderPlanDto.read(iprot);
                struct.setProjectReminderPlanDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateReminderPlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectReminderPlanDto != null) {
          oprot.writeFieldBegin(PROJECT_REMINDER_PLAN_DTO_FIELD_DESC);
          struct.projectReminderPlanDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateReminderPlan_argsTupleSchemeFactory implements SchemeFactory {
      public updateReminderPlan_argsTupleScheme getScheme() {
        return new updateReminderPlan_argsTupleScheme();
      }
    }

    private static class updateReminderPlan_argsTupleScheme extends TupleScheme<updateReminderPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateReminderPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectReminderPlanDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectReminderPlanDto()) {
          struct.projectReminderPlanDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateReminderPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectReminderPlanDto = new ProjectReminderPlanDto();
          struct.projectReminderPlanDto.read(iprot);
          struct.setProjectReminderPlanDtoIsSet(true);
        }
      }
    }

  }

  public static class updateReminderPlan_result implements org.apache.thrift.TBase<updateReminderPlan_result, updateReminderPlan_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateReminderPlan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateReminderPlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateReminderPlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateReminderPlan_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateReminderPlan_result.class, metaDataMap);
    }

    public updateReminderPlan_result() {
    }

    public updateReminderPlan_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateReminderPlan_result(updateReminderPlan_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateReminderPlan_result deepCopy() {
      return new updateReminderPlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateReminderPlan_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateReminderPlan_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateReminderPlan_result)
        return this.equals((updateReminderPlan_result)that);
      return false;
    }

    public boolean equals(updateReminderPlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateReminderPlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateReminderPlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateReminderPlan_resultStandardSchemeFactory implements SchemeFactory {
      public updateReminderPlan_resultStandardScheme getScheme() {
        return new updateReminderPlan_resultStandardScheme();
      }
    }

    private static class updateReminderPlan_resultStandardScheme extends StandardScheme<updateReminderPlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateReminderPlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateReminderPlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateReminderPlan_resultTupleSchemeFactory implements SchemeFactory {
      public updateReminderPlan_resultTupleScheme getScheme() {
        return new updateReminderPlan_resultTupleScheme();
      }
    }

    private static class updateReminderPlan_resultTupleScheme extends TupleScheme<updateReminderPlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateReminderPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateReminderPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentCollectionList_args implements org.apache.thrift.TBase<getRepaymentCollectionList_args, getRepaymentCollectionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentCollectionList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentCollectionList_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentCollection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentCollectionList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentCollectionList_argsTupleSchemeFactory());
    }

    public RepaymentCollectionSearch repaymentCollection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_COLLECTION((short)1, "repaymentCollection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_COLLECTION
            return REPAYMENT_COLLECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("repaymentCollection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentCollectionSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentCollectionList_args.class, metaDataMap);
    }

    public getRepaymentCollectionList_args() {
    }

    public getRepaymentCollectionList_args(
      RepaymentCollectionSearch repaymentCollection)
    {
      this();
      this.repaymentCollection = repaymentCollection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentCollectionList_args(getRepaymentCollectionList_args other) {
      if (other.isSetRepaymentCollection()) {
        this.repaymentCollection = new RepaymentCollectionSearch(other.repaymentCollection);
      }
    }

    public getRepaymentCollectionList_args deepCopy() {
      return new getRepaymentCollectionList_args(this);
    }

    @Override
    public void clear() {
      this.repaymentCollection = null;
    }

    public RepaymentCollectionSearch getRepaymentCollection() {
      return this.repaymentCollection;
    }

    public getRepaymentCollectionList_args setRepaymentCollection(RepaymentCollectionSearch repaymentCollection) {
      this.repaymentCollection = repaymentCollection;
      return this;
    }

    public void unsetRepaymentCollection() {
      this.repaymentCollection = null;
    }

    /** Returns true if field repaymentCollection is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentCollection() {
      return this.repaymentCollection != null;
    }

    public void setRepaymentCollectionIsSet(boolean value) {
      if (!value) {
        this.repaymentCollection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_COLLECTION:
        if (value == null) {
          unsetRepaymentCollection();
        } else {
          setRepaymentCollection((RepaymentCollectionSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_COLLECTION:
        return getRepaymentCollection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_COLLECTION:
        return isSetRepaymentCollection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentCollectionList_args)
        return this.equals((getRepaymentCollectionList_args)that);
      return false;
    }

    public boolean equals(getRepaymentCollectionList_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentCollection = true && this.isSetRepaymentCollection();
      boolean that_present_repaymentCollection = true && that.isSetRepaymentCollection();
      if (this_present_repaymentCollection || that_present_repaymentCollection) {
        if (!(this_present_repaymentCollection && that_present_repaymentCollection))
          return false;
        if (!this.repaymentCollection.equals(that.repaymentCollection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentCollection = true && (isSetRepaymentCollection());
      list.add(present_repaymentCollection);
      if (present_repaymentCollection)
        list.add(repaymentCollection);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentCollectionList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentCollection()).compareTo(other.isSetRepaymentCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentCollection, other.repaymentCollection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentCollectionList_args(");
      boolean first = true;

      sb.append("repaymentCollection:");
      if (this.repaymentCollection == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentCollection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentCollection != null) {
        repaymentCollection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentCollectionList_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionList_argsStandardScheme getScheme() {
        return new getRepaymentCollectionList_argsStandardScheme();
      }
    }

    private static class getRepaymentCollectionList_argsStandardScheme extends StandardScheme<getRepaymentCollectionList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentCollectionList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentCollection = new RepaymentCollectionSearch();
                struct.repaymentCollection.read(iprot);
                struct.setRepaymentCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentCollectionList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentCollection != null) {
          oprot.writeFieldBegin(REPAYMENT_COLLECTION_FIELD_DESC);
          struct.repaymentCollection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentCollectionList_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionList_argsTupleScheme getScheme() {
        return new getRepaymentCollectionList_argsTupleScheme();
      }
    }

    private static class getRepaymentCollectionList_argsTupleScheme extends TupleScheme<getRepaymentCollectionList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentCollection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentCollection()) {
          struct.repaymentCollection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentCollection = new RepaymentCollectionSearch();
          struct.repaymentCollection.read(iprot);
          struct.setRepaymentCollectionIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentCollectionList_result implements org.apache.thrift.TBase<getRepaymentCollectionList_result, getRepaymentCollectionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentCollectionList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentCollectionList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentCollectionList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentCollectionList_resultTupleSchemeFactory());
    }

    public List<RepaymentCollection> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentCollection.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentCollectionList_result.class, metaDataMap);
    }

    public getRepaymentCollectionList_result() {
    }

    public getRepaymentCollectionList_result(
      List<RepaymentCollection> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentCollectionList_result(getRepaymentCollectionList_result other) {
      if (other.isSetSuccess()) {
        List<RepaymentCollection> __this__success = new ArrayList<RepaymentCollection>(other.success.size());
        for (RepaymentCollection other_element : other.success) {
          __this__success.add(new RepaymentCollection(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRepaymentCollectionList_result deepCopy() {
      return new getRepaymentCollectionList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepaymentCollection> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepaymentCollection elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepaymentCollection>();
      }
      this.success.add(elem);
    }

    public List<RepaymentCollection> getSuccess() {
      return this.success;
    }

    public getRepaymentCollectionList_result setSuccess(List<RepaymentCollection> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepaymentCollection>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentCollectionList_result)
        return this.equals((getRepaymentCollectionList_result)that);
      return false;
    }

    public boolean equals(getRepaymentCollectionList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentCollectionList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentCollectionList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentCollectionList_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionList_resultStandardScheme getScheme() {
        return new getRepaymentCollectionList_resultStandardScheme();
      }
    }

    private static class getRepaymentCollectionList_resultStandardScheme extends StandardScheme<getRepaymentCollectionList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentCollectionList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.success = new ArrayList<RepaymentCollection>(_list186.size);
                  RepaymentCollection _elem187;
                  for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                  {
                    _elem187 = new RepaymentCollection();
                    _elem187.read(iprot);
                    struct.success.add(_elem187);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentCollectionList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepaymentCollection _iter189 : struct.success)
            {
              _iter189.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentCollectionList_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionList_resultTupleScheme getScheme() {
        return new getRepaymentCollectionList_resultTupleScheme();
      }
    }

    private static class getRepaymentCollectionList_resultTupleScheme extends TupleScheme<getRepaymentCollectionList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepaymentCollection _iter190 : struct.success)
            {
              _iter190.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepaymentCollection>(_list191.size);
            RepaymentCollection _elem192;
            for (int _i193 = 0; _i193 < _list191.size; ++_i193)
            {
              _elem192 = new RepaymentCollection();
              _elem192.read(iprot);
              struct.success.add(_elem192);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectionCustomer_args implements org.apache.thrift.TBase<getCollectionCustomer_args, getCollectionCustomer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionCustomer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionCustomer_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionCustomer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionCustomer_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionCustomer_args.class, metaDataMap);
    }

    public getCollectionCustomer_args() {
    }

    public getCollectionCustomer_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionCustomer_args(getCollectionCustomer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getCollectionCustomer_args deepCopy() {
      return new getCollectionCustomer_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getCollectionCustomer_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionCustomer_args)
        return this.equals((getCollectionCustomer_args)that);
      return false;
    }

    public boolean equals(getCollectionCustomer_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionCustomer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionCustomer_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionCustomer_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectionCustomer_argsStandardScheme getScheme() {
        return new getCollectionCustomer_argsStandardScheme();
      }
    }

    private static class getCollectionCustomer_argsStandardScheme extends StandardScheme<getCollectionCustomer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionCustomer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionCustomer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionCustomer_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectionCustomer_argsTupleScheme getScheme() {
        return new getCollectionCustomer_argsTupleScheme();
      }
    }

    private static class getCollectionCustomer_argsTupleScheme extends TupleScheme<getCollectionCustomer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionCustomer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionCustomer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getCollectionCustomer_result implements org.apache.thrift.TBase<getCollectionCustomer_result, getCollectionCustomer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionCustomer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionCustomer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionCustomer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionCustomer_resultTupleSchemeFactory());
    }

    public CollectionCustomer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionCustomer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionCustomer_result.class, metaDataMap);
    }

    public getCollectionCustomer_result() {
    }

    public getCollectionCustomer_result(
      CollectionCustomer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionCustomer_result(getCollectionCustomer_result other) {
      if (other.isSetSuccess()) {
        this.success = new CollectionCustomer(other.success);
      }
    }

    public getCollectionCustomer_result deepCopy() {
      return new getCollectionCustomer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CollectionCustomer getSuccess() {
      return this.success;
    }

    public getCollectionCustomer_result setSuccess(CollectionCustomer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CollectionCustomer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionCustomer_result)
        return this.equals((getCollectionCustomer_result)that);
      return false;
    }

    public boolean equals(getCollectionCustomer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionCustomer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionCustomer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionCustomer_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectionCustomer_resultStandardScheme getScheme() {
        return new getCollectionCustomer_resultStandardScheme();
      }
    }

    private static class getCollectionCustomer_resultStandardScheme extends StandardScheme<getCollectionCustomer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionCustomer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CollectionCustomer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionCustomer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionCustomer_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectionCustomer_resultTupleScheme getScheme() {
        return new getCollectionCustomer_resultTupleScheme();
      }
    }

    private static class getCollectionCustomer_resultTupleScheme extends TupleScheme<getCollectionCustomer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionCustomer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionCustomer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CollectionCustomer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectionCusComContact_args implements org.apache.thrift.TBase<getCollectionCusComContact_args, getCollectionCusComContact_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionCusComContact_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionCusComContact_args");

    private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionCusComContact_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionCusComContact_argsTupleSchemeFactory());
    }

    public int acctId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCT_ID((short)1, "acctId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCT_ID
            return ACCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionCusComContact_args.class, metaDataMap);
    }

    public getCollectionCusComContact_args() {
    }

    public getCollectionCusComContact_args(
      int acctId)
    {
      this();
      this.acctId = acctId;
      setAcctIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionCusComContact_args(getCollectionCusComContact_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.acctId = other.acctId;
    }

    public getCollectionCusComContact_args deepCopy() {
      return new getCollectionCusComContact_args(this);
    }

    @Override
    public void clear() {
      setAcctIdIsSet(false);
      this.acctId = 0;
    }

    public int getAcctId() {
      return this.acctId;
    }

    public getCollectionCusComContact_args setAcctId(int acctId) {
      this.acctId = acctId;
      setAcctIdIsSet(true);
      return this;
    }

    public void unsetAcctId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
    public boolean isSetAcctId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    public void setAcctIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCT_ID:
        if (value == null) {
          unsetAcctId();
        } else {
          setAcctId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCT_ID:
        return Integer.valueOf(getAcctId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCT_ID:
        return isSetAcctId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionCusComContact_args)
        return this.equals((getCollectionCusComContact_args)that);
      return false;
    }

    public boolean equals(getCollectionCusComContact_args that) {
      if (that == null)
        return false;

      boolean this_present_acctId = true;
      boolean that_present_acctId = true;
      if (this_present_acctId || that_present_acctId) {
        if (!(this_present_acctId && that_present_acctId))
          return false;
        if (this.acctId != that.acctId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_acctId = true;
      list.add(present_acctId);
      if (present_acctId)
        list.add(acctId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionCusComContact_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAcctId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionCusComContact_args(");
      boolean first = true;

      sb.append("acctId:");
      sb.append(this.acctId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionCusComContact_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectionCusComContact_argsStandardScheme getScheme() {
        return new getCollectionCusComContact_argsStandardScheme();
      }
    }

    private static class getCollectionCusComContact_argsStandardScheme extends StandardScheme<getCollectionCusComContact_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionCusComContact_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.acctId = iprot.readI32();
                struct.setAcctIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionCusComContact_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
        oprot.writeI32(struct.acctId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionCusComContact_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectionCusComContact_argsTupleScheme getScheme() {
        return new getCollectionCusComContact_argsTupleScheme();
      }
    }

    private static class getCollectionCusComContact_argsTupleScheme extends TupleScheme<getCollectionCusComContact_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionCusComContact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAcctId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAcctId()) {
          oprot.writeI32(struct.acctId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionCusComContact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.acctId = iprot.readI32();
          struct.setAcctIdIsSet(true);
        }
      }
    }

  }

  public static class getCollectionCusComContact_result implements org.apache.thrift.TBase<getCollectionCusComContact_result, getCollectionCusComContact_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionCusComContact_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionCusComContact_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionCusComContact_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionCusComContact_resultTupleSchemeFactory());
    }

    public List<CollectionCusComContact> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionCusComContact.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionCusComContact_result.class, metaDataMap);
    }

    public getCollectionCusComContact_result() {
    }

    public getCollectionCusComContact_result(
      List<CollectionCusComContact> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionCusComContact_result(getCollectionCusComContact_result other) {
      if (other.isSetSuccess()) {
        List<CollectionCusComContact> __this__success = new ArrayList<CollectionCusComContact>(other.success.size());
        for (CollectionCusComContact other_element : other.success) {
          __this__success.add(new CollectionCusComContact(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCollectionCusComContact_result deepCopy() {
      return new getCollectionCusComContact_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectionCusComContact> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectionCusComContact elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectionCusComContact>();
      }
      this.success.add(elem);
    }

    public List<CollectionCusComContact> getSuccess() {
      return this.success;
    }

    public getCollectionCusComContact_result setSuccess(List<CollectionCusComContact> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectionCusComContact>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionCusComContact_result)
        return this.equals((getCollectionCusComContact_result)that);
      return false;
    }

    public boolean equals(getCollectionCusComContact_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionCusComContact_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionCusComContact_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionCusComContact_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectionCusComContact_resultStandardScheme getScheme() {
        return new getCollectionCusComContact_resultStandardScheme();
      }
    }

    private static class getCollectionCusComContact_resultStandardScheme extends StandardScheme<getCollectionCusComContact_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionCusComContact_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectionCusComContact>(_list194.size);
                  CollectionCusComContact _elem195;
                  for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                  {
                    _elem195 = new CollectionCusComContact();
                    _elem195.read(iprot);
                    struct.success.add(_elem195);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionCusComContact_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectionCusComContact _iter197 : struct.success)
            {
              _iter197.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionCusComContact_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectionCusComContact_resultTupleScheme getScheme() {
        return new getCollectionCusComContact_resultTupleScheme();
      }
    }

    private static class getCollectionCusComContact_resultTupleScheme extends TupleScheme<getCollectionCusComContact_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionCusComContact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectionCusComContact _iter198 : struct.success)
            {
              _iter198.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionCusComContact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectionCusComContact>(_list199.size);
            CollectionCusComContact _elem200;
            for (int _i201 = 0; _i201 < _list199.size; ++_i201)
            {
              _elem200 = new CollectionCusComContact();
              _elem200.read(iprot);
              struct.success.add(_elem200);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentCollectionTotal_args implements org.apache.thrift.TBase<getRepaymentCollectionTotal_args, getRepaymentCollectionTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentCollectionTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentCollectionTotal_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentCollection", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentCollectionTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentCollectionTotal_argsTupleSchemeFactory());
    }

    public RepaymentCollectionSearch repaymentCollection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_COLLECTION((short)1, "repaymentCollection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_COLLECTION
            return REPAYMENT_COLLECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("repaymentCollection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentCollectionSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentCollectionTotal_args.class, metaDataMap);
    }

    public getRepaymentCollectionTotal_args() {
    }

    public getRepaymentCollectionTotal_args(
      RepaymentCollectionSearch repaymentCollection)
    {
      this();
      this.repaymentCollection = repaymentCollection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentCollectionTotal_args(getRepaymentCollectionTotal_args other) {
      if (other.isSetRepaymentCollection()) {
        this.repaymentCollection = new RepaymentCollectionSearch(other.repaymentCollection);
      }
    }

    public getRepaymentCollectionTotal_args deepCopy() {
      return new getRepaymentCollectionTotal_args(this);
    }

    @Override
    public void clear() {
      this.repaymentCollection = null;
    }

    public RepaymentCollectionSearch getRepaymentCollection() {
      return this.repaymentCollection;
    }

    public getRepaymentCollectionTotal_args setRepaymentCollection(RepaymentCollectionSearch repaymentCollection) {
      this.repaymentCollection = repaymentCollection;
      return this;
    }

    public void unsetRepaymentCollection() {
      this.repaymentCollection = null;
    }

    /** Returns true if field repaymentCollection is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentCollection() {
      return this.repaymentCollection != null;
    }

    public void setRepaymentCollectionIsSet(boolean value) {
      if (!value) {
        this.repaymentCollection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_COLLECTION:
        if (value == null) {
          unsetRepaymentCollection();
        } else {
          setRepaymentCollection((RepaymentCollectionSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_COLLECTION:
        return getRepaymentCollection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_COLLECTION:
        return isSetRepaymentCollection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentCollectionTotal_args)
        return this.equals((getRepaymentCollectionTotal_args)that);
      return false;
    }

    public boolean equals(getRepaymentCollectionTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentCollection = true && this.isSetRepaymentCollection();
      boolean that_present_repaymentCollection = true && that.isSetRepaymentCollection();
      if (this_present_repaymentCollection || that_present_repaymentCollection) {
        if (!(this_present_repaymentCollection && that_present_repaymentCollection))
          return false;
        if (!this.repaymentCollection.equals(that.repaymentCollection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentCollection = true && (isSetRepaymentCollection());
      list.add(present_repaymentCollection);
      if (present_repaymentCollection)
        list.add(repaymentCollection);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentCollectionTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentCollection()).compareTo(other.isSetRepaymentCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentCollection, other.repaymentCollection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentCollectionTotal_args(");
      boolean first = true;

      sb.append("repaymentCollection:");
      if (this.repaymentCollection == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentCollection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentCollection != null) {
        repaymentCollection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentCollectionTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionTotal_argsStandardScheme getScheme() {
        return new getRepaymentCollectionTotal_argsStandardScheme();
      }
    }

    private static class getRepaymentCollectionTotal_argsStandardScheme extends StandardScheme<getRepaymentCollectionTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentCollectionTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentCollection = new RepaymentCollectionSearch();
                struct.repaymentCollection.read(iprot);
                struct.setRepaymentCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentCollectionTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentCollection != null) {
          oprot.writeFieldBegin(REPAYMENT_COLLECTION_FIELD_DESC);
          struct.repaymentCollection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentCollectionTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionTotal_argsTupleScheme getScheme() {
        return new getRepaymentCollectionTotal_argsTupleScheme();
      }
    }

    private static class getRepaymentCollectionTotal_argsTupleScheme extends TupleScheme<getRepaymentCollectionTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentCollection()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentCollection()) {
          struct.repaymentCollection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentCollection = new RepaymentCollectionSearch();
          struct.repaymentCollection.read(iprot);
          struct.setRepaymentCollectionIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentCollectionTotal_result implements org.apache.thrift.TBase<getRepaymentCollectionTotal_result, getRepaymentCollectionTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentCollectionTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentCollectionTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentCollectionTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentCollectionTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentCollectionTotal_result.class, metaDataMap);
    }

    public getRepaymentCollectionTotal_result() {
    }

    public getRepaymentCollectionTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentCollectionTotal_result(getRepaymentCollectionTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRepaymentCollectionTotal_result deepCopy() {
      return new getRepaymentCollectionTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRepaymentCollectionTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentCollectionTotal_result)
        return this.equals((getRepaymentCollectionTotal_result)that);
      return false;
    }

    public boolean equals(getRepaymentCollectionTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentCollectionTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentCollectionTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentCollectionTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionTotal_resultStandardScheme getScheme() {
        return new getRepaymentCollectionTotal_resultStandardScheme();
      }
    }

    private static class getRepaymentCollectionTotal_resultStandardScheme extends StandardScheme<getRepaymentCollectionTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentCollectionTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentCollectionTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentCollectionTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentCollectionTotal_resultTupleScheme getScheme() {
        return new getRepaymentCollectionTotal_resultTupleScheme();
      }
    }

    private static class getRepaymentCollectionTotal_resultTupleScheme extends TupleScheme<getRepaymentCollectionTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentCollectionTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAssignmentDistributionTotal_args implements org.apache.thrift.TBase<getAssignmentDistributionTotal_args, getAssignmentDistributionTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssignmentDistributionTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssignmentDistributionTotal_args");

    private static final org.apache.thrift.protocol.TField ASSIGNMENT_DISTRIBUTION_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("assignmentDistributionSearch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssignmentDistributionTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssignmentDistributionTotal_argsTupleSchemeFactory());
    }

    public AssignmentDistributionSearch assignmentDistributionSearch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSIGNMENT_DISTRIBUTION_SEARCH((short)1, "assignmentDistributionSearch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSIGNMENT_DISTRIBUTION_SEARCH
            return ASSIGNMENT_DISTRIBUTION_SEARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSIGNMENT_DISTRIBUTION_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("assignmentDistributionSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssignmentDistributionSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssignmentDistributionTotal_args.class, metaDataMap);
    }

    public getAssignmentDistributionTotal_args() {
    }

    public getAssignmentDistributionTotal_args(
      AssignmentDistributionSearch assignmentDistributionSearch)
    {
      this();
      this.assignmentDistributionSearch = assignmentDistributionSearch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssignmentDistributionTotal_args(getAssignmentDistributionTotal_args other) {
      if (other.isSetAssignmentDistributionSearch()) {
        this.assignmentDistributionSearch = new AssignmentDistributionSearch(other.assignmentDistributionSearch);
      }
    }

    public getAssignmentDistributionTotal_args deepCopy() {
      return new getAssignmentDistributionTotal_args(this);
    }

    @Override
    public void clear() {
      this.assignmentDistributionSearch = null;
    }

    public AssignmentDistributionSearch getAssignmentDistributionSearch() {
      return this.assignmentDistributionSearch;
    }

    public getAssignmentDistributionTotal_args setAssignmentDistributionSearch(AssignmentDistributionSearch assignmentDistributionSearch) {
      this.assignmentDistributionSearch = assignmentDistributionSearch;
      return this;
    }

    public void unsetAssignmentDistributionSearch() {
      this.assignmentDistributionSearch = null;
    }

    /** Returns true if field assignmentDistributionSearch is set (has been assigned a value) and false otherwise */
    public boolean isSetAssignmentDistributionSearch() {
      return this.assignmentDistributionSearch != null;
    }

    public void setAssignmentDistributionSearchIsSet(boolean value) {
      if (!value) {
        this.assignmentDistributionSearch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        if (value == null) {
          unsetAssignmentDistributionSearch();
        } else {
          setAssignmentDistributionSearch((AssignmentDistributionSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        return getAssignmentDistributionSearch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSIGNMENT_DISTRIBUTION_SEARCH:
        return isSetAssignmentDistributionSearch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssignmentDistributionTotal_args)
        return this.equals((getAssignmentDistributionTotal_args)that);
      return false;
    }

    public boolean equals(getAssignmentDistributionTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_assignmentDistributionSearch = true && this.isSetAssignmentDistributionSearch();
      boolean that_present_assignmentDistributionSearch = true && that.isSetAssignmentDistributionSearch();
      if (this_present_assignmentDistributionSearch || that_present_assignmentDistributionSearch) {
        if (!(this_present_assignmentDistributionSearch && that_present_assignmentDistributionSearch))
          return false;
        if (!this.assignmentDistributionSearch.equals(that.assignmentDistributionSearch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_assignmentDistributionSearch = true && (isSetAssignmentDistributionSearch());
      list.add(present_assignmentDistributionSearch);
      if (present_assignmentDistributionSearch)
        list.add(assignmentDistributionSearch);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAssignmentDistributionTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssignmentDistributionSearch()).compareTo(other.isSetAssignmentDistributionSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssignmentDistributionSearch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignmentDistributionSearch, other.assignmentDistributionSearch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssignmentDistributionTotal_args(");
      boolean first = true;

      sb.append("assignmentDistributionSearch:");
      if (this.assignmentDistributionSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.assignmentDistributionSearch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (assignmentDistributionSearch != null) {
        assignmentDistributionSearch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssignmentDistributionTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getAssignmentDistributionTotal_argsStandardScheme getScheme() {
        return new getAssignmentDistributionTotal_argsStandardScheme();
      }
    }

    private static class getAssignmentDistributionTotal_argsStandardScheme extends StandardScheme<getAssignmentDistributionTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssignmentDistributionTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSIGNMENT_DISTRIBUTION_SEARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.assignmentDistributionSearch = new AssignmentDistributionSearch();
                struct.assignmentDistributionSearch.read(iprot);
                struct.setAssignmentDistributionSearchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssignmentDistributionTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assignmentDistributionSearch != null) {
          oprot.writeFieldBegin(ASSIGNMENT_DISTRIBUTION_SEARCH_FIELD_DESC);
          struct.assignmentDistributionSearch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssignmentDistributionTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getAssignmentDistributionTotal_argsTupleScheme getScheme() {
        return new getAssignmentDistributionTotal_argsTupleScheme();
      }
    }

    private static class getAssignmentDistributionTotal_argsTupleScheme extends TupleScheme<getAssignmentDistributionTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistributionTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssignmentDistributionSearch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAssignmentDistributionSearch()) {
          struct.assignmentDistributionSearch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistributionTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.assignmentDistributionSearch = new AssignmentDistributionSearch();
          struct.assignmentDistributionSearch.read(iprot);
          struct.setAssignmentDistributionSearchIsSet(true);
        }
      }
    }

  }

  public static class getAssignmentDistributionTotal_result implements org.apache.thrift.TBase<getAssignmentDistributionTotal_result, getAssignmentDistributionTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssignmentDistributionTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssignmentDistributionTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssignmentDistributionTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssignmentDistributionTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssignmentDistributionTotal_result.class, metaDataMap);
    }

    public getAssignmentDistributionTotal_result() {
    }

    public getAssignmentDistributionTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssignmentDistributionTotal_result(getAssignmentDistributionTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAssignmentDistributionTotal_result deepCopy() {
      return new getAssignmentDistributionTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAssignmentDistributionTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssignmentDistributionTotal_result)
        return this.equals((getAssignmentDistributionTotal_result)that);
      return false;
    }

    public boolean equals(getAssignmentDistributionTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAssignmentDistributionTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssignmentDistributionTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssignmentDistributionTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getAssignmentDistributionTotal_resultStandardScheme getScheme() {
        return new getAssignmentDistributionTotal_resultStandardScheme();
      }
    }

    private static class getAssignmentDistributionTotal_resultStandardScheme extends StandardScheme<getAssignmentDistributionTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssignmentDistributionTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssignmentDistributionTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssignmentDistributionTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getAssignmentDistributionTotal_resultTupleScheme getScheme() {
        return new getAssignmentDistributionTotal_resultTupleScheme();
      }
    }

    private static class getAssignmentDistributionTotal_resultTupleScheme extends TupleScheme<getAssignmentDistributionTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistributionTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssignmentDistributionTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecordsByProjectIds_args implements org.apache.thrift.TBase<getCollectionRecordsByProjectIds_args, getCollectionRecordsByProjectIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecordsByProjectIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecordsByProjectIds_args");

    private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecordsByProjectIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecordsByProjectIds_argsTupleSchemeFactory());
    }

    public String pids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIDS((short)1, "pids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIDS
            return PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecordsByProjectIds_args.class, metaDataMap);
    }

    public getCollectionRecordsByProjectIds_args() {
    }

    public getCollectionRecordsByProjectIds_args(
      String pids)
    {
      this();
      this.pids = pids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecordsByProjectIds_args(getCollectionRecordsByProjectIds_args other) {
      if (other.isSetPids()) {
        this.pids = other.pids;
      }
    }

    public getCollectionRecordsByProjectIds_args deepCopy() {
      return new getCollectionRecordsByProjectIds_args(this);
    }

    @Override
    public void clear() {
      this.pids = null;
    }

    public String getPids() {
      return this.pids;
    }

    public getCollectionRecordsByProjectIds_args setPids(String pids) {
      this.pids = pids;
      return this;
    }

    public void unsetPids() {
      this.pids = null;
    }

    /** Returns true if field pids is set (has been assigned a value) and false otherwise */
    public boolean isSetPids() {
      return this.pids != null;
    }

    public void setPidsIsSet(boolean value) {
      if (!value) {
        this.pids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIDS:
        if (value == null) {
          unsetPids();
        } else {
          setPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIDS:
        return getPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIDS:
        return isSetPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecordsByProjectIds_args)
        return this.equals((getCollectionRecordsByProjectIds_args)that);
      return false;
    }

    public boolean equals(getCollectionRecordsByProjectIds_args that) {
      if (that == null)
        return false;

      boolean this_present_pids = true && this.isSetPids();
      boolean that_present_pids = true && that.isSetPids();
      if (this_present_pids || that_present_pids) {
        if (!(this_present_pids && that_present_pids))
          return false;
        if (!this.pids.equals(that.pids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pids = true && (isSetPids());
      list.add(present_pids);
      if (present_pids)
        list.add(pids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecordsByProjectIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecordsByProjectIds_args(");
      boolean first = true;

      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecordsByProjectIds_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecordsByProjectIds_argsStandardScheme getScheme() {
        return new getCollectionRecordsByProjectIds_argsStandardScheme();
      }
    }

    private static class getCollectionRecordsByProjectIds_argsStandardScheme extends StandardScheme<getCollectionRecordsByProjectIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecordsByProjectIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pids = iprot.readString();
                struct.setPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecordsByProjectIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pids != null) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          oprot.writeString(struct.pids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecordsByProjectIds_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecordsByProjectIds_argsTupleScheme getScheme() {
        return new getCollectionRecordsByProjectIds_argsTupleScheme();
      }
    }

    private static class getCollectionRecordsByProjectIds_argsTupleScheme extends TupleScheme<getCollectionRecordsByProjectIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordsByProjectIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPids()) {
          oprot.writeString(struct.pids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordsByProjectIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pids = iprot.readString();
          struct.setPidsIsSet(true);
        }
      }
    }

  }

  public static class getCollectionRecordsByProjectIds_result implements org.apache.thrift.TBase<getCollectionRecordsByProjectIds_result, getCollectionRecordsByProjectIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectionRecordsByProjectIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectionRecordsByProjectIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectionRecordsByProjectIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectionRecordsByProjectIds_resultTupleSchemeFactory());
    }

    public List<CollectionRecord> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectionRecordsByProjectIds_result.class, metaDataMap);
    }

    public getCollectionRecordsByProjectIds_result() {
    }

    public getCollectionRecordsByProjectIds_result(
      List<CollectionRecord> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectionRecordsByProjectIds_result(getCollectionRecordsByProjectIds_result other) {
      if (other.isSetSuccess()) {
        List<CollectionRecord> __this__success = new ArrayList<CollectionRecord>(other.success.size());
        for (CollectionRecord other_element : other.success) {
          __this__success.add(new CollectionRecord(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCollectionRecordsByProjectIds_result deepCopy() {
      return new getCollectionRecordsByProjectIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectionRecord> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectionRecord elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectionRecord>();
      }
      this.success.add(elem);
    }

    public List<CollectionRecord> getSuccess() {
      return this.success;
    }

    public getCollectionRecordsByProjectIds_result setSuccess(List<CollectionRecord> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectionRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectionRecordsByProjectIds_result)
        return this.equals((getCollectionRecordsByProjectIds_result)that);
      return false;
    }

    public boolean equals(getCollectionRecordsByProjectIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectionRecordsByProjectIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectionRecordsByProjectIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectionRecordsByProjectIds_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectionRecordsByProjectIds_resultStandardScheme getScheme() {
        return new getCollectionRecordsByProjectIds_resultStandardScheme();
      }
    }

    private static class getCollectionRecordsByProjectIds_resultStandardScheme extends StandardScheme<getCollectionRecordsByProjectIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectionRecordsByProjectIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectionRecord>(_list202.size);
                  CollectionRecord _elem203;
                  for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                  {
                    _elem203 = new CollectionRecord();
                    _elem203.read(iprot);
                    struct.success.add(_elem203);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectionRecordsByProjectIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectionRecord _iter205 : struct.success)
            {
              _iter205.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectionRecordsByProjectIds_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectionRecordsByProjectIds_resultTupleScheme getScheme() {
        return new getCollectionRecordsByProjectIds_resultTupleScheme();
      }
    }

    private static class getCollectionRecordsByProjectIds_resultTupleScheme extends TupleScheme<getCollectionRecordsByProjectIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordsByProjectIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectionRecord _iter206 : struct.success)
            {
              _iter206.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectionRecordsByProjectIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectionRecord>(_list207.size);
            CollectionRecord _elem208;
            for (int _i209 = 0; _i209 < _list207.size; ++_i209)
            {
              _elem208 = new CollectionRecord();
              _elem208.read(iprot);
              struct.success.add(_elem208);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNoticeCurrentSeq_args implements org.apache.thrift.TBase<getNoticeCurrentSeq_args, getNoticeCurrentSeq_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNoticeCurrentSeq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoticeCurrentSeq_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoticeCurrentSeq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoticeCurrentSeq_argsTupleSchemeFactory());
    }

    public String year; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoticeCurrentSeq_args.class, metaDataMap);
    }

    public getNoticeCurrentSeq_args() {
    }

    public getNoticeCurrentSeq_args(
      String year)
    {
      this();
      this.year = year;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoticeCurrentSeq_args(getNoticeCurrentSeq_args other) {
      if (other.isSetYear()) {
        this.year = other.year;
      }
    }

    public getNoticeCurrentSeq_args deepCopy() {
      return new getNoticeCurrentSeq_args(this);
    }

    @Override
    public void clear() {
      this.year = null;
    }

    public String getYear() {
      return this.year;
    }

    public getNoticeCurrentSeq_args setYear(String year) {
      this.year = year;
      return this;
    }

    public void unsetYear() {
      this.year = null;
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return this.year != null;
    }

    public void setYearIsSet(boolean value) {
      if (!value) {
        this.year = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return getYear();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoticeCurrentSeq_args)
        return this.equals((getNoticeCurrentSeq_args)that);
      return false;
    }

    public boolean equals(getNoticeCurrentSeq_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true && this.isSetYear();
      boolean that_present_year = true && that.isSetYear();
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (!this.year.equals(that.year))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_year = true && (isSetYear());
      list.add(present_year);
      if (present_year)
        list.add(year);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNoticeCurrentSeq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoticeCurrentSeq_args(");
      boolean first = true;

      sb.append("year:");
      if (this.year == null) {
        sb.append("null");
      } else {
        sb.append(this.year);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoticeCurrentSeq_argsStandardSchemeFactory implements SchemeFactory {
      public getNoticeCurrentSeq_argsStandardScheme getScheme() {
        return new getNoticeCurrentSeq_argsStandardScheme();
      }
    }

    private static class getNoticeCurrentSeq_argsStandardScheme extends StandardScheme<getNoticeCurrentSeq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.year = iprot.readString();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.year != null) {
          oprot.writeFieldBegin(YEAR_FIELD_DESC);
          oprot.writeString(struct.year);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoticeCurrentSeq_argsTupleSchemeFactory implements SchemeFactory {
      public getNoticeCurrentSeq_argsTupleScheme getScheme() {
        return new getNoticeCurrentSeq_argsTupleScheme();
      }
    }

    private static class getNoticeCurrentSeq_argsTupleScheme extends TupleScheme<getNoticeCurrentSeq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetYear()) {
          oprot.writeString(struct.year);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.year = iprot.readString();
          struct.setYearIsSet(true);
        }
      }
    }

  }

  public static class getNoticeCurrentSeq_result implements org.apache.thrift.TBase<getNoticeCurrentSeq_result, getNoticeCurrentSeq_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNoticeCurrentSeq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoticeCurrentSeq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoticeCurrentSeq_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoticeCurrentSeq_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoticeCurrentSeq_result.class, metaDataMap);
    }

    public getNoticeCurrentSeq_result() {
    }

    public getNoticeCurrentSeq_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoticeCurrentSeq_result(getNoticeCurrentSeq_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getNoticeCurrentSeq_result deepCopy() {
      return new getNoticeCurrentSeq_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getNoticeCurrentSeq_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getNoticeCurrentSeq_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoticeCurrentSeq_result)
        return this.equals((getNoticeCurrentSeq_result)that);
      return false;
    }

    public boolean equals(getNoticeCurrentSeq_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNoticeCurrentSeq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoticeCurrentSeq_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoticeCurrentSeq_resultStandardSchemeFactory implements SchemeFactory {
      public getNoticeCurrentSeq_resultStandardScheme getScheme() {
        return new getNoticeCurrentSeq_resultStandardScheme();
      }
    }

    private static class getNoticeCurrentSeq_resultStandardScheme extends StandardScheme<getNoticeCurrentSeq_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoticeCurrentSeq_resultTupleSchemeFactory implements SchemeFactory {
      public getNoticeCurrentSeq_resultTupleScheme getScheme() {
        return new getNoticeCurrentSeq_resultTupleScheme();
      }
    }

    private static class getNoticeCurrentSeq_resultTupleScheme extends TupleScheme<getNoticeCurrentSeq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateNoticeCurrentSeq_args implements org.apache.thrift.TBase<updateNoticeCurrentSeq_args, updateNoticeCurrentSeq_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNoticeCurrentSeq_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNoticeCurrentSeq_args");

    private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNoticeCurrentSeq_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNoticeCurrentSeq_argsTupleSchemeFactory());
    }

    public String year; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      YEAR((short)1, "year");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // YEAR
            return YEAR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNoticeCurrentSeq_args.class, metaDataMap);
    }

    public updateNoticeCurrentSeq_args() {
    }

    public updateNoticeCurrentSeq_args(
      String year)
    {
      this();
      this.year = year;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNoticeCurrentSeq_args(updateNoticeCurrentSeq_args other) {
      if (other.isSetYear()) {
        this.year = other.year;
      }
    }

    public updateNoticeCurrentSeq_args deepCopy() {
      return new updateNoticeCurrentSeq_args(this);
    }

    @Override
    public void clear() {
      this.year = null;
    }

    public String getYear() {
      return this.year;
    }

    public updateNoticeCurrentSeq_args setYear(String year) {
      this.year = year;
      return this;
    }

    public void unsetYear() {
      this.year = null;
    }

    /** Returns true if field year is set (has been assigned a value) and false otherwise */
    public boolean isSetYear() {
      return this.year != null;
    }

    public void setYearIsSet(boolean value) {
      if (!value) {
        this.year = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          setYear((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case YEAR:
        return getYear();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case YEAR:
        return isSetYear();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNoticeCurrentSeq_args)
        return this.equals((updateNoticeCurrentSeq_args)that);
      return false;
    }

    public boolean equals(updateNoticeCurrentSeq_args that) {
      if (that == null)
        return false;

      boolean this_present_year = true && this.isSetYear();
      boolean that_present_year = true && that.isSetYear();
      if (this_present_year || that_present_year) {
        if (!(this_present_year && that_present_year))
          return false;
        if (!this.year.equals(that.year))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_year = true && (isSetYear());
      list.add(present_year);
      if (present_year)
        list.add(year);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNoticeCurrentSeq_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNoticeCurrentSeq_args(");
      boolean first = true;

      sb.append("year:");
      if (this.year == null) {
        sb.append("null");
      } else {
        sb.append(this.year);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNoticeCurrentSeq_argsStandardSchemeFactory implements SchemeFactory {
      public updateNoticeCurrentSeq_argsStandardScheme getScheme() {
        return new updateNoticeCurrentSeq_argsStandardScheme();
      }
    }

    private static class updateNoticeCurrentSeq_argsStandardScheme extends StandardScheme<updateNoticeCurrentSeq_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.year = iprot.readString();
                struct.setYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.year != null) {
          oprot.writeFieldBegin(YEAR_FIELD_DESC);
          oprot.writeString(struct.year);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNoticeCurrentSeq_argsTupleSchemeFactory implements SchemeFactory {
      public updateNoticeCurrentSeq_argsTupleScheme getScheme() {
        return new updateNoticeCurrentSeq_argsTupleScheme();
      }
    }

    private static class updateNoticeCurrentSeq_argsTupleScheme extends TupleScheme<updateNoticeCurrentSeq_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetYear()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetYear()) {
          oprot.writeString(struct.year);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNoticeCurrentSeq_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.year = iprot.readString();
          struct.setYearIsSet(true);
        }
      }
    }

  }

  public static class updateNoticeCurrentSeq_result implements org.apache.thrift.TBase<updateNoticeCurrentSeq_result, updateNoticeCurrentSeq_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNoticeCurrentSeq_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNoticeCurrentSeq_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNoticeCurrentSeq_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNoticeCurrentSeq_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNoticeCurrentSeq_result.class, metaDataMap);
    }

    public updateNoticeCurrentSeq_result() {
    }

    public updateNoticeCurrentSeq_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNoticeCurrentSeq_result(updateNoticeCurrentSeq_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateNoticeCurrentSeq_result deepCopy() {
      return new updateNoticeCurrentSeq_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateNoticeCurrentSeq_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateNoticeCurrentSeq_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNoticeCurrentSeq_result)
        return this.equals((updateNoticeCurrentSeq_result)that);
      return false;
    }

    public boolean equals(updateNoticeCurrentSeq_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNoticeCurrentSeq_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNoticeCurrentSeq_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNoticeCurrentSeq_resultStandardSchemeFactory implements SchemeFactory {
      public updateNoticeCurrentSeq_resultStandardScheme getScheme() {
        return new updateNoticeCurrentSeq_resultStandardScheme();
      }
    }

    private static class updateNoticeCurrentSeq_resultStandardScheme extends StandardScheme<updateNoticeCurrentSeq_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNoticeCurrentSeq_resultTupleSchemeFactory implements SchemeFactory {
      public updateNoticeCurrentSeq_resultTupleScheme getScheme() {
        return new updateNoticeCurrentSeq_resultTupleScheme();
      }
    }

    private static class updateNoticeCurrentSeq_resultTupleScheme extends TupleScheme<updateNoticeCurrentSeq_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNoticeCurrentSeq_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getReminderNoticePart_args implements org.apache.thrift.TBase<getReminderNoticePart_args, getReminderNoticePart_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNoticePart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNoticePart_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOW_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("nowDttm", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNoticePart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNoticePart_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public String nowDttm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      NOW_DTTM((short)2, "nowDttm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // NOW_DTTM
            return NOW_DTTM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOW_DTTM, new org.apache.thrift.meta_data.FieldMetaData("nowDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNoticePart_args.class, metaDataMap);
    }

    public getReminderNoticePart_args() {
    }

    public getReminderNoticePart_args(
      int projectId,
      String nowDttm)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.nowDttm = nowDttm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNoticePart_args(getReminderNoticePart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetNowDttm()) {
        this.nowDttm = other.nowDttm;
      }
    }

    public getReminderNoticePart_args deepCopy() {
      return new getReminderNoticePart_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.nowDttm = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getReminderNoticePart_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public String getNowDttm() {
      return this.nowDttm;
    }

    public getReminderNoticePart_args setNowDttm(String nowDttm) {
      this.nowDttm = nowDttm;
      return this;
    }

    public void unsetNowDttm() {
      this.nowDttm = null;
    }

    /** Returns true if field nowDttm is set (has been assigned a value) and false otherwise */
    public boolean isSetNowDttm() {
      return this.nowDttm != null;
    }

    public void setNowDttmIsSet(boolean value) {
      if (!value) {
        this.nowDttm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case NOW_DTTM:
        if (value == null) {
          unsetNowDttm();
        } else {
          setNowDttm((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case NOW_DTTM:
        return getNowDttm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case NOW_DTTM:
        return isSetNowDttm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNoticePart_args)
        return this.equals((getReminderNoticePart_args)that);
      return false;
    }

    public boolean equals(getReminderNoticePart_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_nowDttm = true && this.isSetNowDttm();
      boolean that_present_nowDttm = true && that.isSetNowDttm();
      if (this_present_nowDttm || that_present_nowDttm) {
        if (!(this_present_nowDttm && that_present_nowDttm))
          return false;
        if (!this.nowDttm.equals(that.nowDttm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_nowDttm = true && (isSetNowDttm());
      list.add(present_nowDttm);
      if (present_nowDttm)
        list.add(nowDttm);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNoticePart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNowDttm()).compareTo(other.isSetNowDttm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNowDttm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowDttm, other.nowDttm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNoticePart_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nowDttm:");
      if (this.nowDttm == null) {
        sb.append("null");
      } else {
        sb.append(this.nowDttm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNoticePart_argsStandardSchemeFactory implements SchemeFactory {
      public getReminderNoticePart_argsStandardScheme getScheme() {
        return new getReminderNoticePart_argsStandardScheme();
      }
    }

    private static class getReminderNoticePart_argsStandardScheme extends StandardScheme<getReminderNoticePart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNoticePart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOW_DTTM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nowDttm = iprot.readString();
                struct.setNowDttmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNoticePart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.nowDttm != null) {
          oprot.writeFieldBegin(NOW_DTTM_FIELD_DESC);
          oprot.writeString(struct.nowDttm);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNoticePart_argsTupleSchemeFactory implements SchemeFactory {
      public getReminderNoticePart_argsTupleScheme getScheme() {
        return new getReminderNoticePart_argsTupleScheme();
      }
    }

    private static class getReminderNoticePart_argsTupleScheme extends TupleScheme<getReminderNoticePart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetNowDttm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetNowDttm()) {
          oprot.writeString(struct.nowDttm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nowDttm = iprot.readString();
          struct.setNowDttmIsSet(true);
        }
      }
    }

  }

  public static class getReminderNoticePart_result implements org.apache.thrift.TBase<getReminderNoticePart_result, getReminderNoticePart_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNoticePart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNoticePart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNoticePart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNoticePart_resultTupleSchemeFactory());
    }

    public List<ReminderNoticePart> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReminderNoticePart.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNoticePart_result.class, metaDataMap);
    }

    public getReminderNoticePart_result() {
    }

    public getReminderNoticePart_result(
      List<ReminderNoticePart> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNoticePart_result(getReminderNoticePart_result other) {
      if (other.isSetSuccess()) {
        List<ReminderNoticePart> __this__success = new ArrayList<ReminderNoticePart>(other.success.size());
        for (ReminderNoticePart other_element : other.success) {
          __this__success.add(new ReminderNoticePart(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getReminderNoticePart_result deepCopy() {
      return new getReminderNoticePart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReminderNoticePart> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReminderNoticePart elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReminderNoticePart>();
      }
      this.success.add(elem);
    }

    public List<ReminderNoticePart> getSuccess() {
      return this.success;
    }

    public getReminderNoticePart_result setSuccess(List<ReminderNoticePart> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getReminderNoticePart_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReminderNoticePart>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNoticePart_result)
        return this.equals((getReminderNoticePart_result)that);
      return false;
    }

    public boolean equals(getReminderNoticePart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNoticePart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNoticePart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNoticePart_resultStandardSchemeFactory implements SchemeFactory {
      public getReminderNoticePart_resultStandardScheme getScheme() {
        return new getReminderNoticePart_resultStandardScheme();
      }
    }

    private static class getReminderNoticePart_resultStandardScheme extends StandardScheme<getReminderNoticePart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNoticePart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                  struct.success = new ArrayList<ReminderNoticePart>(_list210.size);
                  ReminderNoticePart _elem211;
                  for (int _i212 = 0; _i212 < _list210.size; ++_i212)
                  {
                    _elem211 = new ReminderNoticePart();
                    _elem211.read(iprot);
                    struct.success.add(_elem211);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNoticePart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReminderNoticePart _iter213 : struct.success)
            {
              _iter213.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNoticePart_resultTupleSchemeFactory implements SchemeFactory {
      public getReminderNoticePart_resultTupleScheme getScheme() {
        return new getReminderNoticePart_resultTupleScheme();
      }
    }

    private static class getReminderNoticePart_resultTupleScheme extends TupleScheme<getReminderNoticePart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReminderNoticePart _iter214 : struct.success)
            {
              _iter214.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReminderNoticePart>(_list215.size);
            ReminderNoticePart _elem216;
            for (int _i217 = 0; _i217 < _list215.size; ++_i217)
            {
              _elem216 = new ReminderNoticePart();
              _elem216.read(iprot);
              struct.success.add(_elem216);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getReminderNoticePartMoney_args implements org.apache.thrift.TBase<getReminderNoticePartMoney_args, getReminderNoticePartMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNoticePartMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNoticePartMoney_args");

    private static final org.apache.thrift.protocol.TField REMINDER_NOTICE_PART_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderNoticePart", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOW_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("nowDttm", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNoticePartMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNoticePartMoney_argsTupleSchemeFactory());
    }

    public ReminderNoticePart reminderNoticePart; // required
    public String nowDttm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMINDER_NOTICE_PART((short)1, "reminderNoticePart"),
      NOW_DTTM((short)2, "nowDttm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMINDER_NOTICE_PART
            return REMINDER_NOTICE_PART;
          case 2: // NOW_DTTM
            return NOW_DTTM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMINDER_NOTICE_PART, new org.apache.thrift.meta_data.FieldMetaData("reminderNoticePart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReminderNoticePart.class)));
      tmpMap.put(_Fields.NOW_DTTM, new org.apache.thrift.meta_data.FieldMetaData("nowDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNoticePartMoney_args.class, metaDataMap);
    }

    public getReminderNoticePartMoney_args() {
    }

    public getReminderNoticePartMoney_args(
      ReminderNoticePart reminderNoticePart,
      String nowDttm)
    {
      this();
      this.reminderNoticePart = reminderNoticePart;
      this.nowDttm = nowDttm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNoticePartMoney_args(getReminderNoticePartMoney_args other) {
      if (other.isSetReminderNoticePart()) {
        this.reminderNoticePart = new ReminderNoticePart(other.reminderNoticePart);
      }
      if (other.isSetNowDttm()) {
        this.nowDttm = other.nowDttm;
      }
    }

    public getReminderNoticePartMoney_args deepCopy() {
      return new getReminderNoticePartMoney_args(this);
    }

    @Override
    public void clear() {
      this.reminderNoticePart = null;
      this.nowDttm = null;
    }

    public ReminderNoticePart getReminderNoticePart() {
      return this.reminderNoticePart;
    }

    public getReminderNoticePartMoney_args setReminderNoticePart(ReminderNoticePart reminderNoticePart) {
      this.reminderNoticePart = reminderNoticePart;
      return this;
    }

    public void unsetReminderNoticePart() {
      this.reminderNoticePart = null;
    }

    /** Returns true if field reminderNoticePart is set (has been assigned a value) and false otherwise */
    public boolean isSetReminderNoticePart() {
      return this.reminderNoticePart != null;
    }

    public void setReminderNoticePartIsSet(boolean value) {
      if (!value) {
        this.reminderNoticePart = null;
      }
    }

    public String getNowDttm() {
      return this.nowDttm;
    }

    public getReminderNoticePartMoney_args setNowDttm(String nowDttm) {
      this.nowDttm = nowDttm;
      return this;
    }

    public void unsetNowDttm() {
      this.nowDttm = null;
    }

    /** Returns true if field nowDttm is set (has been assigned a value) and false otherwise */
    public boolean isSetNowDttm() {
      return this.nowDttm != null;
    }

    public void setNowDttmIsSet(boolean value) {
      if (!value) {
        this.nowDttm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REMINDER_NOTICE_PART:
        if (value == null) {
          unsetReminderNoticePart();
        } else {
          setReminderNoticePart((ReminderNoticePart)value);
        }
        break;

      case NOW_DTTM:
        if (value == null) {
          unsetNowDttm();
        } else {
          setNowDttm((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REMINDER_NOTICE_PART:
        return getReminderNoticePart();

      case NOW_DTTM:
        return getNowDttm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REMINDER_NOTICE_PART:
        return isSetReminderNoticePart();
      case NOW_DTTM:
        return isSetNowDttm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNoticePartMoney_args)
        return this.equals((getReminderNoticePartMoney_args)that);
      return false;
    }

    public boolean equals(getReminderNoticePartMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_reminderNoticePart = true && this.isSetReminderNoticePart();
      boolean that_present_reminderNoticePart = true && that.isSetReminderNoticePart();
      if (this_present_reminderNoticePart || that_present_reminderNoticePart) {
        if (!(this_present_reminderNoticePart && that_present_reminderNoticePart))
          return false;
        if (!this.reminderNoticePart.equals(that.reminderNoticePart))
          return false;
      }

      boolean this_present_nowDttm = true && this.isSetNowDttm();
      boolean that_present_nowDttm = true && that.isSetNowDttm();
      if (this_present_nowDttm || that_present_nowDttm) {
        if (!(this_present_nowDttm && that_present_nowDttm))
          return false;
        if (!this.nowDttm.equals(that.nowDttm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reminderNoticePart = true && (isSetReminderNoticePart());
      list.add(present_reminderNoticePart);
      if (present_reminderNoticePart)
        list.add(reminderNoticePart);

      boolean present_nowDttm = true && (isSetNowDttm());
      list.add(present_nowDttm);
      if (present_nowDttm)
        list.add(nowDttm);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNoticePartMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReminderNoticePart()).compareTo(other.isSetReminderNoticePart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReminderNoticePart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderNoticePart, other.reminderNoticePart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNowDttm()).compareTo(other.isSetNowDttm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNowDttm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowDttm, other.nowDttm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNoticePartMoney_args(");
      boolean first = true;

      sb.append("reminderNoticePart:");
      if (this.reminderNoticePart == null) {
        sb.append("null");
      } else {
        sb.append(this.reminderNoticePart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nowDttm:");
      if (this.nowDttm == null) {
        sb.append("null");
      } else {
        sb.append(this.nowDttm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reminderNoticePart != null) {
        reminderNoticePart.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNoticePartMoney_argsStandardSchemeFactory implements SchemeFactory {
      public getReminderNoticePartMoney_argsStandardScheme getScheme() {
        return new getReminderNoticePartMoney_argsStandardScheme();
      }
    }

    private static class getReminderNoticePartMoney_argsStandardScheme extends StandardScheme<getReminderNoticePartMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNoticePartMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REMINDER_NOTICE_PART
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reminderNoticePart = new ReminderNoticePart();
                struct.reminderNoticePart.read(iprot);
                struct.setReminderNoticePartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOW_DTTM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nowDttm = iprot.readString();
                struct.setNowDttmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNoticePartMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reminderNoticePart != null) {
          oprot.writeFieldBegin(REMINDER_NOTICE_PART_FIELD_DESC);
          struct.reminderNoticePart.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nowDttm != null) {
          oprot.writeFieldBegin(NOW_DTTM_FIELD_DESC);
          oprot.writeString(struct.nowDttm);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNoticePartMoney_argsTupleSchemeFactory implements SchemeFactory {
      public getReminderNoticePartMoney_argsTupleScheme getScheme() {
        return new getReminderNoticePartMoney_argsTupleScheme();
      }
    }

    private static class getReminderNoticePartMoney_argsTupleScheme extends TupleScheme<getReminderNoticePartMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePartMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReminderNoticePart()) {
          optionals.set(0);
        }
        if (struct.isSetNowDttm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReminderNoticePart()) {
          struct.reminderNoticePart.write(oprot);
        }
        if (struct.isSetNowDttm()) {
          oprot.writeString(struct.nowDttm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePartMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reminderNoticePart = new ReminderNoticePart();
          struct.reminderNoticePart.read(iprot);
          struct.setReminderNoticePartIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nowDttm = iprot.readString();
          struct.setNowDttmIsSet(true);
        }
      }
    }

  }

  public static class getReminderNoticePartMoney_result implements org.apache.thrift.TBase<getReminderNoticePartMoney_result, getReminderNoticePartMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNoticePartMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNoticePartMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNoticePartMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNoticePartMoney_resultTupleSchemeFactory());
    }

    public ReminderNoticePart success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReminderNoticePart.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNoticePartMoney_result.class, metaDataMap);
    }

    public getReminderNoticePartMoney_result() {
    }

    public getReminderNoticePartMoney_result(
      ReminderNoticePart success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNoticePartMoney_result(getReminderNoticePartMoney_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReminderNoticePart(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getReminderNoticePartMoney_result deepCopy() {
      return new getReminderNoticePartMoney_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ReminderNoticePart getSuccess() {
      return this.success;
    }

    public getReminderNoticePartMoney_result setSuccess(ReminderNoticePart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getReminderNoticePartMoney_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReminderNoticePart)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNoticePartMoney_result)
        return this.equals((getReminderNoticePartMoney_result)that);
      return false;
    }

    public boolean equals(getReminderNoticePartMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNoticePartMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNoticePartMoney_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNoticePartMoney_resultStandardSchemeFactory implements SchemeFactory {
      public getReminderNoticePartMoney_resultStandardScheme getScheme() {
        return new getReminderNoticePartMoney_resultStandardScheme();
      }
    }

    private static class getReminderNoticePartMoney_resultStandardScheme extends StandardScheme<getReminderNoticePartMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNoticePartMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReminderNoticePart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNoticePartMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNoticePartMoney_resultTupleSchemeFactory implements SchemeFactory {
      public getReminderNoticePartMoney_resultTupleScheme getScheme() {
        return new getReminderNoticePartMoney_resultTupleScheme();
      }
    }

    private static class getReminderNoticePartMoney_resultTupleScheme extends TupleScheme<getReminderNoticePartMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePartMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNoticePartMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ReminderNoticePart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getReminderNotice_args implements org.apache.thrift.TBase<getReminderNotice_args, getReminderNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNotice_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNotice_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNotice_args.class, metaDataMap);
    }

    public getReminderNotice_args() {
    }

    public getReminderNotice_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNotice_args(getReminderNotice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getReminderNotice_args deepCopy() {
      return new getReminderNotice_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getReminderNotice_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNotice_args)
        return this.equals((getReminderNotice_args)that);
      return false;
    }

    public boolean equals(getReminderNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNotice_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNotice_argsStandardSchemeFactory implements SchemeFactory {
      public getReminderNotice_argsStandardScheme getScheme() {
        return new getReminderNotice_argsStandardScheme();
      }
    }

    private static class getReminderNotice_argsStandardScheme extends StandardScheme<getReminderNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNotice_argsTupleSchemeFactory implements SchemeFactory {
      public getReminderNotice_argsTupleScheme getScheme() {
        return new getReminderNotice_argsTupleScheme();
      }
    }

    private static class getReminderNotice_argsTupleScheme extends TupleScheme<getReminderNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getReminderNotice_result implements org.apache.thrift.TBase<getReminderNotice_result, getReminderNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReminderNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReminderNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReminderNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReminderNotice_resultTupleSchemeFactory());
    }

    public ReminderNotice success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReminderNotice.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReminderNotice_result.class, metaDataMap);
    }

    public getReminderNotice_result() {
    }

    public getReminderNotice_result(
      ReminderNotice success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReminderNotice_result(getReminderNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReminderNotice(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getReminderNotice_result deepCopy() {
      return new getReminderNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ReminderNotice getSuccess() {
      return this.success;
    }

    public getReminderNotice_result setSuccess(ReminderNotice success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getReminderNotice_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReminderNotice)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReminderNotice_result)
        return this.equals((getReminderNotice_result)that);
      return false;
    }

    public boolean equals(getReminderNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReminderNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReminderNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReminderNotice_resultStandardSchemeFactory implements SchemeFactory {
      public getReminderNotice_resultStandardScheme getScheme() {
        return new getReminderNotice_resultStandardScheme();
      }
    }

    private static class getReminderNotice_resultStandardScheme extends StandardScheme<getReminderNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReminderNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReminderNotice();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReminderNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReminderNotice_resultTupleSchemeFactory implements SchemeFactory {
      public getReminderNotice_resultTupleScheme getScheme() {
        return new getReminderNotice_resultTupleScheme();
      }
    }

    private static class getReminderNotice_resultTupleScheme extends TupleScheme<getReminderNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReminderNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReminderNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ReminderNotice();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

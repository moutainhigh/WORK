/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BeforloadOutputSerice {

  public interface Iface {

    public List<LoanOutputInfo> getLoadOutputList(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public LoanOutputInfoImpl getLoadOutputListImpl(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int insertLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<LoanOutputInfo> getLoadOutputinfoList(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public LoanOutputInfoImpl getLoadOutputinfo(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws org.apache.thrift.TException;

    public int deleteLoadOutputinfo(int pId) throws org.apache.thrift.TException;

    public Loan updateRepaymentPlan(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public String queryloanEndDtInfo(int loanId, String loanOutDt) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public String queryloanRepayFun(int repayFunId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getLoadOutputList(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoadOutputListImpl(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoadOutputinfoList(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoadOutputinfo(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLoadOutputinfo(int pId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRepaymentPlan(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryloanEndDtInfo(int loanId, String loanOutDt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryloanRepayFun(int repayFunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<LoanOutputInfo> getLoadOutputList(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoadOutputList(projectId);
      return recv_getLoadOutputList();
    }

    public void send_getLoadOutputList(int projectId) throws org.apache.thrift.TException
    {
      getLoadOutputList_args args = new getLoadOutputList_args();
      args.setProjectId(projectId);
      sendBase("getLoadOutputList", args);
    }

    public List<LoanOutputInfo> recv_getLoadOutputList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoadOutputList_result result = new getLoadOutputList_result();
      receiveBase(result, "getLoadOutputList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoadOutputList failed: unknown result");
    }

    public LoanOutputInfoImpl getLoadOutputListImpl(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoadOutputListImpl(project);
      return recv_getLoadOutputListImpl();
    }

    public void send_getLoadOutputListImpl(Project project) throws org.apache.thrift.TException
    {
      getLoadOutputListImpl_args args = new getLoadOutputListImpl_args();
      args.setProject(project);
      sendBase("getLoadOutputListImpl", args);
    }

    public LoanOutputInfoImpl recv_getLoadOutputListImpl() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoadOutputListImpl_result result = new getLoadOutputListImpl_result();
      receiveBase(result, "getLoadOutputListImpl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoadOutputListImpl failed: unknown result");
    }

    public int insertLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_insertLoadOutputinfo(loanOutputInfoImplDTO);
      return recv_insertLoadOutputinfo();
    }

    public void send_insertLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws org.apache.thrift.TException
    {
      insertLoadOutputinfo_args args = new insertLoadOutputinfo_args();
      args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
      sendBase("insertLoadOutputinfo", args);
    }

    public int recv_insertLoadOutputinfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      insertLoadOutputinfo_result result = new insertLoadOutputinfo_result();
      receiveBase(result, "insertLoadOutputinfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertLoadOutputinfo failed: unknown result");
    }

    public List<LoanOutputInfo> getLoadOutputinfoList(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoadOutputinfoList(project);
      return recv_getLoadOutputinfoList();
    }

    public void send_getLoadOutputinfoList(Project project) throws org.apache.thrift.TException
    {
      getLoadOutputinfoList_args args = new getLoadOutputinfoList_args();
      args.setProject(project);
      sendBase("getLoadOutputinfoList", args);
    }

    public List<LoanOutputInfo> recv_getLoadOutputinfoList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoadOutputinfoList_result result = new getLoadOutputinfoList_result();
      receiveBase(result, "getLoadOutputinfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoadOutputinfoList failed: unknown result");
    }

    public LoanOutputInfoImpl getLoadOutputinfo(Project project) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoadOutputinfo(project);
      return recv_getLoadOutputinfo();
    }

    public void send_getLoadOutputinfo(Project project) throws org.apache.thrift.TException
    {
      getLoadOutputinfo_args args = new getLoadOutputinfo_args();
      args.setProject(project);
      sendBase("getLoadOutputinfo", args);
    }

    public LoanOutputInfoImpl recv_getLoadOutputinfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoadOutputinfo_result result = new getLoadOutputinfo_result();
      receiveBase(result, "getLoadOutputinfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoadOutputinfo failed: unknown result");
    }

    public int updateLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws org.apache.thrift.TException
    {
      send_updateLoadOutputinfo(loanOutputInfoImplDTO);
      return recv_updateLoadOutputinfo();
    }

    public void send_updateLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws org.apache.thrift.TException
    {
      updateLoadOutputinfo_args args = new updateLoadOutputinfo_args();
      args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
      sendBase("updateLoadOutputinfo", args);
    }

    public int recv_updateLoadOutputinfo() throws org.apache.thrift.TException
    {
      updateLoadOutputinfo_result result = new updateLoadOutputinfo_result();
      receiveBase(result, "updateLoadOutputinfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLoadOutputinfo failed: unknown result");
    }

    public int deleteLoadOutputinfo(int pId) throws org.apache.thrift.TException
    {
      send_deleteLoadOutputinfo(pId);
      return recv_deleteLoadOutputinfo();
    }

    public void send_deleteLoadOutputinfo(int pId) throws org.apache.thrift.TException
    {
      deleteLoadOutputinfo_args args = new deleteLoadOutputinfo_args();
      args.setPId(pId);
      sendBase("deleteLoadOutputinfo", args);
    }

    public int recv_deleteLoadOutputinfo() throws org.apache.thrift.TException
    {
      deleteLoadOutputinfo_result result = new deleteLoadOutputinfo_result();
      receiveBase(result, "deleteLoadOutputinfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLoadOutputinfo failed: unknown result");
    }

    public Loan updateRepaymentPlan(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateRepaymentPlan(loanOutputInfoImplDTO);
      return recv_updateRepaymentPlan();
    }

    public void send_updateRepaymentPlan(LoanOutputInfoImplDTO loanOutputInfoImplDTO) throws org.apache.thrift.TException
    {
      updateRepaymentPlan_args args = new updateRepaymentPlan_args();
      args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
      sendBase("updateRepaymentPlan", args);
    }

    public Loan recv_updateRepaymentPlan() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateRepaymentPlan_result result = new updateRepaymentPlan_result();
      receiveBase(result, "updateRepaymentPlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRepaymentPlan failed: unknown result");
    }

    public String queryloanEndDtInfo(int loanId, String loanOutDt) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryloanEndDtInfo(loanId, loanOutDt);
      return recv_queryloanEndDtInfo();
    }

    public void send_queryloanEndDtInfo(int loanId, String loanOutDt) throws org.apache.thrift.TException
    {
      queryloanEndDtInfo_args args = new queryloanEndDtInfo_args();
      args.setLoanId(loanId);
      args.setLoanOutDt(loanOutDt);
      sendBase("queryloanEndDtInfo", args);
    }

    public String recv_queryloanEndDtInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryloanEndDtInfo_result result = new queryloanEndDtInfo_result();
      receiveBase(result, "queryloanEndDtInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryloanEndDtInfo failed: unknown result");
    }

    public String queryloanRepayFun(int repayFunId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryloanRepayFun(repayFunId);
      return recv_queryloanRepayFun();
    }

    public void send_queryloanRepayFun(int repayFunId) throws org.apache.thrift.TException
    {
      queryloanRepayFun_args args = new queryloanRepayFun_args();
      args.setRepayFunId(repayFunId);
      sendBase("queryloanRepayFun", args);
    }

    public String recv_queryloanRepayFun() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryloanRepayFun_result result = new queryloanRepayFun_result();
      receiveBase(result, "queryloanRepayFun");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryloanRepayFun failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLoadOutputList(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoadOutputList_call method_call = new getLoadOutputList_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoadOutputList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getLoadOutputList_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoadOutputList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoadOutputList_args args = new getLoadOutputList_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LoanOutputInfo> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoadOutputList();
      }
    }

    public void getLoadOutputListImpl(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoadOutputListImpl_call method_call = new getLoadOutputListImpl_call(project, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoadOutputListImpl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Project project;
      public getLoadOutputListImpl_call(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project = project;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoadOutputListImpl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoadOutputListImpl_args args = new getLoadOutputListImpl_args();
        args.setProject(project);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanOutputInfoImpl getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoadOutputListImpl();
      }
    }

    public void insertLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertLoadOutputinfo_call method_call = new insertLoadOutputinfo_call(loanOutputInfoImplDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertLoadOutputinfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoanOutputInfoImplDTO loanOutputInfoImplDTO;
      public insertLoadOutputinfo_call(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertLoadOutputinfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertLoadOutputinfo_args args = new insertLoadOutputinfo_args();
        args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertLoadOutputinfo();
      }
    }

    public void getLoadOutputinfoList(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoadOutputinfoList_call method_call = new getLoadOutputinfoList_call(project, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoadOutputinfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Project project;
      public getLoadOutputinfoList_call(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project = project;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoadOutputinfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoadOutputinfoList_args args = new getLoadOutputinfoList_args();
        args.setProject(project);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LoanOutputInfo> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoadOutputinfoList();
      }
    }

    public void getLoadOutputinfo(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoadOutputinfo_call method_call = new getLoadOutputinfo_call(project, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoadOutputinfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Project project;
      public getLoadOutputinfo_call(Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project = project;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoadOutputinfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoadOutputinfo_args args = new getLoadOutputinfo_args();
        args.setProject(project);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanOutputInfoImpl getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoadOutputinfo();
      }
    }

    public void updateLoadOutputinfo(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLoadOutputinfo_call method_call = new updateLoadOutputinfo_call(loanOutputInfoImplDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLoadOutputinfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoanOutputInfoImplDTO loanOutputInfoImplDTO;
      public updateLoadOutputinfo_call(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLoadOutputinfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLoadOutputinfo_args args = new updateLoadOutputinfo_args();
        args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLoadOutputinfo();
      }
    }

    public void deleteLoadOutputinfo(int pId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLoadOutputinfo_call method_call = new deleteLoadOutputinfo_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLoadOutputinfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pId;
      public deleteLoadOutputinfo_call(int pId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLoadOutputinfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLoadOutputinfo_args args = new deleteLoadOutputinfo_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLoadOutputinfo();
      }
    }

    public void updateRepaymentPlan(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRepaymentPlan_call method_call = new updateRepaymentPlan_call(loanOutputInfoImplDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRepaymentPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoanOutputInfoImplDTO loanOutputInfoImplDTO;
      public updateRepaymentPlan_call(LoanOutputInfoImplDTO loanOutputInfoImplDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRepaymentPlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRepaymentPlan_args args = new updateRepaymentPlan_args();
        args.setLoanOutputInfoImplDTO(loanOutputInfoImplDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Loan getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRepaymentPlan();
      }
    }

    public void queryloanEndDtInfo(int loanId, String loanOutDt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryloanEndDtInfo_call method_call = new queryloanEndDtInfo_call(loanId, loanOutDt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryloanEndDtInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      private String loanOutDt;
      public queryloanEndDtInfo_call(int loanId, String loanOutDt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
        this.loanOutDt = loanOutDt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryloanEndDtInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryloanEndDtInfo_args args = new queryloanEndDtInfo_args();
        args.setLoanId(loanId);
        args.setLoanOutDt(loanOutDt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryloanEndDtInfo();
      }
    }

    public void queryloanRepayFun(int repayFunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryloanRepayFun_call method_call = new queryloanRepayFun_call(repayFunId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryloanRepayFun_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayFunId;
      public queryloanRepayFun_call(int repayFunId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayFunId = repayFunId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryloanRepayFun", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryloanRepayFun_args args = new queryloanRepayFun_args();
        args.setRepayFunId(repayFunId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryloanRepayFun();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLoadOutputList", new getLoadOutputList());
      processMap.put("getLoadOutputListImpl", new getLoadOutputListImpl());
      processMap.put("insertLoadOutputinfo", new insertLoadOutputinfo());
      processMap.put("getLoadOutputinfoList", new getLoadOutputinfoList());
      processMap.put("getLoadOutputinfo", new getLoadOutputinfo());
      processMap.put("updateLoadOutputinfo", new updateLoadOutputinfo());
      processMap.put("deleteLoadOutputinfo", new deleteLoadOutputinfo());
      processMap.put("updateRepaymentPlan", new updateRepaymentPlan());
      processMap.put("queryloanEndDtInfo", new queryloanEndDtInfo());
      processMap.put("queryloanRepayFun", new queryloanRepayFun());
      return processMap;
    }

    public static class getLoadOutputList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoadOutputList_args> {
      public getLoadOutputList() {
        super("getLoadOutputList");
      }

      public getLoadOutputList_args getEmptyArgsInstance() {
        return new getLoadOutputList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoadOutputList_result getResult(I iface, getLoadOutputList_args args) throws org.apache.thrift.TException {
        getLoadOutputList_result result = new getLoadOutputList_result();
        try {
          result.success = iface.getLoadOutputList(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoadOutputListImpl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoadOutputListImpl_args> {
      public getLoadOutputListImpl() {
        super("getLoadOutputListImpl");
      }

      public getLoadOutputListImpl_args getEmptyArgsInstance() {
        return new getLoadOutputListImpl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoadOutputListImpl_result getResult(I iface, getLoadOutputListImpl_args args) throws org.apache.thrift.TException {
        getLoadOutputListImpl_result result = new getLoadOutputListImpl_result();
        try {
          result.success = iface.getLoadOutputListImpl(args.project);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class insertLoadOutputinfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertLoadOutputinfo_args> {
      public insertLoadOutputinfo() {
        super("insertLoadOutputinfo");
      }

      public insertLoadOutputinfo_args getEmptyArgsInstance() {
        return new insertLoadOutputinfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertLoadOutputinfo_result getResult(I iface, insertLoadOutputinfo_args args) throws org.apache.thrift.TException {
        insertLoadOutputinfo_result result = new insertLoadOutputinfo_result();
        try {
          result.success = iface.insertLoadOutputinfo(args.loanOutputInfoImplDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoadOutputinfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoadOutputinfoList_args> {
      public getLoadOutputinfoList() {
        super("getLoadOutputinfoList");
      }

      public getLoadOutputinfoList_args getEmptyArgsInstance() {
        return new getLoadOutputinfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoadOutputinfoList_result getResult(I iface, getLoadOutputinfoList_args args) throws org.apache.thrift.TException {
        getLoadOutputinfoList_result result = new getLoadOutputinfoList_result();
        try {
          result.success = iface.getLoadOutputinfoList(args.project);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoadOutputinfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoadOutputinfo_args> {
      public getLoadOutputinfo() {
        super("getLoadOutputinfo");
      }

      public getLoadOutputinfo_args getEmptyArgsInstance() {
        return new getLoadOutputinfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoadOutputinfo_result getResult(I iface, getLoadOutputinfo_args args) throws org.apache.thrift.TException {
        getLoadOutputinfo_result result = new getLoadOutputinfo_result();
        try {
          result.success = iface.getLoadOutputinfo(args.project);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateLoadOutputinfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLoadOutputinfo_args> {
      public updateLoadOutputinfo() {
        super("updateLoadOutputinfo");
      }

      public updateLoadOutputinfo_args getEmptyArgsInstance() {
        return new updateLoadOutputinfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLoadOutputinfo_result getResult(I iface, updateLoadOutputinfo_args args) throws org.apache.thrift.TException {
        updateLoadOutputinfo_result result = new updateLoadOutputinfo_result();
        result.success = iface.updateLoadOutputinfo(args.loanOutputInfoImplDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteLoadOutputinfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLoadOutputinfo_args> {
      public deleteLoadOutputinfo() {
        super("deleteLoadOutputinfo");
      }

      public deleteLoadOutputinfo_args getEmptyArgsInstance() {
        return new deleteLoadOutputinfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLoadOutputinfo_result getResult(I iface, deleteLoadOutputinfo_args args) throws org.apache.thrift.TException {
        deleteLoadOutputinfo_result result = new deleteLoadOutputinfo_result();
        result.success = iface.deleteLoadOutputinfo(args.pId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateRepaymentPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRepaymentPlan_args> {
      public updateRepaymentPlan() {
        super("updateRepaymentPlan");
      }

      public updateRepaymentPlan_args getEmptyArgsInstance() {
        return new updateRepaymentPlan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRepaymentPlan_result getResult(I iface, updateRepaymentPlan_args args) throws org.apache.thrift.TException {
        updateRepaymentPlan_result result = new updateRepaymentPlan_result();
        try {
          result.success = iface.updateRepaymentPlan(args.loanOutputInfoImplDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryloanEndDtInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryloanEndDtInfo_args> {
      public queryloanEndDtInfo() {
        super("queryloanEndDtInfo");
      }

      public queryloanEndDtInfo_args getEmptyArgsInstance() {
        return new queryloanEndDtInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryloanEndDtInfo_result getResult(I iface, queryloanEndDtInfo_args args) throws org.apache.thrift.TException {
        queryloanEndDtInfo_result result = new queryloanEndDtInfo_result();
        try {
          result.success = iface.queryloanEndDtInfo(args.loanId, args.loanOutDt);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryloanRepayFun<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryloanRepayFun_args> {
      public queryloanRepayFun() {
        super("queryloanRepayFun");
      }

      public queryloanRepayFun_args getEmptyArgsInstance() {
        return new queryloanRepayFun_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryloanRepayFun_result getResult(I iface, queryloanRepayFun_args args) throws org.apache.thrift.TException {
        queryloanRepayFun_result result = new queryloanRepayFun_result();
        try {
          result.success = iface.queryloanRepayFun(args.repayFunId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLoadOutputList", new getLoadOutputList());
      processMap.put("getLoadOutputListImpl", new getLoadOutputListImpl());
      processMap.put("insertLoadOutputinfo", new insertLoadOutputinfo());
      processMap.put("getLoadOutputinfoList", new getLoadOutputinfoList());
      processMap.put("getLoadOutputinfo", new getLoadOutputinfo());
      processMap.put("updateLoadOutputinfo", new updateLoadOutputinfo());
      processMap.put("deleteLoadOutputinfo", new deleteLoadOutputinfo());
      processMap.put("updateRepaymentPlan", new updateRepaymentPlan());
      processMap.put("queryloanEndDtInfo", new queryloanEndDtInfo());
      processMap.put("queryloanRepayFun", new queryloanRepayFun());
      return processMap;
    }

    public static class getLoadOutputList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoadOutputList_args, List<LoanOutputInfo>> {
      public getLoadOutputList() {
        super("getLoadOutputList");
      }

      public getLoadOutputList_args getEmptyArgsInstance() {
        return new getLoadOutputList_args();
      }

      public AsyncMethodCallback<List<LoanOutputInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LoanOutputInfo>>() { 
          public void onComplete(List<LoanOutputInfo> o) {
            getLoadOutputList_result result = new getLoadOutputList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoadOutputList_result result = new getLoadOutputList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoadOutputList_args args, org.apache.thrift.async.AsyncMethodCallback<List<LoanOutputInfo>> resultHandler) throws TException {
        iface.getLoadOutputList(args.projectId,resultHandler);
      }
    }

    public static class getLoadOutputListImpl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoadOutputListImpl_args, LoanOutputInfoImpl> {
      public getLoadOutputListImpl() {
        super("getLoadOutputListImpl");
      }

      public getLoadOutputListImpl_args getEmptyArgsInstance() {
        return new getLoadOutputListImpl_args();
      }

      public AsyncMethodCallback<LoanOutputInfoImpl> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoanOutputInfoImpl>() { 
          public void onComplete(LoanOutputInfoImpl o) {
            getLoadOutputListImpl_result result = new getLoadOutputListImpl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoadOutputListImpl_result result = new getLoadOutputListImpl_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoadOutputListImpl_args args, org.apache.thrift.async.AsyncMethodCallback<LoanOutputInfoImpl> resultHandler) throws TException {
        iface.getLoadOutputListImpl(args.project,resultHandler);
      }
    }

    public static class insertLoadOutputinfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertLoadOutputinfo_args, Integer> {
      public insertLoadOutputinfo() {
        super("insertLoadOutputinfo");
      }

      public insertLoadOutputinfo_args getEmptyArgsInstance() {
        return new insertLoadOutputinfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertLoadOutputinfo_result result = new insertLoadOutputinfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertLoadOutputinfo_result result = new insertLoadOutputinfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertLoadOutputinfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertLoadOutputinfo(args.loanOutputInfoImplDTO,resultHandler);
      }
    }

    public static class getLoadOutputinfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoadOutputinfoList_args, List<LoanOutputInfo>> {
      public getLoadOutputinfoList() {
        super("getLoadOutputinfoList");
      }

      public getLoadOutputinfoList_args getEmptyArgsInstance() {
        return new getLoadOutputinfoList_args();
      }

      public AsyncMethodCallback<List<LoanOutputInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LoanOutputInfo>>() { 
          public void onComplete(List<LoanOutputInfo> o) {
            getLoadOutputinfoList_result result = new getLoadOutputinfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoadOutputinfoList_result result = new getLoadOutputinfoList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoadOutputinfoList_args args, org.apache.thrift.async.AsyncMethodCallback<List<LoanOutputInfo>> resultHandler) throws TException {
        iface.getLoadOutputinfoList(args.project,resultHandler);
      }
    }

    public static class getLoadOutputinfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoadOutputinfo_args, LoanOutputInfoImpl> {
      public getLoadOutputinfo() {
        super("getLoadOutputinfo");
      }

      public getLoadOutputinfo_args getEmptyArgsInstance() {
        return new getLoadOutputinfo_args();
      }

      public AsyncMethodCallback<LoanOutputInfoImpl> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoanOutputInfoImpl>() { 
          public void onComplete(LoanOutputInfoImpl o) {
            getLoadOutputinfo_result result = new getLoadOutputinfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoadOutputinfo_result result = new getLoadOutputinfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoadOutputinfo_args args, org.apache.thrift.async.AsyncMethodCallback<LoanOutputInfoImpl> resultHandler) throws TException {
        iface.getLoadOutputinfo(args.project,resultHandler);
      }
    }

    public static class updateLoadOutputinfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLoadOutputinfo_args, Integer> {
      public updateLoadOutputinfo() {
        super("updateLoadOutputinfo");
      }

      public updateLoadOutputinfo_args getEmptyArgsInstance() {
        return new updateLoadOutputinfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLoadOutputinfo_result result = new updateLoadOutputinfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLoadOutputinfo_result result = new updateLoadOutputinfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLoadOutputinfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLoadOutputinfo(args.loanOutputInfoImplDTO,resultHandler);
      }
    }

    public static class deleteLoadOutputinfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLoadOutputinfo_args, Integer> {
      public deleteLoadOutputinfo() {
        super("deleteLoadOutputinfo");
      }

      public deleteLoadOutputinfo_args getEmptyArgsInstance() {
        return new deleteLoadOutputinfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteLoadOutputinfo_result result = new deleteLoadOutputinfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLoadOutputinfo_result result = new deleteLoadOutputinfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLoadOutputinfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteLoadOutputinfo(args.pId,resultHandler);
      }
    }

    public static class updateRepaymentPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRepaymentPlan_args, Loan> {
      public updateRepaymentPlan() {
        super("updateRepaymentPlan");
      }

      public updateRepaymentPlan_args getEmptyArgsInstance() {
        return new updateRepaymentPlan_args();
      }

      public AsyncMethodCallback<Loan> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Loan>() { 
          public void onComplete(Loan o) {
            updateRepaymentPlan_result result = new updateRepaymentPlan_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRepaymentPlan_result result = new updateRepaymentPlan_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRepaymentPlan_args args, org.apache.thrift.async.AsyncMethodCallback<Loan> resultHandler) throws TException {
        iface.updateRepaymentPlan(args.loanOutputInfoImplDTO,resultHandler);
      }
    }

    public static class queryloanEndDtInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryloanEndDtInfo_args, String> {
      public queryloanEndDtInfo() {
        super("queryloanEndDtInfo");
      }

      public queryloanEndDtInfo_args getEmptyArgsInstance() {
        return new queryloanEndDtInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryloanEndDtInfo_result result = new queryloanEndDtInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryloanEndDtInfo_result result = new queryloanEndDtInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryloanEndDtInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryloanEndDtInfo(args.loanId, args.loanOutDt,resultHandler);
      }
    }

    public static class queryloanRepayFun<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryloanRepayFun_args, String> {
      public queryloanRepayFun() {
        super("queryloanRepayFun");
      }

      public queryloanRepayFun_args getEmptyArgsInstance() {
        return new queryloanRepayFun_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryloanRepayFun_result result = new queryloanRepayFun_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryloanRepayFun_result result = new queryloanRepayFun_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryloanRepayFun_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryloanRepayFun(args.repayFunId,resultHandler);
      }
    }

  }

  public static class getLoadOutputList_args implements org.apache.thrift.TBase<getLoadOutputList_args, getLoadOutputList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputList_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputList_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputList_args.class, metaDataMap);
    }

    public getLoadOutputList_args() {
    }

    public getLoadOutputList_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputList_args(getLoadOutputList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getLoadOutputList_args deepCopy() {
      return new getLoadOutputList_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getLoadOutputList_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputList_args)
        return this.equals((getLoadOutputList_args)that);
      return false;
    }

    public boolean equals(getLoadOutputList_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputList_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputList_argsStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputList_argsStandardScheme getScheme() {
        return new getLoadOutputList_argsStandardScheme();
      }
    }

    private static class getLoadOutputList_argsStandardScheme extends StandardScheme<getLoadOutputList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputList_argsTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputList_argsTupleScheme getScheme() {
        return new getLoadOutputList_argsTupleScheme();
      }
    }

    private static class getLoadOutputList_argsTupleScheme extends TupleScheme<getLoadOutputList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputList_result implements org.apache.thrift.TBase<getLoadOutputList_result, getLoadOutputList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputList_resultTupleSchemeFactory());
    }

    public List<LoanOutputInfo> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfo.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputList_result.class, metaDataMap);
    }

    public getLoadOutputList_result() {
    }

    public getLoadOutputList_result(
      List<LoanOutputInfo> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputList_result(getLoadOutputList_result other) {
      if (other.isSetSuccess()) {
        List<LoanOutputInfo> __this__success = new ArrayList<LoanOutputInfo>(other.success.size());
        for (LoanOutputInfo other_element : other.success) {
          __this__success.add(new LoanOutputInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoadOutputList_result deepCopy() {
      return new getLoadOutputList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LoanOutputInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LoanOutputInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<LoanOutputInfo>();
      }
      this.success.add(elem);
    }

    public List<LoanOutputInfo> getSuccess() {
      return this.success;
    }

    public getLoadOutputList_result setSuccess(List<LoanOutputInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoadOutputList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LoanOutputInfo>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputList_result)
        return this.equals((getLoadOutputList_result)that);
      return false;
    }

    public boolean equals(getLoadOutputList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputList_resultStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputList_resultStandardScheme getScheme() {
        return new getLoadOutputList_resultStandardScheme();
      }
    }

    private static class getLoadOutputList_resultStandardScheme extends StandardScheme<getLoadOutputList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.success = new ArrayList<LoanOutputInfo>(_list280.size);
                  LoanOutputInfo _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = new LoanOutputInfo();
                    _elem281.read(iprot);
                    struct.success.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LoanOutputInfo _iter283 : struct.success)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputList_resultTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputList_resultTupleScheme getScheme() {
        return new getLoadOutputList_resultTupleScheme();
      }
    }

    private static class getLoadOutputList_resultTupleScheme extends TupleScheme<getLoadOutputList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LoanOutputInfo _iter284 : struct.success)
            {
              _iter284.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LoanOutputInfo>(_list285.size);
            LoanOutputInfo _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = new LoanOutputInfo();
              _elem286.read(iprot);
              struct.success.add(_elem286);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputListImpl_args implements org.apache.thrift.TBase<getLoadOutputListImpl_args, getLoadOutputListImpl_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputListImpl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputListImpl_args");

    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputListImpl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputListImpl_argsTupleSchemeFactory());
    }

    public Project project; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT((short)1, "project");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT
            return PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Project.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputListImpl_args.class, metaDataMap);
    }

    public getLoadOutputListImpl_args() {
    }

    public getLoadOutputListImpl_args(
      Project project)
    {
      this();
      this.project = project;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputListImpl_args(getLoadOutputListImpl_args other) {
      if (other.isSetProject()) {
        this.project = new Project(other.project);
      }
    }

    public getLoadOutputListImpl_args deepCopy() {
      return new getLoadOutputListImpl_args(this);
    }

    @Override
    public void clear() {
      this.project = null;
    }

    public Project getProject() {
      return this.project;
    }

    public getLoadOutputListImpl_args setProject(Project project) {
      this.project = project;
      return this;
    }

    public void unsetProject() {
      this.project = null;
    }

    /** Returns true if field project is set (has been assigned a value) and false otherwise */
    public boolean isSetProject() {
      return this.project != null;
    }

    public void setProjectIsSet(boolean value) {
      if (!value) {
        this.project = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT:
        if (value == null) {
          unsetProject();
        } else {
          setProject((Project)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT:
        return getProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT:
        return isSetProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputListImpl_args)
        return this.equals((getLoadOutputListImpl_args)that);
      return false;
    }

    public boolean equals(getLoadOutputListImpl_args that) {
      if (that == null)
        return false;

      boolean this_present_project = true && this.isSetProject();
      boolean that_present_project = true && that.isSetProject();
      if (this_present_project || that_present_project) {
        if (!(this_present_project && that_present_project))
          return false;
        if (!this.project.equals(that.project))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_project = true && (isSetProject());
      list.add(present_project);
      if (present_project)
        list.add(project);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputListImpl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputListImpl_args(");
      boolean first = true;

      sb.append("project:");
      if (this.project == null) {
        sb.append("null");
      } else {
        sb.append(this.project);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (project != null) {
        project.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputListImpl_argsStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputListImpl_argsStandardScheme getScheme() {
        return new getLoadOutputListImpl_argsStandardScheme();
      }
    }

    private static class getLoadOutputListImpl_argsStandardScheme extends StandardScheme<getLoadOutputListImpl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputListImpl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.project = new Project();
                struct.project.read(iprot);
                struct.setProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputListImpl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project != null) {
          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
          struct.project.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputListImpl_argsTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputListImpl_argsTupleScheme getScheme() {
        return new getLoadOutputListImpl_argsTupleScheme();
      }
    }

    private static class getLoadOutputListImpl_argsTupleScheme extends TupleScheme<getLoadOutputListImpl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputListImpl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProject()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProject()) {
          struct.project.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputListImpl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.project = new Project();
          struct.project.read(iprot);
          struct.setProjectIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputListImpl_result implements org.apache.thrift.TBase<getLoadOutputListImpl_result, getLoadOutputListImpl_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputListImpl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputListImpl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputListImpl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputListImpl_resultTupleSchemeFactory());
    }

    public LoanOutputInfoImpl success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfoImpl.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputListImpl_result.class, metaDataMap);
    }

    public getLoadOutputListImpl_result() {
    }

    public getLoadOutputListImpl_result(
      LoanOutputInfoImpl success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputListImpl_result(getLoadOutputListImpl_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanOutputInfoImpl(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoadOutputListImpl_result deepCopy() {
      return new getLoadOutputListImpl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoanOutputInfoImpl getSuccess() {
      return this.success;
    }

    public getLoadOutputListImpl_result setSuccess(LoanOutputInfoImpl success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoadOutputListImpl_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanOutputInfoImpl)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputListImpl_result)
        return this.equals((getLoadOutputListImpl_result)that);
      return false;
    }

    public boolean equals(getLoadOutputListImpl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputListImpl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputListImpl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputListImpl_resultStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputListImpl_resultStandardScheme getScheme() {
        return new getLoadOutputListImpl_resultStandardScheme();
      }
    }

    private static class getLoadOutputListImpl_resultStandardScheme extends StandardScheme<getLoadOutputListImpl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputListImpl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanOutputInfoImpl();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputListImpl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputListImpl_resultTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputListImpl_resultTupleScheme getScheme() {
        return new getLoadOutputListImpl_resultTupleScheme();
      }
    }

    private static class getLoadOutputListImpl_resultTupleScheme extends TupleScheme<getLoadOutputListImpl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputListImpl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputListImpl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LoanOutputInfoImpl();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class insertLoadOutputinfo_args implements org.apache.thrift.TBase<insertLoadOutputinfo_args, insertLoadOutputinfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertLoadOutputinfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertLoadOutputinfo_args");

    private static final org.apache.thrift.protocol.TField LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOutputInfoImplDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertLoadOutputinfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertLoadOutputinfo_argsTupleSchemeFactory());
    }

    public LoanOutputInfoImplDTO loanOutputInfoImplDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_OUTPUT_INFO_IMPL_DTO((short)1, "loanOutputInfoImplDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
            return LOAN_OUTPUT_INFO_IMPL_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_OUTPUT_INFO_IMPL_DTO, new org.apache.thrift.meta_data.FieldMetaData("loanOutputInfoImplDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfoImplDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertLoadOutputinfo_args.class, metaDataMap);
    }

    public insertLoadOutputinfo_args() {
    }

    public insertLoadOutputinfo_args(
      LoanOutputInfoImplDTO loanOutputInfoImplDTO)
    {
      this();
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertLoadOutputinfo_args(insertLoadOutputinfo_args other) {
      if (other.isSetLoanOutputInfoImplDTO()) {
        this.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO(other.loanOutputInfoImplDTO);
      }
    }

    public insertLoadOutputinfo_args deepCopy() {
      return new insertLoadOutputinfo_args(this);
    }

    @Override
    public void clear() {
      this.loanOutputInfoImplDTO = null;
    }

    public LoanOutputInfoImplDTO getLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO;
    }

    public insertLoadOutputinfo_args setLoanOutputInfoImplDTO(LoanOutputInfoImplDTO loanOutputInfoImplDTO) {
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      return this;
    }

    public void unsetLoanOutputInfoImplDTO() {
      this.loanOutputInfoImplDTO = null;
    }

    /** Returns true if field loanOutputInfoImplDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO != null;
    }

    public void setLoanOutputInfoImplDTOIsSet(boolean value) {
      if (!value) {
        this.loanOutputInfoImplDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        if (value == null) {
          unsetLoanOutputInfoImplDTO();
        } else {
          setLoanOutputInfoImplDTO((LoanOutputInfoImplDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return getLoanOutputInfoImplDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return isSetLoanOutputInfoImplDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertLoadOutputinfo_args)
        return this.equals((insertLoadOutputinfo_args)that);
      return false;
    }

    public boolean equals(insertLoadOutputinfo_args that) {
      if (that == null)
        return false;

      boolean this_present_loanOutputInfoImplDTO = true && this.isSetLoanOutputInfoImplDTO();
      boolean that_present_loanOutputInfoImplDTO = true && that.isSetLoanOutputInfoImplDTO();
      if (this_present_loanOutputInfoImplDTO || that_present_loanOutputInfoImplDTO) {
        if (!(this_present_loanOutputInfoImplDTO && that_present_loanOutputInfoImplDTO))
          return false;
        if (!this.loanOutputInfoImplDTO.equals(that.loanOutputInfoImplDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanOutputInfoImplDTO = true && (isSetLoanOutputInfoImplDTO());
      list.add(present_loanOutputInfoImplDTO);
      if (present_loanOutputInfoImplDTO)
        list.add(loanOutputInfoImplDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertLoadOutputinfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanOutputInfoImplDTO()).compareTo(other.isSetLoanOutputInfoImplDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanOutputInfoImplDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOutputInfoImplDTO, other.loanOutputInfoImplDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertLoadOutputinfo_args(");
      boolean first = true;

      sb.append("loanOutputInfoImplDTO:");
      if (this.loanOutputInfoImplDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.loanOutputInfoImplDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanOutputInfoImplDTO != null) {
        loanOutputInfoImplDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertLoadOutputinfo_argsStandardSchemeFactory implements SchemeFactory {
      public insertLoadOutputinfo_argsStandardScheme getScheme() {
        return new insertLoadOutputinfo_argsStandardScheme();
      }
    }

    private static class insertLoadOutputinfo_argsStandardScheme extends StandardScheme<insertLoadOutputinfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
                struct.loanOutputInfoImplDTO.read(iprot);
                struct.setLoanOutputInfoImplDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loanOutputInfoImplDTO != null) {
          oprot.writeFieldBegin(LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC);
          struct.loanOutputInfoImplDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertLoadOutputinfo_argsTupleSchemeFactory implements SchemeFactory {
      public insertLoadOutputinfo_argsTupleScheme getScheme() {
        return new insertLoadOutputinfo_argsTupleScheme();
      }
    }

    private static class insertLoadOutputinfo_argsTupleScheme extends TupleScheme<insertLoadOutputinfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanOutputInfoImplDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanOutputInfoImplDTO()) {
          struct.loanOutputInfoImplDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
          struct.loanOutputInfoImplDTO.read(iprot);
          struct.setLoanOutputInfoImplDTOIsSet(true);
        }
      }
    }

  }

  public static class insertLoadOutputinfo_result implements org.apache.thrift.TBase<insertLoadOutputinfo_result, insertLoadOutputinfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertLoadOutputinfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertLoadOutputinfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertLoadOutputinfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertLoadOutputinfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertLoadOutputinfo_result.class, metaDataMap);
    }

    public insertLoadOutputinfo_result() {
    }

    public insertLoadOutputinfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertLoadOutputinfo_result(insertLoadOutputinfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public insertLoadOutputinfo_result deepCopy() {
      return new insertLoadOutputinfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertLoadOutputinfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public insertLoadOutputinfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertLoadOutputinfo_result)
        return this.equals((insertLoadOutputinfo_result)that);
      return false;
    }

    public boolean equals(insertLoadOutputinfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertLoadOutputinfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertLoadOutputinfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertLoadOutputinfo_resultStandardSchemeFactory implements SchemeFactory {
      public insertLoadOutputinfo_resultStandardScheme getScheme() {
        return new insertLoadOutputinfo_resultStandardScheme();
      }
    }

    private static class insertLoadOutputinfo_resultStandardScheme extends StandardScheme<insertLoadOutputinfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertLoadOutputinfo_resultTupleSchemeFactory implements SchemeFactory {
      public insertLoadOutputinfo_resultTupleScheme getScheme() {
        return new insertLoadOutputinfo_resultTupleScheme();
      }
    }

    private static class insertLoadOutputinfo_resultTupleScheme extends TupleScheme<insertLoadOutputinfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputinfoList_args implements org.apache.thrift.TBase<getLoadOutputinfoList_args, getLoadOutputinfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputinfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputinfoList_args");

    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputinfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputinfoList_argsTupleSchemeFactory());
    }

    public Project project; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT((short)1, "project");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT
            return PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Project.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputinfoList_args.class, metaDataMap);
    }

    public getLoadOutputinfoList_args() {
    }

    public getLoadOutputinfoList_args(
      Project project)
    {
      this();
      this.project = project;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputinfoList_args(getLoadOutputinfoList_args other) {
      if (other.isSetProject()) {
        this.project = new Project(other.project);
      }
    }

    public getLoadOutputinfoList_args deepCopy() {
      return new getLoadOutputinfoList_args(this);
    }

    @Override
    public void clear() {
      this.project = null;
    }

    public Project getProject() {
      return this.project;
    }

    public getLoadOutputinfoList_args setProject(Project project) {
      this.project = project;
      return this;
    }

    public void unsetProject() {
      this.project = null;
    }

    /** Returns true if field project is set (has been assigned a value) and false otherwise */
    public boolean isSetProject() {
      return this.project != null;
    }

    public void setProjectIsSet(boolean value) {
      if (!value) {
        this.project = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT:
        if (value == null) {
          unsetProject();
        } else {
          setProject((Project)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT:
        return getProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT:
        return isSetProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputinfoList_args)
        return this.equals((getLoadOutputinfoList_args)that);
      return false;
    }

    public boolean equals(getLoadOutputinfoList_args that) {
      if (that == null)
        return false;

      boolean this_present_project = true && this.isSetProject();
      boolean that_present_project = true && that.isSetProject();
      if (this_present_project || that_present_project) {
        if (!(this_present_project && that_present_project))
          return false;
        if (!this.project.equals(that.project))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_project = true && (isSetProject());
      list.add(present_project);
      if (present_project)
        list.add(project);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputinfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputinfoList_args(");
      boolean first = true;

      sb.append("project:");
      if (this.project == null) {
        sb.append("null");
      } else {
        sb.append(this.project);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (project != null) {
        project.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputinfoList_argsStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputinfoList_argsStandardScheme getScheme() {
        return new getLoadOutputinfoList_argsStandardScheme();
      }
    }

    private static class getLoadOutputinfoList_argsStandardScheme extends StandardScheme<getLoadOutputinfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputinfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.project = new Project();
                struct.project.read(iprot);
                struct.setProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputinfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project != null) {
          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
          struct.project.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputinfoList_argsTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputinfoList_argsTupleScheme getScheme() {
        return new getLoadOutputinfoList_argsTupleScheme();
      }
    }

    private static class getLoadOutputinfoList_argsTupleScheme extends TupleScheme<getLoadOutputinfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProject()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProject()) {
          struct.project.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.project = new Project();
          struct.project.read(iprot);
          struct.setProjectIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputinfoList_result implements org.apache.thrift.TBase<getLoadOutputinfoList_result, getLoadOutputinfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputinfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputinfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputinfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputinfoList_resultTupleSchemeFactory());
    }

    public List<LoanOutputInfo> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfo.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputinfoList_result.class, metaDataMap);
    }

    public getLoadOutputinfoList_result() {
    }

    public getLoadOutputinfoList_result(
      List<LoanOutputInfo> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputinfoList_result(getLoadOutputinfoList_result other) {
      if (other.isSetSuccess()) {
        List<LoanOutputInfo> __this__success = new ArrayList<LoanOutputInfo>(other.success.size());
        for (LoanOutputInfo other_element : other.success) {
          __this__success.add(new LoanOutputInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoadOutputinfoList_result deepCopy() {
      return new getLoadOutputinfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LoanOutputInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LoanOutputInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<LoanOutputInfo>();
      }
      this.success.add(elem);
    }

    public List<LoanOutputInfo> getSuccess() {
      return this.success;
    }

    public getLoadOutputinfoList_result setSuccess(List<LoanOutputInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoadOutputinfoList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LoanOutputInfo>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputinfoList_result)
        return this.equals((getLoadOutputinfoList_result)that);
      return false;
    }

    public boolean equals(getLoadOutputinfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputinfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputinfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputinfoList_resultStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputinfoList_resultStandardScheme getScheme() {
        return new getLoadOutputinfoList_resultStandardScheme();
      }
    }

    private static class getLoadOutputinfoList_resultStandardScheme extends StandardScheme<getLoadOutputinfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputinfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                  struct.success = new ArrayList<LoanOutputInfo>(_list288.size);
                  LoanOutputInfo _elem289;
                  for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                  {
                    _elem289 = new LoanOutputInfo();
                    _elem289.read(iprot);
                    struct.success.add(_elem289);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputinfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LoanOutputInfo _iter291 : struct.success)
            {
              _iter291.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputinfoList_resultTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputinfoList_resultTupleScheme getScheme() {
        return new getLoadOutputinfoList_resultTupleScheme();
      }
    }

    private static class getLoadOutputinfoList_resultTupleScheme extends TupleScheme<getLoadOutputinfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LoanOutputInfo _iter292 : struct.success)
            {
              _iter292.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LoanOutputInfo>(_list293.size);
            LoanOutputInfo _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = new LoanOutputInfo();
              _elem294.read(iprot);
              struct.success.add(_elem294);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputinfo_args implements org.apache.thrift.TBase<getLoadOutputinfo_args, getLoadOutputinfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputinfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputinfo_args");

    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputinfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputinfo_argsTupleSchemeFactory());
    }

    public Project project; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT((short)1, "project");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT
            return PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Project.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputinfo_args.class, metaDataMap);
    }

    public getLoadOutputinfo_args() {
    }

    public getLoadOutputinfo_args(
      Project project)
    {
      this();
      this.project = project;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputinfo_args(getLoadOutputinfo_args other) {
      if (other.isSetProject()) {
        this.project = new Project(other.project);
      }
    }

    public getLoadOutputinfo_args deepCopy() {
      return new getLoadOutputinfo_args(this);
    }

    @Override
    public void clear() {
      this.project = null;
    }

    public Project getProject() {
      return this.project;
    }

    public getLoadOutputinfo_args setProject(Project project) {
      this.project = project;
      return this;
    }

    public void unsetProject() {
      this.project = null;
    }

    /** Returns true if field project is set (has been assigned a value) and false otherwise */
    public boolean isSetProject() {
      return this.project != null;
    }

    public void setProjectIsSet(boolean value) {
      if (!value) {
        this.project = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT:
        if (value == null) {
          unsetProject();
        } else {
          setProject((Project)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT:
        return getProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT:
        return isSetProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputinfo_args)
        return this.equals((getLoadOutputinfo_args)that);
      return false;
    }

    public boolean equals(getLoadOutputinfo_args that) {
      if (that == null)
        return false;

      boolean this_present_project = true && this.isSetProject();
      boolean that_present_project = true && that.isSetProject();
      if (this_present_project || that_present_project) {
        if (!(this_present_project && that_present_project))
          return false;
        if (!this.project.equals(that.project))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_project = true && (isSetProject());
      list.add(present_project);
      if (present_project)
        list.add(project);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputinfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputinfo_args(");
      boolean first = true;

      sb.append("project:");
      if (this.project == null) {
        sb.append("null");
      } else {
        sb.append(this.project);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (project != null) {
        project.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputinfo_argsStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputinfo_argsStandardScheme getScheme() {
        return new getLoadOutputinfo_argsStandardScheme();
      }
    }

    private static class getLoadOutputinfo_argsStandardScheme extends StandardScheme<getLoadOutputinfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.project = new Project();
                struct.project.read(iprot);
                struct.setProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project != null) {
          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
          struct.project.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputinfo_argsTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputinfo_argsTupleScheme getScheme() {
        return new getLoadOutputinfo_argsTupleScheme();
      }
    }

    private static class getLoadOutputinfo_argsTupleScheme extends TupleScheme<getLoadOutputinfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProject()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProject()) {
          struct.project.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.project = new Project();
          struct.project.read(iprot);
          struct.setProjectIsSet(true);
        }
      }
    }

  }

  public static class getLoadOutputinfo_result implements org.apache.thrift.TBase<getLoadOutputinfo_result, getLoadOutputinfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoadOutputinfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoadOutputinfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoadOutputinfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoadOutputinfo_resultTupleSchemeFactory());
    }

    public LoanOutputInfoImpl success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfoImpl.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoadOutputinfo_result.class, metaDataMap);
    }

    public getLoadOutputinfo_result() {
    }

    public getLoadOutputinfo_result(
      LoanOutputInfoImpl success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoadOutputinfo_result(getLoadOutputinfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanOutputInfoImpl(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoadOutputinfo_result deepCopy() {
      return new getLoadOutputinfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoanOutputInfoImpl getSuccess() {
      return this.success;
    }

    public getLoadOutputinfo_result setSuccess(LoanOutputInfoImpl success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoadOutputinfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanOutputInfoImpl)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoadOutputinfo_result)
        return this.equals((getLoadOutputinfo_result)that);
      return false;
    }

    public boolean equals(getLoadOutputinfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoadOutputinfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoadOutputinfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoadOutputinfo_resultStandardSchemeFactory implements SchemeFactory {
      public getLoadOutputinfo_resultStandardScheme getScheme() {
        return new getLoadOutputinfo_resultStandardScheme();
      }
    }

    private static class getLoadOutputinfo_resultStandardScheme extends StandardScheme<getLoadOutputinfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanOutputInfoImpl();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoadOutputinfo_resultTupleSchemeFactory implements SchemeFactory {
      public getLoadOutputinfo_resultTupleScheme getScheme() {
        return new getLoadOutputinfo_resultTupleScheme();
      }
    }

    private static class getLoadOutputinfo_resultTupleScheme extends TupleScheme<getLoadOutputinfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LoanOutputInfoImpl();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateLoadOutputinfo_args implements org.apache.thrift.TBase<updateLoadOutputinfo_args, updateLoadOutputinfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLoadOutputinfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLoadOutputinfo_args");

    private static final org.apache.thrift.protocol.TField LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOutputInfoImplDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLoadOutputinfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLoadOutputinfo_argsTupleSchemeFactory());
    }

    public LoanOutputInfoImplDTO loanOutputInfoImplDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_OUTPUT_INFO_IMPL_DTO((short)1, "loanOutputInfoImplDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
            return LOAN_OUTPUT_INFO_IMPL_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_OUTPUT_INFO_IMPL_DTO, new org.apache.thrift.meta_data.FieldMetaData("loanOutputInfoImplDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfoImplDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLoadOutputinfo_args.class, metaDataMap);
    }

    public updateLoadOutputinfo_args() {
    }

    public updateLoadOutputinfo_args(
      LoanOutputInfoImplDTO loanOutputInfoImplDTO)
    {
      this();
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLoadOutputinfo_args(updateLoadOutputinfo_args other) {
      if (other.isSetLoanOutputInfoImplDTO()) {
        this.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO(other.loanOutputInfoImplDTO);
      }
    }

    public updateLoadOutputinfo_args deepCopy() {
      return new updateLoadOutputinfo_args(this);
    }

    @Override
    public void clear() {
      this.loanOutputInfoImplDTO = null;
    }

    public LoanOutputInfoImplDTO getLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO;
    }

    public updateLoadOutputinfo_args setLoanOutputInfoImplDTO(LoanOutputInfoImplDTO loanOutputInfoImplDTO) {
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      return this;
    }

    public void unsetLoanOutputInfoImplDTO() {
      this.loanOutputInfoImplDTO = null;
    }

    /** Returns true if field loanOutputInfoImplDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO != null;
    }

    public void setLoanOutputInfoImplDTOIsSet(boolean value) {
      if (!value) {
        this.loanOutputInfoImplDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        if (value == null) {
          unsetLoanOutputInfoImplDTO();
        } else {
          setLoanOutputInfoImplDTO((LoanOutputInfoImplDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return getLoanOutputInfoImplDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return isSetLoanOutputInfoImplDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLoadOutputinfo_args)
        return this.equals((updateLoadOutputinfo_args)that);
      return false;
    }

    public boolean equals(updateLoadOutputinfo_args that) {
      if (that == null)
        return false;

      boolean this_present_loanOutputInfoImplDTO = true && this.isSetLoanOutputInfoImplDTO();
      boolean that_present_loanOutputInfoImplDTO = true && that.isSetLoanOutputInfoImplDTO();
      if (this_present_loanOutputInfoImplDTO || that_present_loanOutputInfoImplDTO) {
        if (!(this_present_loanOutputInfoImplDTO && that_present_loanOutputInfoImplDTO))
          return false;
        if (!this.loanOutputInfoImplDTO.equals(that.loanOutputInfoImplDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanOutputInfoImplDTO = true && (isSetLoanOutputInfoImplDTO());
      list.add(present_loanOutputInfoImplDTO);
      if (present_loanOutputInfoImplDTO)
        list.add(loanOutputInfoImplDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLoadOutputinfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanOutputInfoImplDTO()).compareTo(other.isSetLoanOutputInfoImplDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanOutputInfoImplDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOutputInfoImplDTO, other.loanOutputInfoImplDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLoadOutputinfo_args(");
      boolean first = true;

      sb.append("loanOutputInfoImplDTO:");
      if (this.loanOutputInfoImplDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.loanOutputInfoImplDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanOutputInfoImplDTO != null) {
        loanOutputInfoImplDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLoadOutputinfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateLoadOutputinfo_argsStandardScheme getScheme() {
        return new updateLoadOutputinfo_argsStandardScheme();
      }
    }

    private static class updateLoadOutputinfo_argsStandardScheme extends StandardScheme<updateLoadOutputinfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
                struct.loanOutputInfoImplDTO.read(iprot);
                struct.setLoanOutputInfoImplDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loanOutputInfoImplDTO != null) {
          oprot.writeFieldBegin(LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC);
          struct.loanOutputInfoImplDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLoadOutputinfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateLoadOutputinfo_argsTupleScheme getScheme() {
        return new updateLoadOutputinfo_argsTupleScheme();
      }
    }

    private static class updateLoadOutputinfo_argsTupleScheme extends TupleScheme<updateLoadOutputinfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanOutputInfoImplDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanOutputInfoImplDTO()) {
          struct.loanOutputInfoImplDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
          struct.loanOutputInfoImplDTO.read(iprot);
          struct.setLoanOutputInfoImplDTOIsSet(true);
        }
      }
    }

  }

  public static class updateLoadOutputinfo_result implements org.apache.thrift.TBase<updateLoadOutputinfo_result, updateLoadOutputinfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLoadOutputinfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLoadOutputinfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLoadOutputinfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLoadOutputinfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLoadOutputinfo_result.class, metaDataMap);
    }

    public updateLoadOutputinfo_result() {
    }

    public updateLoadOutputinfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLoadOutputinfo_result(updateLoadOutputinfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLoadOutputinfo_result deepCopy() {
      return new updateLoadOutputinfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLoadOutputinfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLoadOutputinfo_result)
        return this.equals((updateLoadOutputinfo_result)that);
      return false;
    }

    public boolean equals(updateLoadOutputinfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLoadOutputinfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLoadOutputinfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLoadOutputinfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateLoadOutputinfo_resultStandardScheme getScheme() {
        return new updateLoadOutputinfo_resultStandardScheme();
      }
    }

    private static class updateLoadOutputinfo_resultStandardScheme extends StandardScheme<updateLoadOutputinfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLoadOutputinfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateLoadOutputinfo_resultTupleScheme getScheme() {
        return new updateLoadOutputinfo_resultTupleScheme();
      }
    }

    private static class updateLoadOutputinfo_resultTupleScheme extends TupleScheme<updateLoadOutputinfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteLoadOutputinfo_args implements org.apache.thrift.TBase<deleteLoadOutputinfo_args, deleteLoadOutputinfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLoadOutputinfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLoadOutputinfo_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLoadOutputinfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLoadOutputinfo_argsTupleSchemeFactory());
    }

    public int pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLoadOutputinfo_args.class, metaDataMap);
    }

    public deleteLoadOutputinfo_args() {
    }

    public deleteLoadOutputinfo_args(
      int pId)
    {
      this();
      this.pId = pId;
      setPIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLoadOutputinfo_args(deleteLoadOutputinfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pId = other.pId;
    }

    public deleteLoadOutputinfo_args deepCopy() {
      return new deleteLoadOutputinfo_args(this);
    }

    @Override
    public void clear() {
      setPIdIsSet(false);
      this.pId = 0;
    }

    public int getPId() {
      return this.pId;
    }

    public deleteLoadOutputinfo_args setPId(int pId) {
      this.pId = pId;
      setPIdIsSet(true);
      return this;
    }

    public void unsetPId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return Integer.valueOf(getPId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLoadOutputinfo_args)
        return this.equals((deleteLoadOutputinfo_args)that);
      return false;
    }

    public boolean equals(deleteLoadOutputinfo_args that) {
      if (that == null)
        return false;

      boolean this_present_pId = true;
      boolean that_present_pId = true;
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (this.pId != that.pId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pId = true;
      list.add(present_pId);
      if (present_pId)
        list.add(pId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLoadOutputinfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLoadOutputinfo_args(");
      boolean first = true;

      sb.append("pId:");
      sb.append(this.pId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLoadOutputinfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLoadOutputinfo_argsStandardScheme getScheme() {
        return new deleteLoadOutputinfo_argsStandardScheme();
      }
    }

    private static class deleteLoadOutputinfo_argsStandardScheme extends StandardScheme<deleteLoadOutputinfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pId = iprot.readI32();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeI32(struct.pId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLoadOutputinfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLoadOutputinfo_argsTupleScheme getScheme() {
        return new deleteLoadOutputinfo_argsTupleScheme();
      }
    }

    private static class deleteLoadOutputinfo_argsTupleScheme extends TupleScheme<deleteLoadOutputinfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeI32(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLoadOutputinfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readI32();
          struct.setPIdIsSet(true);
        }
      }
    }

  }

  public static class deleteLoadOutputinfo_result implements org.apache.thrift.TBase<deleteLoadOutputinfo_result, deleteLoadOutputinfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLoadOutputinfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLoadOutputinfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLoadOutputinfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLoadOutputinfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLoadOutputinfo_result.class, metaDataMap);
    }

    public deleteLoadOutputinfo_result() {
    }

    public deleteLoadOutputinfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLoadOutputinfo_result(deleteLoadOutputinfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteLoadOutputinfo_result deepCopy() {
      return new deleteLoadOutputinfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteLoadOutputinfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLoadOutputinfo_result)
        return this.equals((deleteLoadOutputinfo_result)that);
      return false;
    }

    public boolean equals(deleteLoadOutputinfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLoadOutputinfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLoadOutputinfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLoadOutputinfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLoadOutputinfo_resultStandardScheme getScheme() {
        return new deleteLoadOutputinfo_resultStandardScheme();
      }
    }

    private static class deleteLoadOutputinfo_resultStandardScheme extends StandardScheme<deleteLoadOutputinfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLoadOutputinfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLoadOutputinfo_resultTupleScheme getScheme() {
        return new deleteLoadOutputinfo_resultTupleScheme();
      }
    }

    private static class deleteLoadOutputinfo_resultTupleScheme extends TupleScheme<deleteLoadOutputinfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLoadOutputinfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRepaymentPlan_args implements org.apache.thrift.TBase<updateRepaymentPlan_args, updateRepaymentPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepaymentPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepaymentPlan_args");

    private static final org.apache.thrift.protocol.TField LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOutputInfoImplDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepaymentPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepaymentPlan_argsTupleSchemeFactory());
    }

    public LoanOutputInfoImplDTO loanOutputInfoImplDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_OUTPUT_INFO_IMPL_DTO((short)1, "loanOutputInfoImplDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
            return LOAN_OUTPUT_INFO_IMPL_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_OUTPUT_INFO_IMPL_DTO, new org.apache.thrift.meta_data.FieldMetaData("loanOutputInfoImplDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanOutputInfoImplDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepaymentPlan_args.class, metaDataMap);
    }

    public updateRepaymentPlan_args() {
    }

    public updateRepaymentPlan_args(
      LoanOutputInfoImplDTO loanOutputInfoImplDTO)
    {
      this();
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepaymentPlan_args(updateRepaymentPlan_args other) {
      if (other.isSetLoanOutputInfoImplDTO()) {
        this.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO(other.loanOutputInfoImplDTO);
      }
    }

    public updateRepaymentPlan_args deepCopy() {
      return new updateRepaymentPlan_args(this);
    }

    @Override
    public void clear() {
      this.loanOutputInfoImplDTO = null;
    }

    public LoanOutputInfoImplDTO getLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO;
    }

    public updateRepaymentPlan_args setLoanOutputInfoImplDTO(LoanOutputInfoImplDTO loanOutputInfoImplDTO) {
      this.loanOutputInfoImplDTO = loanOutputInfoImplDTO;
      return this;
    }

    public void unsetLoanOutputInfoImplDTO() {
      this.loanOutputInfoImplDTO = null;
    }

    /** Returns true if field loanOutputInfoImplDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanOutputInfoImplDTO() {
      return this.loanOutputInfoImplDTO != null;
    }

    public void setLoanOutputInfoImplDTOIsSet(boolean value) {
      if (!value) {
        this.loanOutputInfoImplDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        if (value == null) {
          unsetLoanOutputInfoImplDTO();
        } else {
          setLoanOutputInfoImplDTO((LoanOutputInfoImplDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return getLoanOutputInfoImplDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_OUTPUT_INFO_IMPL_DTO:
        return isSetLoanOutputInfoImplDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepaymentPlan_args)
        return this.equals((updateRepaymentPlan_args)that);
      return false;
    }

    public boolean equals(updateRepaymentPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_loanOutputInfoImplDTO = true && this.isSetLoanOutputInfoImplDTO();
      boolean that_present_loanOutputInfoImplDTO = true && that.isSetLoanOutputInfoImplDTO();
      if (this_present_loanOutputInfoImplDTO || that_present_loanOutputInfoImplDTO) {
        if (!(this_present_loanOutputInfoImplDTO && that_present_loanOutputInfoImplDTO))
          return false;
        if (!this.loanOutputInfoImplDTO.equals(that.loanOutputInfoImplDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanOutputInfoImplDTO = true && (isSetLoanOutputInfoImplDTO());
      list.add(present_loanOutputInfoImplDTO);
      if (present_loanOutputInfoImplDTO)
        list.add(loanOutputInfoImplDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepaymentPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanOutputInfoImplDTO()).compareTo(other.isSetLoanOutputInfoImplDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanOutputInfoImplDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOutputInfoImplDTO, other.loanOutputInfoImplDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepaymentPlan_args(");
      boolean first = true;

      sb.append("loanOutputInfoImplDTO:");
      if (this.loanOutputInfoImplDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.loanOutputInfoImplDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanOutputInfoImplDTO != null) {
        loanOutputInfoImplDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepaymentPlan_argsStandardSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_argsStandardScheme getScheme() {
        return new updateRepaymentPlan_argsStandardScheme();
      }
    }

    private static class updateRepaymentPlan_argsStandardScheme extends StandardScheme<updateRepaymentPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_OUTPUT_INFO_IMPL_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
                struct.loanOutputInfoImplDTO.read(iprot);
                struct.setLoanOutputInfoImplDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loanOutputInfoImplDTO != null) {
          oprot.writeFieldBegin(LOAN_OUTPUT_INFO_IMPL_DTO_FIELD_DESC);
          struct.loanOutputInfoImplDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepaymentPlan_argsTupleSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_argsTupleScheme getScheme() {
        return new updateRepaymentPlan_argsTupleScheme();
      }
    }

    private static class updateRepaymentPlan_argsTupleScheme extends TupleScheme<updateRepaymentPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanOutputInfoImplDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanOutputInfoImplDTO()) {
          struct.loanOutputInfoImplDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanOutputInfoImplDTO = new LoanOutputInfoImplDTO();
          struct.loanOutputInfoImplDTO.read(iprot);
          struct.setLoanOutputInfoImplDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRepaymentPlan_result implements org.apache.thrift.TBase<updateRepaymentPlan_result, updateRepaymentPlan_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepaymentPlan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepaymentPlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepaymentPlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepaymentPlan_resultTupleSchemeFactory());
    }

    public Loan success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Loan.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepaymentPlan_result.class, metaDataMap);
    }

    public updateRepaymentPlan_result() {
    }

    public updateRepaymentPlan_result(
      Loan success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepaymentPlan_result(updateRepaymentPlan_result other) {
      if (other.isSetSuccess()) {
        this.success = new Loan(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateRepaymentPlan_result deepCopy() {
      return new updateRepaymentPlan_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Loan getSuccess() {
      return this.success;
    }

    public updateRepaymentPlan_result setSuccess(Loan success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateRepaymentPlan_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Loan)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepaymentPlan_result)
        return this.equals((updateRepaymentPlan_result)that);
      return false;
    }

    public boolean equals(updateRepaymentPlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepaymentPlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepaymentPlan_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepaymentPlan_resultStandardSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_resultStandardScheme getScheme() {
        return new updateRepaymentPlan_resultStandardScheme();
      }
    }

    private static class updateRepaymentPlan_resultStandardScheme extends StandardScheme<updateRepaymentPlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Loan();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepaymentPlan_resultTupleSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_resultTupleScheme getScheme() {
        return new updateRepaymentPlan_resultTupleScheme();
      }
    }

    private static class updateRepaymentPlan_resultTupleScheme extends TupleScheme<updateRepaymentPlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Loan();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryloanEndDtInfo_args implements org.apache.thrift.TBase<queryloanEndDtInfo_args, queryloanEndDtInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryloanEndDtInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryloanEndDtInfo_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOAN_OUT_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOutDt", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryloanEndDtInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryloanEndDtInfo_argsTupleSchemeFactory());
    }

    public int loanId; // required
    public String loanOutDt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId"),
      LOAN_OUT_DT((short)2, "loanOutDt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          case 2: // LOAN_OUT_DT
            return LOAN_OUT_DT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_OUT_DT, new org.apache.thrift.meta_data.FieldMetaData("loanOutDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryloanEndDtInfo_args.class, metaDataMap);
    }

    public queryloanEndDtInfo_args() {
    }

    public queryloanEndDtInfo_args(
      int loanId,
      String loanOutDt)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
      this.loanOutDt = loanOutDt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryloanEndDtInfo_args(queryloanEndDtInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
      if (other.isSetLoanOutDt()) {
        this.loanOutDt = other.loanOutDt;
      }
    }

    public queryloanEndDtInfo_args deepCopy() {
      return new queryloanEndDtInfo_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
      this.loanOutDt = null;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public queryloanEndDtInfo_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public String getLoanOutDt() {
      return this.loanOutDt;
    }

    public queryloanEndDtInfo_args setLoanOutDt(String loanOutDt) {
      this.loanOutDt = loanOutDt;
      return this;
    }

    public void unsetLoanOutDt() {
      this.loanOutDt = null;
    }

    /** Returns true if field loanOutDt is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanOutDt() {
      return this.loanOutDt != null;
    }

    public void setLoanOutDtIsSet(boolean value) {
      if (!value) {
        this.loanOutDt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      case LOAN_OUT_DT:
        if (value == null) {
          unsetLoanOutDt();
        } else {
          setLoanOutDt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      case LOAN_OUT_DT:
        return getLoanOutDt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      case LOAN_OUT_DT:
        return isSetLoanOutDt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryloanEndDtInfo_args)
        return this.equals((queryloanEndDtInfo_args)that);
      return false;
    }

    public boolean equals(queryloanEndDtInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      boolean this_present_loanOutDt = true && this.isSetLoanOutDt();
      boolean that_present_loanOutDt = true && that.isSetLoanOutDt();
      if (this_present_loanOutDt || that_present_loanOutDt) {
        if (!(this_present_loanOutDt && that_present_loanOutDt))
          return false;
        if (!this.loanOutDt.equals(that.loanOutDt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      boolean present_loanOutDt = true && (isSetLoanOutDt());
      list.add(present_loanOutDt);
      if (present_loanOutDt)
        list.add(loanOutDt);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryloanEndDtInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanOutDt()).compareTo(other.isSetLoanOutDt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanOutDt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOutDt, other.loanOutDt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryloanEndDtInfo_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanOutDt:");
      if (this.loanOutDt == null) {
        sb.append("null");
      } else {
        sb.append(this.loanOutDt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryloanEndDtInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryloanEndDtInfo_argsStandardScheme getScheme() {
        return new queryloanEndDtInfo_argsStandardScheme();
      }
    }

    private static class queryloanEndDtInfo_argsStandardScheme extends StandardScheme<queryloanEndDtInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryloanEndDtInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOAN_OUT_DT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loanOutDt = iprot.readString();
                struct.setLoanOutDtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryloanEndDtInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        if (struct.loanOutDt != null) {
          oprot.writeFieldBegin(LOAN_OUT_DT_FIELD_DESC);
          oprot.writeString(struct.loanOutDt);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryloanEndDtInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryloanEndDtInfo_argsTupleScheme getScheme() {
        return new queryloanEndDtInfo_argsTupleScheme();
      }
    }

    private static class queryloanEndDtInfo_argsTupleScheme extends TupleScheme<queryloanEndDtInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryloanEndDtInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        if (struct.isSetLoanOutDt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
        if (struct.isSetLoanOutDt()) {
          oprot.writeString(struct.loanOutDt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryloanEndDtInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loanOutDt = iprot.readString();
          struct.setLoanOutDtIsSet(true);
        }
      }
    }

  }

  public static class queryloanEndDtInfo_result implements org.apache.thrift.TBase<queryloanEndDtInfo_result, queryloanEndDtInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryloanEndDtInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryloanEndDtInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryloanEndDtInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryloanEndDtInfo_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryloanEndDtInfo_result.class, metaDataMap);
    }

    public queryloanEndDtInfo_result() {
    }

    public queryloanEndDtInfo_result(
      String success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryloanEndDtInfo_result(queryloanEndDtInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryloanEndDtInfo_result deepCopy() {
      return new queryloanEndDtInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryloanEndDtInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryloanEndDtInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryloanEndDtInfo_result)
        return this.equals((queryloanEndDtInfo_result)that);
      return false;
    }

    public boolean equals(queryloanEndDtInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryloanEndDtInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryloanEndDtInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryloanEndDtInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryloanEndDtInfo_resultStandardScheme getScheme() {
        return new queryloanEndDtInfo_resultStandardScheme();
      }
    }

    private static class queryloanEndDtInfo_resultStandardScheme extends StandardScheme<queryloanEndDtInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryloanEndDtInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryloanEndDtInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryloanEndDtInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryloanEndDtInfo_resultTupleScheme getScheme() {
        return new queryloanEndDtInfo_resultTupleScheme();
      }
    }

    private static class queryloanEndDtInfo_resultTupleScheme extends TupleScheme<queryloanEndDtInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryloanEndDtInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryloanEndDtInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryloanRepayFun_args implements org.apache.thrift.TBase<queryloanRepayFun_args, queryloanRepayFun_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryloanRepayFun_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryloanRepayFun_args");

    private static final org.apache.thrift.protocol.TField REPAY_FUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFunId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryloanRepayFun_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryloanRepayFun_argsTupleSchemeFactory());
    }

    public int repayFunId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_FUN_ID((short)1, "repayFunId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_FUN_ID
            return REPAY_FUN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYFUNID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_FUN_ID, new org.apache.thrift.meta_data.FieldMetaData("repayFunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryloanRepayFun_args.class, metaDataMap);
    }

    public queryloanRepayFun_args() {
    }

    public queryloanRepayFun_args(
      int repayFunId)
    {
      this();
      this.repayFunId = repayFunId;
      setRepayFunIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryloanRepayFun_args(queryloanRepayFun_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayFunId = other.repayFunId;
    }

    public queryloanRepayFun_args deepCopy() {
      return new queryloanRepayFun_args(this);
    }

    @Override
    public void clear() {
      setRepayFunIdIsSet(false);
      this.repayFunId = 0;
    }

    public int getRepayFunId() {
      return this.repayFunId;
    }

    public queryloanRepayFun_args setRepayFunId(int repayFunId) {
      this.repayFunId = repayFunId;
      setRepayFunIdIsSet(true);
      return this;
    }

    public void unsetRepayFunId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYFUNID_ISSET_ID);
    }

    /** Returns true if field repayFunId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayFunId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYFUNID_ISSET_ID);
    }

    public void setRepayFunIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYFUNID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_FUN_ID:
        if (value == null) {
          unsetRepayFunId();
        } else {
          setRepayFunId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_FUN_ID:
        return Integer.valueOf(getRepayFunId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_FUN_ID:
        return isSetRepayFunId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryloanRepayFun_args)
        return this.equals((queryloanRepayFun_args)that);
      return false;
    }

    public boolean equals(queryloanRepayFun_args that) {
      if (that == null)
        return false;

      boolean this_present_repayFunId = true;
      boolean that_present_repayFunId = true;
      if (this_present_repayFunId || that_present_repayFunId) {
        if (!(this_present_repayFunId && that_present_repayFunId))
          return false;
        if (this.repayFunId != that.repayFunId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayFunId = true;
      list.add(present_repayFunId);
      if (present_repayFunId)
        list.add(repayFunId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryloanRepayFun_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayFunId()).compareTo(other.isSetRepayFunId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayFunId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFunId, other.repayFunId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryloanRepayFun_args(");
      boolean first = true;

      sb.append("repayFunId:");
      sb.append(this.repayFunId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryloanRepayFun_argsStandardSchemeFactory implements SchemeFactory {
      public queryloanRepayFun_argsStandardScheme getScheme() {
        return new queryloanRepayFun_argsStandardScheme();
      }
    }

    private static class queryloanRepayFun_argsStandardScheme extends StandardScheme<queryloanRepayFun_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryloanRepayFun_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_FUN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayFunId = iprot.readI32();
                struct.setRepayFunIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryloanRepayFun_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_FUN_ID_FIELD_DESC);
        oprot.writeI32(struct.repayFunId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryloanRepayFun_argsTupleSchemeFactory implements SchemeFactory {
      public queryloanRepayFun_argsTupleScheme getScheme() {
        return new queryloanRepayFun_argsTupleScheme();
      }
    }

    private static class queryloanRepayFun_argsTupleScheme extends TupleScheme<queryloanRepayFun_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryloanRepayFun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayFunId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayFunId()) {
          oprot.writeI32(struct.repayFunId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryloanRepayFun_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayFunId = iprot.readI32();
          struct.setRepayFunIdIsSet(true);
        }
      }
    }

  }

  public static class queryloanRepayFun_result implements org.apache.thrift.TBase<queryloanRepayFun_result, queryloanRepayFun_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryloanRepayFun_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryloanRepayFun_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryloanRepayFun_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryloanRepayFun_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryloanRepayFun_result.class, metaDataMap);
    }

    public queryloanRepayFun_result() {
    }

    public queryloanRepayFun_result(
      String success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryloanRepayFun_result(queryloanRepayFun_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryloanRepayFun_result deepCopy() {
      return new queryloanRepayFun_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryloanRepayFun_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryloanRepayFun_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryloanRepayFun_result)
        return this.equals((queryloanRepayFun_result)that);
      return false;
    }

    public boolean equals(queryloanRepayFun_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryloanRepayFun_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryloanRepayFun_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryloanRepayFun_resultStandardSchemeFactory implements SchemeFactory {
      public queryloanRepayFun_resultStandardScheme getScheme() {
        return new queryloanRepayFun_resultStandardScheme();
      }
    }

    private static class queryloanRepayFun_resultStandardScheme extends StandardScheme<queryloanRepayFun_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryloanRepayFun_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryloanRepayFun_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryloanRepayFun_resultTupleSchemeFactory implements SchemeFactory {
      public queryloanRepayFun_resultTupleScheme getScheme() {
        return new queryloanRepayFun_resultTupleScheme();
      }
    }

    private static class queryloanRepayFun_resultTupleScheme extends TupleScheme<queryloanRepayFun_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryloanRepayFun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryloanRepayFun_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

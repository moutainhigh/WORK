/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-17")
public class SysUserOrgInfoService {

  /**
   *   
   * @Title: SysUserOrgInfoServiceImpl.java
   * @Package com.xlkfinance.bms.server.system.service
   * @Description: 用户数据权限类(用户机构关联信息),数据库表：sys_user_org_info
   * @author huxinlong  
   * @date 2016年1月11日 下午6:06:47
   * @version V1.0  
   */
  public interface Iface {

    /**
     * @Description:  新增用户数据权限
     * @return int
     * @author: huxinlong
     * @date: 2016年1月11日
     * 
     * @param sysUserOrgInfo
     */
    public int saveUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description:  删除用户数据权限
     * @return int
     * @author: huxinlong
     * @date: 2016年1月11日
     * 
     * @param sysUserOrgInfo
     */
    public int deleteUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description:  根据用户Id获取数据权限列表
     * @return List<SysUserOrgInfo>
     * @author: huxinlong
     * @date: 2016年1月11日
     * 
     * @param userId
     */
    public List<SysUserOrgInfo> listUserOrgInfo(int userId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description:  根据机构Id获取数据权限列表
     * @return List<SysUserOrgInfo>
     * @author: huxinlong
     * @date: 2016年1月11日
     * 
     * @param orgIds
     */
    public List<SysUserOrgInfo> listUserOrgInfoByOrgId(List<Integer> orgIds) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * 根据指定条件获取获取单条用户数据权限对象
     * @param userOrg
     * @return
     * 
     * @param userOrg
     */
    public SysUserOrgInfo getUserOrgInfo(SysUserOrgInfo userOrg) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * 根据指定条件判断是否存在此数据权限信息
     * 存在返回true,不存在false
     * @param userOrg
     * @return
     * 
     * @param userOrg
     */
    public boolean isExistUserOrgInfo(SysUserOrgInfo userOrg) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * 修改用户数据权限
     * @param userOrg
     * @return
     * 
     * @param userOrg
     */
    public int updateUserOrgInfo(SysUserOrgInfo userOrg) throws org.apache.thrift.TException;

    /**
     * 根据指定条件获取数据权限列表
     * 
     * 
     * @param dataAuthView
     */
    public List<SysDataAuthView> listDataAuth(SysDataAuthView dataAuthView) throws org.apache.thrift.TException;

    /**
     * 统计数据权限列表记录数
     * @param dataAuthView
     * @return
     * 
     * 
     * @param dataAuthView
     */
    public int listDataAuthCount(SysDataAuthView dataAuthView) throws org.apache.thrift.TException;

    /**
     * 批量删除数据权限信息
     * @param integers
     * @return
     * 
     * @param dataIds
     */
    public int batchDeleteDataAuth(List<Integer> dataIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveUserOrgInfo(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUserOrgInfo(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listUserOrgInfo(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listUserOrgInfoByOrgId(List<Integer> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExistUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listDataAuth(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listDataAuthCount(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDeleteDataAuth(List<Integer> dataIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int saveUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveUserOrgInfo(sysUserOrgInfo);
      return recv_saveUserOrgInfo();
    }

    public void send_saveUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws org.apache.thrift.TException
    {
      saveUserOrgInfo_args args = new saveUserOrgInfo_args();
      args.setSysUserOrgInfo(sysUserOrgInfo);
      sendBase("saveUserOrgInfo", args);
    }

    public int recv_saveUserOrgInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveUserOrgInfo_result result = new saveUserOrgInfo_result();
      receiveBase(result, "saveUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveUserOrgInfo failed: unknown result");
    }

    public int deleteUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteUserOrgInfo(sysUserOrgInfo);
      return recv_deleteUserOrgInfo();
    }

    public void send_deleteUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) throws org.apache.thrift.TException
    {
      deleteUserOrgInfo_args args = new deleteUserOrgInfo_args();
      args.setSysUserOrgInfo(sysUserOrgInfo);
      sendBase("deleteUserOrgInfo", args);
    }

    public int recv_deleteUserOrgInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteUserOrgInfo_result result = new deleteUserOrgInfo_result();
      receiveBase(result, "deleteUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUserOrgInfo failed: unknown result");
    }

    public List<SysUserOrgInfo> listUserOrgInfo(int userId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_listUserOrgInfo(userId);
      return recv_listUserOrgInfo();
    }

    public void send_listUserOrgInfo(int userId) throws org.apache.thrift.TException
    {
      listUserOrgInfo_args args = new listUserOrgInfo_args();
      args.setUserId(userId);
      sendBase("listUserOrgInfo", args);
    }

    public List<SysUserOrgInfo> recv_listUserOrgInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      listUserOrgInfo_result result = new listUserOrgInfo_result();
      receiveBase(result, "listUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserOrgInfo failed: unknown result");
    }

    public List<SysUserOrgInfo> listUserOrgInfoByOrgId(List<Integer> orgIds) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_listUserOrgInfoByOrgId(orgIds);
      return recv_listUserOrgInfoByOrgId();
    }

    public void send_listUserOrgInfoByOrgId(List<Integer> orgIds) throws org.apache.thrift.TException
    {
      listUserOrgInfoByOrgId_args args = new listUserOrgInfoByOrgId_args();
      args.setOrgIds(orgIds);
      sendBase("listUserOrgInfoByOrgId", args);
    }

    public List<SysUserOrgInfo> recv_listUserOrgInfoByOrgId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      listUserOrgInfoByOrgId_result result = new listUserOrgInfoByOrgId_result();
      receiveBase(result, "listUserOrgInfoByOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserOrgInfoByOrgId failed: unknown result");
    }

    public SysUserOrgInfo getUserOrgInfo(SysUserOrgInfo userOrg) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getUserOrgInfo(userOrg);
      return recv_getUserOrgInfo();
    }

    public void send_getUserOrgInfo(SysUserOrgInfo userOrg) throws org.apache.thrift.TException
    {
      getUserOrgInfo_args args = new getUserOrgInfo_args();
      args.setUserOrg(userOrg);
      sendBase("getUserOrgInfo", args);
    }

    public SysUserOrgInfo recv_getUserOrgInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getUserOrgInfo_result result = new getUserOrgInfo_result();
      receiveBase(result, "getUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserOrgInfo failed: unknown result");
    }

    public boolean isExistUserOrgInfo(SysUserOrgInfo userOrg) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_isExistUserOrgInfo(userOrg);
      return recv_isExistUserOrgInfo();
    }

    public void send_isExistUserOrgInfo(SysUserOrgInfo userOrg) throws org.apache.thrift.TException
    {
      isExistUserOrgInfo_args args = new isExistUserOrgInfo_args();
      args.setUserOrg(userOrg);
      sendBase("isExistUserOrgInfo", args);
    }

    public boolean recv_isExistUserOrgInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      isExistUserOrgInfo_result result = new isExistUserOrgInfo_result();
      receiveBase(result, "isExistUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExistUserOrgInfo failed: unknown result");
    }

    public int updateUserOrgInfo(SysUserOrgInfo userOrg) throws org.apache.thrift.TException
    {
      send_updateUserOrgInfo(userOrg);
      return recv_updateUserOrgInfo();
    }

    public void send_updateUserOrgInfo(SysUserOrgInfo userOrg) throws org.apache.thrift.TException
    {
      updateUserOrgInfo_args args = new updateUserOrgInfo_args();
      args.setUserOrg(userOrg);
      sendBase("updateUserOrgInfo", args);
    }

    public int recv_updateUserOrgInfo() throws org.apache.thrift.TException
    {
      updateUserOrgInfo_result result = new updateUserOrgInfo_result();
      receiveBase(result, "updateUserOrgInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserOrgInfo failed: unknown result");
    }

    public List<SysDataAuthView> listDataAuth(SysDataAuthView dataAuthView) throws org.apache.thrift.TException
    {
      send_listDataAuth(dataAuthView);
      return recv_listDataAuth();
    }

    public void send_listDataAuth(SysDataAuthView dataAuthView) throws org.apache.thrift.TException
    {
      listDataAuth_args args = new listDataAuth_args();
      args.setDataAuthView(dataAuthView);
      sendBase("listDataAuth", args);
    }

    public List<SysDataAuthView> recv_listDataAuth() throws org.apache.thrift.TException
    {
      listDataAuth_result result = new listDataAuth_result();
      receiveBase(result, "listDataAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDataAuth failed: unknown result");
    }

    public int listDataAuthCount(SysDataAuthView dataAuthView) throws org.apache.thrift.TException
    {
      send_listDataAuthCount(dataAuthView);
      return recv_listDataAuthCount();
    }

    public void send_listDataAuthCount(SysDataAuthView dataAuthView) throws org.apache.thrift.TException
    {
      listDataAuthCount_args args = new listDataAuthCount_args();
      args.setDataAuthView(dataAuthView);
      sendBase("listDataAuthCount", args);
    }

    public int recv_listDataAuthCount() throws org.apache.thrift.TException
    {
      listDataAuthCount_result result = new listDataAuthCount_result();
      receiveBase(result, "listDataAuthCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDataAuthCount failed: unknown result");
    }

    public int batchDeleteDataAuth(List<Integer> dataIds) throws org.apache.thrift.TException
    {
      send_batchDeleteDataAuth(dataIds);
      return recv_batchDeleteDataAuth();
    }

    public void send_batchDeleteDataAuth(List<Integer> dataIds) throws org.apache.thrift.TException
    {
      batchDeleteDataAuth_args args = new batchDeleteDataAuth_args();
      args.setDataIds(dataIds);
      sendBase("batchDeleteDataAuth", args);
    }

    public int recv_batchDeleteDataAuth() throws org.apache.thrift.TException
    {
      batchDeleteDataAuth_result result = new batchDeleteDataAuth_result();
      receiveBase(result, "batchDeleteDataAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDeleteDataAuth failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveUserOrgInfo(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUserOrgInfo_call method_call = new saveUserOrgInfo_call(sysUserOrgInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysUserOrgInfo sysUserOrgInfo;
      public saveUserOrgInfo_call(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysUserOrgInfo = sysUserOrgInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUserOrgInfo_args args = new saveUserOrgInfo_args();
        args.setSysUserOrgInfo(sysUserOrgInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveUserOrgInfo();
      }
    }

    public void deleteUserOrgInfo(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserOrgInfo_call method_call = new deleteUserOrgInfo_call(sysUserOrgInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysUserOrgInfo sysUserOrgInfo;
      public deleteUserOrgInfo_call(SysUserOrgInfo sysUserOrgInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysUserOrgInfo = sysUserOrgInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserOrgInfo_args args = new deleteUserOrgInfo_args();
        args.setSysUserOrgInfo(sysUserOrgInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteUserOrgInfo();
      }
    }

    public void listUserOrgInfo(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserOrgInfo_call method_call = new listUserOrgInfo_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public listUserOrgInfo_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserOrgInfo_args args = new listUserOrgInfo_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysUserOrgInfo> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserOrgInfo();
      }
    }

    public void listUserOrgInfoByOrgId(List<Integer> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserOrgInfoByOrgId_call method_call = new listUserOrgInfoByOrgId_call(orgIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserOrgInfoByOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> orgIds;
      public listUserOrgInfoByOrgId_call(List<Integer> orgIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orgIds = orgIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserOrgInfoByOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserOrgInfoByOrgId_args args = new listUserOrgInfoByOrgId_args();
        args.setOrgIds(orgIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysUserOrgInfo> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserOrgInfoByOrgId();
      }
    }

    public void getUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserOrgInfo_call method_call = new getUserOrgInfo_call(userOrg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysUserOrgInfo userOrg;
      public getUserOrgInfo_call(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userOrg = userOrg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserOrgInfo_args args = new getUserOrgInfo_args();
        args.setUserOrg(userOrg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysUserOrgInfo getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserOrgInfo();
      }
    }

    public void isExistUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExistUserOrgInfo_call method_call = new isExistUserOrgInfo_call(userOrg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExistUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysUserOrgInfo userOrg;
      public isExistUserOrgInfo_call(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userOrg = userOrg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExistUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExistUserOrgInfo_args args = new isExistUserOrgInfo_args();
        args.setUserOrg(userOrg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExistUserOrgInfo();
      }
    }

    public void updateUserOrgInfo(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserOrgInfo_call method_call = new updateUserOrgInfo_call(userOrg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserOrgInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysUserOrgInfo userOrg;
      public updateUserOrgInfo_call(SysUserOrgInfo userOrg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userOrg = userOrg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserOrgInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserOrgInfo_args args = new updateUserOrgInfo_args();
        args.setUserOrg(userOrg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserOrgInfo();
      }
    }

    public void listDataAuth(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDataAuth_call method_call = new listDataAuth_call(dataAuthView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDataAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysDataAuthView dataAuthView;
      public listDataAuth_call(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataAuthView = dataAuthView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDataAuth_args args = new listDataAuth_args();
        args.setDataAuthView(dataAuthView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysDataAuthView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDataAuth();
      }
    }

    public void listDataAuthCount(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDataAuthCount_call method_call = new listDataAuthCount_call(dataAuthView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDataAuthCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysDataAuthView dataAuthView;
      public listDataAuthCount_call(SysDataAuthView dataAuthView, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataAuthView = dataAuthView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataAuthCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDataAuthCount_args args = new listDataAuthCount_args();
        args.setDataAuthView(dataAuthView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDataAuthCount();
      }
    }

    public void batchDeleteDataAuth(List<Integer> dataIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDeleteDataAuth_call method_call = new batchDeleteDataAuth_call(dataIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDeleteDataAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> dataIds;
      public batchDeleteDataAuth_call(List<Integer> dataIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataIds = dataIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteDataAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDeleteDataAuth_args args = new batchDeleteDataAuth_args();
        args.setDataIds(dataIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDeleteDataAuth();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveUserOrgInfo", new saveUserOrgInfo());
      processMap.put("deleteUserOrgInfo", new deleteUserOrgInfo());
      processMap.put("listUserOrgInfo", new listUserOrgInfo());
      processMap.put("listUserOrgInfoByOrgId", new listUserOrgInfoByOrgId());
      processMap.put("getUserOrgInfo", new getUserOrgInfo());
      processMap.put("isExistUserOrgInfo", new isExistUserOrgInfo());
      processMap.put("updateUserOrgInfo", new updateUserOrgInfo());
      processMap.put("listDataAuth", new listDataAuth());
      processMap.put("listDataAuthCount", new listDataAuthCount());
      processMap.put("batchDeleteDataAuth", new batchDeleteDataAuth());
      return processMap;
    }

    public static class saveUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUserOrgInfo_args> {
      public saveUserOrgInfo() {
        super("saveUserOrgInfo");
      }

      public saveUserOrgInfo_args getEmptyArgsInstance() {
        return new saveUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUserOrgInfo_result getResult(I iface, saveUserOrgInfo_args args) throws org.apache.thrift.TException {
        saveUserOrgInfo_result result = new saveUserOrgInfo_result();
        try {
          result.success = iface.saveUserOrgInfo(args.sysUserOrgInfo);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserOrgInfo_args> {
      public deleteUserOrgInfo() {
        super("deleteUserOrgInfo");
      }

      public deleteUserOrgInfo_args getEmptyArgsInstance() {
        return new deleteUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserOrgInfo_result getResult(I iface, deleteUserOrgInfo_args args) throws org.apache.thrift.TException {
        deleteUserOrgInfo_result result = new deleteUserOrgInfo_result();
        try {
          result.success = iface.deleteUserOrgInfo(args.sysUserOrgInfo);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserOrgInfo_args> {
      public listUserOrgInfo() {
        super("listUserOrgInfo");
      }

      public listUserOrgInfo_args getEmptyArgsInstance() {
        return new listUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserOrgInfo_result getResult(I iface, listUserOrgInfo_args args) throws org.apache.thrift.TException {
        listUserOrgInfo_result result = new listUserOrgInfo_result();
        try {
          result.success = iface.listUserOrgInfo(args.userId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listUserOrgInfoByOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserOrgInfoByOrgId_args> {
      public listUserOrgInfoByOrgId() {
        super("listUserOrgInfoByOrgId");
      }

      public listUserOrgInfoByOrgId_args getEmptyArgsInstance() {
        return new listUserOrgInfoByOrgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserOrgInfoByOrgId_result getResult(I iface, listUserOrgInfoByOrgId_args args) throws org.apache.thrift.TException {
        listUserOrgInfoByOrgId_result result = new listUserOrgInfoByOrgId_result();
        try {
          result.success = iface.listUserOrgInfoByOrgId(args.orgIds);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserOrgInfo_args> {
      public getUserOrgInfo() {
        super("getUserOrgInfo");
      }

      public getUserOrgInfo_args getEmptyArgsInstance() {
        return new getUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserOrgInfo_result getResult(I iface, getUserOrgInfo_args args) throws org.apache.thrift.TException {
        getUserOrgInfo_result result = new getUserOrgInfo_result();
        try {
          result.success = iface.getUserOrgInfo(args.userOrg);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class isExistUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExistUserOrgInfo_args> {
      public isExistUserOrgInfo() {
        super("isExistUserOrgInfo");
      }

      public isExistUserOrgInfo_args getEmptyArgsInstance() {
        return new isExistUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExistUserOrgInfo_result getResult(I iface, isExistUserOrgInfo_args args) throws org.apache.thrift.TException {
        isExistUserOrgInfo_result result = new isExistUserOrgInfo_result();
        try {
          result.success = iface.isExistUserOrgInfo(args.userOrg);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateUserOrgInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserOrgInfo_args> {
      public updateUserOrgInfo() {
        super("updateUserOrgInfo");
      }

      public updateUserOrgInfo_args getEmptyArgsInstance() {
        return new updateUserOrgInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserOrgInfo_result getResult(I iface, updateUserOrgInfo_args args) throws org.apache.thrift.TException {
        updateUserOrgInfo_result result = new updateUserOrgInfo_result();
        result.success = iface.updateUserOrgInfo(args.userOrg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class listDataAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDataAuth_args> {
      public listDataAuth() {
        super("listDataAuth");
      }

      public listDataAuth_args getEmptyArgsInstance() {
        return new listDataAuth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDataAuth_result getResult(I iface, listDataAuth_args args) throws org.apache.thrift.TException {
        listDataAuth_result result = new listDataAuth_result();
        result.success = iface.listDataAuth(args.dataAuthView);
        return result;
      }
    }

    public static class listDataAuthCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDataAuthCount_args> {
      public listDataAuthCount() {
        super("listDataAuthCount");
      }

      public listDataAuthCount_args getEmptyArgsInstance() {
        return new listDataAuthCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDataAuthCount_result getResult(I iface, listDataAuthCount_args args) throws org.apache.thrift.TException {
        listDataAuthCount_result result = new listDataAuthCount_result();
        result.success = iface.listDataAuthCount(args.dataAuthView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchDeleteDataAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteDataAuth_args> {
      public batchDeleteDataAuth() {
        super("batchDeleteDataAuth");
      }

      public batchDeleteDataAuth_args getEmptyArgsInstance() {
        return new batchDeleteDataAuth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDeleteDataAuth_result getResult(I iface, batchDeleteDataAuth_args args) throws org.apache.thrift.TException {
        batchDeleteDataAuth_result result = new batchDeleteDataAuth_result();
        result.success = iface.batchDeleteDataAuth(args.dataIds);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveUserOrgInfo", new saveUserOrgInfo());
      processMap.put("deleteUserOrgInfo", new deleteUserOrgInfo());
      processMap.put("listUserOrgInfo", new listUserOrgInfo());
      processMap.put("listUserOrgInfoByOrgId", new listUserOrgInfoByOrgId());
      processMap.put("getUserOrgInfo", new getUserOrgInfo());
      processMap.put("isExistUserOrgInfo", new isExistUserOrgInfo());
      processMap.put("updateUserOrgInfo", new updateUserOrgInfo());
      processMap.put("listDataAuth", new listDataAuth());
      processMap.put("listDataAuthCount", new listDataAuthCount());
      processMap.put("batchDeleteDataAuth", new batchDeleteDataAuth());
      return processMap;
    }

    public static class saveUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveUserOrgInfo_args, Integer> {
      public saveUserOrgInfo() {
        super("saveUserOrgInfo");
      }

      public saveUserOrgInfo_args getEmptyArgsInstance() {
        return new saveUserOrgInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveUserOrgInfo_result result = new saveUserOrgInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveUserOrgInfo_result result = new saveUserOrgInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveUserOrgInfo(args.sysUserOrgInfo,resultHandler);
      }
    }

    public static class deleteUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUserOrgInfo_args, Integer> {
      public deleteUserOrgInfo() {
        super("deleteUserOrgInfo");
      }

      public deleteUserOrgInfo_args getEmptyArgsInstance() {
        return new deleteUserOrgInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteUserOrgInfo_result result = new deleteUserOrgInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUserOrgInfo_result result = new deleteUserOrgInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteUserOrgInfo(args.sysUserOrgInfo,resultHandler);
      }
    }

    public static class listUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserOrgInfo_args, List<SysUserOrgInfo>> {
      public listUserOrgInfo() {
        super("listUserOrgInfo");
      }

      public listUserOrgInfo_args getEmptyArgsInstance() {
        return new listUserOrgInfo_args();
      }

      public AsyncMethodCallback<List<SysUserOrgInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysUserOrgInfo>>() { 
          public void onComplete(List<SysUserOrgInfo> o) {
            listUserOrgInfo_result result = new listUserOrgInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserOrgInfo_result result = new listUserOrgInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysUserOrgInfo>> resultHandler) throws TException {
        iface.listUserOrgInfo(args.userId,resultHandler);
      }
    }

    public static class listUserOrgInfoByOrgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserOrgInfoByOrgId_args, List<SysUserOrgInfo>> {
      public listUserOrgInfoByOrgId() {
        super("listUserOrgInfoByOrgId");
      }

      public listUserOrgInfoByOrgId_args getEmptyArgsInstance() {
        return new listUserOrgInfoByOrgId_args();
      }

      public AsyncMethodCallback<List<SysUserOrgInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysUserOrgInfo>>() { 
          public void onComplete(List<SysUserOrgInfo> o) {
            listUserOrgInfoByOrgId_result result = new listUserOrgInfoByOrgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserOrgInfoByOrgId_result result = new listUserOrgInfoByOrgId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserOrgInfoByOrgId_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysUserOrgInfo>> resultHandler) throws TException {
        iface.listUserOrgInfoByOrgId(args.orgIds,resultHandler);
      }
    }

    public static class getUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserOrgInfo_args, SysUserOrgInfo> {
      public getUserOrgInfo() {
        super("getUserOrgInfo");
      }

      public getUserOrgInfo_args getEmptyArgsInstance() {
        return new getUserOrgInfo_args();
      }

      public AsyncMethodCallback<SysUserOrgInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysUserOrgInfo>() { 
          public void onComplete(SysUserOrgInfo o) {
            getUserOrgInfo_result result = new getUserOrgInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserOrgInfo_result result = new getUserOrgInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<SysUserOrgInfo> resultHandler) throws TException {
        iface.getUserOrgInfo(args.userOrg,resultHandler);
      }
    }

    public static class isExistUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExistUserOrgInfo_args, Boolean> {
      public isExistUserOrgInfo() {
        super("isExistUserOrgInfo");
      }

      public isExistUserOrgInfo_args getEmptyArgsInstance() {
        return new isExistUserOrgInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExistUserOrgInfo_result result = new isExistUserOrgInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExistUserOrgInfo_result result = new isExistUserOrgInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExistUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExistUserOrgInfo(args.userOrg,resultHandler);
      }
    }

    public static class updateUserOrgInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserOrgInfo_args, Integer> {
      public updateUserOrgInfo() {
        super("updateUserOrgInfo");
      }

      public updateUserOrgInfo_args getEmptyArgsInstance() {
        return new updateUserOrgInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateUserOrgInfo_result result = new updateUserOrgInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserOrgInfo_result result = new updateUserOrgInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserOrgInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateUserOrgInfo(args.userOrg,resultHandler);
      }
    }

    public static class listDataAuth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listDataAuth_args, List<SysDataAuthView>> {
      public listDataAuth() {
        super("listDataAuth");
      }

      public listDataAuth_args getEmptyArgsInstance() {
        return new listDataAuth_args();
      }

      public AsyncMethodCallback<List<SysDataAuthView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysDataAuthView>>() { 
          public void onComplete(List<SysDataAuthView> o) {
            listDataAuth_result result = new listDataAuth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listDataAuth_result result = new listDataAuth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDataAuth_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysDataAuthView>> resultHandler) throws TException {
        iface.listDataAuth(args.dataAuthView,resultHandler);
      }
    }

    public static class listDataAuthCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listDataAuthCount_args, Integer> {
      public listDataAuthCount() {
        super("listDataAuthCount");
      }

      public listDataAuthCount_args getEmptyArgsInstance() {
        return new listDataAuthCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            listDataAuthCount_result result = new listDataAuthCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listDataAuthCount_result result = new listDataAuthCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDataAuthCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.listDataAuthCount(args.dataAuthView,resultHandler);
      }
    }

    public static class batchDeleteDataAuth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDeleteDataAuth_args, Integer> {
      public batchDeleteDataAuth() {
        super("batchDeleteDataAuth");
      }

      public batchDeleteDataAuth_args getEmptyArgsInstance() {
        return new batchDeleteDataAuth_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDeleteDataAuth_result result = new batchDeleteDataAuth_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDeleteDataAuth_result result = new batchDeleteDataAuth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDeleteDataAuth_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDeleteDataAuth(args.dataIds,resultHandler);
      }
    }

  }

  public static class saveUserOrgInfo_args implements org.apache.thrift.TBase<saveUserOrgInfo_args, saveUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_USER_ORG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysUserOrgInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserOrgInfo_argsTupleSchemeFactory());
    }

    public SysUserOrgInfo sysUserOrgInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_USER_ORG_INFO((short)1, "sysUserOrgInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_USER_ORG_INFO
            return SYS_USER_ORG_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_USER_ORG_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysUserOrgInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserOrgInfo_args.class, metaDataMap);
    }

    public saveUserOrgInfo_args() {
    }

    public saveUserOrgInfo_args(
      SysUserOrgInfo sysUserOrgInfo)
    {
      this();
      this.sysUserOrgInfo = sysUserOrgInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserOrgInfo_args(saveUserOrgInfo_args other) {
      if (other.isSetSysUserOrgInfo()) {
        this.sysUserOrgInfo = new SysUserOrgInfo(other.sysUserOrgInfo);
      }
    }

    public saveUserOrgInfo_args deepCopy() {
      return new saveUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysUserOrgInfo = null;
    }

    public SysUserOrgInfo getSysUserOrgInfo() {
      return this.sysUserOrgInfo;
    }

    public saveUserOrgInfo_args setSysUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) {
      this.sysUserOrgInfo = sysUserOrgInfo;
      return this;
    }

    public void unsetSysUserOrgInfo() {
      this.sysUserOrgInfo = null;
    }

    /** Returns true if field sysUserOrgInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysUserOrgInfo() {
      return this.sysUserOrgInfo != null;
    }

    public void setSysUserOrgInfoIsSet(boolean value) {
      if (!value) {
        this.sysUserOrgInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_USER_ORG_INFO:
        if (value == null) {
          unsetSysUserOrgInfo();
        } else {
          setSysUserOrgInfo((SysUserOrgInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_USER_ORG_INFO:
        return getSysUserOrgInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_USER_ORG_INFO:
        return isSetSysUserOrgInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserOrgInfo_args)
        return this.equals((saveUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(saveUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysUserOrgInfo = true && this.isSetSysUserOrgInfo();
      boolean that_present_sysUserOrgInfo = true && that.isSetSysUserOrgInfo();
      if (this_present_sysUserOrgInfo || that_present_sysUserOrgInfo) {
        if (!(this_present_sysUserOrgInfo && that_present_sysUserOrgInfo))
          return false;
        if (!this.sysUserOrgInfo.equals(that.sysUserOrgInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysUserOrgInfo = true && (isSetSysUserOrgInfo());
      list.add(present_sysUserOrgInfo);
      if (present_sysUserOrgInfo)
        list.add(sysUserOrgInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysUserOrgInfo()).compareTo(other.isSetSysUserOrgInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysUserOrgInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysUserOrgInfo, other.sysUserOrgInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserOrgInfo_args(");
      boolean first = true;

      sb.append("sysUserOrgInfo:");
      if (this.sysUserOrgInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysUserOrgInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysUserOrgInfo != null) {
        sysUserOrgInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public saveUserOrgInfo_argsStandardScheme getScheme() {
        return new saveUserOrgInfo_argsStandardScheme();
      }
    }

    private static class saveUserOrgInfo_argsStandardScheme extends StandardScheme<saveUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_USER_ORG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysUserOrgInfo = new SysUserOrgInfo();
                struct.sysUserOrgInfo.read(iprot);
                struct.setSysUserOrgInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysUserOrgInfo != null) {
          oprot.writeFieldBegin(SYS_USER_ORG_INFO_FIELD_DESC);
          struct.sysUserOrgInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public saveUserOrgInfo_argsTupleScheme getScheme() {
        return new saveUserOrgInfo_argsTupleScheme();
      }
    }

    private static class saveUserOrgInfo_argsTupleScheme extends TupleScheme<saveUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysUserOrgInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysUserOrgInfo()) {
          struct.sysUserOrgInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysUserOrgInfo = new SysUserOrgInfo();
          struct.sysUserOrgInfo.read(iprot);
          struct.setSysUserOrgInfoIsSet(true);
        }
      }
    }

  }

  public static class saveUserOrgInfo_result implements org.apache.thrift.TBase<saveUserOrgInfo_result, saveUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserOrgInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserOrgInfo_result.class, metaDataMap);
    }

    public saveUserOrgInfo_result() {
    }

    public saveUserOrgInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserOrgInfo_result(saveUserOrgInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveUserOrgInfo_result deepCopy() {
      return new saveUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveUserOrgInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveUserOrgInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserOrgInfo_result)
        return this.equals((saveUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(saveUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public saveUserOrgInfo_resultStandardScheme getScheme() {
        return new saveUserOrgInfo_resultStandardScheme();
      }
    }

    private static class saveUserOrgInfo_resultStandardScheme extends StandardScheme<saveUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public saveUserOrgInfo_resultTupleScheme getScheme() {
        return new saveUserOrgInfo_resultTupleScheme();
      }
    }

    private static class saveUserOrgInfo_resultTupleScheme extends TupleScheme<saveUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteUserOrgInfo_args implements org.apache.thrift.TBase<deleteUserOrgInfo_args, deleteUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_USER_ORG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysUserOrgInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserOrgInfo_argsTupleSchemeFactory());
    }

    public SysUserOrgInfo sysUserOrgInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_USER_ORG_INFO((short)1, "sysUserOrgInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_USER_ORG_INFO
            return SYS_USER_ORG_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_USER_ORG_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysUserOrgInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserOrgInfo_args.class, metaDataMap);
    }

    public deleteUserOrgInfo_args() {
    }

    public deleteUserOrgInfo_args(
      SysUserOrgInfo sysUserOrgInfo)
    {
      this();
      this.sysUserOrgInfo = sysUserOrgInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserOrgInfo_args(deleteUserOrgInfo_args other) {
      if (other.isSetSysUserOrgInfo()) {
        this.sysUserOrgInfo = new SysUserOrgInfo(other.sysUserOrgInfo);
      }
    }

    public deleteUserOrgInfo_args deepCopy() {
      return new deleteUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysUserOrgInfo = null;
    }

    public SysUserOrgInfo getSysUserOrgInfo() {
      return this.sysUserOrgInfo;
    }

    public deleteUserOrgInfo_args setSysUserOrgInfo(SysUserOrgInfo sysUserOrgInfo) {
      this.sysUserOrgInfo = sysUserOrgInfo;
      return this;
    }

    public void unsetSysUserOrgInfo() {
      this.sysUserOrgInfo = null;
    }

    /** Returns true if field sysUserOrgInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysUserOrgInfo() {
      return this.sysUserOrgInfo != null;
    }

    public void setSysUserOrgInfoIsSet(boolean value) {
      if (!value) {
        this.sysUserOrgInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_USER_ORG_INFO:
        if (value == null) {
          unsetSysUserOrgInfo();
        } else {
          setSysUserOrgInfo((SysUserOrgInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_USER_ORG_INFO:
        return getSysUserOrgInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_USER_ORG_INFO:
        return isSetSysUserOrgInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserOrgInfo_args)
        return this.equals((deleteUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(deleteUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysUserOrgInfo = true && this.isSetSysUserOrgInfo();
      boolean that_present_sysUserOrgInfo = true && that.isSetSysUserOrgInfo();
      if (this_present_sysUserOrgInfo || that_present_sysUserOrgInfo) {
        if (!(this_present_sysUserOrgInfo && that_present_sysUserOrgInfo))
          return false;
        if (!this.sysUserOrgInfo.equals(that.sysUserOrgInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysUserOrgInfo = true && (isSetSysUserOrgInfo());
      list.add(present_sysUserOrgInfo);
      if (present_sysUserOrgInfo)
        list.add(sysUserOrgInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysUserOrgInfo()).compareTo(other.isSetSysUserOrgInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysUserOrgInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysUserOrgInfo, other.sysUserOrgInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserOrgInfo_args(");
      boolean first = true;

      sb.append("sysUserOrgInfo:");
      if (this.sysUserOrgInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysUserOrgInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysUserOrgInfo != null) {
        sysUserOrgInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserOrgInfo_argsStandardScheme getScheme() {
        return new deleteUserOrgInfo_argsStandardScheme();
      }
    }

    private static class deleteUserOrgInfo_argsStandardScheme extends StandardScheme<deleteUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_USER_ORG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysUserOrgInfo = new SysUserOrgInfo();
                struct.sysUserOrgInfo.read(iprot);
                struct.setSysUserOrgInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysUserOrgInfo != null) {
          oprot.writeFieldBegin(SYS_USER_ORG_INFO_FIELD_DESC);
          struct.sysUserOrgInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserOrgInfo_argsTupleScheme getScheme() {
        return new deleteUserOrgInfo_argsTupleScheme();
      }
    }

    private static class deleteUserOrgInfo_argsTupleScheme extends TupleScheme<deleteUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysUserOrgInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysUserOrgInfo()) {
          struct.sysUserOrgInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysUserOrgInfo = new SysUserOrgInfo();
          struct.sysUserOrgInfo.read(iprot);
          struct.setSysUserOrgInfoIsSet(true);
        }
      }
    }

  }

  public static class deleteUserOrgInfo_result implements org.apache.thrift.TBase<deleteUserOrgInfo_result, deleteUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserOrgInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserOrgInfo_result.class, metaDataMap);
    }

    public deleteUserOrgInfo_result() {
    }

    public deleteUserOrgInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserOrgInfo_result(deleteUserOrgInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteUserOrgInfo_result deepCopy() {
      return new deleteUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteUserOrgInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteUserOrgInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserOrgInfo_result)
        return this.equals((deleteUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(deleteUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserOrgInfo_resultStandardScheme getScheme() {
        return new deleteUserOrgInfo_resultStandardScheme();
      }
    }

    private static class deleteUserOrgInfo_resultStandardScheme extends StandardScheme<deleteUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserOrgInfo_resultTupleScheme getScheme() {
        return new deleteUserOrgInfo_resultTupleScheme();
      }
    }

    private static class deleteUserOrgInfo_resultTupleScheme extends TupleScheme<deleteUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class listUserOrgInfo_args implements org.apache.thrift.TBase<listUserOrgInfo_args, listUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserOrgInfo_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserOrgInfo_args.class, metaDataMap);
    }

    public listUserOrgInfo_args() {
    }

    public listUserOrgInfo_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserOrgInfo_args(listUserOrgInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public listUserOrgInfo_args deepCopy() {
      return new listUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public listUserOrgInfo_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserOrgInfo_args)
        return this.equals((listUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(listUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserOrgInfo_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listUserOrgInfo_argsStandardScheme getScheme() {
        return new listUserOrgInfo_argsStandardScheme();
      }
    }

    private static class listUserOrgInfo_argsStandardScheme extends StandardScheme<listUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listUserOrgInfo_argsTupleScheme getScheme() {
        return new listUserOrgInfo_argsTupleScheme();
      }
    }

    private static class listUserOrgInfo_argsTupleScheme extends TupleScheme<listUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class listUserOrgInfo_result implements org.apache.thrift.TBase<listUserOrgInfo_result, listUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserOrgInfo_resultTupleSchemeFactory());
    }

    public List<SysUserOrgInfo> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserOrgInfo_result.class, metaDataMap);
    }

    public listUserOrgInfo_result() {
    }

    public listUserOrgInfo_result(
      List<SysUserOrgInfo> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserOrgInfo_result(listUserOrgInfo_result other) {
      if (other.isSetSuccess()) {
        List<SysUserOrgInfo> __this__success = new ArrayList<SysUserOrgInfo>(other.success.size());
        for (SysUserOrgInfo other_element : other.success) {
          __this__success.add(new SysUserOrgInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public listUserOrgInfo_result deepCopy() {
      return new listUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysUserOrgInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysUserOrgInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysUserOrgInfo>();
      }
      this.success.add(elem);
    }

    public List<SysUserOrgInfo> getSuccess() {
      return this.success;
    }

    public listUserOrgInfo_result setSuccess(List<SysUserOrgInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public listUserOrgInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysUserOrgInfo>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserOrgInfo_result)
        return this.equals((listUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(listUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listUserOrgInfo_resultStandardScheme getScheme() {
        return new listUserOrgInfo_resultStandardScheme();
      }
    }

    private static class listUserOrgInfo_resultStandardScheme extends StandardScheme<listUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list694 = iprot.readListBegin();
                  struct.success = new ArrayList<SysUserOrgInfo>(_list694.size);
                  SysUserOrgInfo _elem695;
                  for (int _i696 = 0; _i696 < _list694.size; ++_i696)
                  {
                    _elem695 = new SysUserOrgInfo();
                    _elem695.read(iprot);
                    struct.success.add(_elem695);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysUserOrgInfo _iter697 : struct.success)
            {
              _iter697.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listUserOrgInfo_resultTupleScheme getScheme() {
        return new listUserOrgInfo_resultTupleScheme();
      }
    }

    private static class listUserOrgInfo_resultTupleScheme extends TupleScheme<listUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysUserOrgInfo _iter698 : struct.success)
            {
              _iter698.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list699 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysUserOrgInfo>(_list699.size);
            SysUserOrgInfo _elem700;
            for (int _i701 = 0; _i701 < _list699.size; ++_i701)
            {
              _elem700 = new SysUserOrgInfo();
              _elem700.read(iprot);
              struct.success.add(_elem700);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class listUserOrgInfoByOrgId_args implements org.apache.thrift.TBase<listUserOrgInfoByOrgId_args, listUserOrgInfoByOrgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserOrgInfoByOrgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserOrgInfoByOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orgIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserOrgInfoByOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserOrgInfoByOrgId_argsTupleSchemeFactory());
    }

    public List<Integer> orgIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_IDS((short)1, "orgIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_IDS
            return ORG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_IDS, new org.apache.thrift.meta_data.FieldMetaData("orgIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserOrgInfoByOrgId_args.class, metaDataMap);
    }

    public listUserOrgInfoByOrgId_args() {
    }

    public listUserOrgInfoByOrgId_args(
      List<Integer> orgIds)
    {
      this();
      this.orgIds = orgIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserOrgInfoByOrgId_args(listUserOrgInfoByOrgId_args other) {
      if (other.isSetOrgIds()) {
        List<Integer> __this__orgIds = new ArrayList<Integer>(other.orgIds);
        this.orgIds = __this__orgIds;
      }
    }

    public listUserOrgInfoByOrgId_args deepCopy() {
      return new listUserOrgInfoByOrgId_args(this);
    }

    @Override
    public void clear() {
      this.orgIds = null;
    }

    public int getOrgIdsSize() {
      return (this.orgIds == null) ? 0 : this.orgIds.size();
    }

    public java.util.Iterator<Integer> getOrgIdsIterator() {
      return (this.orgIds == null) ? null : this.orgIds.iterator();
    }

    public void addToOrgIds(int elem) {
      if (this.orgIds == null) {
        this.orgIds = new ArrayList<Integer>();
      }
      this.orgIds.add(elem);
    }

    public List<Integer> getOrgIds() {
      return this.orgIds;
    }

    public listUserOrgInfoByOrgId_args setOrgIds(List<Integer> orgIds) {
      this.orgIds = orgIds;
      return this;
    }

    public void unsetOrgIds() {
      this.orgIds = null;
    }

    /** Returns true if field orgIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgIds() {
      return this.orgIds != null;
    }

    public void setOrgIdsIsSet(boolean value) {
      if (!value) {
        this.orgIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_IDS:
        if (value == null) {
          unsetOrgIds();
        } else {
          setOrgIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_IDS:
        return getOrgIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_IDS:
        return isSetOrgIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserOrgInfoByOrgId_args)
        return this.equals((listUserOrgInfoByOrgId_args)that);
      return false;
    }

    public boolean equals(listUserOrgInfoByOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_orgIds = true && this.isSetOrgIds();
      boolean that_present_orgIds = true && that.isSetOrgIds();
      if (this_present_orgIds || that_present_orgIds) {
        if (!(this_present_orgIds && that_present_orgIds))
          return false;
        if (!this.orgIds.equals(that.orgIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orgIds = true && (isSetOrgIds());
      list.add(present_orgIds);
      if (present_orgIds)
        list.add(orgIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserOrgInfoByOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrgIds()).compareTo(other.isSetOrgIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgIds, other.orgIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserOrgInfoByOrgId_args(");
      boolean first = true;

      sb.append("orgIds:");
      if (this.orgIds == null) {
        sb.append("null");
      } else {
        sb.append(this.orgIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserOrgInfoByOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public listUserOrgInfoByOrgId_argsStandardScheme getScheme() {
        return new listUserOrgInfoByOrgId_argsStandardScheme();
      }
    }

    private static class listUserOrgInfoByOrgId_argsStandardScheme extends StandardScheme<listUserOrgInfoByOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserOrgInfoByOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list702 = iprot.readListBegin();
                  struct.orgIds = new ArrayList<Integer>(_list702.size);
                  int _elem703;
                  for (int _i704 = 0; _i704 < _list702.size; ++_i704)
                  {
                    _elem703 = iprot.readI32();
                    struct.orgIds.add(_elem703);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserOrgInfoByOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orgIds != null) {
          oprot.writeFieldBegin(ORG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.orgIds.size()));
            for (int _iter705 : struct.orgIds)
            {
              oprot.writeI32(_iter705);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserOrgInfoByOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public listUserOrgInfoByOrgId_argsTupleScheme getScheme() {
        return new listUserOrgInfoByOrgId_argsTupleScheme();
      }
    }

    private static class listUserOrgInfoByOrgId_argsTupleScheme extends TupleScheme<listUserOrgInfoByOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfoByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrgIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrgIds()) {
          {
            oprot.writeI32(struct.orgIds.size());
            for (int _iter706 : struct.orgIds)
            {
              oprot.writeI32(_iter706);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfoByOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list707 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.orgIds = new ArrayList<Integer>(_list707.size);
            int _elem708;
            for (int _i709 = 0; _i709 < _list707.size; ++_i709)
            {
              _elem708 = iprot.readI32();
              struct.orgIds.add(_elem708);
            }
          }
          struct.setOrgIdsIsSet(true);
        }
      }
    }

  }

  public static class listUserOrgInfoByOrgId_result implements org.apache.thrift.TBase<listUserOrgInfoByOrgId_result, listUserOrgInfoByOrgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserOrgInfoByOrgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserOrgInfoByOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserOrgInfoByOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserOrgInfoByOrgId_resultTupleSchemeFactory());
    }

    public List<SysUserOrgInfo> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserOrgInfoByOrgId_result.class, metaDataMap);
    }

    public listUserOrgInfoByOrgId_result() {
    }

    public listUserOrgInfoByOrgId_result(
      List<SysUserOrgInfo> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserOrgInfoByOrgId_result(listUserOrgInfoByOrgId_result other) {
      if (other.isSetSuccess()) {
        List<SysUserOrgInfo> __this__success = new ArrayList<SysUserOrgInfo>(other.success.size());
        for (SysUserOrgInfo other_element : other.success) {
          __this__success.add(new SysUserOrgInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public listUserOrgInfoByOrgId_result deepCopy() {
      return new listUserOrgInfoByOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysUserOrgInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysUserOrgInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysUserOrgInfo>();
      }
      this.success.add(elem);
    }

    public List<SysUserOrgInfo> getSuccess() {
      return this.success;
    }

    public listUserOrgInfoByOrgId_result setSuccess(List<SysUserOrgInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public listUserOrgInfoByOrgId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysUserOrgInfo>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserOrgInfoByOrgId_result)
        return this.equals((listUserOrgInfoByOrgId_result)that);
      return false;
    }

    public boolean equals(listUserOrgInfoByOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserOrgInfoByOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserOrgInfoByOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserOrgInfoByOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public listUserOrgInfoByOrgId_resultStandardScheme getScheme() {
        return new listUserOrgInfoByOrgId_resultStandardScheme();
      }
    }

    private static class listUserOrgInfoByOrgId_resultStandardScheme extends StandardScheme<listUserOrgInfoByOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserOrgInfoByOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list710 = iprot.readListBegin();
                  struct.success = new ArrayList<SysUserOrgInfo>(_list710.size);
                  SysUserOrgInfo _elem711;
                  for (int _i712 = 0; _i712 < _list710.size; ++_i712)
                  {
                    _elem711 = new SysUserOrgInfo();
                    _elem711.read(iprot);
                    struct.success.add(_elem711);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserOrgInfoByOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysUserOrgInfo _iter713 : struct.success)
            {
              _iter713.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserOrgInfoByOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public listUserOrgInfoByOrgId_resultTupleScheme getScheme() {
        return new listUserOrgInfoByOrgId_resultTupleScheme();
      }
    }

    private static class listUserOrgInfoByOrgId_resultTupleScheme extends TupleScheme<listUserOrgInfoByOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfoByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysUserOrgInfo _iter714 : struct.success)
            {
              _iter714.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserOrgInfoByOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list715 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysUserOrgInfo>(_list715.size);
            SysUserOrgInfo _elem716;
            for (int _i717 = 0; _i717 < _list715.size; ++_i717)
            {
              _elem716 = new SysUserOrgInfo();
              _elem716.read(iprot);
              struct.success.add(_elem716);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getUserOrgInfo_args implements org.apache.thrift.TBase<getUserOrgInfo_args, getUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserOrgInfo_argsTupleSchemeFactory());
    }

    public SysUserOrgInfo userOrg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ORG((short)1, "userOrg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ORG
            return USER_ORG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ORG, new org.apache.thrift.meta_data.FieldMetaData("userOrg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrgInfo_args.class, metaDataMap);
    }

    public getUserOrgInfo_args() {
    }

    public getUserOrgInfo_args(
      SysUserOrgInfo userOrg)
    {
      this();
      this.userOrg = userOrg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserOrgInfo_args(getUserOrgInfo_args other) {
      if (other.isSetUserOrg()) {
        this.userOrg = new SysUserOrgInfo(other.userOrg);
      }
    }

    public getUserOrgInfo_args deepCopy() {
      return new getUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      this.userOrg = null;
    }

    public SysUserOrgInfo getUserOrg() {
      return this.userOrg;
    }

    public getUserOrgInfo_args setUserOrg(SysUserOrgInfo userOrg) {
      this.userOrg = userOrg;
      return this;
    }

    public void unsetUserOrg() {
      this.userOrg = null;
    }

    /** Returns true if field userOrg is set (has been assigned a value) and false otherwise */
    public boolean isSetUserOrg() {
      return this.userOrg != null;
    }

    public void setUserOrgIsSet(boolean value) {
      if (!value) {
        this.userOrg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ORG:
        if (value == null) {
          unsetUserOrg();
        } else {
          setUserOrg((SysUserOrgInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ORG:
        return getUserOrg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ORG:
        return isSetUserOrg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserOrgInfo_args)
        return this.equals((getUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(getUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_userOrg = true && this.isSetUserOrg();
      boolean that_present_userOrg = true && that.isSetUserOrg();
      if (this_present_userOrg || that_present_userOrg) {
        if (!(this_present_userOrg && that_present_userOrg))
          return false;
        if (!this.userOrg.equals(that.userOrg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userOrg = true && (isSetUserOrg());
      list.add(present_userOrg);
      if (present_userOrg)
        list.add(userOrg);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserOrg()).compareTo(other.isSetUserOrg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserOrg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOrg, other.userOrg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserOrgInfo_args(");
      boolean first = true;

      sb.append("userOrg:");
      if (this.userOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.userOrg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userOrg != null) {
        userOrg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getUserOrgInfo_argsStandardScheme getScheme() {
        return new getUserOrgInfo_argsStandardScheme();
      }
    }

    private static class getUserOrgInfo_argsStandardScheme extends StandardScheme<getUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ORG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userOrg = new SysUserOrgInfo();
                struct.userOrg.read(iprot);
                struct.setUserOrgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userOrg != null) {
          oprot.writeFieldBegin(USER_ORG_FIELD_DESC);
          struct.userOrg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getUserOrgInfo_argsTupleScheme getScheme() {
        return new getUserOrgInfo_argsTupleScheme();
      }
    }

    private static class getUserOrgInfo_argsTupleScheme extends TupleScheme<getUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserOrg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserOrg()) {
          struct.userOrg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userOrg = new SysUserOrgInfo();
          struct.userOrg.read(iprot);
          struct.setUserOrgIsSet(true);
        }
      }
    }

  }

  public static class getUserOrgInfo_result implements org.apache.thrift.TBase<getUserOrgInfo_result, getUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserOrgInfo_resultTupleSchemeFactory());
    }

    public SysUserOrgInfo success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrgInfo_result.class, metaDataMap);
    }

    public getUserOrgInfo_result() {
    }

    public getUserOrgInfo_result(
      SysUserOrgInfo success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserOrgInfo_result(getUserOrgInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysUserOrgInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getUserOrgInfo_result deepCopy() {
      return new getUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SysUserOrgInfo getSuccess() {
      return this.success;
    }

    public getUserOrgInfo_result setSuccess(SysUserOrgInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getUserOrgInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysUserOrgInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserOrgInfo_result)
        return this.equals((getUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(getUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getUserOrgInfo_resultStandardScheme getScheme() {
        return new getUserOrgInfo_resultStandardScheme();
      }
    }

    private static class getUserOrgInfo_resultStandardScheme extends StandardScheme<getUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysUserOrgInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getUserOrgInfo_resultTupleScheme getScheme() {
        return new getUserOrgInfo_resultTupleScheme();
      }
    }

    private static class getUserOrgInfo_resultTupleScheme extends TupleScheme<getUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysUserOrgInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class isExistUserOrgInfo_args implements org.apache.thrift.TBase<isExistUserOrgInfo_args, isExistUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExistUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistUserOrgInfo_argsTupleSchemeFactory());
    }

    public SysUserOrgInfo userOrg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ORG((short)1, "userOrg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ORG
            return USER_ORG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ORG, new org.apache.thrift.meta_data.FieldMetaData("userOrg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistUserOrgInfo_args.class, metaDataMap);
    }

    public isExistUserOrgInfo_args() {
    }

    public isExistUserOrgInfo_args(
      SysUserOrgInfo userOrg)
    {
      this();
      this.userOrg = userOrg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistUserOrgInfo_args(isExistUserOrgInfo_args other) {
      if (other.isSetUserOrg()) {
        this.userOrg = new SysUserOrgInfo(other.userOrg);
      }
    }

    public isExistUserOrgInfo_args deepCopy() {
      return new isExistUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      this.userOrg = null;
    }

    public SysUserOrgInfo getUserOrg() {
      return this.userOrg;
    }

    public isExistUserOrgInfo_args setUserOrg(SysUserOrgInfo userOrg) {
      this.userOrg = userOrg;
      return this;
    }

    public void unsetUserOrg() {
      this.userOrg = null;
    }

    /** Returns true if field userOrg is set (has been assigned a value) and false otherwise */
    public boolean isSetUserOrg() {
      return this.userOrg != null;
    }

    public void setUserOrgIsSet(boolean value) {
      if (!value) {
        this.userOrg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ORG:
        if (value == null) {
          unsetUserOrg();
        } else {
          setUserOrg((SysUserOrgInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ORG:
        return getUserOrg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ORG:
        return isSetUserOrg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistUserOrgInfo_args)
        return this.equals((isExistUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(isExistUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_userOrg = true && this.isSetUserOrg();
      boolean that_present_userOrg = true && that.isSetUserOrg();
      if (this_present_userOrg || that_present_userOrg) {
        if (!(this_present_userOrg && that_present_userOrg))
          return false;
        if (!this.userOrg.equals(that.userOrg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userOrg = true && (isSetUserOrg());
      list.add(present_userOrg);
      if (present_userOrg)
        list.add(userOrg);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExistUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserOrg()).compareTo(other.isSetUserOrg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserOrg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOrg, other.userOrg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistUserOrgInfo_args(");
      boolean first = true;

      sb.append("userOrg:");
      if (this.userOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.userOrg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userOrg != null) {
        userOrg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public isExistUserOrgInfo_argsStandardScheme getScheme() {
        return new isExistUserOrgInfo_argsStandardScheme();
      }
    }

    private static class isExistUserOrgInfo_argsStandardScheme extends StandardScheme<isExistUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ORG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userOrg = new SysUserOrgInfo();
                struct.userOrg.read(iprot);
                struct.setUserOrgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userOrg != null) {
          oprot.writeFieldBegin(USER_ORG_FIELD_DESC);
          struct.userOrg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public isExistUserOrgInfo_argsTupleScheme getScheme() {
        return new isExistUserOrgInfo_argsTupleScheme();
      }
    }

    private static class isExistUserOrgInfo_argsTupleScheme extends TupleScheme<isExistUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserOrg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserOrg()) {
          struct.userOrg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userOrg = new SysUserOrgInfo();
          struct.userOrg.read(iprot);
          struct.setUserOrgIsSet(true);
        }
      }
    }

  }

  public static class isExistUserOrgInfo_result implements org.apache.thrift.TBase<isExistUserOrgInfo_result, isExistUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExistUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistUserOrgInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistUserOrgInfo_result.class, metaDataMap);
    }

    public isExistUserOrgInfo_result() {
    }

    public isExistUserOrgInfo_result(
      boolean success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistUserOrgInfo_result(isExistUserOrgInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public isExistUserOrgInfo_result deepCopy() {
      return new isExistUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExistUserOrgInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public isExistUserOrgInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistUserOrgInfo_result)
        return this.equals((isExistUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(isExistUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExistUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public isExistUserOrgInfo_resultStandardScheme getScheme() {
        return new isExistUserOrgInfo_resultStandardScheme();
      }
    }

    private static class isExistUserOrgInfo_resultStandardScheme extends StandardScheme<isExistUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public isExistUserOrgInfo_resultTupleScheme getScheme() {
        return new isExistUserOrgInfo_resultTupleScheme();
      }
    }

    private static class isExistUserOrgInfo_resultTupleScheme extends TupleScheme<isExistUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateUserOrgInfo_args implements org.apache.thrift.TBase<updateUserOrgInfo_args, updateUserOrgInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserOrgInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserOrgInfo_args");

    private static final org.apache.thrift.protocol.TField USER_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserOrgInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserOrgInfo_argsTupleSchemeFactory());
    }

    public SysUserOrgInfo userOrg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ORG((short)1, "userOrg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ORG
            return USER_ORG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ORG, new org.apache.thrift.meta_data.FieldMetaData("userOrg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserOrgInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserOrgInfo_args.class, metaDataMap);
    }

    public updateUserOrgInfo_args() {
    }

    public updateUserOrgInfo_args(
      SysUserOrgInfo userOrg)
    {
      this();
      this.userOrg = userOrg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserOrgInfo_args(updateUserOrgInfo_args other) {
      if (other.isSetUserOrg()) {
        this.userOrg = new SysUserOrgInfo(other.userOrg);
      }
    }

    public updateUserOrgInfo_args deepCopy() {
      return new updateUserOrgInfo_args(this);
    }

    @Override
    public void clear() {
      this.userOrg = null;
    }

    public SysUserOrgInfo getUserOrg() {
      return this.userOrg;
    }

    public updateUserOrgInfo_args setUserOrg(SysUserOrgInfo userOrg) {
      this.userOrg = userOrg;
      return this;
    }

    public void unsetUserOrg() {
      this.userOrg = null;
    }

    /** Returns true if field userOrg is set (has been assigned a value) and false otherwise */
    public boolean isSetUserOrg() {
      return this.userOrg != null;
    }

    public void setUserOrgIsSet(boolean value) {
      if (!value) {
        this.userOrg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ORG:
        if (value == null) {
          unsetUserOrg();
        } else {
          setUserOrg((SysUserOrgInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ORG:
        return getUserOrg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ORG:
        return isSetUserOrg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserOrgInfo_args)
        return this.equals((updateUserOrgInfo_args)that);
      return false;
    }

    public boolean equals(updateUserOrgInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_userOrg = true && this.isSetUserOrg();
      boolean that_present_userOrg = true && that.isSetUserOrg();
      if (this_present_userOrg || that_present_userOrg) {
        if (!(this_present_userOrg && that_present_userOrg))
          return false;
        if (!this.userOrg.equals(that.userOrg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userOrg = true && (isSetUserOrg());
      list.add(present_userOrg);
      if (present_userOrg)
        list.add(userOrg);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserOrgInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserOrg()).compareTo(other.isSetUserOrg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserOrg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOrg, other.userOrg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserOrgInfo_args(");
      boolean first = true;

      sb.append("userOrg:");
      if (this.userOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.userOrg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userOrg != null) {
        userOrg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserOrgInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserOrgInfo_argsStandardScheme getScheme() {
        return new updateUserOrgInfo_argsStandardScheme();
      }
    }

    private static class updateUserOrgInfo_argsStandardScheme extends StandardScheme<updateUserOrgInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserOrgInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ORG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userOrg = new SysUserOrgInfo();
                struct.userOrg.read(iprot);
                struct.setUserOrgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserOrgInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userOrg != null) {
          oprot.writeFieldBegin(USER_ORG_FIELD_DESC);
          struct.userOrg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserOrgInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserOrgInfo_argsTupleScheme getScheme() {
        return new updateUserOrgInfo_argsTupleScheme();
      }
    }

    private static class updateUserOrgInfo_argsTupleScheme extends TupleScheme<updateUserOrgInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserOrg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserOrg()) {
          struct.userOrg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserOrgInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userOrg = new SysUserOrgInfo();
          struct.userOrg.read(iprot);
          struct.setUserOrgIsSet(true);
        }
      }
    }

  }

  public static class updateUserOrgInfo_result implements org.apache.thrift.TBase<updateUserOrgInfo_result, updateUserOrgInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserOrgInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserOrgInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserOrgInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserOrgInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserOrgInfo_result.class, metaDataMap);
    }

    public updateUserOrgInfo_result() {
    }

    public updateUserOrgInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserOrgInfo_result(updateUserOrgInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateUserOrgInfo_result deepCopy() {
      return new updateUserOrgInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateUserOrgInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserOrgInfo_result)
        return this.equals((updateUserOrgInfo_result)that);
      return false;
    }

    public boolean equals(updateUserOrgInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserOrgInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserOrgInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserOrgInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserOrgInfo_resultStandardScheme getScheme() {
        return new updateUserOrgInfo_resultStandardScheme();
      }
    }

    private static class updateUserOrgInfo_resultStandardScheme extends StandardScheme<updateUserOrgInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserOrgInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserOrgInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserOrgInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserOrgInfo_resultTupleScheme getScheme() {
        return new updateUserOrgInfo_resultTupleScheme();
      }
    }

    private static class updateUserOrgInfo_resultTupleScheme extends TupleScheme<updateUserOrgInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserOrgInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listDataAuth_args implements org.apache.thrift.TBase<listDataAuth_args, listDataAuth_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDataAuth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataAuth_args");

    private static final org.apache.thrift.protocol.TField DATA_AUTH_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAuthView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataAuth_argsTupleSchemeFactory());
    }

    public SysDataAuthView dataAuthView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_AUTH_VIEW((short)1, "dataAuthView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_AUTH_VIEW
            return DATA_AUTH_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_AUTH_VIEW, new org.apache.thrift.meta_data.FieldMetaData("dataAuthView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysDataAuthView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataAuth_args.class, metaDataMap);
    }

    public listDataAuth_args() {
    }

    public listDataAuth_args(
      SysDataAuthView dataAuthView)
    {
      this();
      this.dataAuthView = dataAuthView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataAuth_args(listDataAuth_args other) {
      if (other.isSetDataAuthView()) {
        this.dataAuthView = new SysDataAuthView(other.dataAuthView);
      }
    }

    public listDataAuth_args deepCopy() {
      return new listDataAuth_args(this);
    }

    @Override
    public void clear() {
      this.dataAuthView = null;
    }

    public SysDataAuthView getDataAuthView() {
      return this.dataAuthView;
    }

    public listDataAuth_args setDataAuthView(SysDataAuthView dataAuthView) {
      this.dataAuthView = dataAuthView;
      return this;
    }

    public void unsetDataAuthView() {
      this.dataAuthView = null;
    }

    /** Returns true if field dataAuthView is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAuthView() {
      return this.dataAuthView != null;
    }

    public void setDataAuthViewIsSet(boolean value) {
      if (!value) {
        this.dataAuthView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_AUTH_VIEW:
        if (value == null) {
          unsetDataAuthView();
        } else {
          setDataAuthView((SysDataAuthView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_AUTH_VIEW:
        return getDataAuthView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_AUTH_VIEW:
        return isSetDataAuthView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataAuth_args)
        return this.equals((listDataAuth_args)that);
      return false;
    }

    public boolean equals(listDataAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_dataAuthView = true && this.isSetDataAuthView();
      boolean that_present_dataAuthView = true && that.isSetDataAuthView();
      if (this_present_dataAuthView || that_present_dataAuthView) {
        if (!(this_present_dataAuthView && that_present_dataAuthView))
          return false;
        if (!this.dataAuthView.equals(that.dataAuthView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataAuthView = true && (isSetDataAuthView());
      list.add(present_dataAuthView);
      if (present_dataAuthView)
        list.add(dataAuthView);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDataAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataAuthView()).compareTo(other.isSetDataAuthView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAuthView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAuthView, other.dataAuthView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataAuth_args(");
      boolean first = true;

      sb.append("dataAuthView:");
      if (this.dataAuthView == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAuthView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dataAuthView != null) {
        dataAuthView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataAuth_argsStandardSchemeFactory implements SchemeFactory {
      public listDataAuth_argsStandardScheme getScheme() {
        return new listDataAuth_argsStandardScheme();
      }
    }

    private static class listDataAuth_argsStandardScheme extends StandardScheme<listDataAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_AUTH_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAuthView = new SysDataAuthView();
                struct.dataAuthView.read(iprot);
                struct.setDataAuthViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataAuthView != null) {
          oprot.writeFieldBegin(DATA_AUTH_VIEW_FIELD_DESC);
          struct.dataAuthView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataAuth_argsTupleSchemeFactory implements SchemeFactory {
      public listDataAuth_argsTupleScheme getScheme() {
        return new listDataAuth_argsTupleScheme();
      }
    }

    private static class listDataAuth_argsTupleScheme extends TupleScheme<listDataAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataAuthView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataAuthView()) {
          struct.dataAuthView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataAuthView = new SysDataAuthView();
          struct.dataAuthView.read(iprot);
          struct.setDataAuthViewIsSet(true);
        }
      }
    }

  }

  public static class listDataAuth_result implements org.apache.thrift.TBase<listDataAuth_result, listDataAuth_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDataAuth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataAuth_resultTupleSchemeFactory());
    }

    public List<SysDataAuthView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysDataAuthView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataAuth_result.class, metaDataMap);
    }

    public listDataAuth_result() {
    }

    public listDataAuth_result(
      List<SysDataAuthView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataAuth_result(listDataAuth_result other) {
      if (other.isSetSuccess()) {
        List<SysDataAuthView> __this__success = new ArrayList<SysDataAuthView>(other.success.size());
        for (SysDataAuthView other_element : other.success) {
          __this__success.add(new SysDataAuthView(other_element));
        }
        this.success = __this__success;
      }
    }

    public listDataAuth_result deepCopy() {
      return new listDataAuth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysDataAuthView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysDataAuthView elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysDataAuthView>();
      }
      this.success.add(elem);
    }

    public List<SysDataAuthView> getSuccess() {
      return this.success;
    }

    public listDataAuth_result setSuccess(List<SysDataAuthView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysDataAuthView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataAuth_result)
        return this.equals((listDataAuth_result)that);
      return false;
    }

    public boolean equals(listDataAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDataAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataAuth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataAuth_resultStandardSchemeFactory implements SchemeFactory {
      public listDataAuth_resultStandardScheme getScheme() {
        return new listDataAuth_resultStandardScheme();
      }
    }

    private static class listDataAuth_resultStandardScheme extends StandardScheme<listDataAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list718 = iprot.readListBegin();
                  struct.success = new ArrayList<SysDataAuthView>(_list718.size);
                  SysDataAuthView _elem719;
                  for (int _i720 = 0; _i720 < _list718.size; ++_i720)
                  {
                    _elem719 = new SysDataAuthView();
                    _elem719.read(iprot);
                    struct.success.add(_elem719);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysDataAuthView _iter721 : struct.success)
            {
              _iter721.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataAuth_resultTupleSchemeFactory implements SchemeFactory {
      public listDataAuth_resultTupleScheme getScheme() {
        return new listDataAuth_resultTupleScheme();
      }
    }

    private static class listDataAuth_resultTupleScheme extends TupleScheme<listDataAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysDataAuthView _iter722 : struct.success)
            {
              _iter722.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list723 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysDataAuthView>(_list723.size);
            SysDataAuthView _elem724;
            for (int _i725 = 0; _i725 < _list723.size; ++_i725)
            {
              _elem724 = new SysDataAuthView();
              _elem724.read(iprot);
              struct.success.add(_elem724);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listDataAuthCount_args implements org.apache.thrift.TBase<listDataAuthCount_args, listDataAuthCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDataAuthCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataAuthCount_args");

    private static final org.apache.thrift.protocol.TField DATA_AUTH_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAuthView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataAuthCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataAuthCount_argsTupleSchemeFactory());
    }

    public SysDataAuthView dataAuthView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_AUTH_VIEW((short)1, "dataAuthView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_AUTH_VIEW
            return DATA_AUTH_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_AUTH_VIEW, new org.apache.thrift.meta_data.FieldMetaData("dataAuthView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysDataAuthView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataAuthCount_args.class, metaDataMap);
    }

    public listDataAuthCount_args() {
    }

    public listDataAuthCount_args(
      SysDataAuthView dataAuthView)
    {
      this();
      this.dataAuthView = dataAuthView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataAuthCount_args(listDataAuthCount_args other) {
      if (other.isSetDataAuthView()) {
        this.dataAuthView = new SysDataAuthView(other.dataAuthView);
      }
    }

    public listDataAuthCount_args deepCopy() {
      return new listDataAuthCount_args(this);
    }

    @Override
    public void clear() {
      this.dataAuthView = null;
    }

    public SysDataAuthView getDataAuthView() {
      return this.dataAuthView;
    }

    public listDataAuthCount_args setDataAuthView(SysDataAuthView dataAuthView) {
      this.dataAuthView = dataAuthView;
      return this;
    }

    public void unsetDataAuthView() {
      this.dataAuthView = null;
    }

    /** Returns true if field dataAuthView is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAuthView() {
      return this.dataAuthView != null;
    }

    public void setDataAuthViewIsSet(boolean value) {
      if (!value) {
        this.dataAuthView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_AUTH_VIEW:
        if (value == null) {
          unsetDataAuthView();
        } else {
          setDataAuthView((SysDataAuthView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_AUTH_VIEW:
        return getDataAuthView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_AUTH_VIEW:
        return isSetDataAuthView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataAuthCount_args)
        return this.equals((listDataAuthCount_args)that);
      return false;
    }

    public boolean equals(listDataAuthCount_args that) {
      if (that == null)
        return false;

      boolean this_present_dataAuthView = true && this.isSetDataAuthView();
      boolean that_present_dataAuthView = true && that.isSetDataAuthView();
      if (this_present_dataAuthView || that_present_dataAuthView) {
        if (!(this_present_dataAuthView && that_present_dataAuthView))
          return false;
        if (!this.dataAuthView.equals(that.dataAuthView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataAuthView = true && (isSetDataAuthView());
      list.add(present_dataAuthView);
      if (present_dataAuthView)
        list.add(dataAuthView);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDataAuthCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataAuthView()).compareTo(other.isSetDataAuthView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAuthView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAuthView, other.dataAuthView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataAuthCount_args(");
      boolean first = true;

      sb.append("dataAuthView:");
      if (this.dataAuthView == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAuthView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dataAuthView != null) {
        dataAuthView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataAuthCount_argsStandardSchemeFactory implements SchemeFactory {
      public listDataAuthCount_argsStandardScheme getScheme() {
        return new listDataAuthCount_argsStandardScheme();
      }
    }

    private static class listDataAuthCount_argsStandardScheme extends StandardScheme<listDataAuthCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataAuthCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_AUTH_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAuthView = new SysDataAuthView();
                struct.dataAuthView.read(iprot);
                struct.setDataAuthViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataAuthCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataAuthView != null) {
          oprot.writeFieldBegin(DATA_AUTH_VIEW_FIELD_DESC);
          struct.dataAuthView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataAuthCount_argsTupleSchemeFactory implements SchemeFactory {
      public listDataAuthCount_argsTupleScheme getScheme() {
        return new listDataAuthCount_argsTupleScheme();
      }
    }

    private static class listDataAuthCount_argsTupleScheme extends TupleScheme<listDataAuthCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataAuthCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataAuthView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataAuthView()) {
          struct.dataAuthView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataAuthCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataAuthView = new SysDataAuthView();
          struct.dataAuthView.read(iprot);
          struct.setDataAuthViewIsSet(true);
        }
      }
    }

  }

  public static class listDataAuthCount_result implements org.apache.thrift.TBase<listDataAuthCount_result, listDataAuthCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDataAuthCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataAuthCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataAuthCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataAuthCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataAuthCount_result.class, metaDataMap);
    }

    public listDataAuthCount_result() {
    }

    public listDataAuthCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataAuthCount_result(listDataAuthCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public listDataAuthCount_result deepCopy() {
      return new listDataAuthCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public listDataAuthCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataAuthCount_result)
        return this.equals((listDataAuthCount_result)that);
      return false;
    }

    public boolean equals(listDataAuthCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDataAuthCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataAuthCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataAuthCount_resultStandardSchemeFactory implements SchemeFactory {
      public listDataAuthCount_resultStandardScheme getScheme() {
        return new listDataAuthCount_resultStandardScheme();
      }
    }

    private static class listDataAuthCount_resultStandardScheme extends StandardScheme<listDataAuthCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataAuthCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataAuthCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataAuthCount_resultTupleSchemeFactory implements SchemeFactory {
      public listDataAuthCount_resultTupleScheme getScheme() {
        return new listDataAuthCount_resultTupleScheme();
      }
    }

    private static class listDataAuthCount_resultTupleScheme extends TupleScheme<listDataAuthCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataAuthCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataAuthCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteDataAuth_args implements org.apache.thrift.TBase<batchDeleteDataAuth_args, batchDeleteDataAuth_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteDataAuth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteDataAuth_args");

    private static final org.apache.thrift.protocol.TField DATA_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteDataAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteDataAuth_argsTupleSchemeFactory());
    }

    public List<Integer> dataIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_IDS((short)1, "dataIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_IDS
            return DATA_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_IDS, new org.apache.thrift.meta_data.FieldMetaData("dataIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteDataAuth_args.class, metaDataMap);
    }

    public batchDeleteDataAuth_args() {
    }

    public batchDeleteDataAuth_args(
      List<Integer> dataIds)
    {
      this();
      this.dataIds = dataIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteDataAuth_args(batchDeleteDataAuth_args other) {
      if (other.isSetDataIds()) {
        List<Integer> __this__dataIds = new ArrayList<Integer>(other.dataIds);
        this.dataIds = __this__dataIds;
      }
    }

    public batchDeleteDataAuth_args deepCopy() {
      return new batchDeleteDataAuth_args(this);
    }

    @Override
    public void clear() {
      this.dataIds = null;
    }

    public int getDataIdsSize() {
      return (this.dataIds == null) ? 0 : this.dataIds.size();
    }

    public java.util.Iterator<Integer> getDataIdsIterator() {
      return (this.dataIds == null) ? null : this.dataIds.iterator();
    }

    public void addToDataIds(int elem) {
      if (this.dataIds == null) {
        this.dataIds = new ArrayList<Integer>();
      }
      this.dataIds.add(elem);
    }

    public List<Integer> getDataIds() {
      return this.dataIds;
    }

    public batchDeleteDataAuth_args setDataIds(List<Integer> dataIds) {
      this.dataIds = dataIds;
      return this;
    }

    public void unsetDataIds() {
      this.dataIds = null;
    }

    /** Returns true if field dataIds is set (has been assigned a value) and false otherwise */
    public boolean isSetDataIds() {
      return this.dataIds != null;
    }

    public void setDataIdsIsSet(boolean value) {
      if (!value) {
        this.dataIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_IDS:
        if (value == null) {
          unsetDataIds();
        } else {
          setDataIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_IDS:
        return getDataIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_IDS:
        return isSetDataIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteDataAuth_args)
        return this.equals((batchDeleteDataAuth_args)that);
      return false;
    }

    public boolean equals(batchDeleteDataAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_dataIds = true && this.isSetDataIds();
      boolean that_present_dataIds = true && that.isSetDataIds();
      if (this_present_dataIds || that_present_dataIds) {
        if (!(this_present_dataIds && that_present_dataIds))
          return false;
        if (!this.dataIds.equals(that.dataIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataIds = true && (isSetDataIds());
      list.add(present_dataIds);
      if (present_dataIds)
        list.add(dataIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteDataAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataIds()).compareTo(other.isSetDataIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataIds, other.dataIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteDataAuth_args(");
      boolean first = true;

      sb.append("dataIds:");
      if (this.dataIds == null) {
        sb.append("null");
      } else {
        sb.append(this.dataIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteDataAuth_argsStandardSchemeFactory implements SchemeFactory {
      public batchDeleteDataAuth_argsStandardScheme getScheme() {
        return new batchDeleteDataAuth_argsStandardScheme();
      }
    }

    private static class batchDeleteDataAuth_argsStandardScheme extends StandardScheme<batchDeleteDataAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteDataAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list726 = iprot.readListBegin();
                  struct.dataIds = new ArrayList<Integer>(_list726.size);
                  int _elem727;
                  for (int _i728 = 0; _i728 < _list726.size; ++_i728)
                  {
                    _elem727 = iprot.readI32();
                    struct.dataIds.add(_elem727);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteDataAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataIds != null) {
          oprot.writeFieldBegin(DATA_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dataIds.size()));
            for (int _iter729 : struct.dataIds)
            {
              oprot.writeI32(_iter729);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteDataAuth_argsTupleSchemeFactory implements SchemeFactory {
      public batchDeleteDataAuth_argsTupleScheme getScheme() {
        return new batchDeleteDataAuth_argsTupleScheme();
      }
    }

    private static class batchDeleteDataAuth_argsTupleScheme extends TupleScheme<batchDeleteDataAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteDataAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataIds()) {
          {
            oprot.writeI32(struct.dataIds.size());
            for (int _iter730 : struct.dataIds)
            {
              oprot.writeI32(_iter730);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteDataAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list731 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.dataIds = new ArrayList<Integer>(_list731.size);
            int _elem732;
            for (int _i733 = 0; _i733 < _list731.size; ++_i733)
            {
              _elem732 = iprot.readI32();
              struct.dataIds.add(_elem732);
            }
          }
          struct.setDataIdsIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteDataAuth_result implements org.apache.thrift.TBase<batchDeleteDataAuth_result, batchDeleteDataAuth_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteDataAuth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteDataAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteDataAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteDataAuth_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteDataAuth_result.class, metaDataMap);
    }

    public batchDeleteDataAuth_result() {
    }

    public batchDeleteDataAuth_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteDataAuth_result(batchDeleteDataAuth_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public batchDeleteDataAuth_result deepCopy() {
      return new batchDeleteDataAuth_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDeleteDataAuth_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteDataAuth_result)
        return this.equals((batchDeleteDataAuth_result)that);
      return false;
    }

    public boolean equals(batchDeleteDataAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteDataAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteDataAuth_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteDataAuth_resultStandardSchemeFactory implements SchemeFactory {
      public batchDeleteDataAuth_resultStandardScheme getScheme() {
        return new batchDeleteDataAuth_resultStandardScheme();
      }
    }

    private static class batchDeleteDataAuth_resultStandardScheme extends StandardScheme<batchDeleteDataAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteDataAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteDataAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteDataAuth_resultTupleSchemeFactory implements SchemeFactory {
      public batchDeleteDataAuth_resultTupleScheme getScheme() {
        return new batchDeleteDataAuth_resultTupleScheme();
      }
    }

    private static class batchDeleteDataAuth_resultTupleScheme extends TupleScheme<batchDeleteDataAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteDataAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteDataAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class QueryPersonDTO implements org.apache.thrift.TBase<QueryPersonDTO, QueryPersonDTO._Fields>, java.io.Serializable, Cloneable, Comparable<QueryPersonDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryPersonDTO");

  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BUSINESS_VARIET_FIELD_DESC = new org.apache.thrift.protocol.TField("businessVariet", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CURR_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currLoginId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isComplete", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryPersonDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryPersonDTOTupleSchemeFactory());
  }

  public int acctId; // required
  public List<com.xlkfinance.bms.rpc.common.GridViewDTO> results; // required
  public int page; // required
  public int rows; // required
  public String cusName; // required
  public String certNumber; // required
  public int acctType; // required
  public int businessVariet; // required
  public int currLoginId; // required
  public String isComplete; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCT_ID((short)1, "acctId"),
    RESULTS((short)2, "results"),
    PAGE((short)3, "page"),
    ROWS((short)4, "rows"),
    CUS_NAME((short)5, "cusName"),
    CERT_NUMBER((short)6, "certNumber"),
    ACCT_TYPE((short)7, "acctType"),
    BUSINESS_VARIET((short)8, "businessVariet"),
    CURR_LOGIN_ID((short)9, "currLoginId"),
    IS_COMPLETE((short)10, "isComplete");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCT_ID
          return ACCT_ID;
        case 2: // RESULTS
          return RESULTS;
        case 3: // PAGE
          return PAGE;
        case 4: // ROWS
          return ROWS;
        case 5: // CUS_NAME
          return CUS_NAME;
        case 6: // CERT_NUMBER
          return CERT_NUMBER;
        case 7: // ACCT_TYPE
          return ACCT_TYPE;
        case 8: // BUSINESS_VARIET
          return BUSINESS_VARIET;
        case 9: // CURR_LOGIN_ID
          return CURR_LOGIN_ID;
        case 10: // IS_COMPLETE
          return IS_COMPLETE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCTID_ISSET_ID = 0;
  private static final int __PAGE_ISSET_ID = 1;
  private static final int __ROWS_ISSET_ID = 2;
  private static final int __ACCTTYPE_ISSET_ID = 3;
  private static final int __BUSINESSVARIET_ISSET_ID = 4;
  private static final int __CURRLOGINID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.common.GridViewDTO.class))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_VARIET, new org.apache.thrift.meta_data.FieldMetaData("businessVariet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURR_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("currLoginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("isComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryPersonDTO.class, metaDataMap);
  }

  public QueryPersonDTO() {
  }

  public QueryPersonDTO(
    int acctId,
    List<com.xlkfinance.bms.rpc.common.GridViewDTO> results,
    int page,
    int rows,
    String cusName,
    String certNumber,
    int acctType,
    int businessVariet,
    int currLoginId,
    String isComplete)
  {
    this();
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.results = results;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.cusName = cusName;
    this.certNumber = certNumber;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.businessVariet = businessVariet;
    setBusinessVarietIsSet(true);
    this.currLoginId = currLoginId;
    setCurrLoginIdIsSet(true);
    this.isComplete = isComplete;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryPersonDTO(QueryPersonDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.acctId = other.acctId;
    if (other.isSetResults()) {
      List<com.xlkfinance.bms.rpc.common.GridViewDTO> __this__results = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(other.results.size());
      for (com.xlkfinance.bms.rpc.common.GridViewDTO other_element : other.results) {
        __this__results.add(new com.xlkfinance.bms.rpc.common.GridViewDTO(other_element));
      }
      this.results = __this__results;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    this.acctType = other.acctType;
    this.businessVariet = other.businessVariet;
    this.currLoginId = other.currLoginId;
    if (other.isSetIsComplete()) {
      this.isComplete = other.isComplete;
    }
  }

  public QueryPersonDTO deepCopy() {
    return new QueryPersonDTO(this);
  }

  @Override
  public void clear() {
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.results = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.cusName = null;
    this.certNumber = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    setBusinessVarietIsSet(false);
    this.businessVariet = 0;
    setCurrLoginIdIsSet(false);
    this.currLoginId = 0;
    this.isComplete = null;
  }

  public int getAcctId() {
    return this.acctId;
  }

  public QueryPersonDTO setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.common.GridViewDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(com.xlkfinance.bms.rpc.common.GridViewDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>();
    }
    this.results.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.common.GridViewDTO> getResults() {
    return this.results;
  }

  public QueryPersonDTO setResults(List<com.xlkfinance.bms.rpc.common.GridViewDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public QueryPersonDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public QueryPersonDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCusName() {
    return this.cusName;
  }

  public QueryPersonDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public QueryPersonDTO setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public QueryPersonDTO setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public int getBusinessVariet() {
    return this.businessVariet;
  }

  public QueryPersonDTO setBusinessVariet(int businessVariet) {
    this.businessVariet = businessVariet;
    setBusinessVarietIsSet(true);
    return this;
  }

  public void unsetBusinessVariet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSVARIET_ISSET_ID);
  }

  /** Returns true if field businessVariet is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessVariet() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSVARIET_ISSET_ID);
  }

  public void setBusinessVarietIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSVARIET_ISSET_ID, value);
  }

  public int getCurrLoginId() {
    return this.currLoginId;
  }

  public QueryPersonDTO setCurrLoginId(int currLoginId) {
    this.currLoginId = currLoginId;
    setCurrLoginIdIsSet(true);
    return this;
  }

  public void unsetCurrLoginId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRLOGINID_ISSET_ID);
  }

  /** Returns true if field currLoginId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrLoginId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRLOGINID_ISSET_ID);
  }

  public void setCurrLoginIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRLOGINID_ISSET_ID, value);
  }

  public String getIsComplete() {
    return this.isComplete;
  }

  public QueryPersonDTO setIsComplete(String isComplete) {
    this.isComplete = isComplete;
    return this;
  }

  public void unsetIsComplete() {
    this.isComplete = null;
  }

  /** Returns true if field isComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComplete() {
    return this.isComplete != null;
  }

  public void setIsCompleteIsSet(boolean value) {
    if (!value) {
      this.isComplete = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<com.xlkfinance.bms.rpc.common.GridViewDTO>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case BUSINESS_VARIET:
      if (value == null) {
        unsetBusinessVariet();
      } else {
        setBusinessVariet((Integer)value);
      }
      break;

    case CURR_LOGIN_ID:
      if (value == null) {
        unsetCurrLoginId();
      } else {
        setCurrLoginId((Integer)value);
      }
      break;

    case IS_COMPLETE:
      if (value == null) {
        unsetIsComplete();
      } else {
        setIsComplete((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case RESULTS:
      return getResults();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CUS_NAME:
      return getCusName();

    case CERT_NUMBER:
      return getCertNumber();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case BUSINESS_VARIET:
      return Integer.valueOf(getBusinessVariet());

    case CURR_LOGIN_ID:
      return Integer.valueOf(getCurrLoginId());

    case IS_COMPLETE:
      return getIsComplete();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCT_ID:
      return isSetAcctId();
    case RESULTS:
      return isSetResults();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CUS_NAME:
      return isSetCusName();
    case CERT_NUMBER:
      return isSetCertNumber();
    case ACCT_TYPE:
      return isSetAcctType();
    case BUSINESS_VARIET:
      return isSetBusinessVariet();
    case CURR_LOGIN_ID:
      return isSetCurrLoginId();
    case IS_COMPLETE:
      return isSetIsComplete();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryPersonDTO)
      return this.equals((QueryPersonDTO)that);
    return false;
  }

  public boolean equals(QueryPersonDTO that) {
    if (that == null)
      return false;

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_businessVariet = true;
    boolean that_present_businessVariet = true;
    if (this_present_businessVariet || that_present_businessVariet) {
      if (!(this_present_businessVariet && that_present_businessVariet))
        return false;
      if (this.businessVariet != that.businessVariet)
        return false;
    }

    boolean this_present_currLoginId = true;
    boolean that_present_currLoginId = true;
    if (this_present_currLoginId || that_present_currLoginId) {
      if (!(this_present_currLoginId && that_present_currLoginId))
        return false;
      if (this.currLoginId != that.currLoginId)
        return false;
    }

    boolean this_present_isComplete = true && this.isSetIsComplete();
    boolean that_present_isComplete = true && that.isSetIsComplete();
    if (this_present_isComplete || that_present_isComplete) {
      if (!(this_present_isComplete && that_present_isComplete))
        return false;
      if (!this.isComplete.equals(that.isComplete))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_businessVariet = true;
    list.add(present_businessVariet);
    if (present_businessVariet)
      list.add(businessVariet);

    boolean present_currLoginId = true;
    list.add(present_currLoginId);
    if (present_currLoginId)
      list.add(currLoginId);

    boolean present_isComplete = true && (isSetIsComplete());
    list.add(present_isComplete);
    if (present_isComplete)
      list.add(isComplete);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryPersonDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessVariet()).compareTo(other.isSetBusinessVariet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessVariet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessVariet, other.businessVariet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrLoginId()).compareTo(other.isSetCurrLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currLoginId, other.currLoginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComplete()).compareTo(other.isSetIsComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComplete, other.isComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryPersonDTO(");
    boolean first = true;

    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessVariet:");
    sb.append(this.businessVariet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currLoginId:");
    sb.append(this.currLoginId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isComplete:");
    if (this.isComplete == null) {
      sb.append("null");
    } else {
      sb.append(this.isComplete);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryPersonDTOStandardSchemeFactory implements SchemeFactory {
    public QueryPersonDTOStandardScheme getScheme() {
      return new QueryPersonDTOStandardScheme();
    }
  }

  private static class QueryPersonDTOStandardScheme extends StandardScheme<QueryPersonDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryPersonDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.results = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(_list184.size);
                com.xlkfinance.bms.rpc.common.GridViewDTO _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = new com.xlkfinance.bms.rpc.common.GridViewDTO();
                  _elem185.read(iprot);
                  struct.results.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUSINESS_VARIET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessVariet = iprot.readI32();
              struct.setBusinessVarietIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURR_LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currLoginId = iprot.readI32();
              struct.setCurrLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isComplete = iprot.readString();
              struct.setIsCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryPersonDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (com.xlkfinance.bms.rpc.common.GridViewDTO _iter187 : struct.results)
          {
            _iter187.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_VARIET_FIELD_DESC);
      oprot.writeI32(struct.businessVariet);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_LOGIN_ID_FIELD_DESC);
      oprot.writeI32(struct.currLoginId);
      oprot.writeFieldEnd();
      if (struct.isComplete != null) {
        oprot.writeFieldBegin(IS_COMPLETE_FIELD_DESC);
        oprot.writeString(struct.isComplete);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryPersonDTOTupleSchemeFactory implements SchemeFactory {
    public QueryPersonDTOTupleScheme getScheme() {
      return new QueryPersonDTOTupleScheme();
    }
  }

  private static class QueryPersonDTOTupleScheme extends TupleScheme<QueryPersonDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryPersonDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAcctId()) {
        optionals.set(0);
      }
      if (struct.isSetResults()) {
        optionals.set(1);
      }
      if (struct.isSetPage()) {
        optionals.set(2);
      }
      if (struct.isSetRows()) {
        optionals.set(3);
      }
      if (struct.isSetCusName()) {
        optionals.set(4);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(5);
      }
      if (struct.isSetAcctType()) {
        optionals.set(6);
      }
      if (struct.isSetBusinessVariet()) {
        optionals.set(7);
      }
      if (struct.isSetCurrLoginId()) {
        optionals.set(8);
      }
      if (struct.isSetIsComplete()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (com.xlkfinance.bms.rpc.common.GridViewDTO _iter188 : struct.results)
          {
            _iter188.write(oprot);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetBusinessVariet()) {
        oprot.writeI32(struct.businessVariet);
      }
      if (struct.isSetCurrLoginId()) {
        oprot.writeI32(struct.currLoginId);
      }
      if (struct.isSetIsComplete()) {
        oprot.writeString(struct.isComplete);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryPersonDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<com.xlkfinance.bms.rpc.common.GridViewDTO>(_list189.size);
          com.xlkfinance.bms.rpc.common.GridViewDTO _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = new com.xlkfinance.bms.rpc.common.GridViewDTO();
            _elem190.read(iprot);
            struct.results.add(_elem190);
          }
        }
        struct.setResultsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.businessVariet = iprot.readI32();
        struct.setBusinessVarietIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currLoginId = iprot.readI32();
        struct.setCurrLoginIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isComplete = iprot.readString();
        struct.setIsCompleteIsSet(true);
      }
    }
  }

}


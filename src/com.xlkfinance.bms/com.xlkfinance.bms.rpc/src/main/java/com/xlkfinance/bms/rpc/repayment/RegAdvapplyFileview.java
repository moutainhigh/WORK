/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RegAdvapplyFileview implements org.apache.thrift.TBase<RegAdvapplyFileview, RegAdvapplyFileview._Fields>, java.io.Serializable, Cloneable, Comparable<RegAdvapplyFileview> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegAdvapplyFileview");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_FUN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileFunType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INTEREST_CHG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interestChgId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DIVERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("divertId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField BAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("badId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField DIVERT_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("divertPid", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegAdvapplyFileviewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegAdvapplyFileviewTupleSchemeFactory());
  }

  public int pId; // required
  public String fileType; // required
  public String fileName; // required
  public int fileSize; // required
  public String uploadDttm; // required
  public String fileFunType; // required
  public String projectId; // required
  public String fileDesc; // required
  public String filePath; // required
  public int interestChgId; // required
  public int preRepayId; // required
  public int repayId; // required
  public int divertId; // required
  public int baseId; // required
  public int badId; // required
  public int page; // required
  public int rows; // required
  public int pmUserId; // required
  public int divertPid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    FILE_TYPE((short)2, "fileType"),
    FILE_NAME((short)3, "fileName"),
    FILE_SIZE((short)4, "fileSize"),
    UPLOAD_DTTM((short)5, "uploadDttm"),
    FILE_FUN_TYPE((short)6, "fileFunType"),
    PROJECT_ID((short)7, "projectId"),
    FILE_DESC((short)8, "fileDesc"),
    FILE_PATH((short)9, "filePath"),
    INTEREST_CHG_ID((short)10, "interestChgId"),
    PRE_REPAY_ID((short)13, "preRepayId"),
    REPAY_ID((short)14, "repayId"),
    DIVERT_ID((short)15, "divertId"),
    BASE_ID((short)16, "baseId"),
    BAD_ID((short)17, "badId"),
    PAGE((short)18, "page"),
    ROWS((short)19, "rows"),
    PM_USER_ID((short)20, "pmUserId"),
    DIVERT_PID((short)21, "divertPid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // FILE_TYPE
          return FILE_TYPE;
        case 3: // FILE_NAME
          return FILE_NAME;
        case 4: // FILE_SIZE
          return FILE_SIZE;
        case 5: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 6: // FILE_FUN_TYPE
          return FILE_FUN_TYPE;
        case 7: // PROJECT_ID
          return PROJECT_ID;
        case 8: // FILE_DESC
          return FILE_DESC;
        case 9: // FILE_PATH
          return FILE_PATH;
        case 10: // INTEREST_CHG_ID
          return INTEREST_CHG_ID;
        case 13: // PRE_REPAY_ID
          return PRE_REPAY_ID;
        case 14: // REPAY_ID
          return REPAY_ID;
        case 15: // DIVERT_ID
          return DIVERT_ID;
        case 16: // BASE_ID
          return BASE_ID;
        case 17: // BAD_ID
          return BAD_ID;
        case 18: // PAGE
          return PAGE;
        case 19: // ROWS
          return ROWS;
        case 20: // PM_USER_ID
          return PM_USER_ID;
        case 21: // DIVERT_PID
          return DIVERT_PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __FILESIZE_ISSET_ID = 1;
  private static final int __INTERESTCHGID_ISSET_ID = 2;
  private static final int __PREREPAYID_ISSET_ID = 3;
  private static final int __REPAYID_ISSET_ID = 4;
  private static final int __DIVERTID_ISSET_ID = 5;
  private static final int __BASEID_ISSET_ID = 6;
  private static final int __BADID_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __PMUSERID_ISSET_ID = 10;
  private static final int __DIVERTPID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FUN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileFunType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST_CHG_ID, new org.apache.thrift.meta_data.FieldMetaData("interestChgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("preRepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_ID, new org.apache.thrift.meta_data.FieldMetaData("divertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAD_ID, new org.apache.thrift.meta_data.FieldMetaData("badId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_PID, new org.apache.thrift.meta_data.FieldMetaData("divertPid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegAdvapplyFileview.class, metaDataMap);
  }

  public RegAdvapplyFileview() {
  }

  public RegAdvapplyFileview(
    int pId,
    String fileType,
    String fileName,
    int fileSize,
    String uploadDttm,
    String fileFunType,
    String projectId,
    String fileDesc,
    String filePath,
    int interestChgId,
    int preRepayId,
    int repayId,
    int divertId,
    int baseId,
    int badId,
    int page,
    int rows,
    int pmUserId,
    int divertPid)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.fileType = fileType;
    this.fileName = fileName;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.uploadDttm = uploadDttm;
    this.fileFunType = fileFunType;
    this.projectId = projectId;
    this.fileDesc = fileDesc;
    this.filePath = filePath;
    this.interestChgId = interestChgId;
    setInterestChgIdIsSet(true);
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    this.repayId = repayId;
    setRepayIdIsSet(true);
    this.divertId = divertId;
    setDivertIdIsSet(true);
    this.baseId = baseId;
    setBaseIdIsSet(true);
    this.badId = badId;
    setBadIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.divertPid = divertPid;
    setDivertPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegAdvapplyFileview(RegAdvapplyFileview other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.fileSize = other.fileSize;
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetFileFunType()) {
      this.fileFunType = other.fileFunType;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    this.interestChgId = other.interestChgId;
    this.preRepayId = other.preRepayId;
    this.repayId = other.repayId;
    this.divertId = other.divertId;
    this.baseId = other.baseId;
    this.badId = other.badId;
    this.page = other.page;
    this.rows = other.rows;
    this.pmUserId = other.pmUserId;
    this.divertPid = other.divertPid;
  }

  public RegAdvapplyFileview deepCopy() {
    return new RegAdvapplyFileview(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    this.fileType = null;
    this.fileName = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.uploadDttm = null;
    this.fileFunType = null;
    this.projectId = null;
    this.fileDesc = null;
    this.filePath = null;
    setInterestChgIdIsSet(false);
    this.interestChgId = 0;
    setPreRepayIdIsSet(false);
    this.preRepayId = 0;
    setRepayIdIsSet(false);
    this.repayId = 0;
    setDivertIdIsSet(false);
    this.divertId = 0;
    setBaseIdIsSet(false);
    this.baseId = 0;
    setBadIdIsSet(false);
    this.badId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setDivertPidIsSet(false);
    this.divertPid = 0;
  }

  public int getPId() {
    return this.pId;
  }

  public RegAdvapplyFileview setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getFileType() {
    return this.fileType;
  }

  public RegAdvapplyFileview setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public RegAdvapplyFileview setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public RegAdvapplyFileview setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public RegAdvapplyFileview setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getFileFunType() {
    return this.fileFunType;
  }

  public RegAdvapplyFileview setFileFunType(String fileFunType) {
    this.fileFunType = fileFunType;
    return this;
  }

  public void unsetFileFunType() {
    this.fileFunType = null;
  }

  /** Returns true if field fileFunType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileFunType() {
    return this.fileFunType != null;
  }

  public void setFileFunTypeIsSet(boolean value) {
    if (!value) {
      this.fileFunType = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public RegAdvapplyFileview setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public RegAdvapplyFileview setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public RegAdvapplyFileview setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public int getInterestChgId() {
    return this.interestChgId;
  }

  public RegAdvapplyFileview setInterestChgId(int interestChgId) {
    this.interestChgId = interestChgId;
    setInterestChgIdIsSet(true);
    return this;
  }

  public void unsetInterestChgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
  }

  /** Returns true if field interestChgId is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestChgId() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
  }

  public void setInterestChgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID, value);
  }

  public int getPreRepayId() {
    return this.preRepayId;
  }

  public RegAdvapplyFileview setPreRepayId(int preRepayId) {
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    return this;
  }

  public void unsetPreRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  /** Returns true if field preRepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  public void setPreRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYID_ISSET_ID, value);
  }

  public int getRepayId() {
    return this.repayId;
  }

  public RegAdvapplyFileview setRepayId(int repayId) {
    this.repayId = repayId;
    setRepayIdIsSet(true);
    return this;
  }

  public void unsetRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  public void setRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
  }

  public int getDivertId() {
    return this.divertId;
  }

  public RegAdvapplyFileview setDivertId(int divertId) {
    this.divertId = divertId;
    setDivertIdIsSet(true);
    return this;
  }

  public void unsetDivertId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  /** Returns true if field divertId is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  public void setDivertIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTID_ISSET_ID, value);
  }

  public int getBaseId() {
    return this.baseId;
  }

  public RegAdvapplyFileview setBaseId(int baseId) {
    this.baseId = baseId;
    setBaseIdIsSet(true);
    return this;
  }

  public void unsetBaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  public void setBaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
  }

  public int getBadId() {
    return this.badId;
  }

  public RegAdvapplyFileview setBadId(int badId) {
    this.badId = badId;
    setBadIdIsSet(true);
    return this;
  }

  public void unsetBadId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BADID_ISSET_ID);
  }

  /** Returns true if field badId is set (has been assigned a value) and false otherwise */
  public boolean isSetBadId() {
    return EncodingUtils.testBit(__isset_bitfield, __BADID_ISSET_ID);
  }

  public void setBadIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BADID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RegAdvapplyFileview setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RegAdvapplyFileview setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public RegAdvapplyFileview setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getDivertPid() {
    return this.divertPid;
  }

  public RegAdvapplyFileview setDivertPid(int divertPid) {
    this.divertPid = divertPid;
    setDivertPidIsSet(true);
    return this;
  }

  public void unsetDivertPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTPID_ISSET_ID);
  }

  /** Returns true if field divertPid is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertPid() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTPID_ISSET_ID);
  }

  public void setDivertPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case FILE_FUN_TYPE:
      if (value == null) {
        unsetFileFunType();
      } else {
        setFileFunType((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case INTEREST_CHG_ID:
      if (value == null) {
        unsetInterestChgId();
      } else {
        setInterestChgId((Integer)value);
      }
      break;

    case PRE_REPAY_ID:
      if (value == null) {
        unsetPreRepayId();
      } else {
        setPreRepayId((Integer)value);
      }
      break;

    case REPAY_ID:
      if (value == null) {
        unsetRepayId();
      } else {
        setRepayId((Integer)value);
      }
      break;

    case DIVERT_ID:
      if (value == null) {
        unsetDivertId();
      } else {
        setDivertId((Integer)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBaseId();
      } else {
        setBaseId((Integer)value);
      }
      break;

    case BAD_ID:
      if (value == null) {
        unsetBadId();
      } else {
        setBadId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case DIVERT_PID:
      if (value == null) {
        unsetDivertPid();
      } else {
        setDivertPid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case FILE_TYPE:
      return getFileType();

    case FILE_NAME:
      return getFileName();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case UPLOAD_DTTM:
      return getUploadDttm();

    case FILE_FUN_TYPE:
      return getFileFunType();

    case PROJECT_ID:
      return getProjectId();

    case FILE_DESC:
      return getFileDesc();

    case FILE_PATH:
      return getFilePath();

    case INTEREST_CHG_ID:
      return Integer.valueOf(getInterestChgId());

    case PRE_REPAY_ID:
      return Integer.valueOf(getPreRepayId());

    case REPAY_ID:
      return Integer.valueOf(getRepayId());

    case DIVERT_ID:
      return Integer.valueOf(getDivertId());

    case BASE_ID:
      return Integer.valueOf(getBaseId());

    case BAD_ID:
      return Integer.valueOf(getBadId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case DIVERT_PID:
      return Integer.valueOf(getDivertPid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_NAME:
      return isSetFileName();
    case FILE_SIZE:
      return isSetFileSize();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case FILE_FUN_TYPE:
      return isSetFileFunType();
    case PROJECT_ID:
      return isSetProjectId();
    case FILE_DESC:
      return isSetFileDesc();
    case FILE_PATH:
      return isSetFilePath();
    case INTEREST_CHG_ID:
      return isSetInterestChgId();
    case PRE_REPAY_ID:
      return isSetPreRepayId();
    case REPAY_ID:
      return isSetRepayId();
    case DIVERT_ID:
      return isSetDivertId();
    case BASE_ID:
      return isSetBaseId();
    case BAD_ID:
      return isSetBadId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PM_USER_ID:
      return isSetPmUserId();
    case DIVERT_PID:
      return isSetDivertPid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegAdvapplyFileview)
      return this.equals((RegAdvapplyFileview)that);
    return false;
  }

  public boolean equals(RegAdvapplyFileview that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_fileFunType = true && this.isSetFileFunType();
    boolean that_present_fileFunType = true && that.isSetFileFunType();
    if (this_present_fileFunType || that_present_fileFunType) {
      if (!(this_present_fileFunType && that_present_fileFunType))
        return false;
      if (!this.fileFunType.equals(that.fileFunType))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_interestChgId = true;
    boolean that_present_interestChgId = true;
    if (this_present_interestChgId || that_present_interestChgId) {
      if (!(this_present_interestChgId && that_present_interestChgId))
        return false;
      if (this.interestChgId != that.interestChgId)
        return false;
    }

    boolean this_present_preRepayId = true;
    boolean that_present_preRepayId = true;
    if (this_present_preRepayId || that_present_preRepayId) {
      if (!(this_present_preRepayId && that_present_preRepayId))
        return false;
      if (this.preRepayId != that.preRepayId)
        return false;
    }

    boolean this_present_repayId = true;
    boolean that_present_repayId = true;
    if (this_present_repayId || that_present_repayId) {
      if (!(this_present_repayId && that_present_repayId))
        return false;
      if (this.repayId != that.repayId)
        return false;
    }

    boolean this_present_divertId = true;
    boolean that_present_divertId = true;
    if (this_present_divertId || that_present_divertId) {
      if (!(this_present_divertId && that_present_divertId))
        return false;
      if (this.divertId != that.divertId)
        return false;
    }

    boolean this_present_baseId = true;
    boolean that_present_baseId = true;
    if (this_present_baseId || that_present_baseId) {
      if (!(this_present_baseId && that_present_baseId))
        return false;
      if (this.baseId != that.baseId)
        return false;
    }

    boolean this_present_badId = true;
    boolean that_present_badId = true;
    if (this_present_badId || that_present_badId) {
      if (!(this_present_badId && that_present_badId))
        return false;
      if (this.badId != that.badId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_divertPid = true;
    boolean that_present_divertPid = true;
    if (this_present_divertPid || that_present_divertPid) {
      if (!(this_present_divertPid && that_present_divertPid))
        return false;
      if (this.divertPid != that.divertPid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_fileFunType = true && (isSetFileFunType());
    list.add(present_fileFunType);
    if (present_fileFunType)
      list.add(fileFunType);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_filePath = true && (isSetFilePath());
    list.add(present_filePath);
    if (present_filePath)
      list.add(filePath);

    boolean present_interestChgId = true;
    list.add(present_interestChgId);
    if (present_interestChgId)
      list.add(interestChgId);

    boolean present_preRepayId = true;
    list.add(present_preRepayId);
    if (present_preRepayId)
      list.add(preRepayId);

    boolean present_repayId = true;
    list.add(present_repayId);
    if (present_repayId)
      list.add(repayId);

    boolean present_divertId = true;
    list.add(present_divertId);
    if (present_divertId)
      list.add(divertId);

    boolean present_baseId = true;
    list.add(present_baseId);
    if (present_baseId)
      list.add(baseId);

    boolean present_badId = true;
    list.add(present_badId);
    if (present_badId)
      list.add(badId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_divertPid = true;
    list.add(present_divertPid);
    if (present_divertPid)
      list.add(divertPid);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegAdvapplyFileview other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileFunType()).compareTo(other.isSetFileFunType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileFunType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileFunType, other.fileFunType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterestChgId()).compareTo(other.isSetInterestChgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestChgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestChgId, other.interestChgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayId()).compareTo(other.isSetPreRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayId, other.preRepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertId()).compareTo(other.isSetDivertId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertId, other.divertId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadId()).compareTo(other.isSetBadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badId, other.badId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertPid()).compareTo(other.isSetDivertPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertPid, other.divertPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegAdvapplyFileview(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileFunType:");
    if (this.fileFunType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileFunType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interestChgId:");
    sb.append(this.interestChgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayId:");
    sb.append(this.preRepayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayId:");
    sb.append(this.repayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertId:");
    sb.append(this.divertId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseId:");
    sb.append(this.baseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("badId:");
    sb.append(this.badId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertPid:");
    sb.append(this.divertPid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegAdvapplyFileviewStandardSchemeFactory implements SchemeFactory {
    public RegAdvapplyFileviewStandardScheme getScheme() {
      return new RegAdvapplyFileviewStandardScheme();
    }
  }

  private static class RegAdvapplyFileviewStandardScheme extends StandardScheme<RegAdvapplyFileview> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegAdvapplyFileview struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_FUN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileFunType = iprot.readString();
              struct.setFileFunTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INTEREST_CHG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interestChgId = iprot.readI32();
              struct.setInterestChgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRE_REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preRepayId = iprot.readI32();
              struct.setPreRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayId = iprot.readI32();
              struct.setRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DIVERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divertId = iprot.readI32();
              struct.setDivertIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baseId = iprot.readI32();
              struct.setBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.badId = iprot.readI32();
              struct.setBadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DIVERT_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divertPid = iprot.readI32();
              struct.setDivertPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegAdvapplyFileview struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.fileFunType != null) {
        oprot.writeFieldBegin(FILE_FUN_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileFunType);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEREST_CHG_ID_FIELD_DESC);
      oprot.writeI32(struct.interestChgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.preRepayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.repayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_ID_FIELD_DESC);
      oprot.writeI32(struct.divertId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.baseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BAD_ID_FIELD_DESC);
      oprot.writeI32(struct.badId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_PID_FIELD_DESC);
      oprot.writeI32(struct.divertPid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegAdvapplyFileviewTupleSchemeFactory implements SchemeFactory {
    public RegAdvapplyFileviewTupleScheme getScheme() {
      return new RegAdvapplyFileviewTupleScheme();
    }
  }

  private static class RegAdvapplyFileviewTupleScheme extends TupleScheme<RegAdvapplyFileview> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyFileview struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetFileType()) {
        optionals.set(1);
      }
      if (struct.isSetFileName()) {
        optionals.set(2);
      }
      if (struct.isSetFileSize()) {
        optionals.set(3);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(4);
      }
      if (struct.isSetFileFunType()) {
        optionals.set(5);
      }
      if (struct.isSetProjectId()) {
        optionals.set(6);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(7);
      }
      if (struct.isSetFilePath()) {
        optionals.set(8);
      }
      if (struct.isSetInterestChgId()) {
        optionals.set(9);
      }
      if (struct.isSetPreRepayId()) {
        optionals.set(10);
      }
      if (struct.isSetRepayId()) {
        optionals.set(11);
      }
      if (struct.isSetDivertId()) {
        optionals.set(12);
      }
      if (struct.isSetBaseId()) {
        optionals.set(13);
      }
      if (struct.isSetBadId()) {
        optionals.set(14);
      }
      if (struct.isSetPage()) {
        optionals.set(15);
      }
      if (struct.isSetRows()) {
        optionals.set(16);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(17);
      }
      if (struct.isSetDivertPid()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetFileFunType()) {
        oprot.writeString(struct.fileFunType);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetInterestChgId()) {
        oprot.writeI32(struct.interestChgId);
      }
      if (struct.isSetPreRepayId()) {
        oprot.writeI32(struct.preRepayId);
      }
      if (struct.isSetRepayId()) {
        oprot.writeI32(struct.repayId);
      }
      if (struct.isSetDivertId()) {
        oprot.writeI32(struct.divertId);
      }
      if (struct.isSetBaseId()) {
        oprot.writeI32(struct.baseId);
      }
      if (struct.isSetBadId()) {
        oprot.writeI32(struct.badId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetDivertPid()) {
        oprot.writeI32(struct.divertPid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegAdvapplyFileview struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileFunType = iprot.readString();
        struct.setFileFunTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(8)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(9)) {
        struct.interestChgId = iprot.readI32();
        struct.setInterestChgIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.preRepayId = iprot.readI32();
        struct.setPreRepayIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repayId = iprot.readI32();
        struct.setRepayIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.divertId = iprot.readI32();
        struct.setDivertIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.baseId = iprot.readI32();
        struct.setBaseIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.badId = iprot.readI32();
        struct.setBadIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.divertPid = iprot.readI32();
        struct.setDivertPidIsSet(true);
      }
    }
  }

}

